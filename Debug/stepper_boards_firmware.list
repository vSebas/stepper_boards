
stepper_boards_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081ec  080081ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081f4  080081f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080081fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000103c  20000074  08008270  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b0  08008270  000210b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204fa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b2f  00000000  00000000  0004059e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  000440d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a0  00000000  00000000  00045ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a57  00000000  00000000  00047368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c052  00000000  00000000  0004adbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edbc3  00000000  00000000  00066e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001549d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007228  00000000  00000000  00154a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080ec 	.word	0x080080ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080080ec 	.word	0x080080ec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
return 0;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fe00 	bl	80010fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f811 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 fa55 	bl	80009ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000502:	f000 fa23 	bl	800094c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000506:	f000 f9a1 	bl	800084c <MX_TIM2_Init>
  MX_TIM1_Init();
 800050a:	f000 f8f3 	bl	80006f4 <MX_TIM1_Init>
  MX_ADC1_Init();
 800050e:	f000 f857 	bl	80005c0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000512:	f000 f8b9 	bl	8000688 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000516:	f005 f9a1 	bl	800585c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051a:	f005 f9c3 	bl	80058a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051e:	e7fe      	b.n	800051e <main+0x2c>

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b096      	sub	sp, #88	; 0x58
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2244      	movs	r2, #68	; 0x44
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 fd12 	bl	8007f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000542:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000546:	f002 fa7b 	bl	8002a40 <HAL_PWREx_ControlVoltageScaling>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000550:	f000 fafe 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	2303      	movs	r3, #3
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800056a:	2314      	movs	r3, #20
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000576:	2304      	movs	r3, #4
 8000578:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fab4 	bl	8002aec <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800058a:	f000 fae1 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 feb4 	bl	8003314 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b2:	f000 facd 	bl	8000b50 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3758      	adds	r7, #88	; 0x58
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d6:	4b29      	ldr	r3, [pc, #164]	; (800067c <MX_ADC1_Init+0xbc>)
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <MX_ADC1_Init+0xc0>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <MX_ADC1_Init+0xbc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <MX_ADC1_Init+0xbc>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <MX_ADC1_Init+0xbc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_ADC1_Init+0xbc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_ADC1_Init+0xbc>)
 80005f6:	2204      	movs	r2, #4
 80005f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_ADC1_Init+0xbc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_ADC1_Init+0xbc>)
 8000602:	2201      	movs	r2, #1
 8000604:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0xbc>)
 8000608:	2201      	movs	r2, #1
 800060a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_ADC1_Init+0xbc>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_ADC1_Init+0xbc>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_ADC1_Init+0xbc>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_ADC1_Init+0xbc>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0xbc>)
 800062a:	2200      	movs	r2, #0
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_ADC1_Init+0xbc>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000636:	4811      	ldr	r0, [pc, #68]	; (800067c <MX_ADC1_Init+0xbc>)
 8000638:	f000 ff24 	bl	8001484 <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000642:	f000 fa85 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0xc4>)
 8000648:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064a:	2306      	movs	r3, #6
 800064c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000652:	237f      	movs	r3, #127	; 0x7f
 8000654:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000656:	2304      	movs	r3, #4
 8000658:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_ADC1_Init+0xbc>)
 8000664:	f001 f856 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800066e:	f000 fa6f 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000090 	.word	0x20000090
 8000680:	50040000 	.word	0x50040000
 8000684:	c7520000 	.word	0xc7520000

08000688 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_CAN1_Init+0x64>)
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_CAN1_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_CAN1_Init+0x64>)
 8000694:	2228      	movs	r2, #40	; 0x28
 8000696:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_CAN1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_CAN1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_CAN1_Init+0x64>)
 80006a6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80006aa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_CAN1_Init+0x64>)
 80006ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_CAN1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_CAN1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_CAN1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_CAN1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_CAN1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_CAN1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_CAN1_Init+0x64>)
 80006da:	f001 fbfb 	bl	8001ed4 <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006e4:	f000 fa34 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000f4 	.word	0x200000f4
 80006f0:	40006400 	.word	0x40006400

080006f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09a      	sub	sp, #104	; 0x68
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	222c      	movs	r2, #44	; 0x2c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f007 fc12 	bl	8007f58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000734:	4b43      	ldr	r3, [pc, #268]	; (8000844 <MX_TIM1_Init+0x150>)
 8000736:	4a44      	ldr	r2, [pc, #272]	; (8000848 <MX_TIM1_Init+0x154>)
 8000738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800073a:	4b42      	ldr	r3, [pc, #264]	; (8000844 <MX_TIM1_Init+0x150>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b40      	ldr	r3, [pc, #256]	; (8000844 <MX_TIM1_Init+0x150>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000746:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <MX_TIM1_Init+0x150>)
 8000748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800074c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <MX_TIM1_Init+0x150>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000754:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <MX_TIM1_Init+0x150>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <MX_TIM1_Init+0x150>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000760:	4838      	ldr	r0, [pc, #224]	; (8000844 <MX_TIM1_Init+0x150>)
 8000762:	f003 fb35 	bl	8003dd0 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800076c:	f000 f9f0 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077a:	4619      	mov	r1, r3
 800077c:	4831      	ldr	r0, [pc, #196]	; (8000844 <MX_TIM1_Init+0x150>)
 800077e:	f003 fe67 	bl	8004450 <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000788:	f000 f9e2 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078c:	482d      	ldr	r0, [pc, #180]	; (8000844 <MX_TIM1_Init+0x150>)
 800078e:	f003 fbcb 	bl	8003f28 <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000798:	f000 f9da 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ac:	4619      	mov	r1, r3
 80007ae:	4825      	ldr	r0, [pc, #148]	; (8000844 <MX_TIM1_Init+0x150>)
 80007b0:	f004 fabc 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007ba:	f000 f9c9 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007be:	2360      	movs	r3, #96	; 0x60
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ca:	2300      	movs	r3, #0
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <MX_TIM1_Init+0x150>)
 80007e4:	f003 fd20 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007ee:	f000 f9af 	bl	8000b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000814:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <MX_TIM1_Init+0x150>)
 8000828:	f004 fae6 	bl	8004df8 <HAL_TIMEx_ConfigBreakDeadTime>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000832:	f000 f98d 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <MX_TIM1_Init+0x150>)
 8000838:	f000 faa4 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3768      	adds	r7, #104	; 0x68
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000011c 	.word	0x2000011c
 8000848:	40012c00 	.word	0x40012c00

0800084c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087e:	4b32      	ldr	r3, [pc, #200]	; (8000948 <MX_TIM2_Init+0xfc>)
 8000880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000884:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_TIM2_Init+0xfc>)
 8000888:	224f      	movs	r2, #79	; 0x4f
 800088a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_TIM2_Init+0xfc>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1 ;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <MX_TIM2_Init+0xfc>)
 8000894:	2263      	movs	r2, #99	; 0x63
 8000896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <MX_TIM2_Init+0xfc>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <MX_TIM2_Init+0xfc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a4:	4828      	ldr	r0, [pc, #160]	; (8000948 <MX_TIM2_Init+0xfc>)
 80008a6:	f003 fa93 	bl	8003dd0 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008b0:	f000 f94e 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	4619      	mov	r1, r3
 80008c0:	4821      	ldr	r0, [pc, #132]	; (8000948 <MX_TIM2_Init+0xfc>)
 80008c2:	f003 fdc5 	bl	8004450 <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008cc:	f000 f940 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d0:	481d      	ldr	r0, [pc, #116]	; (8000948 <MX_TIM2_Init+0xfc>)
 80008d2:	f003 fb29 	bl	8003f28 <HAL_TIM_PWM_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008dc:	f000 f938 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4816      	ldr	r0, [pc, #88]	; (8000948 <MX_TIM2_Init+0xfc>)
 80008f0:	f004 fa1c 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008fa:	f000 f929 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fe:	2360      	movs	r3, #96	; 0x60
 8000900:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_TIM2_Init+0xfc>)
 8000916:	f003 fc87 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000920:	f000 f916 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	220c      	movs	r2, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <MX_TIM2_Init+0xfc>)
 800092c:	f003 fc7c 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000936:	f000 f90b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <MX_TIM2_Init+0xfc>)
 800093c:	f000 fa22 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 8000940:	bf00      	nop
 8000942:	3738      	adds	r7, #56	; 0x38
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000168 	.word	0x20000168

0800094c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <MX_USART1_UART_Init+0x5c>)
 8000954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 8000958:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800095c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART1_UART_Init+0x58>)
 8000990:	f004 fac8 	bl	8004f24 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 f8d9 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200001b4 	.word	0x200001b4
 80009a8:	40013800 	.word	0x40013800

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	4b56      	ldr	r3, [pc, #344]	; (8000b1c <MX_GPIO_Init+0x170>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a55      	ldr	r2, [pc, #340]	; (8000b1c <MX_GPIO_Init+0x170>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b53      	ldr	r3, [pc, #332]	; (8000b1c <MX_GPIO_Init+0x170>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b50      	ldr	r3, [pc, #320]	; (8000b1c <MX_GPIO_Init+0x170>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a4f      	ldr	r2, [pc, #316]	; (8000b1c <MX_GPIO_Init+0x170>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b4d      	ldr	r3, [pc, #308]	; (8000b1c <MX_GPIO_Init+0x170>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <MX_GPIO_Init+0x170>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <MX_GPIO_Init+0x170>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b47      	ldr	r3, [pc, #284]	; (8000b1c <MX_GPIO_Init+0x170>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b44      	ldr	r3, [pc, #272]	; (8000b1c <MX_GPIO_Init+0x170>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a43      	ldr	r2, [pc, #268]	; (8000b1c <MX_GPIO_Init+0x170>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <MX_GPIO_Init+0x170>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b3e      	ldr	r3, [pc, #248]	; (8000b1c <MX_GPIO_Init+0x170>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a3d      	ldr	r2, [pc, #244]	; (8000b1c <MX_GPIO_Init+0x170>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <MX_GPIO_Init+0x170>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f640 410f 	movw	r1, #3087	; 0xc0f
 8000a40:	4837      	ldr	r0, [pc, #220]	; (8000b20 <MX_GPIO_Init+0x174>)
 8000a42:	f001 ffd7 	bl	80029f4 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2103      	movs	r1, #3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f001 ffd1 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f240 4105 	movw	r1, #1029	; 0x405
 8000a58:	4832      	ldr	r0, [pc, #200]	; (8000b24 <MX_GPIO_Init+0x178>)
 8000a5a:	f001 ffcb 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2104      	movs	r1, #4
 8000a62:	4831      	ldr	r0, [pc, #196]	; (8000b28 <MX_GPIO_Init+0x17c>)
 8000a64:	f001 ffc6 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000a68:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000a6c:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4827      	ldr	r0, [pc, #156]	; (8000b20 <MX_GPIO_Init+0x174>)
 8000a82:	f001 fe3d 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin;
 8000a86:	2303      	movs	r3, #3
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f001 fe2e 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin;
 8000aa4:	f240 4305 	movw	r3, #1029	; 0x405
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4819      	ldr	r0, [pc, #100]	; (8000b24 <MX_GPIO_Init+0x178>)
 8000abe:	f001 fe1f 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8000ac2:	f24f 2302 	movw	r3, #61954	; 0xf202
 8000ac6:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4813      	ldr	r0, [pc, #76]	; (8000b24 <MX_GPIO_Init+0x178>)
 8000ad8:	f001 fe12 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 8000adc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <MX_GPIO_Init+0x174>)
 8000af2:	f001 fe05 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 8000af6:	2304      	movs	r3, #4
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x17c>)
 8000b0e:	f001 fdf7 	bl	8002700 <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000400 	.word	0x48000400
 8000b28:	48000c00 	.word	0x48000c00

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3e:	f000 faf5 	bl	800112c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40001000 	.word	0x40001000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	; 0x58
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	f06f 0001 	mvn.w	r0, #1
 8000b9a:	f001 fd87 	bl	80026ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0a0      	sub	sp, #128	; 0x80
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	225c      	movs	r2, #92	; 0x5c
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f007 f9c3 	bl	8007f58 <memset>
  if(hadc->Instance==ADC1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <HAL_ADC_MspInit+0xc0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d142      	bne.n	8000c62 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000be0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000be2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000be6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000be8:	2303      	movs	r3, #3
 8000bea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000bf0:	2314      	movs	r3, #20
 8000bf2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fdd6 	bl	80037bc <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000c16:	f7ff ff9b 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_ADC_MspInit+0xc4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <HAL_ADC_MspInit+0xc4>)
 8000c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_ADC_MspInit+0xc4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_ADC_MspInit+0xc4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_ADC_MspInit+0xc4>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_ADC_MspInit+0xc4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_ADC_MspInit+0xc8>)
 8000c5e:	f001 fd4f 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3780      	adds	r7, #128	; 0x80
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	50040000 	.word	0x50040000
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000800 	.word	0x48000800

08000c78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <HAL_CAN_MspInit+0xa0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d139      	bne.n	8000d0e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_CAN_MspInit+0xa4>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <HAL_CAN_MspInit+0xa4>)
 8000ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_CAN_MspInit+0xa4>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_CAN_MspInit+0xa4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_CAN_MspInit+0xa4>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_CAN_MspInit+0xa4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cdc:	2309      	movs	r3, #9
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f001 fd09 	bl	8002700 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	2014      	movs	r0, #20
 8000cf4:	f001 fcda 	bl	80026ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cf8:	2014      	movs	r0, #20
 8000cfa:	f001 fcf3 	bl	80026e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2015      	movs	r0, #21
 8000d04:	f001 fcd2 	bl	80026ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d08:	2015      	movs	r0, #21
 8000d0a:	f001 fceb 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40006400 	.word	0x40006400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_TIM_Base_MspInit+0x5c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10c      	bne.n	8000d4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d4a:	e010      	b.n	8000d6e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d54:	d10b      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40012c00 	.word	0x40012c00
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <HAL_TIM_MspPostInit+0xe8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d11e      	bne.n	8000de4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a31      	ldr	r2, [pc, #196]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 8000dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f001 fc8f 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000de2:	e03f      	b.n	8000e64 <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dec:	d13a      	bne.n	8000e64 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_TIM_MspPostInit+0xec>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STPR_PWM_2_Pin;
 8000e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e30:	2301      	movs	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_2_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <HAL_TIM_MspPostInit+0xf0>)
 8000e3c:	f001 fc60 	bl	8002700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STPR_PWM_1_Pin;
 8000e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e52:	2301      	movs	r3, #1
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f001 fc4e 	bl	8002700 <HAL_GPIO_Init>
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40012c00 	.word	0x40012c00
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48000400 	.word	0x48000400

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0a0      	sub	sp, #128	; 0x80
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	225c      	movs	r2, #92	; 0x5c
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f007 f85d 	bl	8007f58 <memset>
  if(huart->Instance==USART1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_UART_MspInit+0xa8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d137      	bne.n	8000f18 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eac:	2300      	movs	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fc81 	bl	80037bc <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec0:	f7ff fe46 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ef4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f06:	2307      	movs	r3, #7
 8000f08:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 fbf4 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3780      	adds	r7, #128	; 0x80
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <HAL_InitTick+0xe0>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <HAL_InitTick+0xe0>)
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6593      	str	r3, [r2, #88]	; 0x58
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_InitTick+0xe0>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f4e:	f107 0210 	add.w	r2, r7, #16
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fb9d 	bl	8003698 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d103      	bne.n	8000f70 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f68:	f002 fb6a 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8000f6c:	6378      	str	r0, [r7, #52]	; 0x34
 8000f6e:	e004      	b.n	8000f7a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f70:	f002 fb66 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8000f74:	4603      	mov	r3, r0
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7c:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_InitTick+0xe4>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0c9b      	lsrs	r3, r3, #18
 8000f84:	3b01      	subs	r3, #1
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_InitTick+0xe8>)
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <HAL_InitTick+0xec>)
 8000f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_InitTick+0xe8>)
 8000f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <HAL_InitTick+0xe8>)
 8000f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <HAL_InitTick+0xe8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_InitTick+0xe8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_InitTick+0xe8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fae:	4818      	ldr	r0, [pc, #96]	; (8001010 <HAL_InitTick+0xe8>)
 8000fb0:	f002 ff0e 	bl	8003dd0 <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d11b      	bne.n	8000ffa <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fc2:	4813      	ldr	r0, [pc, #76]	; (8001010 <HAL_InitTick+0xe8>)
 8000fc4:	f002 ff5c 	bl	8003e80 <HAL_TIM_Base_Start_IT>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d111      	bne.n	8000ffa <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fd6:	2036      	movs	r0, #54	; 0x36
 8000fd8:	f001 fb84 	bl	80026e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d808      	bhi.n	8000ff4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	2036      	movs	r0, #54	; 0x36
 8000fe8:	f001 fb60 	bl	80026ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_InitTick+0xf0>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e002      	b.n	8000ffa <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3738      	adds	r7, #56	; 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	431bde83 	.word	0x431bde83
 8001010:	20000238 	.word	0x20000238
 8001014:	40001000 	.word	0x40001000
 8001018:	20000004 	.word	0x20000004

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <CAN1_RX0_IRQHandler+0x10>)
 800104e:	f001 f83c 	bl	80020ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000f4 	.word	0x200000f4

0800105c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <CAN1_RX1_IRQHandler+0x10>)
 8001062:	f001 f832 	bl	80020ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000f4 	.word	0x200000f4

08001070 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM6_DAC_IRQHandler+0x10>)
 8001076:	f002 ffb8 	bl	8003fea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000238 	.word	0x20000238

08001084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ac:	f7ff ffea 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <LoopForever+0xe>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	; (80010f4 <LoopForever+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f006 ff0b 	bl	8007ef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010da:	f7ff fa0a 	bl	80004f2 <main>

080010de <LoopForever>:

LoopForever:
    b LoopForever
 80010de:	e7fe      	b.n	80010de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010ec:	080081fc 	.word	0x080081fc
  ldr r2, =_sbss
 80010f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010f4:	200010b0 	.word	0x200010b0

080010f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_IRQHandler>

080010fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f001 fac6 	bl	8002696 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110a:	200f      	movs	r0, #15
 800110c:	f7ff ff0c 	bl	8000f28 <HAL_InitTick>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	e001      	b.n	8001120 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800111c:	f7ff fd1e 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001120:	79fb      	ldrb	r3, [r7, #7]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	20000284 	.word	0x20000284

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000284 	.word	0x20000284

0800116c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	609a      	str	r2, [r3, #8]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3360      	adds	r3, #96	; 0x60
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <LL_ADC_SetOffset+0x44>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	4313      	orrs	r3, r2
 8001204:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	03fff000 	.word	0x03fff000

0800121c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3360      	adds	r3, #96	; 0x60
 800122a:	461a      	mov	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3360      	adds	r3, #96	; 0x60
 8001258:	461a      	mov	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	431a      	orrs	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001272:	bf00      	nop
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800127e:	b480      	push	{r7}
 8001280:	b087      	sub	sp, #28
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3330      	adds	r3, #48	; 0x30
 800128e:	461a      	mov	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	4413      	add	r3, r2
 800129c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	211f      	movs	r1, #31
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	401a      	ands	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0e9b      	lsrs	r3, r3, #26
 80012b6:	f003 011f 	and.w	r1, r3, #31
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	431a      	orrs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012ca:	bf00      	nop
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b087      	sub	sp, #28
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3314      	adds	r3, #20
 80012e6:	461a      	mov	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	0e5b      	lsrs	r3, r3, #25
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	4413      	add	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	0d1b      	lsrs	r3, r3, #20
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2107      	movs	r1, #7
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	0d1b      	lsrs	r3, r3, #20
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	431a      	orrs	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001320:	bf00      	nop
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0318 	and.w	r3, r3, #24
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001350:	40d9      	lsrs	r1, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	400b      	ands	r3, r1
 8001356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135a:	431a      	orrs	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	0007ffff 	.word	0x0007ffff

08001374 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6093      	str	r3, [r2, #8]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ac:	d101      	bne.n	80013b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013fc:	d101      	bne.n	8001402 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <LL_ADC_IsEnabled+0x18>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_ADC_IsEnabled+0x1a>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b04      	cmp	r3, #4
 8001448:	d101      	bne.n	800144e <LL_ADC_REG_IsConversionOngoing+0x18>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b08      	cmp	r3, #8
 800146e:	d101      	bne.n	8001474 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e12c      	b.n	80016f8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fb7d 	bl	8000bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff67 	bl	8001398 <LL_ADC_IsDeepPowerDownEnabled>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff4d 	bl	8001374 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff82 	bl	80013e8 <LL_ADC_IsInternalRegulatorEnabled>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d115      	bne.n	8001516 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff66 	bl	80013c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014f4:	4b82      	ldr	r3, [pc, #520]	; (8001700 <HAL_ADC_Init+0x27c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	099b      	lsrs	r3, r3, #6
 80014fa:	4a82      	ldr	r2, [pc, #520]	; (8001704 <HAL_ADC_Init+0x280>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	099b      	lsrs	r3, r3, #6
 8001502:	3301      	adds	r3, #1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001508:	e002      	b.n	8001510 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff64 	bl	80013e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10d      	bne.n	8001542 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	f043 0201 	orr.w	r2, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff75 	bl	8001436 <LL_ADC_REG_IsConversionOngoing>
 800154c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 80c5 	bne.w	80016e6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 80c1 	bne.w	80016e6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800156c:	f043 0202 	orr.w	r2, r3, #2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff49 	bl	8001410 <LL_ADC_IsEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10b      	bne.n	800159c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001584:	4860      	ldr	r0, [pc, #384]	; (8001708 <HAL_ADC_Init+0x284>)
 8001586:	f7ff ff43 	bl	8001410 <LL_ADC_IsEnabled>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4619      	mov	r1, r3
 8001596:	485d      	ldr	r0, [pc, #372]	; (800170c <HAL_ADC_Init+0x288>)
 8001598:	f7ff fde8 	bl	800116c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e5b      	ldrb	r3, [r3, #25]
 80015a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d106      	bne.n	80015d8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	3b01      	subs	r3, #1
 80015d0:	045b      	lsls	r3, r3, #17
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	4b45      	ldr	r3, [pc, #276]	; (8001710 <HAL_ADC_Init+0x28c>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	430b      	orrs	r3, r1
 8001606:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff12 	bl	8001436 <LL_ADC_REG_IsConversionOngoing>
 8001612:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff1f 	bl	800145c <LL_ADC_INJ_IsConversionOngoing>
 800161e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d13d      	bne.n	80016a2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d13a      	bne.n	80016a2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001630:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001638:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001648:	f023 0302 	bic.w	r3, r3, #2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	69b9      	ldr	r1, [r7, #24]
 8001652:	430b      	orrs	r3, r1
 8001654:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800165c:	2b01      	cmp	r3, #1
 800165e:	d118      	bne.n	8001692 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800166a:	f023 0304 	bic.w	r3, r3, #4
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800167c:	4311      	orrs	r1, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001682:	430a      	orrs	r2, r1
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	e007      	b.n	80016a2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10c      	bne.n	80016c4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f023 010f 	bic.w	r1, r3, #15
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
 80016c2:	e007      	b.n	80016d4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020f 	bic.w	r2, r2, #15
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	f023 0303 	bic.w	r3, r3, #3
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
 80016e4:	e007      	b.n	80016f6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ea:	f043 0210 	orr.w	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	053e2d63 	.word	0x053e2d63
 8001708:	50040000 	.word	0x50040000
 800170c:	50040300 	.word	0x50040300
 8001710:	fff0c007 	.word	0xfff0c007

08001714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0b6      	sub	sp, #216	; 0xd8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x22>
 8001732:	2302      	movs	r3, #2
 8001734:	e3b9      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x796>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fe77 	bl	8001436 <LL_ADC_REG_IsConversionOngoing>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 839e 	bne.w	8001e8c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d824      	bhi.n	80017a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	3b02      	subs	r3, #2
 800175e:	2b03      	cmp	r3, #3
 8001760:	d81b      	bhi.n	800179a <HAL_ADC_ConfigChannel+0x86>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <HAL_ADC_ConfigChannel+0x54>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001779 	.word	0x08001779
 800176c:	08001781 	.word	0x08001781
 8001770:	08001789 	.word	0x08001789
 8001774:	08001791 	.word	0x08001791
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	220c      	movs	r2, #12
 800177c:	605a      	str	r2, [r3, #4]
          break;
 800177e:	e011      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2212      	movs	r2, #18
 8001784:	605a      	str	r2, [r3, #4]
          break;
 8001786:	e00d      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2218      	movs	r2, #24
 800178c:	605a      	str	r2, [r3, #4]
          break;
 800178e:	e009      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001796:	605a      	str	r2, [r3, #4]
          break;
 8001798:	e004      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2206      	movs	r2, #6
 800179e:	605a      	str	r2, [r3, #4]
          break;
 80017a0:	e000      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80017a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6859      	ldr	r1, [r3, #4]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	f7ff fd64 	bl	800127e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe3b 	bl	8001436 <LL_ADC_REG_IsConversionOngoing>
 80017c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fe47 	bl	800145c <LL_ADC_INJ_IsConversionOngoing>
 80017ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 81a6 	bne.w	8001b28 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 81a1 	bne.w	8001b28 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6819      	ldr	r1, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	461a      	mov	r2, r3
 80017f4:	f7ff fd6f 	bl	80012d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b04      	cmp	r3, #4
 8001818:	d00a      	beq.n	8001830 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6919      	ldr	r1, [r3, #16]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800182a:	f7ff fcd3 	bl	80011d4 <LL_ADC_SetOffset>
 800182e:	e17b      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fcf0 	bl	800121c <LL_ADC_GetOffsetChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <HAL_ADC_ConfigChannel+0x148>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fce5 	bl	800121c <LL_ADC_GetOffsetChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	0e9b      	lsrs	r3, r3, #26
 8001856:	f003 021f 	and.w	r2, r3, #31
 800185a:	e01e      	b.n	800189a <HAL_ADC_ConfigChannel+0x186>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fcda 	bl	800121c <LL_ADC_GetOffsetChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800187a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800187e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800188a:	2320      	movs	r3, #32
 800188c:	e004      	b.n	8001898 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800188e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d105      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x19e>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0e9b      	lsrs	r3, r3, #26
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	e018      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e004      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80018da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d106      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fca9 	bl	8001248 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2101      	movs	r1, #1
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fc8d 	bl	800121c <LL_ADC_GetOffsetChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10a      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x20e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fc82 	bl	800121c <LL_ADC_GetOffsetChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	0e9b      	lsrs	r3, r3, #26
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	e01e      	b.n	8001960 <HAL_ADC_ConfigChannel+0x24c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fc77 	bl	800121c <LL_ADC_GetOffsetChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001940:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001950:	2320      	movs	r3, #32
 8001952:	e004      	b.n	800195e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x264>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0e9b      	lsrs	r3, r3, #26
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	e018      	b.n	80019aa <HAL_ADC_ConfigChannel+0x296>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800198c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800199c:	2320      	movs	r3, #32
 800199e:	e004      	b.n	80019aa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80019a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d106      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	2101      	movs	r1, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fc46 	bl	8001248 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2102      	movs	r1, #2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fc2a 	bl	800121c <LL_ADC_GetOffsetChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10a      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x2d4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2102      	movs	r1, #2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fc1f 	bl	800121c <LL_ADC_GetOffsetChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	0e9b      	lsrs	r3, r3, #26
 80019e2:	f003 021f 	and.w	r2, r3, #31
 80019e6:	e01e      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x312>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2102      	movs	r1, #2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fc14 	bl	800121c <LL_ADC_GetOffsetChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001a16:	2320      	movs	r3, #32
 8001a18:	e004      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001a1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x32a>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0e9b      	lsrs	r3, r3, #26
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	e016      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x358>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	e004      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d106      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	2102      	movs	r1, #2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fbe5 	bl	8001248 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2103      	movs	r1, #3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fbc9 	bl	800121c <LL_ADC_GetOffsetChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10a      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x396>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2103      	movs	r1, #3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fbbe 	bl	800121c <LL_ADC_GetOffsetChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	0e9b      	lsrs	r3, r3, #26
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	e017      	b.n	8001ada <HAL_ADC_ConfigChannel+0x3c6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2103      	movs	r1, #3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fbb3 	bl	800121c <LL_ADC_GetOffsetChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ac4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001acc:	2320      	movs	r3, #32
 8001ace:	e003      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x3de>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	0e9b      	lsrs	r3, r3, #26
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	e011      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x402>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b02:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	e003      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d106      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2103      	movs	r1, #3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fb90 	bl	8001248 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fc6f 	bl	8001410 <LL_ADC_IsEnabled>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 813f 	bne.w	8001db8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f7ff fbf0 	bl	800132c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a8e      	ldr	r2, [pc, #568]	; (8001d8c <HAL_ADC_ConfigChannel+0x678>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	f040 8130 	bne.w	8001db8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10b      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x46c>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0e9b      	lsrs	r3, r3, #26
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	2b09      	cmp	r3, #9
 8001b76:	bf94      	ite	ls
 8001b78:	2301      	movls	r3, #1
 8001b7a:	2300      	movhi	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	e019      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x4a0>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b90:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e003      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2b09      	cmp	r3, #9
 8001bac:	bf94      	ite	ls
 8001bae:	2301      	movls	r3, #1
 8001bb0:	2300      	movhi	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d079      	beq.n	8001cac <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x4c0>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0e9b      	lsrs	r3, r3, #26
 8001bca:	3301      	adds	r3, #1
 8001bcc:	069b      	lsls	r3, r3, #26
 8001bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd2:	e015      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x4ec>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001bec:	2320      	movs	r3, #32
 8001bee:	e003      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	069b      	lsls	r3, r3, #26
 8001bfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x50c>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0e9b      	lsrs	r3, r3, #26
 8001c12:	3301      	adds	r3, #1
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2101      	movs	r1, #1
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	e017      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x53c>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001c38:	2320      	movs	r3, #32
 8001c3a:	e003      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	ea42 0103 	orr.w	r1, r2, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x562>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0e9b      	lsrs	r3, r3, #26
 8001c66:	3301      	adds	r3, #1
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	051b      	lsls	r3, r3, #20
 8001c74:	e018      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x594>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e003      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	e080      	b.n	8001dae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x5b4>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	069b      	lsls	r3, r3, #26
 8001cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc6:	e015      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x5e0>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e003      	b.n	8001cec <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	069b      	lsls	r3, r3, #26
 8001cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d109      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x600>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	3301      	adds	r3, #1
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	e017      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x630>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	61fb      	str	r3, [r7, #28]
  return result;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	e003      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	ea42 0103 	orr.w	r1, r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x65c>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0e9b      	lsrs	r3, r3, #26
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	3b1e      	subs	r3, #30
 8001d68:	051b      	lsls	r3, r3, #20
 8001d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	e01d      	b.n	8001dac <HAL_ADC_ConfigChannel+0x698>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	613b      	str	r3, [r7, #16]
  return result;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d103      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	e005      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x684>
 8001d8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f003 021f 	and.w	r2, r3, #31
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	3b1e      	subs	r3, #30
 8001da6:	051b      	lsls	r3, r3, #20
 8001da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dac:	430b      	orrs	r3, r1
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	6892      	ldr	r2, [r2, #8]
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7ff fa8f 	bl	80012d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d06c      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc4:	483c      	ldr	r0, [pc, #240]	; (8001eb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001dc6:	f7ff f9f7 	bl	80011b8 <LL_ADC_GetCommonPathInternalCh>
 8001dca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <HAL_ADC_ConfigChannel+0x7a8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d127      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d121      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a35      	ldr	r2, [pc, #212]	; (8001ec0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d157      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001df6:	4619      	mov	r1, r3
 8001df8:	482f      	ldr	r0, [pc, #188]	; (8001eb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001dfa:	f7ff f9ca 	bl	8001192 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	099b      	lsrs	r3, r3, #6
 8001e04:	4a30      	ldr	r2, [pc, #192]	; (8001ec8 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	099b      	lsrs	r3, r3, #6
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e26:	e03a      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_ADC_ConfigChannel+0x7b8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d113      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x746>
 8001e32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d12a      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e50:	4619      	mov	r1, r3
 8001e52:	4819      	ldr	r0, [pc, #100]	; (8001eb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e54:	f7ff f99d 	bl	8001192 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e58:	e021      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d11c      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d116      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e82:	4619      	mov	r1, r3
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e86:	f7ff f984 	bl	8001192 <LL_ADC_SetCommonPathInternalCh>
 8001e8a:	e008      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ea6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	37d8      	adds	r7, #216	; 0xd8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	80080000 	.word	0x80080000
 8001eb8:	50040300 	.word	0x50040300
 8001ebc:	c7520000 	.word	0xc7520000
 8001ec0:	50040000 	.word	0x50040000
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	053e2d63 	.word	0x053e2d63
 8001ecc:	cb840000 	.word	0xcb840000
 8001ed0:	80000001 	.word	0x80000001

08001ed4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0ed      	b.n	80020c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fec0 	bl	8000c78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff f924 	bl	8001154 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f0e:	e012      	b.n	8001f36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f10:	f7ff f920 	bl	8001154 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b0a      	cmp	r3, #10
 8001f1c:	d90b      	bls.n	8001f36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0c5      	b.n	80020c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0e5      	beq.n	8001f10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0202 	bic.w	r2, r2, #2
 8001f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f54:	f7ff f8fe 	bl	8001154 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f5a:	e012      	b.n	8001f82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f5c:	f7ff f8fa 	bl	8001154 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b0a      	cmp	r3, #10
 8001f68:	d90b      	bls.n	8001f82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2205      	movs	r2, #5
 8001f7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e09f      	b.n	80020c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e5      	bne.n	8001f5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e1b      	ldrb	r3, [r3, #24]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d108      	bne.n	8001faa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e007      	b.n	8001fba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7e5b      	ldrb	r3, [r3, #25]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d108      	bne.n	8001fd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e007      	b.n	8001fe4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e9b      	ldrb	r3, [r3, #26]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d108      	bne.n	8001ffe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0220 	orr.w	r2, r2, #32
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e007      	b.n	800200e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0220 	bic.w	r2, r2, #32
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7edb      	ldrb	r3, [r3, #27]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0210 	bic.w	r2, r2, #16
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e007      	b.n	8002038 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0210 	orr.w	r2, r2, #16
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7f1b      	ldrb	r3, [r3, #28]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d108      	bne.n	8002052 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0208 	orr.w	r2, r2, #8
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e007      	b.n	8002062 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0208 	bic.w	r2, r2, #8
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7f5b      	ldrb	r3, [r3, #29]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d108      	bne.n	800207c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0204 	orr.w	r2, r2, #4
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e007      	b.n	800208c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0204 	bic.w	r2, r2, #4
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	ea42 0103 	orr.w	r1, r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b08a      	sub	sp, #40	; 0x28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d07c      	beq.n	800220a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d023      	beq.n	8002162 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2201      	movs	r2, #1
 8002120:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f983 	bl	8002438 <HAL_CAN_TxMailbox0CompleteCallback>
 8002132:	e016      	b.n	8002162 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	e00c      	b.n	8002162 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	e002      	b.n	8002162 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f989 	bl	8002474 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d024      	beq.n	80021b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002174:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f963 	bl	800244c <HAL_CAN_TxMailbox1CompleteCallback>
 8002186:	e016      	b.n	80021b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	e00c      	b.n	80021b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	e002      	b.n	80021b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f969 	bl	8002488 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d024      	beq.n	800220a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f943 	bl	8002460 <HAL_CAN_TxMailbox2CompleteCallback>
 80021da:	e016      	b.n	800220a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	e00c      	b.n	800220a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	e002      	b.n	800220a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f949 	bl	800249c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00c      	beq.n	800222e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002224:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2210      	movs	r2, #16
 800222c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2208      	movs	r2, #8
 8002248:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f93a 	bl	80024c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f921 	bl	80024b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00c      	beq.n	8002292 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2210      	movs	r2, #16
 8002290:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00b      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2208      	movs	r2, #8
 80022ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f91c 	bl	80024ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f903 	bl	80024d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2210      	movs	r2, #16
 80022ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f906 	bl	8002500 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2208      	movs	r2, #8
 800230e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f8ff 	bl	8002514 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d07b      	beq.n	8002418 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d072      	beq.n	8002410 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002384:	2b00      	cmp	r3, #0
 8002386:	d043      	beq.n	8002410 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03e      	beq.n	8002410 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002398:	2b60      	cmp	r3, #96	; 0x60
 800239a:	d02b      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x32a>
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d82e      	bhi.n	80023fe <HAL_CAN_IRQHandler+0x334>
 80023a0:	2b50      	cmp	r3, #80	; 0x50
 80023a2:	d022      	beq.n	80023ea <HAL_CAN_IRQHandler+0x320>
 80023a4:	2b50      	cmp	r3, #80	; 0x50
 80023a6:	d82a      	bhi.n	80023fe <HAL_CAN_IRQHandler+0x334>
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d019      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x316>
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d826      	bhi.n	80023fe <HAL_CAN_IRQHandler+0x334>
 80023b0:	2b30      	cmp	r3, #48	; 0x30
 80023b2:	d010      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x30c>
 80023b4:	2b30      	cmp	r3, #48	; 0x30
 80023b6:	d822      	bhi.n	80023fe <HAL_CAN_IRQHandler+0x334>
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d002      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x2f8>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d005      	beq.n	80023cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023c0:	e01d      	b.n	80023fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023ca:	e019      	b.n	8002400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	f043 0310 	orr.w	r3, r3, #16
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023d4:	e014      	b.n	8002400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	f043 0320 	orr.w	r3, r3, #32
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023de:	e00f      	b.n	8002400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023e8:	e00a      	b.n	8002400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023f2:	e005      	b.n	8002400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023fc:	e000      	b.n	8002400 <HAL_CAN_IRQHandler+0x336>
            break;
 80023fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800240e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2204      	movs	r2, #4
 8002416:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f87c 	bl	8002528 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <__NVIC_EnableIRQ+0x38>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
         );
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff4c 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026be:	f7ff ff61 	bl	8002584 <__NVIC_GetPriorityGrouping>
 80026c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	6978      	ldr	r0, [r7, #20]
 80026ca:	f7ff ffb1 	bl	8002630 <NVIC_EncodePriority>
 80026ce:	4602      	mov	r2, r0
 80026d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff80 	bl	80025dc <__NVIC_SetPriority>
}
 80026dc:	bf00      	nop
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff54 	bl	80025a0 <__NVIC_EnableIRQ>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270e:	e154      	b.n	80029ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	4013      	ands	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8146 	beq.w	80029b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d005      	beq.n	8002740 <HAL_GPIO_Init+0x40>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d130      	bne.n	80027a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002776:	2201      	movs	r2, #1
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 0201 	and.w	r2, r3, #1
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d017      	beq.n	80027de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	2203      	movs	r2, #3
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d123      	bne.n	8002832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	220f      	movs	r2, #15
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	08da      	lsrs	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	6939      	ldr	r1, [r7, #16]
 800282e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	2203      	movs	r2, #3
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0203 	and.w	r2, r3, #3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80a0 	beq.w	80029b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002874:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_GPIO_Init+0x2d8>)
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_GPIO_Init+0x2d8>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6613      	str	r3, [r2, #96]	; 0x60
 8002880:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <HAL_GPIO_Init+0x2d8>)
 8002882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800288c:	4a53      	ldr	r2, [pc, #332]	; (80029dc <HAL_GPIO_Init+0x2dc>)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028b6:	d019      	beq.n	80028ec <HAL_GPIO_Init+0x1ec>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a49      	ldr	r2, [pc, #292]	; (80029e0 <HAL_GPIO_Init+0x2e0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_GPIO_Init+0x1e8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_GPIO_Init+0x2e4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00d      	beq.n	80028e4 <HAL_GPIO_Init+0x1e4>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a47      	ldr	r2, [pc, #284]	; (80029e8 <HAL_GPIO_Init+0x2e8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <HAL_GPIO_Init+0x1e0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a46      	ldr	r2, [pc, #280]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_GPIO_Init+0x1dc>
 80028d8:	2304      	movs	r3, #4
 80028da:	e008      	b.n	80028ee <HAL_GPIO_Init+0x1ee>
 80028dc:	2307      	movs	r3, #7
 80028de:	e006      	b.n	80028ee <HAL_GPIO_Init+0x1ee>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e004      	b.n	80028ee <HAL_GPIO_Init+0x1ee>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e002      	b.n	80028ee <HAL_GPIO_Init+0x1ee>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_GPIO_Init+0x1ee>
 80028ec:	2300      	movs	r3, #0
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	f002 0203 	and.w	r2, r2, #3
 80028f4:	0092      	lsls	r2, r2, #2
 80028f6:	4093      	lsls	r3, r2
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028fe:	4937      	ldr	r1, [pc, #220]	; (80029dc <HAL_GPIO_Init+0x2dc>)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	3302      	adds	r3, #2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002930:	4a2f      	ldr	r2, [pc, #188]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002936:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800295a:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002984:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029ae:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3301      	adds	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f47f aea3 	bne.w	8002710 <HAL_GPIO_Init+0x10>
  }
}
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010000 	.word	0x40010000
 80029e0:	48000400 	.word	0x48000400
 80029e4:	48000800 	.word	0x48000800
 80029e8:	48000c00 	.word	0x48000c00
 80029ec:	48001000 	.word	0x48001000
 80029f0:	40010400 	.word	0x40010400

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40007000 	.word	0x40007000

08002a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4e:	d130      	bne.n	8002ab2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a5c:	d038      	beq.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a66:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2232      	movs	r2, #50	; 0x32
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0c9b      	lsrs	r3, r3, #18
 8002a80:	3301      	adds	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a84:	e002      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a98:	d102      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f2      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d110      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e00f      	b.n	8002ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abe:	d007      	beq.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ac0:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac8:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ace:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	431bde83 	.word	0x431bde83

08002aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f000 bc02 	b.w	8003304 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b00:	4b96      	ldr	r3, [pc, #600]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b0a:	4b94      	ldr	r3, [pc, #592]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80e4 	beq.w	8002cea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4c>
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	f040 808b 	bne.w	8002c46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	f040 8087 	bne.w	8002c46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b38:	4b88      	ldr	r3, [pc, #544]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_OscConfig+0x64>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e3d9      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1a      	ldr	r2, [r3, #32]
 8002b54:	4b81      	ldr	r3, [pc, #516]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <HAL_RCC_OscConfig+0x7e>
 8002b60:	4b7e      	ldr	r3, [pc, #504]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b68:	e005      	b.n	8002b76 <HAL_RCC_OscConfig+0x8a>
 8002b6a:	4b7c      	ldr	r3, [pc, #496]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d223      	bcs.n	8002bc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fdbc 	bl	80036fc <RCC_SetFlashLatencyFromMSIRange>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e3ba      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b8e:	4b73      	ldr	r3, [pc, #460]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a72      	ldr	r2, [pc, #456]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b94:	f043 0308 	orr.w	r3, r3, #8
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b70      	ldr	r3, [pc, #448]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	496d      	ldr	r1, [pc, #436]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bac:	4b6b      	ldr	r3, [pc, #428]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	4968      	ldr	r1, [pc, #416]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	e025      	b.n	8002c0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc2:	4b66      	ldr	r3, [pc, #408]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a65      	ldr	r2, [pc, #404]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4960      	ldr	r1, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be0:	4b5e      	ldr	r3, [pc, #376]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	495b      	ldr	r1, [pc, #364]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fd7c 	bl	80036fc <RCC_SetFlashLatencyFromMSIRange>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e37a      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0e:	f000 fc81 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b51      	ldr	r3, [pc, #324]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4950      	ldr	r1, [pc, #320]	; (8002d60 <HAL_RCC_OscConfig+0x274>)
 8002c20:	5ccb      	ldrb	r3, [r1, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <HAL_RCC_OscConfig+0x278>)
 8002c2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c2e:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <HAL_RCC_OscConfig+0x27c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f978 	bl	8000f28 <HAL_InitTick>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d052      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	e35e      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d032      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c4e:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a42      	ldr	r2, [pc, #264]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fa7b 	bl	8001154 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c62:	f7fe fa77 	bl	8001154 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e347      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c74:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c80:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a35      	ldr	r2, [pc, #212]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4930      	ldr	r1, [pc, #192]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	492b      	ldr	r1, [pc, #172]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
 8002cb2:	e01a      	b.n	8002cea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cb4:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fa48 	bl	8001154 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc8:	f7fe fa44 	bl	8001154 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e314      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x1dc>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d073      	beq.n	8002dde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x21c>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d10e      	bne.n	8002d20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d063      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2f0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d15f      	bne.n	8002ddc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e2f1      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCC_OscConfig+0x24c>
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e025      	b.n	8002d84 <HAL_RCC_OscConfig+0x298>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d40:	d114      	bne.n	8002d6c <HAL_RCC_OscConfig+0x280>
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a02      	ldr	r2, [pc, #8]	; (8002d5c <HAL_RCC_OscConfig+0x270>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e013      	b.n	8002d84 <HAL_RCC_OscConfig+0x298>
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08008144 	.word	0x08008144
 8002d64:	20000000 	.word	0x20000000
 8002d68:	20000004 	.word	0x20000004
 8002d6c:	4ba0      	ldr	r3, [pc, #640]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a9f      	ldr	r2, [pc, #636]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b9d      	ldr	r3, [pc, #628]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a9c      	ldr	r2, [pc, #624]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f9e2 	bl	8001154 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe f9de 	bl	8001154 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e2ae      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da6:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2a8>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe f9ce 	bl	8001154 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f9ca 	bl	8001154 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e29a      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dce:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2d0>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d060      	beq.n	8002eac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_OscConfig+0x310>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d119      	bne.n	8002e2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d116      	bne.n	8002e2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfc:	4b7c      	ldr	r3, [pc, #496]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_OscConfig+0x328>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e277      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4973      	ldr	r1, [pc, #460]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e28:	e040      	b.n	8002eac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d023      	beq.n	8002e7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e32:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6e      	ldr	r2, [pc, #440]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f989 	bl	8001154 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe f985 	bl	8001154 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e255      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e58:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	4b62      	ldr	r3, [pc, #392]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	495f      	ldr	r1, [pc, #380]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	e018      	b.n	8002eac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5c      	ldr	r2, [pc, #368]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe f965 	bl	8001154 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fe f961 	bl	8001154 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e231      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d03c      	beq.n	8002f32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01c      	beq.n	8002efa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec0:	4b4b      	ldr	r3, [pc, #300]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec6:	4a4a      	ldr	r2, [pc, #296]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe f940 	bl	8001154 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed8:	f7fe f93c 	bl	8001154 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e20c      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ef      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x3ec>
 8002ef8:	e01b      	b.n	8002f32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f00:	4a3b      	ldr	r2, [pc, #236]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fe f923 	bl	8001154 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f12:	f7fe f91f 	bl	8001154 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1ef      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f24:	4b32      	ldr	r3, [pc, #200]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ef      	bne.n	8002f12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a6 	beq.w	800308c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10d      	bne.n	8002f6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f6c:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x508>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d118      	bne.n	8002faa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f78:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <HAL_RCC_OscConfig+0x508>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x508>)
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f84:	f7fe f8e6 	bl	8001154 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8c:	f7fe f8e2 	bl	8001154 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1b2      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_RCC_OscConfig+0x508>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4d8>
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc2:	e029      	b.n	8003018 <HAL_RCC_OscConfig+0x52c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x50c>
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002fd4:	f043 0304 	orr.w	r3, r3, #4
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	4a03      	ldr	r2, [pc, #12]	; (8002ff0 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fec:	e014      	b.n	8003018 <HAL_RCC_OscConfig+0x52c>
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	4b9a      	ldr	r3, [pc, #616]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	4a99      	ldr	r2, [pc, #612]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003008:	4b96      	ldr	r3, [pc, #600]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	4a95      	ldr	r2, [pc, #596]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d016      	beq.n	800304e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fe f898 	bl	8001154 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fe f894 	bl	8001154 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e162      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303e:	4b89      	ldr	r3, [pc, #548]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ed      	beq.n	8003028 <HAL_RCC_OscConfig+0x53c>
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fe f881 	bl	8001154 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe f87d 	bl	8001154 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e14b      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800306c:	4b7d      	ldr	r3, [pc, #500]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1ed      	bne.n	8003056 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307a:	7ffb      	ldrb	r3, [r7, #31]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003080:	4b78      	ldr	r3, [pc, #480]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	4a77      	ldr	r2, [pc, #476]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03c      	beq.n	8003112 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01c      	beq.n	80030da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030a0:	4b70      	ldr	r3, [pc, #448]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80030a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a6:	4a6f      	ldr	r2, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe f850 	bl	8001154 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030b8:	f7fe f84c 	bl	8001154 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e11c      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ca:	4b66      	ldr	r3, [pc, #408]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80030cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCC_OscConfig+0x5cc>
 80030d8:	e01b      	b.n	8003112 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030da:	4b62      	ldr	r3, [pc, #392]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80030dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e0:	4a60      	ldr	r2, [pc, #384]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fe f833 	bl	8001154 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f2:	f7fe f82f 	bl	8001154 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0ff      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003104:	4b57      	ldr	r3, [pc, #348]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ef      	bne.n	80030f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80f3 	beq.w	8003302 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	2b02      	cmp	r3, #2
 8003122:	f040 80c9 	bne.w	80032b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003126:	4b4f      	ldr	r3, [pc, #316]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0203 	and.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	429a      	cmp	r2, r3
 8003138:	d12c      	bne.n	8003194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	3b01      	subs	r3, #1
 8003146:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d123      	bne.n	8003194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d11b      	bne.n	8003194 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d113      	bne.n	8003194 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	3b01      	subs	r3, #1
 800317a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d109      	bne.n	8003194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d06b      	beq.n	800326c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d062      	beq.n	8003260 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800319a:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0ac      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031aa:	4b2e      	ldr	r3, [pc, #184]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80031b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031b6:	f7fd ffcd 	bl	8001154 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031be:	f7fd ffc9 	bl	8001154 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e099      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031dc:	4b21      	ldr	r3, [pc, #132]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_OscConfig+0x77c>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ec:	3a01      	subs	r2, #1
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	4311      	orrs	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031f6:	0212      	lsls	r2, r2, #8
 80031f8:	4311      	orrs	r1, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031fe:	0852      	lsrs	r2, r2, #1
 8003200:	3a01      	subs	r2, #1
 8003202:	0552      	lsls	r2, r2, #21
 8003204:	4311      	orrs	r1, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800320a:	0852      	lsrs	r2, r2, #1
 800320c:	3a01      	subs	r2, #1
 800320e:	0652      	lsls	r2, r2, #25
 8003210:	4311      	orrs	r1, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003216:	06d2      	lsls	r2, r2, #27
 8003218:	430a      	orrs	r2, r1
 800321a:	4912      	ldr	r1, [pc, #72]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 800321c:	4313      	orrs	r3, r2
 800321e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003238:	f7fd ff8c 	bl	8001154 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fd ff88 	bl	8001154 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e058      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_OscConfig+0x778>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800325e:	e050      	b.n	8003302 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e04f      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
 8003264:	40021000 	.word	0x40021000
 8003268:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_RCC_OscConfig+0x820>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d144      	bne.n	8003302 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x820>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a23      	ldr	r2, [pc, #140]	; (800330c <HAL_RCC_OscConfig+0x820>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_OscConfig+0x820>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a20      	ldr	r2, [pc, #128]	; (800330c <HAL_RCC_OscConfig+0x820>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003290:	f7fd ff60 	bl	8001154 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fd ff5c 	bl	8001154 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e02c      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <HAL_RCC_OscConfig+0x820>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x7ac>
 80032b6:	e024      	b.n	8003302 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d01f      	beq.n	80032fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_RCC_OscConfig+0x820>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a12      	ldr	r2, [pc, #72]	; (800330c <HAL_RCC_OscConfig+0x820>)
 80032c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fd ff43 	bl	8001154 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d2:	f7fd ff3f 	bl	8001154 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e00f      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_OscConfig+0x820>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f0      	bne.n	80032d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCC_OscConfig+0x820>)
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	4905      	ldr	r1, [pc, #20]	; (800330c <HAL_RCC_OscConfig+0x820>)
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCC_OscConfig+0x824>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	60cb      	str	r3, [r1, #12]
 80032fc:	e001      	b.n	8003302 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	feeefffc 	.word	0xfeeefffc

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0e7      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b75      	ldr	r3, [pc, #468]	; (8003500 <HAL_RCC_ClockConfig+0x1ec>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d910      	bls.n	8003358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b72      	ldr	r3, [pc, #456]	; (8003500 <HAL_RCC_ClockConfig+0x1ec>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 0207 	bic.w	r2, r3, #7
 800333e:	4970      	ldr	r1, [pc, #448]	; (8003500 <HAL_RCC_ClockConfig+0x1ec>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b6e      	ldr	r3, [pc, #440]	; (8003500 <HAL_RCC_ClockConfig+0x1ec>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0cf      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003370:	429a      	cmp	r2, r3
 8003372:	d908      	bls.n	8003386 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4960      	ldr	r1, [pc, #384]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d04c      	beq.n	800342c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	4b5a      	ldr	r3, [pc, #360]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d121      	bne.n	80033ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0a6      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b2:	4b54      	ldr	r3, [pc, #336]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d115      	bne.n	80033ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e09a      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ca:	4b4e      	ldr	r3, [pc, #312]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e08e      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e086      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4943      	ldr	r1, [pc, #268]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fc:	f7fd feaa 	bl	8001154 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fd fea6 	bl	8001154 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e06e      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b3a      	ldr	r3, [pc, #232]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003444:	429a      	cmp	r2, r3
 8003446:	d208      	bcs.n	800345a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	492b      	ldr	r1, [pc, #172]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <HAL_RCC_ClockConfig+0x1ec>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d210      	bcs.n	800348a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_RCC_ClockConfig+0x1ec>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 0207 	bic.w	r2, r3, #7
 8003470:	4923      	ldr	r1, [pc, #140]	; (8003500 <HAL_RCC_ClockConfig+0x1ec>)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003478:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_RCC_ClockConfig+0x1ec>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e036      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4918      	ldr	r1, [pc, #96]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4910      	ldr	r1, [pc, #64]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c8:	f000 f824 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	490b      	ldr	r1, [pc, #44]	; (8003508 <HAL_RCC_ClockConfig+0x1f4>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1f8>)
 80034e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x1fc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fd1b 	bl	8000f28 <HAL_InitTick>
 80034f2:	4603      	mov	r3, r0
 80034f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80034f6:	7afb      	ldrb	r3, [r7, #11]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40022000 	.word	0x40022000
 8003504:	40021000 	.word	0x40021000
 8003508:	08008144 	.word	0x08008144
 800350c:	20000000 	.word	0x20000000
 8003510:	20000004 	.word	0x20000004

08003514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352c:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x34>
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d121      	bne.n	8003586 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d11e      	bne.n	8003586 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003548:	4b34      	ldr	r3, [pc, #208]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 8003556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	e005      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003564:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003578:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10d      	bne.n	800359c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003584:	e00a      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d102      	bne.n	8003592 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_RCC_GetSysClockFreq+0x110>)
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	e004      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d101      	bne.n	800359c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003598:	4b22      	ldr	r3, [pc, #136]	; (8003624 <HAL_RCC_GetSysClockFreq+0x110>)
 800359a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d134      	bne.n	800360c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0xa6>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d003      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0xac>
 80035b8:	e005      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035ba:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <HAL_RCC_GetSysClockFreq+0x110>)
 80035bc:	617b      	str	r3, [r7, #20]
      break;
 80035be:	e005      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035c0:	4b18      	ldr	r3, [pc, #96]	; (8003624 <HAL_RCC_GetSysClockFreq+0x110>)
 80035c2:	617b      	str	r3, [r7, #20]
      break;
 80035c4:	e002      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	617b      	str	r3, [r7, #20]
      break;
 80035ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	3301      	adds	r3, #1
 80035d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	fb03 f202 	mul.w	r2, r3, r2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_RCC_GetSysClockFreq+0x108>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	0e5b      	lsrs	r3, r3, #25
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	3301      	adds	r3, #1
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800360c:	69bb      	ldr	r3, [r7, #24]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	; 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	0800815c 	.word	0x0800815c
 8003624:	00f42400 	.word	0x00f42400

08003628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4904      	ldr	r1, [pc, #16]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	08008154 	.word	0x08008154

0800366c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003670:	f7ff ffda 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0adb      	lsrs	r3, r3, #11
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4904      	ldr	r1, [pc, #16]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	08008154 	.word	0x08008154

08003698 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	220f      	movs	r2, #15
 80036a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_RCC_GetClockConfig+0x5c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0203 	and.w	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_RCC_GetClockConfig+0x5c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <HAL_RCC_GetClockConfig+0x5c>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_GetClockConfig+0x5c>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	08db      	lsrs	r3, r3, #3
 80036d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_RCC_GetClockConfig+0x60>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0207 	and.w	r2, r3, #7
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40022000 	.word	0x40022000

080036fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003708:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003714:	f7ff f986 	bl	8002a24 <HAL_PWREx_GetVoltageRange>
 8003718:	6178      	str	r0, [r7, #20]
 800371a:	e014      	b.n	8003746 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	4a24      	ldr	r2, [pc, #144]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003726:	6593      	str	r3, [r2, #88]	; 0x58
 8003728:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003734:	f7ff f976 	bl	8002a24 <HAL_PWREx_GetVoltageRange>
 8003738:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003744:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374c:	d10b      	bne.n	8003766 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d919      	bls.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2ba0      	cmp	r3, #160	; 0xa0
 8003758:	d902      	bls.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800375a:	2302      	movs	r3, #2
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	e013      	b.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003760:	2301      	movs	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e010      	b.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d902      	bls.n	8003772 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800376c:	2303      	movs	r3, #3
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e00a      	b.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d102      	bne.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003778:	2302      	movs	r3, #2
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	e004      	b.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b70      	cmp	r3, #112	; 0x70
 8003782:	d101      	bne.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003784:	2301      	movs	r3, #1
 8003786:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 0207 	bic.w	r2, r3, #7
 8003790:	4909      	ldr	r1, [pc, #36]	; (80037b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d001      	beq.n	80037aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40022000 	.word	0x40022000

080037bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037c4:	2300      	movs	r3, #0
 80037c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037c8:	2300      	movs	r3, #0
 80037ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d031      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037e0:	d01a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80037e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037e6:	d814      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f0:	d10f      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037f2:	4b5d      	ldr	r3, [pc, #372]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a5c      	ldr	r2, [pc, #368]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037fe:	e00c      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f9f0 	bl	8003bec <RCCEx_PLLSAI1_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003810:	e003      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	74fb      	strb	r3, [r7, #19]
      break;
 8003816:	e000      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003820:	4b51      	ldr	r3, [pc, #324]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	494e      	ldr	r1, [pc, #312]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003836:	e001      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 809e 	beq.w	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800384e:	4b46      	ldr	r3, [pc, #280]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003864:	4b40      	ldr	r3, [pc, #256]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	4a3f      	ldr	r2, [pc, #252]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800386a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386e:	6593      	str	r3, [r2, #88]	; 0x58
 8003870:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387c:	2301      	movs	r3, #1
 800387e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003880:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a39      	ldr	r2, [pc, #228]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800388c:	f7fd fc62 	bl	8001154 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003892:	e009      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003894:	f7fd fc5e 	bl	8001154 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d902      	bls.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	74fb      	strb	r3, [r7, #19]
        break;
 80038a6:	e005      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038a8:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ef      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d15a      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ba:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01e      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d019      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e2:	4b21      	ldr	r3, [pc, #132]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003902:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d016      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fc1e 	bl	8001154 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391a:	e00b      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fd fc1a 	bl	8001154 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d902      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	74fb      	strb	r3, [r7, #19]
            break;
 8003932:	e006      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0ec      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	4904      	ldr	r1, [pc, #16]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800395e:	e009      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	74bb      	strb	r3, [r7, #18]
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003974:	7c7b      	ldrb	r3, [r7, #17]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b9b      	ldr	r3, [pc, #620]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	4a9a      	ldr	r2, [pc, #616]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003992:	4b95      	ldr	r3, [pc, #596]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f023 0203 	bic.w	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4991      	ldr	r1, [pc, #580]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b4:	4b8c      	ldr	r3, [pc, #560]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 020c 	bic.w	r2, r3, #12
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	4989      	ldr	r1, [pc, #548]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039d6:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	4980      	ldr	r1, [pc, #512]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f8:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	4978      	ldr	r1, [pc, #480]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	496f      	ldr	r1, [pc, #444]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	4967      	ldr	r1, [pc, #412]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a5e:	4b62      	ldr	r3, [pc, #392]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	495e      	ldr	r1, [pc, #376]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	4956      	ldr	r1, [pc, #344]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aa2:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	494d      	ldr	r1, [pc, #308]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d028      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ac4:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad2:	4945      	ldr	r1, [pc, #276]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a3f      	ldr	r2, [pc, #252]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aee:	60d3      	str	r3, [r2, #12]
 8003af0:	e011      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003afa:	d10c      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f872 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d028      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b22:	4b31      	ldr	r3, [pc, #196]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b30:	492d      	ldr	r1, [pc, #180]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b40:	d106      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b42:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4c:	60d3      	str	r3, [r2, #12]
 8003b4e:	e011      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f843 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003b66:	4603      	mov	r3, r0
 8003b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01c      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8e:	4916      	ldr	r1, [pc, #88]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b9e:	d10c      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f820 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	4904      	ldr	r1, [pc, #16]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000

08003bec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bfa:	4b74      	ldr	r3, [pc, #464]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d018      	beq.n	8003c38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c06:	4b71      	ldr	r3, [pc, #452]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0203 	and.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d10d      	bne.n	8003c32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
       ||
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c1e:	4b6b      	ldr	r3, [pc, #428]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d047      	beq.n	8003cc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	e044      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d018      	beq.n	8003c72 <RCCEx_PLLSAI1_Config+0x86>
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d825      	bhi.n	8003c90 <RCCEx_PLLSAI1_Config+0xa4>
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d002      	beq.n	8003c4e <RCCEx_PLLSAI1_Config+0x62>
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d009      	beq.n	8003c60 <RCCEx_PLLSAI1_Config+0x74>
 8003c4c:	e020      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d11d      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5e:	e01a      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c60:	4b5a      	ldr	r3, [pc, #360]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d116      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c70:	e013      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c72:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10f      	bne.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c7e:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c8e:	e006      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
      break;
 8003c94:	e004      	b.n	8003ca0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c96:	bf00      	nop
 8003c98:	e002      	b.n	8003ca0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10d      	bne.n	8003cc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ca6:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	4943      	ldr	r1, [pc, #268]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d17c      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cc8:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3f      	ldr	r2, [pc, #252]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd4:	f7fd fa3e 	bl	8001154 <HAL_GetTick>
 8003cd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cda:	e009      	b.n	8003cf0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cdc:	f7fd fa3a 	bl	8001154 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d902      	bls.n	8003cf0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	73fb      	strb	r3, [r7, #15]
        break;
 8003cee:	e005      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ef      	bne.n	8003cdc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d15f      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d110      	bne.n	8003d2a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d08:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6892      	ldr	r2, [r2, #8]
 8003d18:	0211      	lsls	r1, r2, #8
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68d2      	ldr	r2, [r2, #12]
 8003d1e:	06d2      	lsls	r2, r2, #27
 8003d20:	430a      	orrs	r2, r1
 8003d22:	492a      	ldr	r1, [pc, #168]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	610b      	str	r3, [r1, #16]
 8003d28:	e027      	b.n	8003d7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d112      	bne.n	8003d56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6892      	ldr	r2, [r2, #8]
 8003d40:	0211      	lsls	r1, r2, #8
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6912      	ldr	r2, [r2, #16]
 8003d46:	0852      	lsrs	r2, r2, #1
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	0552      	lsls	r2, r2, #21
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	491f      	ldr	r1, [pc, #124]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	610b      	str	r3, [r1, #16]
 8003d54:	e011      	b.n	8003d7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6892      	ldr	r2, [r2, #8]
 8003d66:	0211      	lsls	r1, r2, #8
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6952      	ldr	r2, [r2, #20]
 8003d6c:	0852      	lsrs	r2, r2, #1
 8003d6e:	3a01      	subs	r2, #1
 8003d70:	0652      	lsls	r2, r2, #25
 8003d72:	430a      	orrs	r2, r1
 8003d74:	4915      	ldr	r1, [pc, #84]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd f9e5 	bl	8001154 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d8c:	e009      	b.n	8003da2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8e:	f7fd f9e1 	bl	8001154 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d902      	bls.n	8003da2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	73fb      	strb	r3, [r7, #15]
          break;
 8003da0:	e005      	b.n	8003dae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ef      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e049      	b.n	8003e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc ff92 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 fc10 	bl	8004634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e03b      	b.n	8003f10 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a19      	ldr	r2, [pc, #100]	; (8003f1c <HAL_TIM_Base_Start_IT+0x9c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x4e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec2:	d004      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x4e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <HAL_TIM_Base_Start_IT+0xa0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d115      	bne.n	8003efa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <HAL_TIM_Base_Start_IT+0xa4>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d015      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x8c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee6:	d011      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	e008      	b.n	8003f0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e000      	b.n	8003f0e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40014000 	.word	0x40014000
 8003f24:	00010007 	.word	0x00010007

08003f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e049      	b.n	8003fce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f841 	bl	8003fd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 fb64 	bl	8004634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d122      	bne.n	8004046 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d11b      	bne.n	8004046 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f06f 0202 	mvn.w	r2, #2
 8004016:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fae2 	bl	80045f6 <HAL_TIM_IC_CaptureCallback>
 8004032:	e005      	b.n	8004040 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fad4 	bl	80045e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fae5 	bl	800460a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b04      	cmp	r3, #4
 8004052:	d122      	bne.n	800409a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d11b      	bne.n	800409a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f06f 0204 	mvn.w	r2, #4
 800406a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fab8 	bl	80045f6 <HAL_TIM_IC_CaptureCallback>
 8004086:	e005      	b.n	8004094 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 faaa 	bl	80045e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fabb 	bl	800460a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d122      	bne.n	80040ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d11b      	bne.n	80040ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f06f 0208 	mvn.w	r2, #8
 80040be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2204      	movs	r2, #4
 80040c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fa8e 	bl	80045f6 <HAL_TIM_IC_CaptureCallback>
 80040da:	e005      	b.n	80040e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fa80 	bl	80045e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fa91 	bl	800460a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d122      	bne.n	8004142 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b10      	cmp	r3, #16
 8004108:	d11b      	bne.n	8004142 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0210 	mvn.w	r2, #16
 8004112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2208      	movs	r2, #8
 8004118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fa64 	bl	80045f6 <HAL_TIM_IC_CaptureCallback>
 800412e:	e005      	b.n	800413c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fa56 	bl	80045e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa67 	bl	800460a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d10e      	bne.n	800416e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0201 	mvn.w	r2, #1
 8004166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7fc fcdf 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004178:	2b80      	cmp	r3, #128	; 0x80
 800417a:	d10e      	bne.n	800419a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d107      	bne.n	800419a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 feb1 	bl	8004efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a8:	d10e      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fea4 	bl	8004f10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa15 	bl	800461e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b20      	cmp	r3, #32
 800420e:	d107      	bne.n	8004220 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0220 	mvn.w	r2, #32
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fe64 	bl	8004ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004242:	2302      	movs	r3, #2
 8004244:	e0ff      	b.n	8004446 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b14      	cmp	r3, #20
 8004252:	f200 80f0 	bhi.w	8004436 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004256:	a201      	add	r2, pc, #4	; (adr r2, 800425c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	080042b1 	.word	0x080042b1
 8004260:	08004437 	.word	0x08004437
 8004264:	08004437 	.word	0x08004437
 8004268:	08004437 	.word	0x08004437
 800426c:	080042f1 	.word	0x080042f1
 8004270:	08004437 	.word	0x08004437
 8004274:	08004437 	.word	0x08004437
 8004278:	08004437 	.word	0x08004437
 800427c:	08004333 	.word	0x08004333
 8004280:	08004437 	.word	0x08004437
 8004284:	08004437 	.word	0x08004437
 8004288:	08004437 	.word	0x08004437
 800428c:	08004373 	.word	0x08004373
 8004290:	08004437 	.word	0x08004437
 8004294:	08004437 	.word	0x08004437
 8004298:	08004437 	.word	0x08004437
 800429c:	080043b5 	.word	0x080043b5
 80042a0:	08004437 	.word	0x08004437
 80042a4:	08004437 	.word	0x08004437
 80042a8:	08004437 	.word	0x08004437
 80042ac:	080043f5 	.word	0x080043f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fa20 	bl	80046fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0204 	bic.w	r2, r2, #4
 80042da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6999      	ldr	r1, [r3, #24]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	619a      	str	r2, [r3, #24]
      break;
 80042ee:	e0a5      	b.n	800443c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fa7c 	bl	80047f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6999      	ldr	r1, [r3, #24]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	619a      	str	r2, [r3, #24]
      break;
 8004330:	e084      	b.n	800443c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fad5 	bl	80048e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0208 	orr.w	r2, r2, #8
 800434c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69da      	ldr	r2, [r3, #28]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0204 	bic.w	r2, r2, #4
 800435c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69d9      	ldr	r1, [r3, #28]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	61da      	str	r2, [r3, #28]
      break;
 8004370:	e064      	b.n	800443c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fb2d 	bl	80049d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69d9      	ldr	r1, [r3, #28]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	021a      	lsls	r2, r3, #8
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	61da      	str	r2, [r3, #28]
      break;
 80043b2:	e043      	b.n	800443c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fb6a 	bl	8004a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0208 	orr.w	r2, r2, #8
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0204 	bic.w	r2, r2, #4
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043f2:	e023      	b.n	800443c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fba2 	bl	8004b44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800440e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	021a      	lsls	r2, r3, #8
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004434:	e002      	b.n	800443c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
      break;
 800443a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop

08004450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIM_ConfigClockSource+0x1c>
 8004468:	2302      	movs	r3, #2
 800446a:	e0b6      	b.n	80045da <HAL_TIM_ConfigClockSource+0x18a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800448e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a8:	d03e      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0xd8>
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ae:	f200 8087 	bhi.w	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b6:	f000 8086 	beq.w	80045c6 <HAL_TIM_ConfigClockSource+0x176>
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	d87f      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044c0:	2b70      	cmp	r3, #112	; 0x70
 80044c2:	d01a      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0xaa>
 80044c4:	2b70      	cmp	r3, #112	; 0x70
 80044c6:	d87b      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044c8:	2b60      	cmp	r3, #96	; 0x60
 80044ca:	d050      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x11e>
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d877      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044d0:	2b50      	cmp	r3, #80	; 0x50
 80044d2:	d03c      	beq.n	800454e <HAL_TIM_ConfigClockSource+0xfe>
 80044d4:	2b50      	cmp	r3, #80	; 0x50
 80044d6:	d873      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d058      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x13e>
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d86f      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044e0:	2b30      	cmp	r3, #48	; 0x30
 80044e2:	d064      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x15e>
 80044e4:	2b30      	cmp	r3, #48	; 0x30
 80044e6:	d86b      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d060      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x15e>
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d867      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d05c      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x15e>
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d05a      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x15e>
 80044f8:	e062      	b.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6899      	ldr	r1, [r3, #8]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f000 fbef 	bl	8004cec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800451c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	609a      	str	r2, [r3, #8]
      break;
 8004526:	e04f      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6899      	ldr	r1, [r3, #8]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f000 fbd8 	bl	8004cec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800454a:	609a      	str	r2, [r3, #8]
      break;
 800454c:	e03c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	f000 fb4c 	bl	8004bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2150      	movs	r1, #80	; 0x50
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fba5 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 800456c:	e02c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6859      	ldr	r1, [r3, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	461a      	mov	r2, r3
 800457c:	f000 fb6b 	bl	8004c56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2160      	movs	r1, #96	; 0x60
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb95 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 800458c:	e01c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	461a      	mov	r2, r3
 800459c:	f000 fb2c 	bl	8004bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2140      	movs	r1, #64	; 0x40
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fb85 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 80045ac:	e00c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f000 fb7c 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 80045be:	e003      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      break;
 80045c4:	e000      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <TIM_Base_SetConfig+0xbc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_Base_SetConfig+0x20>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004652:	d108      	bne.n	8004666 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <TIM_Base_SetConfig+0xbc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_Base_SetConfig+0x52>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d007      	beq.n	8004686 <TIM_Base_SetConfig+0x52>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <TIM_Base_SetConfig+0xc0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0x52>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <TIM_Base_SetConfig+0xc4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <TIM_Base_SetConfig+0xbc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_Base_SetConfig+0xa0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <TIM_Base_SetConfig+0xc0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0xa0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <TIM_Base_SetConfig+0xc4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d103      	bne.n	80046dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	615a      	str	r2, [r3, #20]
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400

080046fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 0302 	bic.w	r3, r3, #2
 8004748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a24      	ldr	r2, [pc, #144]	; (80047e8 <TIM_OC1_SetConfig+0xec>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <TIM_OC1_SetConfig+0x70>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a23      	ldr	r2, [pc, #140]	; (80047ec <TIM_OC1_SetConfig+0xf0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_OC1_SetConfig+0x70>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <TIM_OC1_SetConfig+0xf4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d10c      	bne.n	8004786 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0308 	bic.w	r3, r3, #8
 8004772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f023 0304 	bic.w	r3, r3, #4
 8004784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <TIM_OC1_SetConfig+0xec>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d007      	beq.n	800479e <TIM_OC1_SetConfig+0xa2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <TIM_OC1_SetConfig+0xf0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_OC1_SetConfig+0xa2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <TIM_OC1_SetConfig+0xf4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d111      	bne.n	80047c2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40014400 	.word	0x40014400

080047f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f023 0210 	bic.w	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 0320 	bic.w	r3, r3, #32
 8004842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a22      	ldr	r2, [pc, #136]	; (80048dc <TIM_OC2_SetConfig+0xe8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d10d      	bne.n	8004874 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800485e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a19      	ldr	r2, [pc, #100]	; (80048dc <TIM_OC2_SetConfig+0xe8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_OC2_SetConfig+0x98>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a18      	ldr	r2, [pc, #96]	; (80048e0 <TIM_OC2_SetConfig+0xec>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC2_SetConfig+0x98>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a17      	ldr	r2, [pc, #92]	; (80048e4 <TIM_OC2_SetConfig+0xf0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d113      	bne.n	80048b4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400

080048e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a21      	ldr	r2, [pc, #132]	; (80049cc <TIM_OC3_SetConfig+0xe4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d10d      	bne.n	8004966 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a18      	ldr	r2, [pc, #96]	; (80049cc <TIM_OC3_SetConfig+0xe4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_OC3_SetConfig+0x96>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <TIM_OC3_SetConfig+0xe8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_OC3_SetConfig+0x96>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <TIM_OC3_SetConfig+0xec>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d113      	bne.n	80049a6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800498c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	621a      	str	r2, [r3, #32]
}
 80049c0:	bf00      	nop
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400

080049d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	031b      	lsls	r3, r3, #12
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <TIM_OC4_SetConfig+0xb0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_OC4_SetConfig+0x74>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <TIM_OC4_SetConfig+0xb4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_OC4_SetConfig+0x74>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <TIM_OC4_SetConfig+0xb8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d109      	bne.n	8004a60 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40014400 	.word	0x40014400

08004a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ad8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <TIM_OC5_SetConfig+0xa4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <TIM_OC5_SetConfig+0x6a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <TIM_OC5_SetConfig+0xa8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_OC5_SetConfig+0x6a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <TIM_OC5_SetConfig+0xac>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d109      	bne.n	8004b12 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	621a      	str	r2, [r3, #32]
}
 8004b2c:	bf00      	nop
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40014400 	.word	0x40014400

08004b44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	051b      	lsls	r3, r3, #20
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a14      	ldr	r2, [pc, #80]	; (8004bec <TIM_OC6_SetConfig+0xa8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_OC6_SetConfig+0x6c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <TIM_OC6_SetConfig+0xac>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC6_SetConfig+0x6c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <TIM_OC6_SetConfig+0xb0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d109      	bne.n	8004bc4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	029b      	lsls	r3, r3, #10
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400

08004bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f023 0201 	bic.w	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f023 030a 	bic.w	r3, r3, #10
 8004c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b087      	sub	sp, #28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f023 0210 	bic.w	r2, r3, #16
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	031b      	lsls	r3, r3, #12
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f043 0307 	orr.w	r3, r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	609a      	str	r2, [r3, #8]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e04f      	b.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dac:	d004      	beq.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d10c      	bne.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40014000 	.word	0x40014000

08004df8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e060      	b.n	8004ed6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d115      	bne.n	8004ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	051b      	lsls	r3, r3, #20
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00

08004ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e040      	b.n	8004fb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fb ff96 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2224      	movs	r2, #36	; 0x24
 8004f50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f82c 	bl	8004fc0 <UART_SetConfig>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e022      	b.n	8004fb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa7a 	bl	8005474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb01 	bl	80055b8 <UART_CheckIdleState>
 8004fb6:	4603      	mov	r3, r0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc4:	b08a      	sub	sp, #40	; 0x28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b9e      	ldr	r3, [pc, #632]	; (8005268 <UART_SetConfig+0x2a8>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a93      	ldr	r2, [pc, #588]	; (800526c <UART_SetConfig+0x2ac>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005028:	4313      	orrs	r3, r2
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a8a      	ldr	r2, [pc, #552]	; (8005270 <UART_SetConfig+0x2b0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d126      	bne.n	8005098 <UART_SetConfig+0xd8>
 800504a:	4b8a      	ldr	r3, [pc, #552]	; (8005274 <UART_SetConfig+0x2b4>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b03      	cmp	r3, #3
 8005056:	d81b      	bhi.n	8005090 <UART_SetConfig+0xd0>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0xa0>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005071 	.word	0x08005071
 8005064:	08005081 	.word	0x08005081
 8005068:	08005079 	.word	0x08005079
 800506c:	08005089 	.word	0x08005089
 8005070:	2301      	movs	r3, #1
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005076:	e0ab      	b.n	80051d0 <UART_SetConfig+0x210>
 8005078:	2302      	movs	r3, #2
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507e:	e0a7      	b.n	80051d0 <UART_SetConfig+0x210>
 8005080:	2304      	movs	r3, #4
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005086:	e0a3      	b.n	80051d0 <UART_SetConfig+0x210>
 8005088:	2308      	movs	r3, #8
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508e:	e09f      	b.n	80051d0 <UART_SetConfig+0x210>
 8005090:	2310      	movs	r3, #16
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005096:	e09b      	b.n	80051d0 <UART_SetConfig+0x210>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a76      	ldr	r2, [pc, #472]	; (8005278 <UART_SetConfig+0x2b8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d138      	bne.n	8005114 <UART_SetConfig+0x154>
 80050a2:	4b74      	ldr	r3, [pc, #464]	; (8005274 <UART_SetConfig+0x2b4>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d82d      	bhi.n	800510c <UART_SetConfig+0x14c>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0xf8>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050ed 	.word	0x080050ed
 80050bc:	0800510d 	.word	0x0800510d
 80050c0:	0800510d 	.word	0x0800510d
 80050c4:	0800510d 	.word	0x0800510d
 80050c8:	080050fd 	.word	0x080050fd
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	0800510d 	.word	0x0800510d
 80050d4:	0800510d 	.word	0x0800510d
 80050d8:	080050f5 	.word	0x080050f5
 80050dc:	0800510d 	.word	0x0800510d
 80050e0:	0800510d 	.word	0x0800510d
 80050e4:	0800510d 	.word	0x0800510d
 80050e8:	08005105 	.word	0x08005105
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e06d      	b.n	80051d0 <UART_SetConfig+0x210>
 80050f4:	2302      	movs	r3, #2
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e069      	b.n	80051d0 <UART_SetConfig+0x210>
 80050fc:	2304      	movs	r3, #4
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	e065      	b.n	80051d0 <UART_SetConfig+0x210>
 8005104:	2308      	movs	r3, #8
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e061      	b.n	80051d0 <UART_SetConfig+0x210>
 800510c:	2310      	movs	r3, #16
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e05d      	b.n	80051d0 <UART_SetConfig+0x210>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a58      	ldr	r2, [pc, #352]	; (800527c <UART_SetConfig+0x2bc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d125      	bne.n	800516a <UART_SetConfig+0x1aa>
 800511e:	4b55      	ldr	r3, [pc, #340]	; (8005274 <UART_SetConfig+0x2b4>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005128:	2b30      	cmp	r3, #48	; 0x30
 800512a:	d016      	beq.n	800515a <UART_SetConfig+0x19a>
 800512c:	2b30      	cmp	r3, #48	; 0x30
 800512e:	d818      	bhi.n	8005162 <UART_SetConfig+0x1a2>
 8005130:	2b20      	cmp	r3, #32
 8005132:	d00a      	beq.n	800514a <UART_SetConfig+0x18a>
 8005134:	2b20      	cmp	r3, #32
 8005136:	d814      	bhi.n	8005162 <UART_SetConfig+0x1a2>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <UART_SetConfig+0x182>
 800513c:	2b10      	cmp	r3, #16
 800513e:	d008      	beq.n	8005152 <UART_SetConfig+0x192>
 8005140:	e00f      	b.n	8005162 <UART_SetConfig+0x1a2>
 8005142:	2300      	movs	r3, #0
 8005144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005148:	e042      	b.n	80051d0 <UART_SetConfig+0x210>
 800514a:	2302      	movs	r3, #2
 800514c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005150:	e03e      	b.n	80051d0 <UART_SetConfig+0x210>
 8005152:	2304      	movs	r3, #4
 8005154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005158:	e03a      	b.n	80051d0 <UART_SetConfig+0x210>
 800515a:	2308      	movs	r3, #8
 800515c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005160:	e036      	b.n	80051d0 <UART_SetConfig+0x210>
 8005162:	2310      	movs	r3, #16
 8005164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005168:	e032      	b.n	80051d0 <UART_SetConfig+0x210>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3f      	ldr	r2, [pc, #252]	; (800526c <UART_SetConfig+0x2ac>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d12a      	bne.n	80051ca <UART_SetConfig+0x20a>
 8005174:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <UART_SetConfig+0x2b4>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800517e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005182:	d01a      	beq.n	80051ba <UART_SetConfig+0x1fa>
 8005184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005188:	d81b      	bhi.n	80051c2 <UART_SetConfig+0x202>
 800518a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518e:	d00c      	beq.n	80051aa <UART_SetConfig+0x1ea>
 8005190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005194:	d815      	bhi.n	80051c2 <UART_SetConfig+0x202>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <UART_SetConfig+0x1e2>
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519e:	d008      	beq.n	80051b2 <UART_SetConfig+0x1f2>
 80051a0:	e00f      	b.n	80051c2 <UART_SetConfig+0x202>
 80051a2:	2300      	movs	r3, #0
 80051a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a8:	e012      	b.n	80051d0 <UART_SetConfig+0x210>
 80051aa:	2302      	movs	r3, #2
 80051ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b0:	e00e      	b.n	80051d0 <UART_SetConfig+0x210>
 80051b2:	2304      	movs	r3, #4
 80051b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b8:	e00a      	b.n	80051d0 <UART_SetConfig+0x210>
 80051ba:	2308      	movs	r3, #8
 80051bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c0:	e006      	b.n	80051d0 <UART_SetConfig+0x210>
 80051c2:	2310      	movs	r3, #16
 80051c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c8:	e002      	b.n	80051d0 <UART_SetConfig+0x210>
 80051ca:	2310      	movs	r3, #16
 80051cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a25      	ldr	r2, [pc, #148]	; (800526c <UART_SetConfig+0x2ac>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f040 808a 	bne.w	80052f0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d824      	bhi.n	800522e <UART_SetConfig+0x26e>
 80051e4:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0x22c>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005211 	.word	0x08005211
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	08005219 	.word	0x08005219
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800521f 	.word	0x0800521f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	0800522f 	.word	0x0800522f
 8005208:	0800522f 	.word	0x0800522f
 800520c:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7fe fa16 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b19      	ldr	r3, [pc, #100]	; (8005280 <UART_SetConfig+0x2c0>)
 800521a:	61fb      	str	r3, [r7, #28]
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fe f979 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8005222:	61f8      	str	r0, [r7, #28]
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	61fb      	str	r3, [r7, #28]
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8109 	beq.w	8005454 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	429a      	cmp	r2, r3
 8005250:	d305      	bcc.n	800525e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	429a      	cmp	r2, r3
 800525c:	d912      	bls.n	8005284 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005264:	e0f6      	b.n	8005454 <UART_SetConfig+0x494>
 8005266:	bf00      	nop
 8005268:	efff69f3 	.word	0xefff69f3
 800526c:	40008000 	.word	0x40008000
 8005270:	40013800 	.word	0x40013800
 8005274:	40021000 	.word	0x40021000
 8005278:	40004400 	.word	0x40004400
 800527c:	40004800 	.word	0x40004800
 8005280:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2200      	movs	r2, #0
 8005288:	461c      	mov	r4, r3
 800528a:	4615      	mov	r5, r2
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	022b      	lsls	r3, r5, #8
 8005296:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800529a:	0222      	lsls	r2, r4, #8
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	6849      	ldr	r1, [r1, #4]
 80052a0:	0849      	lsrs	r1, r1, #1
 80052a2:	2000      	movs	r0, #0
 80052a4:	4688      	mov	r8, r1
 80052a6:	4681      	mov	r9, r0
 80052a8:	eb12 0a08 	adds.w	sl, r2, r8
 80052ac:	eb43 0b09 	adc.w	fp, r3, r9
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052be:	4650      	mov	r0, sl
 80052c0:	4659      	mov	r1, fp
 80052c2:	f7fa ff85 	bl	80001d0 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4613      	mov	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d4:	d308      	bcc.n	80052e8 <UART_SetConfig+0x328>
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052dc:	d204      	bcs.n	80052e8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	e0b5      	b.n	8005454 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052ee:	e0b1      	b.n	8005454 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f8:	d15d      	bne.n	80053b6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80052fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d827      	bhi.n	8005352 <UART_SetConfig+0x392>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x348>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005335 	.word	0x08005335
 8005310:	0800533d 	.word	0x0800533d
 8005314:	08005353 	.word	0x08005353
 8005318:	08005343 	.word	0x08005343
 800531c:	08005353 	.word	0x08005353
 8005320:	08005353 	.word	0x08005353
 8005324:	08005353 	.word	0x08005353
 8005328:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fe f988 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005330:	61f8      	str	r0, [r7, #28]
        break;
 8005332:	e014      	b.n	800535e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fe f99a 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 8005338:	61f8      	str	r0, [r7, #28]
        break;
 800533a:	e010      	b.n	800535e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b4c      	ldr	r3, [pc, #304]	; (8005470 <UART_SetConfig+0x4b0>)
 800533e:	61fb      	str	r3, [r7, #28]
        break;
 8005340:	e00d      	b.n	800535e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7fe f8e7 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8005346:	61f8      	str	r0, [r7, #28]
        break;
 8005348:	e009      	b.n	800535e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	61fb      	str	r3, [r7, #28]
        break;
 8005350:	e005      	b.n	800535e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800535c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d077      	beq.n	8005454 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005a      	lsls	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	441a      	add	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b0f      	cmp	r3, #15
 800537e:	d916      	bls.n	80053ae <UART_SetConfig+0x3ee>
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005386:	d212      	bcs.n	80053ae <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	b29b      	uxth	r3, r3
 800538c:	f023 030f 	bic.w	r3, r3, #15
 8005390:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	b29b      	uxth	r3, r3
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	b29a      	uxth	r2, r3
 800539e:	8afb      	ldrh	r3, [r7, #22]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	8afa      	ldrh	r2, [r7, #22]
 80053aa:	60da      	str	r2, [r3, #12]
 80053ac:	e052      	b.n	8005454 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053b4:	e04e      	b.n	8005454 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d827      	bhi.n	800540e <UART_SetConfig+0x44e>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <UART_SetConfig+0x404>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	0800540f 	.word	0x0800540f
 80053d4:	080053ff 	.word	0x080053ff
 80053d8:	0800540f 	.word	0x0800540f
 80053dc:	0800540f 	.word	0x0800540f
 80053e0:	0800540f 	.word	0x0800540f
 80053e4:	08005407 	.word	0x08005407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e8:	f7fe f92a 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 80053ec:	61f8      	str	r0, [r7, #28]
        break;
 80053ee:	e014      	b.n	800541a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f0:	f7fe f93c 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 80053f4:	61f8      	str	r0, [r7, #28]
        break;
 80053f6:	e010      	b.n	800541a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f8:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <UART_SetConfig+0x4b0>)
 80053fa:	61fb      	str	r3, [r7, #28]
        break;
 80053fc:	e00d      	b.n	800541a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fe:	f7fe f889 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8005402:	61f8      	str	r0, [r7, #28]
        break;
 8005404:	e009      	b.n	800541a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540a:	61fb      	str	r3, [r7, #28]
        break;
 800540c:	e005      	b.n	800541a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005418:	bf00      	nop
    }

    if (pclk != 0U)
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d019      	beq.n	8005454 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	085a      	lsrs	r2, r3, #1
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	d909      	bls.n	800544e <UART_SetConfig+0x48e>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d205      	bcs.n	800544e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60da      	str	r2, [r3, #12]
 800544c:	e002      	b.n	8005454 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005460:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005464:	4618      	mov	r0, r3
 8005466:	3728      	adds	r7, #40	; 0x28
 8005468:	46bd      	mov	sp, r7
 800546a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800546e:	bf00      	nop
 8005470:	00f42400 	.word	0x00f42400

08005474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01a      	beq.n	800558a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005572:	d10a      	bne.n	800558a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
  }
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055c8:	f7fb fdc4 	bl	8001154 <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d10e      	bne.n	80055fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f82d 	bl	800564a <UART_WaitOnFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e023      	b.n	8005642 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b04      	cmp	r3, #4
 8005606:	d10e      	bne.n	8005626 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f817 	bl	800564a <UART_WaitOnFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e00d      	b.n	8005642 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b09c      	sub	sp, #112	; 0x70
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565a:	e0a5      	b.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005662:	f000 80a1 	beq.w	80057a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fb fd75 	bl	8001154 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <UART_WaitOnFlagUntilTimeout+0x32>
 8005676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005678:	2b00      	cmp	r3, #0
 800567a:	d13e      	bne.n	80056fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800568a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005690:	667b      	str	r3, [r7, #100]	; 0x64
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800569a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800569c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e6      	bne.n	800567c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	663b      	str	r3, [r7, #96]	; 0x60
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e067      	b.n	80057ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d04f      	beq.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005716:	d147      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005720:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005736:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
 8005742:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e6      	bne.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	613b      	str	r3, [r7, #16]
   return(result);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	66bb      	str	r3, [r7, #104]	; 0x68
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005774:	623a      	str	r2, [r7, #32]
 8005776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	69f9      	ldr	r1, [r7, #28]
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	61bb      	str	r3, [r7, #24]
   return(result);
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e5      	bne.n	8005754 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e010      	b.n	80057ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4013      	ands	r3, r2
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	f43f af4a 	beq.w	800565c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3770      	adds	r7, #112	; 0x70
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <__NVIC_SetPriority>:
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	db0a      	blt.n	80057fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	490c      	ldr	r1, [pc, #48]	; (8005820 <__NVIC_SetPriority+0x4c>)
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	440b      	add	r3, r1
 80057f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057fc:	e00a      	b.n	8005814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4908      	ldr	r1, [pc, #32]	; (8005824 <__NVIC_SetPriority+0x50>)
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	3b04      	subs	r3, #4
 800580c:	0112      	lsls	r2, r2, #4
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	440b      	add	r3, r1
 8005812:	761a      	strb	r2, [r3, #24]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000e100 	.word	0xe000e100
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <SysTick_Handler+0x1c>)
 800582e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005830:	f001 fc26 	bl	8007080 <xTaskGetSchedulerState>
 8005834:	4603      	mov	r3, r0
 8005836:	2b01      	cmp	r3, #1
 8005838:	d001      	beq.n	800583e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800583a:	f002 fa0d 	bl	8007c58 <xPortSysTickHandler>
  }
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	e000e010 	.word	0xe000e010

08005848 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800584c:	2100      	movs	r1, #0
 800584e:	f06f 0004 	mvn.w	r0, #4
 8005852:	f7ff ffbf 	bl	80057d4 <__NVIC_SetPriority>
#endif
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005862:	f3ef 8305 	mrs	r3, IPSR
 8005866:	603b      	str	r3, [r7, #0]
  return(result);
 8005868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800586e:	f06f 0305 	mvn.w	r3, #5
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	e00c      	b.n	8005890 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <osKernelInitialize+0x44>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <osKernelInitialize+0x44>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005884:	2300      	movs	r3, #0
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	e002      	b.n	8005890 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800588e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005890:	687b      	ldr	r3, [r7, #4]
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000288 	.word	0x20000288

080058a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058aa:	f3ef 8305 	mrs	r3, IPSR
 80058ae:	603b      	str	r3, [r7, #0]
  return(result);
 80058b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <osKernelStart+0x1a>
    stat = osErrorISR;
 80058b6:	f06f 0305 	mvn.w	r3, #5
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	e010      	b.n	80058e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <osKernelStart+0x48>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d109      	bne.n	80058da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058c6:	f7ff ffbf 	bl	8005848 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058ca:	4b08      	ldr	r3, [pc, #32]	; (80058ec <osKernelStart+0x48>)
 80058cc:	2202      	movs	r2, #2
 80058ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058d0:	f000 ff5c 	bl	800678c <vTaskStartScheduler>
      stat = osOK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	607b      	str	r3, [r7, #4]
 80058d8:	e002      	b.n	80058e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80058da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058e0:	687b      	ldr	r3, [r7, #4]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000288 	.word	0x20000288

080058f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a07      	ldr	r2, [pc, #28]	; (800591c <vApplicationGetIdleTaskMemory+0x2c>)
 8005900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a06      	ldr	r2, [pc, #24]	; (8005920 <vApplicationGetIdleTaskMemory+0x30>)
 8005906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	601a      	str	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	2000028c 	.word	0x2000028c
 8005920:	20000350 	.word	0x20000350

08005924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a07      	ldr	r2, [pc, #28]	; (8005950 <vApplicationGetTimerTaskMemory+0x2c>)
 8005934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a06      	ldr	r2, [pc, #24]	; (8005954 <vApplicationGetTimerTaskMemory+0x30>)
 800593a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005942:	601a      	str	r2, [r3, #0]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20000550 	.word	0x20000550
 8005954:	20000614 	.word	0x20000614

08005958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f103 0208 	add.w	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f103 0208 	add.w	r2, r3, #8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f103 0208 	add.w	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a10:	d103      	bne.n	8005a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e00c      	b.n	8005a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e002      	b.n	8005a28 <vListInsert+0x2e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d2f6      	bcs.n	8005a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6852      	ldr	r2, [r2, #4]
 8005a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d103      	bne.n	8005aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005aea:	f002 f823 	bl	8007b34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	441a      	add	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	68f9      	ldr	r1, [r7, #12]
 8005b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	22ff      	movs	r2, #255	; 0xff
 8005b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	22ff      	movs	r2, #255	; 0xff
 8005b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d114      	bne.n	8005b6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01a      	beq.n	8005b7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3310      	adds	r3, #16
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 f8d5 	bl	8006cfc <xTaskRemoveFromEventList>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d012      	beq.n	8005b7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <xQueueGenericReset+0xcc>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	e009      	b.n	8005b7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3310      	adds	r3, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fef2 	bl	8005958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff feed 	bl	8005958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b7e:	f002 f809 	bl	8007b94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b82:	2301      	movs	r3, #1
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	; 0x38
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <xQueueGenericCreateStatic+0x52>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <xQueueGenericCreateStatic+0x56>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <xQueueGenericCreateStatic+0x58>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	623b      	str	r3, [r7, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <xQueueGenericCreateStatic+0x7e>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <xQueueGenericCreateStatic+0x82>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <xQueueGenericCreateStatic+0x84>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	61fb      	str	r3, [r7, #28]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c2e:	2350      	movs	r3, #80	; 0x50
 8005c30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b50      	cmp	r3, #80	; 0x50
 8005c36:	d00a      	beq.n	8005c4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	61bb      	str	r3, [r7, #24]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00d      	beq.n	8005c76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f805 	bl	8005c80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3730      	adds	r7, #48	; 0x30
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e002      	b.n	8005ca2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cae:	2101      	movs	r1, #1
 8005cb0:	69b8      	ldr	r0, [r7, #24]
 8005cb2:	f7ff ff05 	bl	8005ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueGenericSend+0x32>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <xQueueGenericSend+0x40>
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <xQueueGenericSend+0x44>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <xQueueGenericSend+0x46>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <xQueueGenericSend+0x60>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d103      	bne.n	8005d36 <xQueueGenericSend+0x6e>
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <xQueueGenericSend+0x72>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <xQueueGenericSend+0x74>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <xQueueGenericSend+0x8e>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	623b      	str	r3, [r7, #32]
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d56:	f001 f993 	bl	8007080 <xTaskGetSchedulerState>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <xQueueGenericSend+0x9e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <xQueueGenericSend+0xa2>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xQueueGenericSend+0xa4>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueGenericSend+0xbe>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	61fb      	str	r3, [r7, #28]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d86:	f001 fed5 	bl	8007b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <xQueueGenericSend+0xd4>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d129      	bne.n	8005df0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005da2:	f000 fa0b 	bl	80061bc <prvCopyDataToQueue>
 8005da6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d010      	beq.n	8005dd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	3324      	adds	r3, #36	; 0x24
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 ffa1 	bl	8006cfc <xTaskRemoveFromEventList>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dc0:	4b3f      	ldr	r3, [pc, #252]	; (8005ec0 <xQueueGenericSend+0x1f8>)
 8005dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	e00a      	b.n	8005de8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005dd8:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <xQueueGenericSend+0x1f8>)
 8005dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005de8:	f001 fed4 	bl	8007b94 <vPortExitCritical>
				return pdPASS;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e063      	b.n	8005eb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005df6:	f001 fecd 	bl	8007b94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e05c      	b.n	8005eb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d106      	bne.n	8005e12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e04:	f107 0314 	add.w	r3, r7, #20
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 ffdb 	bl	8006dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e12:	f001 febf 	bl	8007b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e16:	f000 fd2b 	bl	8006870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e1a:	f001 fe8b 	bl	8007b34 <vPortEnterCritical>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e24:	b25b      	sxtb	r3, r3
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e2a:	d103      	bne.n	8005e34 <xQueueGenericSend+0x16c>
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e3a:	b25b      	sxtb	r3, r3
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e40:	d103      	bne.n	8005e4a <xQueueGenericSend+0x182>
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e4a:	f001 fea3 	bl	8007b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e4e:	1d3a      	adds	r2, r7, #4
 8005e50:	f107 0314 	add.w	r3, r7, #20
 8005e54:	4611      	mov	r1, r2
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 ffca 	bl	8006df0 <xTaskCheckForTimeOut>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d124      	bne.n	8005eac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e64:	f000 faa2 	bl	80063ac <prvIsQueueFull>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d018      	beq.n	8005ea0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	3310      	adds	r3, #16
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fef0 	bl	8006c5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e7e:	f000 fa2d 	bl	80062dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e82:	f000 fd03 	bl	800688c <xTaskResumeAll>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f47f af7c 	bne.w	8005d86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <xQueueGenericSend+0x1f8>)
 8005e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	e772      	b.n	8005d86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ea2:	f000 fa1b 	bl	80062dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ea6:	f000 fcf1 	bl	800688c <xTaskResumeAll>
 8005eaa:	e76c      	b.n	8005d86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eae:	f000 fa15 	bl	80062dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eb2:	f000 fceb 	bl	800688c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005eb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3738      	adds	r7, #56	; 0x38
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	e000ed04 	.word	0xe000ed04

08005ec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b090      	sub	sp, #64	; 0x40
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d103      	bne.n	8005f00 <xQueueGenericSendFromISR+0x3c>
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <xQueueGenericSendFromISR+0x40>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <xQueueGenericSendFromISR+0x42>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d103      	bne.n	8005f2e <xQueueGenericSendFromISR+0x6a>
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <xQueueGenericSendFromISR+0x6e>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericSendFromISR+0x70>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	623b      	str	r3, [r7, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f4e:	f001 fed3 	bl	8007cf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f52:	f3ef 8211 	mrs	r2, BASEPRI
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	61fa      	str	r2, [r7, #28]
 8005f68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d302      	bcc.n	8005f80 <xQueueGenericSendFromISR+0xbc>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d12f      	bne.n	8005fe0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f96:	f000 f911 	bl	80061bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa2:	d112      	bne.n	8005fca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d016      	beq.n	8005fda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	3324      	adds	r3, #36	; 0x24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fea3 	bl	8006cfc <xTaskRemoveFromEventList>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00e      	beq.n	8005fda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	e007      	b.n	8005fda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fce:	3301      	adds	r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	b25a      	sxtb	r2, r3
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005fde:	e001      	b.n	8005fe4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3740      	adds	r7, #64	; 0x40
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08c      	sub	sp, #48	; 0x30
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <xQueueReceive+0x30>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	623b      	str	r3, [r7, #32]
}
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <xQueueReceive+0x3e>
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <xQueueReceive+0x42>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <xQueueReceive+0x44>
 800603e:	2300      	movs	r3, #0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xQueueReceive+0x5e>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	61fb      	str	r3, [r7, #28]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800605a:	f001 f811 	bl	8007080 <xTaskGetSchedulerState>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <xQueueReceive+0x6e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <xQueueReceive+0x72>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <xQueueReceive+0x74>
 800606e:	2300      	movs	r3, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <xQueueReceive+0x8e>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	61bb      	str	r3, [r7, #24]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800608a:	f001 fd53 	bl	8007b34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01f      	beq.n	80060da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609e:	f000 f8f7 	bl	8006290 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00f      	beq.n	80060d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	3310      	adds	r3, #16
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fe20 	bl	8006cfc <xTaskRemoveFromEventList>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060c2:	4b3d      	ldr	r3, [pc, #244]	; (80061b8 <xQueueReceive+0x1bc>)
 80060c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060d2:	f001 fd5f 	bl	8007b94 <vPortExitCritical>
				return pdPASS;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e069      	b.n	80061ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060e0:	f001 fd58 	bl	8007b94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e062      	b.n	80061ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060ee:	f107 0310 	add.w	r3, r7, #16
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fe66 	bl	8006dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060fc:	f001 fd4a 	bl	8007b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006100:	f000 fbb6 	bl	8006870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006104:	f001 fd16 	bl	8007b34 <vPortEnterCritical>
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800610e:	b25b      	sxtb	r3, r3
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006114:	d103      	bne.n	800611e <xQueueReceive+0x122>
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006124:	b25b      	sxtb	r3, r3
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800612a:	d103      	bne.n	8006134 <xQueueReceive+0x138>
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006134:	f001 fd2e 	bl	8007b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006138:	1d3a      	adds	r2, r7, #4
 800613a:	f107 0310 	add.w	r3, r7, #16
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fe55 	bl	8006df0 <xTaskCheckForTimeOut>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d123      	bne.n	8006194 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800614c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614e:	f000 f917 	bl	8006380 <prvIsQueueEmpty>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d017      	beq.n	8006188 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	3324      	adds	r3, #36	; 0x24
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	4611      	mov	r1, r2
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fd7b 	bl	8006c5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006168:	f000 f8b8 	bl	80062dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800616c:	f000 fb8e 	bl	800688c <xTaskResumeAll>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d189      	bne.n	800608a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006176:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <xQueueReceive+0x1bc>)
 8006178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	e780      	b.n	800608a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618a:	f000 f8a7 	bl	80062dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800618e:	f000 fb7d 	bl	800688c <xTaskResumeAll>
 8006192:	e77a      	b.n	800608a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006196:	f000 f8a1 	bl	80062dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800619a:	f000 fb77 	bl	800688c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800619e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a0:	f000 f8ee 	bl	8006380 <prvIsQueueEmpty>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f43f af6f 	beq.w	800608a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3730      	adds	r7, #48	; 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10d      	bne.n	80061f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d14d      	bne.n	800627e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 ff68 	bl	80070bc <xTaskPriorityDisinherit>
 80061ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	609a      	str	r2, [r3, #8]
 80061f4:	e043      	b.n	800627e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d119      	bne.n	8006230 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6858      	ldr	r0, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	461a      	mov	r2, r3
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	f001 fe98 	bl	8007f3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	441a      	add	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	429a      	cmp	r2, r3
 8006224:	d32b      	bcc.n	800627e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	e026      	b.n	800627e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68d8      	ldr	r0, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	461a      	mov	r2, r3
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	f001 fe7e 	bl	8007f3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	425b      	negs	r3, r3
 800624a:	441a      	add	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d207      	bcs.n	800626c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	425b      	negs	r3, r3
 8006266:	441a      	add	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d105      	bne.n	800627e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	3b01      	subs	r3, #1
 800627c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006286:	697b      	ldr	r3, [r7, #20]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d018      	beq.n	80062d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	441a      	add	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d303      	bcc.n	80062c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68d9      	ldr	r1, [r3, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	461a      	mov	r2, r3
 80062ce:	6838      	ldr	r0, [r7, #0]
 80062d0:	f001 fe34 	bl	8007f3c <memcpy>
	}
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062e4:	f001 fc26 	bl	8007b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062f0:	e011      	b.n	8006316 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d012      	beq.n	8006320 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3324      	adds	r3, #36	; 0x24
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fcfc 	bl	8006cfc <xTaskRemoveFromEventList>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800630a:	f000 fdd3 	bl	8006eb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	3b01      	subs	r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800631a:	2b00      	cmp	r3, #0
 800631c:	dce9      	bgt.n	80062f2 <prvUnlockQueue+0x16>
 800631e:	e000      	b.n	8006322 <prvUnlockQueue+0x46>
					break;
 8006320:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800632a:	f001 fc33 	bl	8007b94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800632e:	f001 fc01 	bl	8007b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006338:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800633a:	e011      	b.n	8006360 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d012      	beq.n	800636a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3310      	adds	r3, #16
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fcd7 	bl	8006cfc <xTaskRemoveFromEventList>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006354:	f000 fdae 	bl	8006eb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	3b01      	subs	r3, #1
 800635c:	b2db      	uxtb	r3, r3
 800635e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dce9      	bgt.n	800633c <prvUnlockQueue+0x60>
 8006368:	e000      	b.n	800636c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800636a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	22ff      	movs	r2, #255	; 0xff
 8006370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006374:	f001 fc0e 	bl	8007b94 <vPortExitCritical>
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006388:	f001 fbd4 	bl	8007b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006394:	2301      	movs	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e001      	b.n	800639e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800639e:	f001 fbf9 	bl	8007b94 <vPortExitCritical>

	return xReturn;
 80063a2:	68fb      	ldr	r3, [r7, #12]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063b4:	f001 fbbe 	bl	8007b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d102      	bne.n	80063ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e001      	b.n	80063ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ce:	f001 fbe1 	bl	8007b94 <vPortExitCritical>

	return xReturn;
 80063d2:	68fb      	ldr	r3, [r7, #12]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	e014      	b.n	8006416 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063ec:	4a0f      	ldr	r2, [pc, #60]	; (800642c <vQueueAddToRegistry+0x50>)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063f8:	490c      	ldr	r1, [pc, #48]	; (800642c <vQueueAddToRegistry+0x50>)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006402:	4a0a      	ldr	r2, [pc, #40]	; (800642c <vQueueAddToRegistry+0x50>)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	4413      	add	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800640e:	e006      	b.n	800641e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b07      	cmp	r3, #7
 800641a:	d9e7      	bls.n	80063ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000a14 	.word	0x20000a14

08006430 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006440:	f001 fb78 	bl	8007b34 <vPortEnterCritical>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800644a:	b25b      	sxtb	r3, r3
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006450:	d103      	bne.n	800645a <vQueueWaitForMessageRestricted+0x2a>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006460:	b25b      	sxtb	r3, r3
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006466:	d103      	bne.n	8006470 <vQueueWaitForMessageRestricted+0x40>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006470:	f001 fb90 	bl	8007b94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	3324      	adds	r3, #36	; 0x24
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fc0d 	bl	8006ca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800648a:	6978      	ldr	r0, [r7, #20]
 800648c:	f7ff ff26 	bl	80062dc <prvUnlockQueue>
	}
 8006490:	bf00      	nop
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08e      	sub	sp, #56	; 0x38
 800649c:	af04      	add	r7, sp, #16
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	623b      	str	r3, [r7, #32]
}
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <xTaskCreateStatic+0x46>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	61fb      	str	r3, [r7, #28]
}
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064de:	23c4      	movs	r3, #196	; 0xc4
 80064e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2bc4      	cmp	r3, #196	; 0xc4
 80064e6:	d00a      	beq.n	80064fe <xTaskCreateStatic+0x66>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	61bb      	str	r3, [r7, #24]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01e      	beq.n	8006544 <xTaskCreateStatic+0xac>
 8006506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006514:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	2202      	movs	r2, #2
 800651a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800651e:	2300      	movs	r3, #0
 8006520:	9303      	str	r3, [sp, #12]
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	9302      	str	r3, [sp, #8]
 8006526:	f107 0314 	add.w	r3, r7, #20
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f80c 	bl	8006554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800653c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800653e:	f000 f8b5 	bl	80066ac <prvAddNewTaskToReadyList>
 8006542:	e001      	b.n	8006548 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006548:	697b      	ldr	r3, [r7, #20]
	}
 800654a:	4618      	mov	r0, r3
 800654c:	3728      	adds	r7, #40	; 0x28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	461a      	mov	r2, r3
 800656c:	21a5      	movs	r1, #165	; 0xa5
 800656e:	f001 fcf3 	bl	8007f58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800657c:	3b01      	subs	r3, #1
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f023 0307 	bic.w	r3, r3, #7
 800658a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	617b      	str	r3, [r7, #20]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01f      	beq.n	80065f8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065b8:	2300      	movs	r3, #0
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	e012      	b.n	80065e4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	7819      	ldrb	r1, [r3, #0]
 80065c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	3334      	adds	r3, #52	; 0x34
 80065ce:	460a      	mov	r2, r1
 80065d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d006      	beq.n	80065ec <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3301      	adds	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d9e9      	bls.n	80065be <prvInitialiseNewTask+0x6a>
 80065ea:	e000      	b.n	80065ee <prvInitialiseNewTask+0x9a>
			{
				break;
 80065ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065f6:	e003      	b.n	8006600 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	2b37      	cmp	r3, #55	; 0x37
 8006604:	d901      	bls.n	800660a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006606:	2337      	movs	r3, #55	; 0x37
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006614:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	2200      	movs	r2, #0
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	3304      	adds	r3, #4
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff f9b9 	bl	8005998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	3318      	adds	r3, #24
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff f9b4 	bl	8005998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006644:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2200      	movs	r2, #0
 800664a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	2200      	movs	r2, #0
 8006658:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	335c      	adds	r3, #92	; 0x5c
 8006660:	2260      	movs	r2, #96	; 0x60
 8006662:	2100      	movs	r1, #0
 8006664:	4618      	mov	r0, r3
 8006666:	f001 fc77 	bl	8007f58 <memset>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	4a0c      	ldr	r2, [pc, #48]	; (80066a0 <prvInitialiseNewTask+0x14c>)
 800666e:	661a      	str	r2, [r3, #96]	; 0x60
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	4a0c      	ldr	r2, [pc, #48]	; (80066a4 <prvInitialiseNewTask+0x150>)
 8006674:	665a      	str	r2, [r3, #100]	; 0x64
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <prvInitialiseNewTask+0x154>)
 800667a:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	69b8      	ldr	r0, [r7, #24]
 8006682:	f001 f92b 	bl	80078dc <pxPortInitialiseStack>
 8006686:	4602      	mov	r2, r0
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006696:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006698:	bf00      	nop
 800669a:	3720      	adds	r7, #32
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	080081ac 	.word	0x080081ac
 80066a4:	080081cc 	.word	0x080081cc
 80066a8:	0800818c 	.word	0x0800818c

080066ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066b4:	f001 fa3e 	bl	8007b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066b8:	4b2d      	ldr	r3, [pc, #180]	; (8006770 <prvAddNewTaskToReadyList+0xc4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	4a2c      	ldr	r2, [pc, #176]	; (8006770 <prvAddNewTaskToReadyList+0xc4>)
 80066c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066c2:	4b2c      	ldr	r3, [pc, #176]	; (8006774 <prvAddNewTaskToReadyList+0xc8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066ca:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <prvAddNewTaskToReadyList+0xc8>)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066d0:	4b27      	ldr	r3, [pc, #156]	; (8006770 <prvAddNewTaskToReadyList+0xc4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d110      	bne.n	80066fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066d8:	f000 fc10 	bl	8006efc <prvInitialiseTaskLists>
 80066dc:	e00d      	b.n	80066fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066de:	4b26      	ldr	r3, [pc, #152]	; (8006778 <prvAddNewTaskToReadyList+0xcc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066e6:	4b23      	ldr	r3, [pc, #140]	; (8006774 <prvAddNewTaskToReadyList+0xc8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d802      	bhi.n	80066fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066f4:	4a1f      	ldr	r2, [pc, #124]	; (8006774 <prvAddNewTaskToReadyList+0xc8>)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066fa:	4b20      	ldr	r3, [pc, #128]	; (800677c <prvAddNewTaskToReadyList+0xd0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3301      	adds	r3, #1
 8006700:	4a1e      	ldr	r2, [pc, #120]	; (800677c <prvAddNewTaskToReadyList+0xd0>)
 8006702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006704:	4b1d      	ldr	r3, [pc, #116]	; (800677c <prvAddNewTaskToReadyList+0xd0>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4b1b      	ldr	r3, [pc, #108]	; (8006780 <prvAddNewTaskToReadyList+0xd4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d903      	bls.n	8006720 <prvAddNewTaskToReadyList+0x74>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	4a18      	ldr	r2, [pc, #96]	; (8006780 <prvAddNewTaskToReadyList+0xd4>)
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4a15      	ldr	r2, [pc, #84]	; (8006784 <prvAddNewTaskToReadyList+0xd8>)
 800672e:	441a      	add	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7ff f93b 	bl	80059b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800673c:	f001 fa2a 	bl	8007b94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <prvAddNewTaskToReadyList+0xcc>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00e      	beq.n	8006766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <prvAddNewTaskToReadyList+0xc8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	429a      	cmp	r2, r3
 8006754:	d207      	bcs.n	8006766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <prvAddNewTaskToReadyList+0xdc>)
 8006758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000f28 	.word	0x20000f28
 8006774:	20000a54 	.word	0x20000a54
 8006778:	20000f34 	.word	0x20000f34
 800677c:	20000f44 	.word	0x20000f44
 8006780:	20000f30 	.word	0x20000f30
 8006784:	20000a58 	.word	0x20000a58
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	; 0x28
 8006790:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800679a:	463a      	mov	r2, r7
 800679c:	1d39      	adds	r1, r7, #4
 800679e:	f107 0308 	add.w	r3, r7, #8
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff f8a4 	bl	80058f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	9202      	str	r2, [sp, #8]
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	2300      	movs	r3, #0
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	2300      	movs	r3, #0
 80067b8:	460a      	mov	r2, r1
 80067ba:	4925      	ldr	r1, [pc, #148]	; (8006850 <vTaskStartScheduler+0xc4>)
 80067bc:	4825      	ldr	r0, [pc, #148]	; (8006854 <vTaskStartScheduler+0xc8>)
 80067be:	f7ff fe6b 	bl	8006498 <xTaskCreateStatic>
 80067c2:	4603      	mov	r3, r0
 80067c4:	4a24      	ldr	r2, [pc, #144]	; (8006858 <vTaskStartScheduler+0xcc>)
 80067c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067c8:	4b23      	ldr	r3, [pc, #140]	; (8006858 <vTaskStartScheduler+0xcc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067d0:	2301      	movs	r3, #1
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	e001      	b.n	80067da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d102      	bne.n	80067e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067e0:	f000 fd2e 	bl	8007240 <xTimerCreateTimerTask>
 80067e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d11d      	bne.n	8006828 <vTaskStartScheduler+0x9c>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	613b      	str	r3, [r7, #16]
}
 80067fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006800:	4b16      	ldr	r3, [pc, #88]	; (800685c <vTaskStartScheduler+0xd0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	335c      	adds	r3, #92	; 0x5c
 8006806:	4a16      	ldr	r2, [pc, #88]	; (8006860 <vTaskStartScheduler+0xd4>)
 8006808:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800680a:	4b16      	ldr	r3, [pc, #88]	; (8006864 <vTaskStartScheduler+0xd8>)
 800680c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <vTaskStartScheduler+0xdc>)
 8006814:	2201      	movs	r2, #1
 8006816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <vTaskStartScheduler+0xe0>)
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800681e:	f7f9 fe59 	bl	80004d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006822:	f001 f8e5 	bl	80079f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006826:	e00e      	b.n	8006846 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800682e:	d10a      	bne.n	8006846 <vTaskStartScheduler+0xba>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60fb      	str	r3, [r7, #12]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <vTaskStartScheduler+0xb8>
}
 8006846:	bf00      	nop
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	08008104 	.word	0x08008104
 8006854:	08006ecd 	.word	0x08006ecd
 8006858:	20000f4c 	.word	0x20000f4c
 800685c:	20000a54 	.word	0x20000a54
 8006860:	20000010 	.word	0x20000010
 8006864:	20000f48 	.word	0x20000f48
 8006868:	20000f34 	.word	0x20000f34
 800686c:	20000f2c 	.word	0x20000f2c

08006870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <vTaskSuspendAll+0x18>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	4a03      	ldr	r2, [pc, #12]	; (8006888 <vTaskSuspendAll+0x18>)
 800687c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800687e:	bf00      	nop
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20000f50 	.word	0x20000f50

0800688c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800689a:	4b42      	ldr	r3, [pc, #264]	; (80069a4 <xTaskResumeAll+0x118>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	603b      	str	r3, [r7, #0]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068b8:	f001 f93c 	bl	8007b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068bc:	4b39      	ldr	r3, [pc, #228]	; (80069a4 <xTaskResumeAll+0x118>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	4a38      	ldr	r2, [pc, #224]	; (80069a4 <xTaskResumeAll+0x118>)
 80068c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c6:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <xTaskResumeAll+0x118>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d162      	bne.n	8006994 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068ce:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <xTaskResumeAll+0x11c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d05e      	beq.n	8006994 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d6:	e02f      	b.n	8006938 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d8:	4b34      	ldr	r3, [pc, #208]	; (80069ac <xTaskResumeAll+0x120>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3318      	adds	r3, #24
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff f8c1 	bl	8005a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff f8bc 	bl	8005a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	4b2d      	ldr	r3, [pc, #180]	; (80069b0 <xTaskResumeAll+0x124>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d903      	bls.n	8006908 <xTaskResumeAll+0x7c>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	4a2a      	ldr	r2, [pc, #168]	; (80069b0 <xTaskResumeAll+0x124>)
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <xTaskResumeAll+0x128>)
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3304      	adds	r3, #4
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f7ff f847 	bl	80059b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006928:	4b23      	ldr	r3, [pc, #140]	; (80069b8 <xTaskResumeAll+0x12c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	429a      	cmp	r2, r3
 8006930:	d302      	bcc.n	8006938 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006932:	4b22      	ldr	r3, [pc, #136]	; (80069bc <xTaskResumeAll+0x130>)
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006938:	4b1c      	ldr	r3, [pc, #112]	; (80069ac <xTaskResumeAll+0x120>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1cb      	bne.n	80068d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006946:	f000 fb7b 	bl	8007040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <xTaskResumeAll+0x134>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d010      	beq.n	8006978 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006956:	f000 f847 	bl	80069e8 <xTaskIncrementTick>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006960:	4b16      	ldr	r3, [pc, #88]	; (80069bc <xTaskResumeAll+0x130>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3b01      	subs	r3, #1
 800696a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f1      	bne.n	8006956 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <xTaskResumeAll+0x134>)
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006978:	4b10      	ldr	r3, [pc, #64]	; (80069bc <xTaskResumeAll+0x130>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006984:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <xTaskResumeAll+0x138>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006994:	f001 f8fe 	bl	8007b94 <vPortExitCritical>

	return xAlreadyYielded;
 8006998:	68bb      	ldr	r3, [r7, #8]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000f50 	.word	0x20000f50
 80069a8:	20000f28 	.word	0x20000f28
 80069ac:	20000ee8 	.word	0x20000ee8
 80069b0:	20000f30 	.word	0x20000f30
 80069b4:	20000a58 	.word	0x20000a58
 80069b8:	20000a54 	.word	0x20000a54
 80069bc:	20000f3c 	.word	0x20000f3c
 80069c0:	20000f38 	.word	0x20000f38
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <xTaskGetTickCount+0x1c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20000f2c 	.word	0x20000f2c

080069e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f2:	4b4f      	ldr	r3, [pc, #316]	; (8006b30 <xTaskIncrementTick+0x148>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 808f 	bne.w	8006b1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069fc:	4b4d      	ldr	r3, [pc, #308]	; (8006b34 <xTaskIncrementTick+0x14c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a04:	4a4b      	ldr	r2, [pc, #300]	; (8006b34 <xTaskIncrementTick+0x14c>)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d120      	bne.n	8006a52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a10:	4b49      	ldr	r3, [pc, #292]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	603b      	str	r3, [r7, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xTaskIncrementTick+0x46>
 8006a30:	4b41      	ldr	r3, [pc, #260]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	4b41      	ldr	r3, [pc, #260]	; (8006b3c <xTaskIncrementTick+0x154>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3f      	ldr	r2, [pc, #252]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	4a3f      	ldr	r2, [pc, #252]	; (8006b3c <xTaskIncrementTick+0x154>)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	4b3e      	ldr	r3, [pc, #248]	; (8006b40 <xTaskIncrementTick+0x158>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	4a3d      	ldr	r2, [pc, #244]	; (8006b40 <xTaskIncrementTick+0x158>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	f000 faf7 	bl	8007040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a52:	4b3c      	ldr	r3, [pc, #240]	; (8006b44 <xTaskIncrementTick+0x15c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d349      	bcc.n	8006af0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5c:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a66:	4b37      	ldr	r3, [pc, #220]	; (8006b44 <xTaskIncrementTick+0x15c>)
 8006a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a6c:	601a      	str	r2, [r3, #0]
					break;
 8006a6e:	e03f      	b.n	8006af0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a70:	4b31      	ldr	r3, [pc, #196]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d203      	bcs.n	8006a90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a88:	4a2e      	ldr	r2, [pc, #184]	; (8006b44 <xTaskIncrementTick+0x15c>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a8e:	e02f      	b.n	8006af0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe ffe9 	bl	8005a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3318      	adds	r3, #24
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe ffe0 	bl	8005a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <xTaskIncrementTick+0x160>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <xTaskIncrementTick+0xd8>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <xTaskIncrementTick+0x160>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a1f      	ldr	r2, [pc, #124]	; (8006b4c <xTaskIncrementTick+0x164>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fe ff6b 	bl	80059b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <xTaskIncrementTick+0x168>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3b8      	bcc.n	8006a5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006aea:	2301      	movs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aee:	e7b5      	b.n	8006a5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006af0:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <xTaskIncrementTick+0x168>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	4915      	ldr	r1, [pc, #84]	; (8006b4c <xTaskIncrementTick+0x164>)
 8006af8:	4613      	mov	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d901      	bls.n	8006b0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b0c:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <xTaskIncrementTick+0x16c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e004      	b.n	8006b24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b1a:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <xTaskIncrementTick+0x170>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	4a0d      	ldr	r2, [pc, #52]	; (8006b58 <xTaskIncrementTick+0x170>)
 8006b22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b24:	697b      	ldr	r3, [r7, #20]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000f50 	.word	0x20000f50
 8006b34:	20000f2c 	.word	0x20000f2c
 8006b38:	20000ee0 	.word	0x20000ee0
 8006b3c:	20000ee4 	.word	0x20000ee4
 8006b40:	20000f40 	.word	0x20000f40
 8006b44:	20000f48 	.word	0x20000f48
 8006b48:	20000f30 	.word	0x20000f30
 8006b4c:	20000a58 	.word	0x20000a58
 8006b50:	20000a54 	.word	0x20000a54
 8006b54:	20000f3c 	.word	0x20000f3c
 8006b58:	20000f38 	.word	0x20000f38

08006b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <vTaskSwitchContext+0xe0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b6a:	4b35      	ldr	r3, [pc, #212]	; (8006c40 <vTaskSwitchContext+0xe4>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b70:	e05f      	b.n	8006c32 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8006b72:	4b33      	ldr	r3, [pc, #204]	; (8006c40 <vTaskSwitchContext+0xe4>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006b78:	f7f9 fcb3 	bl	80004e2 <getRunTimeCounterValue>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	4a31      	ldr	r2, [pc, #196]	; (8006c44 <vTaskSwitchContext+0xe8>)
 8006b80:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006b82:	4b30      	ldr	r3, [pc, #192]	; (8006c44 <vTaskSwitchContext+0xe8>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b30      	ldr	r3, [pc, #192]	; (8006c48 <vTaskSwitchContext+0xec>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d909      	bls.n	8006ba2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	; (8006c4c <vTaskSwitchContext+0xf0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006b94:	4a2b      	ldr	r2, [pc, #172]	; (8006c44 <vTaskSwitchContext+0xe8>)
 8006b96:	6810      	ldr	r0, [r2, #0]
 8006b98:	4a2b      	ldr	r2, [pc, #172]	; (8006c48 <vTaskSwitchContext+0xec>)
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	1a82      	subs	r2, r0, r2
 8006b9e:	440a      	add	r2, r1
 8006ba0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006ba2:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <vTaskSwitchContext+0xe8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a28      	ldr	r2, [pc, #160]	; (8006c48 <vTaskSwitchContext+0xec>)
 8006ba8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006baa:	4b29      	ldr	r3, [pc, #164]	; (8006c50 <vTaskSwitchContext+0xf4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e010      	b.n	8006bd4 <vTaskSwitchContext+0x78>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <vTaskSwitchContext+0x72>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	607b      	str	r3, [r7, #4]
}
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <vTaskSwitchContext+0x70>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	491f      	ldr	r1, [pc, #124]	; (8006c54 <vTaskSwitchContext+0xf8>)
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	440b      	add	r3, r1
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0e4      	beq.n	8006bb2 <vTaskSwitchContext+0x56>
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <vTaskSwitchContext+0xf8>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	605a      	str	r2, [r3, #4]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d104      	bne.n	8006c18 <vTaskSwitchContext+0xbc>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	4a0b      	ldr	r2, [pc, #44]	; (8006c4c <vTaskSwitchContext+0xf0>)
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4a0b      	ldr	r2, [pc, #44]	; (8006c50 <vTaskSwitchContext+0xf4>)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c28:	4b08      	ldr	r3, [pc, #32]	; (8006c4c <vTaskSwitchContext+0xf0>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	335c      	adds	r3, #92	; 0x5c
 8006c2e:	4a0a      	ldr	r2, [pc, #40]	; (8006c58 <vTaskSwitchContext+0xfc>)
 8006c30:	6013      	str	r3, [r2, #0]
}
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000f50 	.word	0x20000f50
 8006c40:	20000f3c 	.word	0x20000f3c
 8006c44:	20000f58 	.word	0x20000f58
 8006c48:	20000f54 	.word	0x20000f54
 8006c4c:	20000a54 	.word	0x20000a54
 8006c50:	20000f30 	.word	0x20000f30
 8006c54:	20000a58 	.word	0x20000a58
 8006c58:	20000010 	.word	0x20000010

08006c5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	60fb      	str	r3, [r7, #12]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c82:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <vTaskPlaceOnEventList+0x44>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3318      	adds	r3, #24
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fe feb5 	bl	80059fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c90:	2101      	movs	r1, #1
 8006c92:	6838      	ldr	r0, [r7, #0]
 8006c94:	f000 fa80 	bl	8007198 <prvAddCurrentTaskToDelayedList>
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000a54 	.word	0x20000a54

08006ca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	617b      	str	r3, [r7, #20]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3318      	adds	r3, #24
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7fe fe6c 	bl	80059b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	68b8      	ldr	r0, [r7, #8]
 8006cea:	f000 fa55 	bl	8007198 <prvAddCurrentTaskToDelayedList>
	}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000a54 	.word	0x20000a54

08006cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60fb      	str	r3, [r7, #12]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	3318      	adds	r3, #24
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fe9d 	bl	8005a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d32:	4b1e      	ldr	r3, [pc, #120]	; (8006dac <xTaskRemoveFromEventList+0xb0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d11d      	bne.n	8006d76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fe94 	bl	8005a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <xTaskRemoveFromEventList+0xb4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d903      	bls.n	8006d58 <xTaskRemoveFromEventList+0x5c>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <xTaskRemoveFromEventList+0xb4>)
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <xTaskRemoveFromEventList+0xb8>)
 8006d66:	441a      	add	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f7fe fe1f 	bl	80059b2 <vListInsertEnd>
 8006d74:	e005      	b.n	8006d82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	3318      	adds	r3, #24
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	480e      	ldr	r0, [pc, #56]	; (8006db8 <xTaskRemoveFromEventList+0xbc>)
 8006d7e:	f7fe fe18 	bl	80059b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <xTaskRemoveFromEventList+0xc0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d905      	bls.n	8006d9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d94:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <xTaskRemoveFromEventList+0xc4>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	e001      	b.n	8006da0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006da0:	697b      	ldr	r3, [r7, #20]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000f50 	.word	0x20000f50
 8006db0:	20000f30 	.word	0x20000f30
 8006db4:	20000a58 	.word	0x20000a58
 8006db8:	20000ee8 	.word	0x20000ee8
 8006dbc:	20000a54 	.word	0x20000a54
 8006dc0:	20000f3c 	.word	0x20000f3c

08006dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <vTaskInternalSetTimeOutState+0x24>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <vTaskInternalSetTimeOutState+0x28>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	20000f40 	.word	0x20000f40
 8006dec:	20000f2c 	.word	0x20000f2c

08006df0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	613b      	str	r3, [r7, #16]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60fb      	str	r3, [r7, #12]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e32:	f000 fe7f 	bl	8007b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e36:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <xTaskCheckForTimeOut+0xbc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e4e:	d102      	bne.n	8006e56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e023      	b.n	8006e9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <xTaskCheckForTimeOut+0xc0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d007      	beq.n	8006e72 <xTaskCheckForTimeOut+0x82>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d302      	bcc.n	8006e72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	e015      	b.n	8006e9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d20b      	bcs.n	8006e94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff ff9b 	bl	8006dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
 8006e92:	e004      	b.n	8006e9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e9e:	f000 fe79 	bl	8007b94 <vPortExitCritical>

	return xReturn;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20000f2c 	.word	0x20000f2c
 8006eb0:	20000f40 	.word	0x20000f40

08006eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <vTaskMissedYield+0x14>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20000f3c 	.word	0x20000f3c

08006ecc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ed4:	f000 f852 	bl	8006f7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <prvIdleTask+0x28>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d9f9      	bls.n	8006ed4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <prvIdleTask+0x2c>)
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ef0:	e7f0      	b.n	8006ed4 <prvIdleTask+0x8>
 8006ef2:	bf00      	nop
 8006ef4:	20000a58 	.word	0x20000a58
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f02:	2300      	movs	r3, #0
 8006f04:	607b      	str	r3, [r7, #4]
 8006f06:	e00c      	b.n	8006f22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4a12      	ldr	r2, [pc, #72]	; (8006f5c <prvInitialiseTaskLists+0x60>)
 8006f14:	4413      	add	r3, r2
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fd1e 	bl	8005958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b37      	cmp	r3, #55	; 0x37
 8006f26:	d9ef      	bls.n	8006f08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f28:	480d      	ldr	r0, [pc, #52]	; (8006f60 <prvInitialiseTaskLists+0x64>)
 8006f2a:	f7fe fd15 	bl	8005958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f2e:	480d      	ldr	r0, [pc, #52]	; (8006f64 <prvInitialiseTaskLists+0x68>)
 8006f30:	f7fe fd12 	bl	8005958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f34:	480c      	ldr	r0, [pc, #48]	; (8006f68 <prvInitialiseTaskLists+0x6c>)
 8006f36:	f7fe fd0f 	bl	8005958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f3a:	480c      	ldr	r0, [pc, #48]	; (8006f6c <prvInitialiseTaskLists+0x70>)
 8006f3c:	f7fe fd0c 	bl	8005958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f40:	480b      	ldr	r0, [pc, #44]	; (8006f70 <prvInitialiseTaskLists+0x74>)
 8006f42:	f7fe fd09 	bl	8005958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <prvInitialiseTaskLists+0x78>)
 8006f48:	4a05      	ldr	r2, [pc, #20]	; (8006f60 <prvInitialiseTaskLists+0x64>)
 8006f4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <prvInitialiseTaskLists+0x7c>)
 8006f4e:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <prvInitialiseTaskLists+0x68>)
 8006f50:	601a      	str	r2, [r3, #0]
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000a58 	.word	0x20000a58
 8006f60:	20000eb8 	.word	0x20000eb8
 8006f64:	20000ecc 	.word	0x20000ecc
 8006f68:	20000ee8 	.word	0x20000ee8
 8006f6c:	20000efc 	.word	0x20000efc
 8006f70:	20000f14 	.word	0x20000f14
 8006f74:	20000ee0 	.word	0x20000ee0
 8006f78:	20000ee4 	.word	0x20000ee4

08006f7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f82:	e019      	b.n	8006fb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f84:	f000 fdd6 	bl	8007b34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <prvCheckTasksWaitingTermination+0x50>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fd69 	bl	8005a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <prvCheckTasksWaitingTermination+0x54>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	4a0b      	ldr	r2, [pc, #44]	; (8006fd0 <prvCheckTasksWaitingTermination+0x54>)
 8006fa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <prvCheckTasksWaitingTermination+0x58>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <prvCheckTasksWaitingTermination+0x58>)
 8006fac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fae:	f000 fdf1 	bl	8007b94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f810 	bl	8006fd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fb8:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <prvCheckTasksWaitingTermination+0x58>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e1      	bne.n	8006f84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000efc 	.word	0x20000efc
 8006fd0:	20000f28 	.word	0x20000f28
 8006fd4:	20000f10 	.word	0x20000f10

08006fd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	335c      	adds	r3, #92	; 0x5c
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 ffcd 	bl	8007f84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d108      	bne.n	8007006 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 febd 	bl	8007d78 <vPortFree>
				vPortFree( pxTCB );
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 feba 	bl	8007d78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007004:	e018      	b.n	8007038 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800700c:	2b01      	cmp	r3, #1
 800700e:	d103      	bne.n	8007018 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 feb1 	bl	8007d78 <vPortFree>
	}
 8007016:	e00f      	b.n	8007038 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800701e:	2b02      	cmp	r3, #2
 8007020:	d00a      	beq.n	8007038 <prvDeleteTCB+0x60>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	60fb      	str	r3, [r7, #12]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <prvDeleteTCB+0x5e>
	}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <prvResetNextTaskUnblockTime+0x38>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <prvResetNextTaskUnblockTime+0x3c>)
 8007052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007058:	e008      	b.n	800706c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705a:	4b07      	ldr	r3, [pc, #28]	; (8007078 <prvResetNextTaskUnblockTime+0x38>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	4a04      	ldr	r2, [pc, #16]	; (800707c <prvResetNextTaskUnblockTime+0x3c>)
 800706a:	6013      	str	r3, [r2, #0]
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	20000ee0 	.word	0x20000ee0
 800707c:	20000f48 	.word	0x20000f48

08007080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <xTaskGetSchedulerState+0x34>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d102      	bne.n	8007094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800708e:	2301      	movs	r3, #1
 8007090:	607b      	str	r3, [r7, #4]
 8007092:	e008      	b.n	80070a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <xTaskGetSchedulerState+0x38>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800709c:	2302      	movs	r3, #2
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e001      	b.n	80070a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070a6:	687b      	ldr	r3, [r7, #4]
	}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	20000f34 	.word	0x20000f34
 80070b8:	20000f50 	.word	0x20000f50

080070bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d056      	beq.n	8007180 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070d2:	4b2e      	ldr	r3, [pc, #184]	; (800718c <xTaskPriorityDisinherit+0xd0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d00a      	beq.n	80070f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60fb      	str	r3, [r7, #12]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	60bb      	str	r3, [r7, #8]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	1e5a      	subs	r2, r3, #1
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007122:	429a      	cmp	r2, r3
 8007124:	d02c      	beq.n	8007180 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	2b00      	cmp	r3, #0
 800712c:	d128      	bne.n	8007180 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3304      	adds	r3, #4
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fc9a 	bl	8005a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007150:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <xTaskPriorityDisinherit+0xd4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d903      	bls.n	8007160 <xTaskPriorityDisinherit+0xa4>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	4a0c      	ldr	r2, [pc, #48]	; (8007190 <xTaskPriorityDisinherit+0xd4>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4a09      	ldr	r2, [pc, #36]	; (8007194 <xTaskPriorityDisinherit+0xd8>)
 800716e:	441a      	add	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f7fe fc1b 	bl	80059b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007180:	697b      	ldr	r3, [r7, #20]
	}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000a54 	.word	0x20000a54
 8007190:	20000f30 	.word	0x20000f30
 8007194:	20000a58 	.word	0x20000a58

08007198 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071a2:	4b21      	ldr	r3, [pc, #132]	; (8007228 <prvAddCurrentTaskToDelayedList+0x90>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071a8:	4b20      	ldr	r3, [pc, #128]	; (800722c <prvAddCurrentTaskToDelayedList+0x94>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3304      	adds	r3, #4
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fc5c 	bl	8005a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ba:	d10a      	bne.n	80071d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071c2:	4b1a      	ldr	r3, [pc, #104]	; (800722c <prvAddCurrentTaskToDelayedList+0x94>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4819      	ldr	r0, [pc, #100]	; (8007230 <prvAddCurrentTaskToDelayedList+0x98>)
 80071cc:	f7fe fbf1 	bl	80059b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071d0:	e026      	b.n	8007220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4413      	add	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <prvAddCurrentTaskToDelayedList+0x94>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d209      	bcs.n	80071fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071ea:	4b12      	ldr	r3, [pc, #72]	; (8007234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b0f      	ldr	r3, [pc, #60]	; (800722c <prvAddCurrentTaskToDelayedList+0x94>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	f7fe fbff 	bl	80059fa <vListInsert>
}
 80071fc:	e010      	b.n	8007220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071fe:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <prvAddCurrentTaskToDelayedList+0x94>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3304      	adds	r3, #4
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f7fe fbf5 	bl	80059fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007210:	4b0a      	ldr	r3, [pc, #40]	; (800723c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	d202      	bcs.n	8007220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800721a:	4a08      	ldr	r2, [pc, #32]	; (800723c <prvAddCurrentTaskToDelayedList+0xa4>)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6013      	str	r3, [r2, #0]
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000f2c 	.word	0x20000f2c
 800722c:	20000a54 	.word	0x20000a54
 8007230:	20000f14 	.word	0x20000f14
 8007234:	20000ee4 	.word	0x20000ee4
 8007238:	20000ee0 	.word	0x20000ee0
 800723c:	20000f48 	.word	0x20000f48

08007240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800724a:	f000 fb07 	bl	800785c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800724e:	4b1c      	ldr	r3, [pc, #112]	; (80072c0 <xTimerCreateTimerTask+0x80>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d021      	beq.n	800729a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800725a:	2300      	movs	r3, #0
 800725c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800725e:	1d3a      	adds	r2, r7, #4
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	f107 030c 	add.w	r3, r7, #12
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fb5b 	bl	8005924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800726e:	6879      	ldr	r1, [r7, #4]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	9202      	str	r2, [sp, #8]
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	2306      	movs	r3, #6
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	2300      	movs	r3, #0
 800727e:	460a      	mov	r2, r1
 8007280:	4910      	ldr	r1, [pc, #64]	; (80072c4 <xTimerCreateTimerTask+0x84>)
 8007282:	4811      	ldr	r0, [pc, #68]	; (80072c8 <xTimerCreateTimerTask+0x88>)
 8007284:	f7ff f908 	bl	8006498 <xTaskCreateStatic>
 8007288:	4603      	mov	r3, r0
 800728a:	4a10      	ldr	r2, [pc, #64]	; (80072cc <xTimerCreateTimerTask+0x8c>)
 800728c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <xTimerCreateTimerTask+0x8c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007296:	2301      	movs	r3, #1
 8007298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	613b      	str	r3, [r7, #16]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072b6:	697b      	ldr	r3, [r7, #20]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000f8c 	.word	0x20000f8c
 80072c4:	08008134 	.word	0x08008134
 80072c8:	08007405 	.word	0x08007405
 80072cc:	20000f90 	.word	0x20000f90

080072d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	; 0x28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072de:	2300      	movs	r3, #0
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	623b      	str	r3, [r7, #32]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072fe:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <xTimerGenericCommand+0x98>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d02a      	beq.n	800735c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b05      	cmp	r3, #5
 8007316:	dc18      	bgt.n	800734a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007318:	f7ff feb2 	bl	8007080 <xTaskGetSchedulerState>
 800731c:	4603      	mov	r3, r0
 800731e:	2b02      	cmp	r3, #2
 8007320:	d109      	bne.n	8007336 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007322:	4b11      	ldr	r3, [pc, #68]	; (8007368 <xTimerGenericCommand+0x98>)
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	f107 0110 	add.w	r1, r7, #16
 800732a:	2300      	movs	r3, #0
 800732c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732e:	f7fe fccb 	bl	8005cc8 <xQueueGenericSend>
 8007332:	6278      	str	r0, [r7, #36]	; 0x24
 8007334:	e012      	b.n	800735c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <xTimerGenericCommand+0x98>)
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	f107 0110 	add.w	r1, r7, #16
 800733e:	2300      	movs	r3, #0
 8007340:	2200      	movs	r2, #0
 8007342:	f7fe fcc1 	bl	8005cc8 <xQueueGenericSend>
 8007346:	6278      	str	r0, [r7, #36]	; 0x24
 8007348:	e008      	b.n	800735c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <xTimerGenericCommand+0x98>)
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	f107 0110 	add.w	r1, r7, #16
 8007352:	2300      	movs	r3, #0
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	f7fe fdb5 	bl	8005ec4 <xQueueGenericSendFromISR>
 800735a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800735e:	4618      	mov	r0, r3
 8007360:	3728      	adds	r7, #40	; 0x28
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000f8c 	.word	0x20000f8c

0800736c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af02      	add	r7, sp, #8
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007376:	4b22      	ldr	r3, [pc, #136]	; (8007400 <prvProcessExpiredTimer+0x94>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	3304      	adds	r3, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe fb71 	bl	8005a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d022      	beq.n	80073de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	18d1      	adds	r1, r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	6978      	ldr	r0, [r7, #20]
 80073a6:	f000 f8d1 	bl	800754c <prvInsertTimerInActiveList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01f      	beq.n	80073f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073b0:	2300      	movs	r3, #0
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	2100      	movs	r1, #0
 80073ba:	6978      	ldr	r0, [r7, #20]
 80073bc:	f7ff ff88 	bl	80072d0 <xTimerGenericCommand>
 80073c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d113      	bne.n	80073f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	60fb      	str	r3, [r7, #12]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	6978      	ldr	r0, [r7, #20]
 80073f6:	4798      	blx	r3
}
 80073f8:	bf00      	nop
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000f84 	.word	0x20000f84

08007404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800740c:	f107 0308 	add.w	r3, r7, #8
 8007410:	4618      	mov	r0, r3
 8007412:	f000 f857 	bl	80074c4 <prvGetNextExpireTime>
 8007416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4619      	mov	r1, r3
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 f803 	bl	8007428 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007422:	f000 f8d5 	bl	80075d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007426:	e7f1      	b.n	800740c <prvTimerTask+0x8>

08007428 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007432:	f7ff fa1d 	bl	8006870 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007436:	f107 0308 	add.w	r3, r7, #8
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f866 	bl	800750c <prvSampleTimeNow>
 8007440:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d130      	bne.n	80074aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <prvProcessTimerOrBlockTask+0x3c>
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	429a      	cmp	r2, r3
 8007454:	d806      	bhi.n	8007464 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007456:	f7ff fa19 	bl	800688c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800745a:	68f9      	ldr	r1, [r7, #12]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff ff85 	bl	800736c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007462:	e024      	b.n	80074ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d008      	beq.n	800747c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800746a:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <prvProcessTimerOrBlockTask+0x90>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <prvProcessTimerOrBlockTask+0x50>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <prvProcessTimerOrBlockTask+0x52>
 8007478:	2300      	movs	r3, #0
 800747a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <prvProcessTimerOrBlockTask+0x94>)
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	4619      	mov	r1, r3
 800748a:	f7fe ffd1 	bl	8006430 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800748e:	f7ff f9fd 	bl	800688c <xTaskResumeAll>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007498:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <prvProcessTimerOrBlockTask+0x98>)
 800749a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	f3bf 8f6f 	isb	sy
}
 80074a8:	e001      	b.n	80074ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074aa:	f7ff f9ef 	bl	800688c <xTaskResumeAll>
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000f88 	.word	0x20000f88
 80074bc:	20000f8c 	.word	0x20000f8c
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074cc:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <prvGetNextExpireTime+0x44>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <prvGetNextExpireTime+0x16>
 80074d6:	2201      	movs	r2, #1
 80074d8:	e000      	b.n	80074dc <prvGetNextExpireTime+0x18>
 80074da:	2200      	movs	r2, #0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <prvGetNextExpireTime+0x44>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	e001      	b.n	80074f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074f8:	68fb      	ldr	r3, [r7, #12]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	20000f84 	.word	0x20000f84

0800750c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007514:	f7ff fa58 	bl	80069c8 <xTaskGetTickCount>
 8007518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800751a:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <prvSampleTimeNow+0x3c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	429a      	cmp	r2, r3
 8007522:	d205      	bcs.n	8007530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007524:	f000 f936 	bl	8007794 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	e002      	b.n	8007536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007536:	4a04      	ldr	r2, [pc, #16]	; (8007548 <prvSampleTimeNow+0x3c>)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800753c:	68fb      	ldr	r3, [r7, #12]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000f94 	.word	0x20000f94

0800754c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	d812      	bhi.n	8007598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	1ad2      	subs	r2, r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	429a      	cmp	r2, r3
 800757e:	d302      	bcc.n	8007586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007580:	2301      	movs	r3, #1
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	e01b      	b.n	80075be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <prvInsertTimerInActiveList+0x7c>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3304      	adds	r3, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f7fe fa32 	bl	80059fa <vListInsert>
 8007596:	e012      	b.n	80075be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d206      	bcs.n	80075ae <prvInsertTimerInActiveList+0x62>
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075a8:	2301      	movs	r3, #1
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	e007      	b.n	80075be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <prvInsertTimerInActiveList+0x80>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f7fe fa1e 	bl	80059fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075be:	697b      	ldr	r3, [r7, #20]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000f88 	.word	0x20000f88
 80075cc:	20000f84 	.word	0x20000f84

080075d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08e      	sub	sp, #56	; 0x38
 80075d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075d6:	e0ca      	b.n	800776e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	da18      	bge.n	8007610 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075de:	1d3b      	adds	r3, r7, #4
 80075e0:	3304      	adds	r3, #4
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	61fb      	str	r3, [r7, #28]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007606:	6850      	ldr	r0, [r2, #4]
 8007608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760a:	6892      	ldr	r2, [r2, #8]
 800760c:	4611      	mov	r1, r2
 800760e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f2c0 80aa 	blt.w	800776c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	3304      	adds	r3, #4
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fa1f 	bl	8005a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800762e:	463b      	mov	r3, r7
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff ff6b 	bl	800750c <prvSampleTimeNow>
 8007636:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b09      	cmp	r3, #9
 800763c:	f200 8097 	bhi.w	800776e <prvProcessReceivedCommands+0x19e>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <prvProcessReceivedCommands+0x78>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007671 	.word	0x08007671
 800764c:	08007671 	.word	0x08007671
 8007650:	08007671 	.word	0x08007671
 8007654:	080076e5 	.word	0x080076e5
 8007658:	080076f9 	.word	0x080076f9
 800765c:	08007743 	.word	0x08007743
 8007660:	08007671 	.word	0x08007671
 8007664:	08007671 	.word	0x08007671
 8007668:	080076e5 	.word	0x080076e5
 800766c:	080076f9 	.word	0x080076f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007676:	f043 0301 	orr.w	r3, r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	18d1      	adds	r1, r2, r3
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007690:	f7ff ff5c 	bl	800754c <prvInsertTimerInActiveList>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d069      	beq.n	800776e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d05e      	beq.n	800776e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	441a      	add	r2, r3
 80076b8:	2300      	movs	r3, #0
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	2300      	movs	r3, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c2:	f7ff fe05 	bl	80072d0 <xTimerGenericCommand>
 80076c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d14f      	bne.n	800776e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	61bb      	str	r3, [r7, #24]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80076f6:	e03a      	b.n	800776e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076fe:	f043 0301 	orr.w	r3, r3, #1
 8007702:	b2da      	uxtb	r2, r3
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	617b      	str	r3, [r7, #20]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	18d1      	adds	r1, r2, r3
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800773a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800773c:	f7ff ff06 	bl	800754c <prvInsertTimerInActiveList>
					break;
 8007740:	e015      	b.n	800776e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007752:	f000 fb11 	bl	8007d78 <vPortFree>
 8007756:	e00a      	b.n	800776e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	b2da      	uxtb	r2, r3
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800776a:	e000      	b.n	800776e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800776c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800776e:	4b08      	ldr	r3, [pc, #32]	; (8007790 <prvProcessReceivedCommands+0x1c0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	1d39      	adds	r1, r7, #4
 8007774:	2200      	movs	r2, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f7fe fc40 	bl	8005ffc <xQueueReceive>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	f47f af2a 	bne.w	80075d8 <prvProcessReceivedCommands+0x8>
	}
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	3730      	adds	r7, #48	; 0x30
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000f8c 	.word	0x20000f8c

08007794 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800779a:	e048      	b.n	800782e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800779c:	4b2d      	ldr	r3, [pc, #180]	; (8007854 <prvSwitchTimerLists+0xc0>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a6:	4b2b      	ldr	r3, [pc, #172]	; (8007854 <prvSwitchTimerLists+0xc0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe f959 	bl	8005a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d02e      	beq.n	800782e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d90e      	bls.n	8007800 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ee:	4b19      	ldr	r3, [pc, #100]	; (8007854 <prvSwitchTimerLists+0xc0>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fe f8fe 	bl	80059fa <vListInsert>
 80077fe:	e016      	b.n	800782e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007800:	2300      	movs	r3, #0
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2300      	movs	r3, #0
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	2100      	movs	r1, #0
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7ff fd60 	bl	80072d0 <xTimerGenericCommand>
 8007810:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	603b      	str	r3, [r7, #0]
}
 800782a:	bf00      	nop
 800782c:	e7fe      	b.n	800782c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <prvSwitchTimerLists+0xc0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1b1      	bne.n	800779c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <prvSwitchTimerLists+0xc0>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800783e:	4b06      	ldr	r3, [pc, #24]	; (8007858 <prvSwitchTimerLists+0xc4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a04      	ldr	r2, [pc, #16]	; (8007854 <prvSwitchTimerLists+0xc0>)
 8007844:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007846:	4a04      	ldr	r2, [pc, #16]	; (8007858 <prvSwitchTimerLists+0xc4>)
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	6013      	str	r3, [r2, #0]
}
 800784c:	bf00      	nop
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20000f84 	.word	0x20000f84
 8007858:	20000f88 	.word	0x20000f88

0800785c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007862:	f000 f967 	bl	8007b34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007866:	4b15      	ldr	r3, [pc, #84]	; (80078bc <prvCheckForValidListAndQueue+0x60>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d120      	bne.n	80078b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800786e:	4814      	ldr	r0, [pc, #80]	; (80078c0 <prvCheckForValidListAndQueue+0x64>)
 8007870:	f7fe f872 	bl	8005958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007874:	4813      	ldr	r0, [pc, #76]	; (80078c4 <prvCheckForValidListAndQueue+0x68>)
 8007876:	f7fe f86f 	bl	8005958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800787a:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <prvCheckForValidListAndQueue+0x6c>)
 800787c:	4a10      	ldr	r2, [pc, #64]	; (80078c0 <prvCheckForValidListAndQueue+0x64>)
 800787e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <prvCheckForValidListAndQueue+0x70>)
 8007882:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <prvCheckForValidListAndQueue+0x68>)
 8007884:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007886:	2300      	movs	r3, #0
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	4b11      	ldr	r3, [pc, #68]	; (80078d0 <prvCheckForValidListAndQueue+0x74>)
 800788c:	4a11      	ldr	r2, [pc, #68]	; (80078d4 <prvCheckForValidListAndQueue+0x78>)
 800788e:	2110      	movs	r1, #16
 8007890:	200a      	movs	r0, #10
 8007892:	f7fe f97d 	bl	8005b90 <xQueueGenericCreateStatic>
 8007896:	4603      	mov	r3, r0
 8007898:	4a08      	ldr	r2, [pc, #32]	; (80078bc <prvCheckForValidListAndQueue+0x60>)
 800789a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800789c:	4b07      	ldr	r3, [pc, #28]	; (80078bc <prvCheckForValidListAndQueue+0x60>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <prvCheckForValidListAndQueue+0x60>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	490b      	ldr	r1, [pc, #44]	; (80078d8 <prvCheckForValidListAndQueue+0x7c>)
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fd96 	bl	80063dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078b0:	f000 f970 	bl	8007b94 <vPortExitCritical>
}
 80078b4:	bf00      	nop
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	20000f8c 	.word	0x20000f8c
 80078c0:	20000f5c 	.word	0x20000f5c
 80078c4:	20000f70 	.word	0x20000f70
 80078c8:	20000f84 	.word	0x20000f84
 80078cc:	20000f88 	.word	0x20000f88
 80078d0:	20001038 	.word	0x20001038
 80078d4:	20000f98 	.word	0x20000f98
 80078d8:	0800813c 	.word	0x0800813c

080078dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3b04      	subs	r3, #4
 80078ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3b04      	subs	r3, #4
 80078fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f023 0201 	bic.w	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3b04      	subs	r3, #4
 800790a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800790c:	4a0c      	ldr	r2, [pc, #48]	; (8007940 <pxPortInitialiseStack+0x64>)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3b14      	subs	r3, #20
 8007916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3b04      	subs	r3, #4
 8007922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f06f 0202 	mvn.w	r2, #2
 800792a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3b20      	subs	r3, #32
 8007930:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007932:	68fb      	ldr	r3, [r7, #12]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	08007945 	.word	0x08007945

08007944 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <prvTaskExitError+0x54>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007956:	d00a      	beq.n	800796e <prvTaskExitError+0x2a>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60fb      	str	r3, [r7, #12]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <prvTaskExitError+0x28>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	60bb      	str	r3, [r7, #8]
}
 8007980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007982:	bf00      	nop
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0fc      	beq.n	8007984 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	2000000c 	.word	0x2000000c
 800799c:	00000000 	.word	0x00000000

080079a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079a0:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <pxCurrentTCBConst2>)
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	6808      	ldr	r0, [r1, #0]
 80079a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	f380 8809 	msr	PSP, r0
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8811 	msr	BASEPRI, r0
 80079ba:	4770      	bx	lr
 80079bc:	f3af 8000 	nop.w

080079c0 <pxCurrentTCBConst2>:
 80079c0:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop

080079c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079c8:	4808      	ldr	r0, [pc, #32]	; (80079ec <prvPortStartFirstTask+0x24>)
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	6800      	ldr	r0, [r0, #0]
 80079ce:	f380 8808 	msr	MSP, r0
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8814 	msr	CONTROL, r0
 80079da:	b662      	cpsie	i
 80079dc:	b661      	cpsie	f
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	df00      	svc	0
 80079e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ea:	bf00      	nop
 80079ec:	e000ed08 	.word	0xe000ed08

080079f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079f6:	4b46      	ldr	r3, [pc, #280]	; (8007b10 <xPortStartScheduler+0x120>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a46      	ldr	r2, [pc, #280]	; (8007b14 <xPortStartScheduler+0x124>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10a      	bne.n	8007a16 <xPortStartScheduler+0x26>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	613b      	str	r3, [r7, #16]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a16:	4b3e      	ldr	r3, [pc, #248]	; (8007b10 <xPortStartScheduler+0x120>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a3f      	ldr	r2, [pc, #252]	; (8007b18 <xPortStartScheduler+0x128>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10a      	bne.n	8007a36 <xPortStartScheduler+0x46>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	60fb      	str	r3, [r7, #12]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a36:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <xPortStartScheduler+0x12c>)
 8007a38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <xPortStartScheduler+0x130>)
 8007a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a5e:	4b31      	ldr	r3, [pc, #196]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a64:	e009      	b.n	8007a7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a66:	4b2f      	ldr	r3, [pc, #188]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b80      	cmp	r3, #128	; 0x80
 8007a84:	d0ef      	beq.n	8007a66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a86:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f1c3 0307 	rsb	r3, r3, #7
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d00a      	beq.n	8007aa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	60bb      	str	r3, [r7, #8]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <xPortStartScheduler+0x134>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <xPortStartScheduler+0x134>)
 8007ab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <xPortStartScheduler+0x134>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aba:	4a1a      	ldr	r2, [pc, #104]	; (8007b24 <xPortStartScheduler+0x134>)
 8007abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ac6:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <xPortStartScheduler+0x138>)
 8007acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007adc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ade:	f000 f8dd 	bl	8007c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ae2:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <xPortStartScheduler+0x13c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ae8:	f000 f8fc 	bl	8007ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007aec:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <xPortStartScheduler+0x140>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0f      	ldr	r2, [pc, #60]	; (8007b30 <xPortStartScheduler+0x140>)
 8007af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007af6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007af8:	f7ff ff66 	bl	80079c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007afc:	f7ff f82e 	bl	8006b5c <vTaskSwitchContext>
	prvTaskExitError();
 8007b00:	f7ff ff20 	bl	8007944 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	e000ed00 	.word	0xe000ed00
 8007b14:	410fc271 	.word	0x410fc271
 8007b18:	410fc270 	.word	0x410fc270
 8007b1c:	e000e400 	.word	0xe000e400
 8007b20:	20001088 	.word	0x20001088
 8007b24:	2000108c 	.word	0x2000108c
 8007b28:	e000ed20 	.word	0xe000ed20
 8007b2c:	2000000c 	.word	0x2000000c
 8007b30:	e000ef34 	.word	0xe000ef34

08007b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	607b      	str	r3, [r7, #4]
}
 8007b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3301      	adds	r3, #1
 8007b54:	4a0d      	ldr	r2, [pc, #52]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d10f      	bne.n	8007b80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <vPortEnterCritical+0x5c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	603b      	str	r3, [r7, #0]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <vPortEnterCritical+0x4a>
	}
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	2000000c 	.word	0x2000000c
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <vPortExitCritical+0x50>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <vPortExitCritical+0x24>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	607b      	str	r3, [r7, #4]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <vPortExitCritical+0x50>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <vPortExitCritical+0x50>)
 8007bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bc2:	4b08      	ldr	r3, [pc, #32]	; (8007be4 <vPortExitCritical+0x50>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <vPortExitCritical+0x42>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f383 8811 	msr	BASEPRI, r3
}
 8007bd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	2000000c 	.word	0x2000000c
	...

08007bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bf0:	f3ef 8009 	mrs	r0, PSP
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <pxCurrentTCBConst>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f01e 0f10 	tst.w	lr, #16
 8007c00:	bf08      	it	eq
 8007c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	6010      	str	r0, [r2, #0]
 8007c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c14:	f380 8811 	msr	BASEPRI, r0
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f7fe ff9c 	bl	8006b5c <vTaskSwitchContext>
 8007c24:	f04f 0000 	mov.w	r0, #0
 8007c28:	f380 8811 	msr	BASEPRI, r0
 8007c2c:	bc09      	pop	{r0, r3}
 8007c2e:	6819      	ldr	r1, [r3, #0]
 8007c30:	6808      	ldr	r0, [r1, #0]
 8007c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c36:	f01e 0f10 	tst.w	lr, #16
 8007c3a:	bf08      	it	eq
 8007c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c40:	f380 8809 	msr	PSP, r0
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst>:
 8007c50:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c72:	f7fe feb9 	bl	80069e8 <xTaskIncrementTick>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <xPortSysTickHandler+0x40>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f383 8811 	msr	BASEPRI, r3
}
 8007c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <vPortSetupTimerInterrupt+0x34>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <vPortSetupTimerInterrupt+0x38>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <vPortSetupTimerInterrupt+0x3c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <vPortSetupTimerInterrupt+0x40>)
 8007cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb6:	099b      	lsrs	r3, r3, #6
 8007cb8:	4a09      	ldr	r2, [pc, #36]	; (8007ce0 <vPortSetupTimerInterrupt+0x44>)
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <vPortSetupTimerInterrupt+0x34>)
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	601a      	str	r2, [r3, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	e000e010 	.word	0xe000e010
 8007cd4:	e000e018 	.word	0xe000e018
 8007cd8:	20000000 	.word	0x20000000
 8007cdc:	10624dd3 	.word	0x10624dd3
 8007ce0:	e000e014 	.word	0xe000e014

08007ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cf4 <vPortEnableVFP+0x10>
 8007ce8:	6801      	ldr	r1, [r0, #0]
 8007cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cee:	6001      	str	r1, [r0, #0]
 8007cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cf2:	bf00      	nop
 8007cf4:	e000ed88 	.word	0xe000ed88

08007cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cfe:	f3ef 8305 	mrs	r3, IPSR
 8007d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b0f      	cmp	r3, #15
 8007d08:	d914      	bls.n	8007d34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d0a:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <vPortValidateInterruptPriority+0x70>)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d14:	4b15      	ldr	r3, [pc, #84]	; (8007d6c <vPortValidateInterruptPriority+0x74>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	7afa      	ldrb	r2, [r7, #11]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d20a      	bcs.n	8007d34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	607b      	str	r3, [r7, #4]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <vPortValidateInterruptPriority+0x78>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d3c:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <vPortValidateInterruptPriority+0x7c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d90a      	bls.n	8007d5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	603b      	str	r3, [r7, #0]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <vPortValidateInterruptPriority+0x60>
	}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	e000e3f0 	.word	0xe000e3f0
 8007d6c:	20001088 	.word	0x20001088
 8007d70:	e000ed0c 	.word	0xe000ed0c
 8007d74:	2000108c 	.word	0x2000108c

08007d78 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d04d      	beq.n	8007e26 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d8a:	2308      	movs	r3, #8
 8007d8c:	425b      	negs	r3, r3
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	4413      	add	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b24      	ldr	r3, [pc, #144]	; (8007e30 <vPortFree+0xb8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <vPortFree+0x44>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	60fb      	str	r3, [r7, #12]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <vPortFree+0x62>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	60bb      	str	r3, [r7, #8]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	4b14      	ldr	r3, [pc, #80]	; (8007e30 <vPortFree+0xb8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4013      	ands	r3, r2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01e      	beq.n	8007e26 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d11a      	bne.n	8007e26 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <vPortFree+0xb8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	43db      	mvns	r3, r3
 8007dfa:	401a      	ands	r2, r3
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e00:	f7fe fd36 	bl	8006870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <vPortFree+0xbc>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <vPortFree+0xbc>)
 8007e10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e12:	6938      	ldr	r0, [r7, #16]
 8007e14:	f000 f812 	bl	8007e3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <vPortFree+0xc0>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	4a06      	ldr	r2, [pc, #24]	; (8007e38 <vPortFree+0xc0>)
 8007e20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e22:	f7fe fd33 	bl	800688c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e26:	bf00      	nop
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200010a4 	.word	0x200010a4
 8007e34:	2000109c 	.word	0x2000109c
 8007e38:	200010a0 	.word	0x200010a0

08007e3c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e44:	4b28      	ldr	r3, [pc, #160]	; (8007ee8 <prvInsertBlockIntoFreeList+0xac>)
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	e002      	b.n	8007e50 <prvInsertBlockIntoFreeList+0x14>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d8f7      	bhi.n	8007e4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	4413      	add	r3, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d108      	bne.n	8007e7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	441a      	add	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	441a      	add	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d118      	bne.n	8007ec4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b15      	ldr	r3, [pc, #84]	; (8007eec <prvInsertBlockIntoFreeList+0xb0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d00d      	beq.n	8007eba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	441a      	add	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e008      	b.n	8007ecc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <prvInsertBlockIntoFreeList+0xb0>)
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	e003      	b.n	8007ecc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d002      	beq.n	8007eda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20001090 	.word	0x20001090
 8007eec:	20001098 	.word	0x20001098

08007ef0 <__libc_init_array>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4d0d      	ldr	r5, [pc, #52]	; (8007f28 <__libc_init_array+0x38>)
 8007ef4:	4c0d      	ldr	r4, [pc, #52]	; (8007f2c <__libc_init_array+0x3c>)
 8007ef6:	1b64      	subs	r4, r4, r5
 8007ef8:	10a4      	asrs	r4, r4, #2
 8007efa:	2600      	movs	r6, #0
 8007efc:	42a6      	cmp	r6, r4
 8007efe:	d109      	bne.n	8007f14 <__libc_init_array+0x24>
 8007f00:	4d0b      	ldr	r5, [pc, #44]	; (8007f30 <__libc_init_array+0x40>)
 8007f02:	4c0c      	ldr	r4, [pc, #48]	; (8007f34 <__libc_init_array+0x44>)
 8007f04:	f000 f8f2 	bl	80080ec <_init>
 8007f08:	1b64      	subs	r4, r4, r5
 8007f0a:	10a4      	asrs	r4, r4, #2
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	d105      	bne.n	8007f1e <__libc_init_array+0x2e>
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f18:	4798      	blx	r3
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7ee      	b.n	8007efc <__libc_init_array+0xc>
 8007f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f22:	4798      	blx	r3
 8007f24:	3601      	adds	r6, #1
 8007f26:	e7f2      	b.n	8007f0e <__libc_init_array+0x1e>
 8007f28:	080081f4 	.word	0x080081f4
 8007f2c:	080081f4 	.word	0x080081f4
 8007f30:	080081f4 	.word	0x080081f4
 8007f34:	080081f8 	.word	0x080081f8

08007f38 <__retarget_lock_acquire_recursive>:
 8007f38:	4770      	bx	lr

08007f3a <__retarget_lock_release_recursive>:
 8007f3a:	4770      	bx	lr

08007f3c <memcpy>:
 8007f3c:	440a      	add	r2, r1
 8007f3e:	4291      	cmp	r1, r2
 8007f40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f44:	d100      	bne.n	8007f48 <memcpy+0xc>
 8007f46:	4770      	bx	lr
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f52:	4291      	cmp	r1, r2
 8007f54:	d1f9      	bne.n	8007f4a <memcpy+0xe>
 8007f56:	bd10      	pop	{r4, pc}

08007f58 <memset>:
 8007f58:	4402      	add	r2, r0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d100      	bne.n	8007f62 <memset+0xa>
 8007f60:	4770      	bx	lr
 8007f62:	f803 1b01 	strb.w	r1, [r3], #1
 8007f66:	e7f9      	b.n	8007f5c <memset+0x4>

08007f68 <cleanup_glue>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	6809      	ldr	r1, [r1, #0]
 8007f6e:	4605      	mov	r5, r0
 8007f70:	b109      	cbz	r1, 8007f76 <cleanup_glue+0xe>
 8007f72:	f7ff fff9 	bl	8007f68 <cleanup_glue>
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7e:	f000 b869 	b.w	8008054 <_free_r>
	...

08007f84 <_reclaim_reent>:
 8007f84:	4b2c      	ldr	r3, [pc, #176]	; (8008038 <_reclaim_reent+0xb4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	b570      	push	{r4, r5, r6, lr}
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	d051      	beq.n	8008034 <_reclaim_reent+0xb0>
 8007f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f92:	b143      	cbz	r3, 8007fa6 <_reclaim_reent+0x22>
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d14a      	bne.n	8008030 <_reclaim_reent+0xac>
 8007f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f9c:	6819      	ldr	r1, [r3, #0]
 8007f9e:	b111      	cbz	r1, 8007fa6 <_reclaim_reent+0x22>
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 f857 	bl	8008054 <_free_r>
 8007fa6:	6961      	ldr	r1, [r4, #20]
 8007fa8:	b111      	cbz	r1, 8007fb0 <_reclaim_reent+0x2c>
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f852 	bl	8008054 <_free_r>
 8007fb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007fb2:	b111      	cbz	r1, 8007fba <_reclaim_reent+0x36>
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 f84d 	bl	8008054 <_free_r>
 8007fba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007fbc:	b111      	cbz	r1, 8007fc4 <_reclaim_reent+0x40>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f848 	bl	8008054 <_free_r>
 8007fc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007fc6:	b111      	cbz	r1, 8007fce <_reclaim_reent+0x4a>
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 f843 	bl	8008054 <_free_r>
 8007fce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007fd0:	b111      	cbz	r1, 8007fd8 <_reclaim_reent+0x54>
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 f83e 	bl	8008054 <_free_r>
 8007fd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007fda:	b111      	cbz	r1, 8007fe2 <_reclaim_reent+0x5e>
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 f839 	bl	8008054 <_free_r>
 8007fe2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007fe4:	b111      	cbz	r1, 8007fec <_reclaim_reent+0x68>
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 f834 	bl	8008054 <_free_r>
 8007fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fee:	b111      	cbz	r1, 8007ff6 <_reclaim_reent+0x72>
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 f82f 	bl	8008054 <_free_r>
 8007ff6:	69a3      	ldr	r3, [r4, #24]
 8007ff8:	b1e3      	cbz	r3, 8008034 <_reclaim_reent+0xb0>
 8007ffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4798      	blx	r3
 8008000:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008002:	b1b9      	cbz	r1, 8008034 <_reclaim_reent+0xb0>
 8008004:	4620      	mov	r0, r4
 8008006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800800a:	f7ff bfad 	b.w	8007f68 <cleanup_glue>
 800800e:	5949      	ldr	r1, [r1, r5]
 8008010:	b941      	cbnz	r1, 8008024 <_reclaim_reent+0xa0>
 8008012:	3504      	adds	r5, #4
 8008014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008016:	2d80      	cmp	r5, #128	; 0x80
 8008018:	68d9      	ldr	r1, [r3, #12]
 800801a:	d1f8      	bne.n	800800e <_reclaim_reent+0x8a>
 800801c:	4620      	mov	r0, r4
 800801e:	f000 f819 	bl	8008054 <_free_r>
 8008022:	e7ba      	b.n	8007f9a <_reclaim_reent+0x16>
 8008024:	680e      	ldr	r6, [r1, #0]
 8008026:	4620      	mov	r0, r4
 8008028:	f000 f814 	bl	8008054 <_free_r>
 800802c:	4631      	mov	r1, r6
 800802e:	e7ef      	b.n	8008010 <_reclaim_reent+0x8c>
 8008030:	2500      	movs	r5, #0
 8008032:	e7ef      	b.n	8008014 <_reclaim_reent+0x90>
 8008034:	bd70      	pop	{r4, r5, r6, pc}
 8008036:	bf00      	nop
 8008038:	20000010 	.word	0x20000010

0800803c <__malloc_lock>:
 800803c:	4801      	ldr	r0, [pc, #4]	; (8008044 <__malloc_lock+0x8>)
 800803e:	f7ff bf7b 	b.w	8007f38 <__retarget_lock_acquire_recursive>
 8008042:	bf00      	nop
 8008044:	200010a8 	.word	0x200010a8

08008048 <__malloc_unlock>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__malloc_unlock+0x8>)
 800804a:	f7ff bf76 	b.w	8007f3a <__retarget_lock_release_recursive>
 800804e:	bf00      	nop
 8008050:	200010a8 	.word	0x200010a8

08008054 <_free_r>:
 8008054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008056:	2900      	cmp	r1, #0
 8008058:	d044      	beq.n	80080e4 <_free_r+0x90>
 800805a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805e:	9001      	str	r0, [sp, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f1a1 0404 	sub.w	r4, r1, #4
 8008066:	bfb8      	it	lt
 8008068:	18e4      	addlt	r4, r4, r3
 800806a:	f7ff ffe7 	bl	800803c <__malloc_lock>
 800806e:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <_free_r+0x94>)
 8008070:	9801      	ldr	r0, [sp, #4]
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	b933      	cbnz	r3, 8008084 <_free_r+0x30>
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	6014      	str	r4, [r2, #0]
 800807a:	b003      	add	sp, #12
 800807c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008080:	f7ff bfe2 	b.w	8008048 <__malloc_unlock>
 8008084:	42a3      	cmp	r3, r4
 8008086:	d908      	bls.n	800809a <_free_r+0x46>
 8008088:	6825      	ldr	r5, [r4, #0]
 800808a:	1961      	adds	r1, r4, r5
 800808c:	428b      	cmp	r3, r1
 800808e:	bf01      	itttt	eq
 8008090:	6819      	ldreq	r1, [r3, #0]
 8008092:	685b      	ldreq	r3, [r3, #4]
 8008094:	1949      	addeq	r1, r1, r5
 8008096:	6021      	streq	r1, [r4, #0]
 8008098:	e7ed      	b.n	8008076 <_free_r+0x22>
 800809a:	461a      	mov	r2, r3
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	b10b      	cbz	r3, 80080a4 <_free_r+0x50>
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d9fa      	bls.n	800809a <_free_r+0x46>
 80080a4:	6811      	ldr	r1, [r2, #0]
 80080a6:	1855      	adds	r5, r2, r1
 80080a8:	42a5      	cmp	r5, r4
 80080aa:	d10b      	bne.n	80080c4 <_free_r+0x70>
 80080ac:	6824      	ldr	r4, [r4, #0]
 80080ae:	4421      	add	r1, r4
 80080b0:	1854      	adds	r4, r2, r1
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	6011      	str	r1, [r2, #0]
 80080b6:	d1e0      	bne.n	800807a <_free_r+0x26>
 80080b8:	681c      	ldr	r4, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	6053      	str	r3, [r2, #4]
 80080be:	4421      	add	r1, r4
 80080c0:	6011      	str	r1, [r2, #0]
 80080c2:	e7da      	b.n	800807a <_free_r+0x26>
 80080c4:	d902      	bls.n	80080cc <_free_r+0x78>
 80080c6:	230c      	movs	r3, #12
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	e7d6      	b.n	800807a <_free_r+0x26>
 80080cc:	6825      	ldr	r5, [r4, #0]
 80080ce:	1961      	adds	r1, r4, r5
 80080d0:	428b      	cmp	r3, r1
 80080d2:	bf04      	itt	eq
 80080d4:	6819      	ldreq	r1, [r3, #0]
 80080d6:	685b      	ldreq	r3, [r3, #4]
 80080d8:	6063      	str	r3, [r4, #4]
 80080da:	bf04      	itt	eq
 80080dc:	1949      	addeq	r1, r1, r5
 80080de:	6021      	streq	r1, [r4, #0]
 80080e0:	6054      	str	r4, [r2, #4]
 80080e2:	e7ca      	b.n	800807a <_free_r+0x26>
 80080e4:	b003      	add	sp, #12
 80080e6:	bd30      	pop	{r4, r5, pc}
 80080e8:	200010ac 	.word	0x200010ac

080080ec <_init>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr

080080f8 <_fini>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr
