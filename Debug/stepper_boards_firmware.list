
stepper_boards_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a24  08009a24  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009a24  08009a24  00019a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a2c  08009a2c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a30  08009a30  00019a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fbc  20000074  08009aa8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003030  08009aa8  00023030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260d1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d4  00000000  00000000  00046175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  0004a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029017  00000000  00000000  0004c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000207a8  00000000  00000000  0007546f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f18fa  00000000  00000000  00095c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00187511  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001a20  00000000  00000000  00187568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078ec  00000000  00000000  00188f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800985c 	.word	0x0800985c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800985c 	.word	0x0800985c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <can_parse_msg>:

#include "CANLib/CANMessage.h"

extern volatile uint8_t g_sendPing;

void can_parse_msg(CAN_RxHeaderTypeDef *header, uint8_t *data){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	if(data == NULL) return;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	f000 8081 	beq.w	80005e8 <can_parse_msg+0x114>

	uint8_t id = can_parse_id(data, header->DLC);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	6838      	ldr	r0, [r7, #0]
 80004f0:	f008 ff48 	bl	8009384 <can_parse_id>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(id == STEPPERS_STATE){
 80004fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004fe:	2b15      	cmp	r3, #21
 8000500:	d112      	bne.n	8000528 <can_parse_msg+0x54>
		// Frame byte structure: ID X X X STATE
		uint32_t frame = can_parse_long(data, header->DLC);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4619      	mov	r1, r3
 800050a:	6838      	ldr	r0, [r7, #0]
 800050c:	f008 ff72 	bl	80093f4 <can_parse_long>
 8000510:	6138      	str	r0, [r7, #16]
		uint8_t state = frame & 0x000000FF;
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	73fb      	strb	r3, [r7, #15]
		if(state == 1) // Start
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d102      	bne.n	8000522 <can_parse_msg+0x4e>
			start();
 800051c:	f000 ffc6 	bl	80014ac <start>
 8000520:	e063      	b.n	80005ea <can_parse_msg+0x116>
		else
			stop();
 8000522:	f000 fff5 	bl	8001510 <stop>
 8000526:	e060      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == AUTONOMOUS_STEERING){
 8000528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800052c:	2b16      	cmp	r3, #22
 800052e:	d114      	bne.n	800055a <can_parse_msg+0x86>
		// Frame byte structure: ID #STEPS1 #STEPS2 X DIR
		uint32_t frame = can_parse_long(data, header->DLC);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	6838      	ldr	r0, [r7, #0]
 800053a:	f008 ff5b 	bl	80093f4 <can_parse_long>
 800053e:	61b8      	str	r0, [r7, #24]
		uint16_t steps = (frame & 0xFFFF0000) >> 16;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	82fb      	strh	r3, [r7, #22]
		uint8_t dir = frame & 0x000000FF;
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	757b      	strb	r3, [r7, #21]
		set_setpoint(STEERING, steps, dir);
 800054a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800054e:	8afb      	ldrh	r3, [r7, #22]
 8000550:	4619      	mov	r1, r3
 8000552:	2000      	movs	r0, #0
 8000554:	f001 f84e 	bl	80015f4 <set_setpoint>
 8000558:	e047      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == CONTROLLER_STEERING){
 800055a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800055e:	2b17      	cmp	r3, #23
 8000560:	d10f      	bne.n	8000582 <can_parse_msg+0xae>
		// Frame byte structure: ID X X X DIR
		uint32_t frame = can_parse_long(data, header->DLC);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	691b      	ldr	r3, [r3, #16]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	6838      	ldr	r0, [r7, #0]
 800056c:	f008 ff42 	bl	80093f4 <can_parse_long>
 8000570:	6238      	str	r0, [r7, #32]
		//uint16_t steps = (frame & 0xFFFF0000) >> 16;
		uint8_t dir = frame & 0x000000FF;
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	77fb      	strb	r3, [r7, #31]
		set_direction(STEERING, dir);
 8000576:	7ffb      	ldrb	r3, [r7, #31]
 8000578:	4619      	mov	r1, r3
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fffa 	bl	8001574 <set_direction>
 8000580:	e033      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == ENCODER_ID_IFM){
 8000582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000586:	2b18      	cmp	r3, #24
 8000588:	d02f      	beq.n	80005ea <can_parse_msg+0x116>
		//?
	} else if(id == ENCODER_ID_BRITTER) {
 800058a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800058e:	2b19      	cmp	r3, #25
 8000590:	d118      	bne.n	80005c4 <can_parse_msg+0xf0>
		float val = can_parse_float(data, header->DLC);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	6838      	ldr	r0, [r7, #0]
 800059c:	f008 ff08 	bl	80093b0 <can_parse_float>
 80005a0:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		float angle = val/4096*360;
 80005a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80005a8:	eddf 6a11 	vldr	s13, [pc, #68]	; 80005f0 <can_parse_msg+0x11c>
 80005ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80005f4 <can_parse_msg+0x120>
 80005b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		can_rx_data.encoderAngle[1] = angle;
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <can_parse_msg+0x124>)
 80005be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c0:	60d3      	str	r3, [r2, #12]
 80005c2:	e012      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == JETSON_HEARTBEAT_ID) {
 80005c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005c8:	2b1e      	cmp	r3, #30
 80005ca:	d105      	bne.n	80005d8 <can_parse_msg+0x104>
		//Jetson heartbeat
		can_rx_data.jetsonHBTick = HAL_GetTick();
 80005cc:	f001 f8fe 	bl	80017cc <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <can_parse_msg+0x124>)
 80005d4:	6113      	str	r3, [r2, #16]
 80005d6:	e008      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == PING_ID){
 80005d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005dc:	2b1f      	cmp	r3, #31
 80005de:	d104      	bne.n	80005ea <can_parse_msg+0x116>
		g_sendPing = 1;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <can_parse_msg+0x128>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e000      	b.n	80005ea <can_parse_msg+0x116>
	if(data == NULL) return;
 80005e8:	bf00      	nop
	}
}
 80005ea:	3730      	adds	r7, #48	; 0x30
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	45800000 	.word	0x45800000
 80005f4:	43b40000 	.word	0x43b40000
 80005f8:	20000090 	.word	0x20000090
 80005fc:	200000ac 	.word	0x200000ac

08000600 <can_init>:
  .priority = (osPriority_t) osPriorityNormal,
};
*/


void can_init(){
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000606:	2301      	movs	r3, #1
 8000608:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;		// Specify filter bank to use
 800060a:	230a      	movs	r3, #10
 800060c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //Incoming data is saved here
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;//0x100<<5;//0x000<<5;
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh= 0; //0xF00<<5;//0x600<<5;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000626:	2301      	movs	r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;
 800062a:	230d      	movs	r3, #13
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
	filter.SlaveStartFilterBank = 0;
	*/

	if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) Error_Handler();
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <can_init+0xb8>)
 8000634:	f002 f885 	bl	8002742 <HAL_CAN_ConfigFilter>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <can_init+0x42>
 800063e:	f000 fc67 	bl	8000f10 <Error_Handler>
	if(HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <can_init+0xb8>)
 8000644:	f002 f947 	bl	80028d6 <HAL_CAN_Start>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <can_init+0x52>
 800064e:	f000 fc5f 	bl	8000f10 <Error_Handler>
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) Error_Handler();
 8000652:	2102      	movs	r1, #2
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <can_init+0xb8>)
 8000656:	f002 fb8c 	bl	8002d72 <HAL_CAN_ActivateNotification>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <can_init+0x64>
 8000660:	f000 fc56 	bl	8000f10 <Error_Handler>
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) Error_Handler();
 8000664:	2110      	movs	r1, #16
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <can_init+0xb8>)
 8000668:	f002 fb83 	bl	8002d72 <HAL_CAN_ActivateNotification>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <can_init+0x76>
 8000672:	f000 fc4d 	bl	8000f10 <Error_Handler>

	//Initialize queues

	//First char -> size
	debugMessageQueue = osMessageQueueNew(64, 8, NULL);
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	2040      	movs	r0, #64	; 0x40
 800067c:	f006 f845 	bl	800670a <osMessageQueueNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <can_init+0xbc>)
 8000684:	6013      	str	r3, [r2, #0]
	if(debugMessageQueue == NULL)
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <can_init+0xbc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <can_init+0x92>
		Error_Handler();
 800068e:	f000 fc3f 	bl	8000f10 <Error_Handler>

	txMessageQueue = osMessageQueueNew(64, sizeof(CAN_TX_QUEUE_OBJ), NULL);
 8000692:	2200      	movs	r2, #0
 8000694:	2109      	movs	r1, #9
 8000696:	2040      	movs	r0, #64	; 0x40
 8000698:	f006 f837 	bl	800670a <osMessageQueueNew>
 800069c:	4603      	mov	r3, r0
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <can_init+0xc0>)
 80006a0:	6013      	str	r3, [r2, #0]
	if(txMessageQueue == NULL)
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <can_init+0xc0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <can_init+0xae>
		Error_Handler();
 80006aa:	f000 fc31 	bl	8000f10 <Error_Handler>
}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000114 	.word	0x20000114
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	200000a8 	.word	0x200000a8

080006c4 <can_tx_task>:

void can_tx_task(void * params){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	for(;;){
		can_tx_update();
 80006cc:	f000 f806 	bl	80006dc <can_tx_update>

		osDelay(can_tx_task_delay);
 80006d0:	2305      	movs	r3, #5
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fffe 	bl	80066d4 <osDelay>
		can_tx_update();
 80006d8:	e7f8      	b.n	80006cc <can_tx_task+0x8>
	...

080006dc <can_tx_update>:
	}
}

void can_tx_update(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	txHeader.IDE = CAN_ID_STD;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
	txHeader.StdId = 0x111;
 80006e6:	f240 1311 	movw	r3, #273	; 0x111
 80006ea:	617b      	str	r3, [r7, #20]
	txHeader.RTR = CAN_RTR_DATA;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]

	CAN_TX_QUEUE_OBJ txOut;

	while(osMessageQueueGet(txMessageQueue, &txOut, NULL, 0) == osOK){
 80006f0:	e013      	b.n	800071a <can_tx_update+0x3e>
		txHeader.DLC = txOut.msg_size;
 80006f2:	7b3b      	ldrb	r3, [r7, #12]
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &txHeader, txOut.buf, &txMailbox);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	1d3a      	adds	r2, r7, #4
 80006fc:	f107 0114 	add.w	r1, r7, #20
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <can_tx_update+0x5c>)
 8000702:	f002 f92c 	bl	800295e <HAL_CAN_AddTxMessage>
 8000706:	4603      	mov	r3, r0
 8000708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(ret != HAL_OK){
 800070c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <can_tx_update+0x3e>
			txHeader.DLC++;
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	3301      	adds	r3, #1
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
	while(osMessageQueueGet(txMessageQueue, &txOut, NULL, 0) == osOK){
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <can_tx_update+0x60>)
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	1d39      	adds	r1, r7, #4
 8000720:	2300      	movs	r3, #0
 8000722:	2200      	movs	r2, #0
 8000724:	f006 f864 	bl	80067f0 <osMessageQueueGet>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0e1      	beq.n	80006f2 <can_tx_update+0x16>
		}
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3730      	adds	r7, #48	; 0x30
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000114 	.word	0x20000114
 800073c:	200000a8 	.word	0x200000a8

08000740 <can_rx_task>:

void can_rx_task(void *params){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	for(;;){
		can_rx_update();
 8000748:	f000 f806 	bl	8000758 <can_rx_update>
		osDelay(can_rx_task_delay);
 800074c:	2305      	movs	r3, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f005 ffc0 	bl	80066d4 <osDelay>
		can_rx_update();
 8000754:	e7f8      	b.n	8000748 <can_rx_task+0x8>
	...

08000758 <can_rx_update>:
	}
}

void can_rx_update(){
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
	//TODO check both FIFO?
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t buf[8];
	uint32_t fill_level0 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800075e:	2100      	movs	r1, #0
 8000760:	4820      	ldr	r0, [pc, #128]	; (80007e4 <can_rx_update+0x8c>)
 8000762:	f002 fade 	bl	8002d22 <HAL_CAN_GetRxFifoFillLevel>
 8000766:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t fill_level1 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1);
 8000768:	2101      	movs	r1, #1
 800076a:	481e      	ldr	r0, [pc, #120]	; (80007e4 <can_rx_update+0x8c>)
 800076c:	f002 fad9 	bl	8002d22 <HAL_CAN_GetRxFifoFillLevel>
 8000770:	62b8      	str	r0, [r7, #40]	; 0x28
	while(fill_level0 != 0){
 8000772:	e015      	b.n	80007a0 <can_rx_update+0x48>
		HAL_StatusTypeDef ret = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, buf);
 8000774:	463b      	mov	r3, r7
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	2100      	movs	r1, #0
 800077c:	4819      	ldr	r0, [pc, #100]	; (80007e4 <can_rx_update+0x8c>)
 800077e:	f002 f9be 	bl	8002afe <HAL_CAN_GetRxMessage>
 8000782:	4603      	mov	r3, r0
 8000784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(ret != HAL_OK) continue;
 8000788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800078c:	2b00      	cmp	r3, #0
 800078e:	d000      	beq.n	8000792 <can_rx_update+0x3a>
 8000790:	e006      	b.n	80007a0 <can_rx_update+0x48>
		//Parse can message
		can_parse_msg(&rxHeader, buf);
 8000792:	463a      	mov	r2, r7
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fe9a 	bl	80004d4 <can_parse_msg>
	while(fill_level0 != 0){
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1e6      	bne.n	8000774 <can_rx_update+0x1c>
	}
	while(fill_level1 != 0){
 80007a6:	e015      	b.n	80007d4 <can_rx_update+0x7c>
		HAL_StatusTypeDef ret = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeader, buf);
 80007a8:	463b      	mov	r3, r7
 80007aa:	f107 0208 	add.w	r2, r7, #8
 80007ae:	2101      	movs	r1, #1
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <can_rx_update+0x8c>)
 80007b2:	f002 f9a4 	bl	8002afe <HAL_CAN_GetRxMessage>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(ret != HAL_OK) continue;
 80007bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d000      	beq.n	80007c6 <can_rx_update+0x6e>
 80007c4:	e006      	b.n	80007d4 <can_rx_update+0x7c>
		//Parse can message
		can_parse_msg(&rxHeader, buf);
 80007c6:	463a      	mov	r2, r7
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe80 	bl	80004d4 <can_parse_msg>
	while(fill_level1 != 0){
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1e6      	bne.n	80007a8 <can_rx_update+0x50>
	}
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3730      	adds	r7, #48	; 0x30
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000114 	.word	0x20000114

080007e8 <start_can_tasks>:
		osDelay(1000);
	}
}
*/

void start_can_tasks(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	osThreadNew(can_rx_task, NULL, &canRxTask_attributes);
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <start_can_tasks+0x1c>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <start_can_tasks+0x20>)
 80007f2:	f005 fedd 	bl	80065b0 <osThreadNew>
	osThreadNew(can_tx_task, NULL, &canTxTask_attributes);
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <start_can_tasks+0x24>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <start_can_tasks+0x28>)
 80007fc:	f005 fed8 	bl	80065b0 <osThreadNew>
	//osThreadNew(can_sbus_tx_task, NULL, &sbusTask_attributes);
	//osThreadNew(can_debug_msg_tx_task, NULL, &debugMsgTask_attributes);
	//osThreadNew(can_send_ping_task, NULL, &pingTask_attributes);
	//osThreadNew(can_battery_monitor_task, NULL, &batteryTask_attributes);
	//osThreadNew(debug_vars_task, NULL, &debugVarsTask_attributes);
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	080098e8 	.word	0x080098e8
 8000808:	08000741 	.word	0x08000741
 800080c:	0800990c 	.word	0x0800990c
 8000810:	080006c5 	.word	0x080006c5

08000814 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
return 0;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 ff9b 	bl	8001772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f836 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 fa7e 	bl	8000d40 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000844:	f000 fa4c 	bl	8000ce0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000848:	f000 f9c8 	bl	8000bdc <MX_TIM2_Init>
  MX_TIM1_Init();
 800084c:	f000 f91a 	bl	8000a84 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000850:	f000 f87c 	bl	800094c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000854:	f000 f8de 	bl	8000a14 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	210f      	movs	r1, #15
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <main+0x5c>)
 800085e:	f002 fd0b 	bl	8003278 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000862:	f005 fe5b 	bl	800651c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of steeringTask */
  steeringTaskHandle = osThreadNew(steering_task, NULL, &steeringTask_attributes);
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <main+0x60>)
 8000868:	2100      	movs	r1, #0
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <main+0x64>)
 800086c:	f005 fea0 	bl	80065b0 <osThreadNew>
 8000870:	4603      	mov	r3, r0
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <main+0x68>)
 8000874:	6013      	str	r3, [r2, #0]

  /* creation of brakingTask */
  brakingTaskHandle = osThreadNew(braking_task, NULL, &brakingTask_attributes);
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <main+0x6c>)
 8000878:	2100      	movs	r1, #0
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <main+0x70>)
 800087c:	f005 fe98 	bl	80065b0 <osThreadNew>
 8000880:	4603      	mov	r3, r0
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <main+0x74>)
 8000884:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  start_can_tasks();
 8000886:	f7ff ffaf 	bl	80007e8 <start_can_tasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800088a:	f005 fe6b 	bl	8006564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088e:	e7fe      	b.n	800088e <main+0x5a>
 8000890:	48000800 	.word	0x48000800
 8000894:	08009934 	.word	0x08009934
 8000898:	08000ec1 	.word	0x08000ec1
 800089c:	20000258 	.word	0x20000258
 80008a0:	08009958 	.word	0x08009958
 80008a4:	08000edd 	.word	0x08000edd
 80008a8:	2000025c 	.word	0x2000025c

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b096      	sub	sp, #88	; 0x58
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2244      	movs	r2, #68	; 0x44
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f008 ff04 	bl	80096c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d2:	f002 fcf7 	bl	80032c4 <HAL_PWREx_ControlVoltageScaling>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008dc:	f000 fb18 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	2303      	movs	r3, #3
 80008f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80008f6:	2314      	movs	r3, #20
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008fa:	2307      	movs	r3, #7
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000902:	2304      	movs	r3, #4
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fd30 	bl	8003370 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000916:	f000 fafb 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2303      	movs	r3, #3
 8000920:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	2104      	movs	r1, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f003 f930 	bl	8003b98 <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800093e:	f000 fae7 	bl	8000f10 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3758      	adds	r7, #88	; 0x58
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000964:	4a29      	ldr	r2, [pc, #164]	; (8000a0c <MX_ADC1_Init+0xc0>)
 8000966:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_ADC1_Init+0xbc>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_ADC1_Init+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000982:	2204      	movs	r2, #4
 8000984:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000988:	2200      	movs	r2, #0
 800098a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_ADC1_Init+0xbc>)
 800098e:	2201      	movs	r2, #1
 8000990:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000994:	2201      	movs	r2, #1
 8000996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_ADC1_Init+0xbc>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009c4:	f001 f89a 	bl	8001afc <HAL_ADC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80009ce:	f000 fa9f 	bl	8000f10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_ADC1_Init+0xc4>)
 80009d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d6:	2306      	movs	r3, #6
 80009d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009de:	237f      	movs	r3, #127	; 0x7f
 80009e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009e2:	2304      	movs	r3, #4
 80009e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009f0:	f001 f9cc 	bl	8001d8c <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009fa:	f000 fa89 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000b0 	.word	0x200000b0
 8000a0c:	50040000 	.word	0x50040000
 8000a10:	c7520000 	.word	0xc7520000

08000a14 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <MX_CAN1_Init+0x6c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a20:	2228      	movs	r2, #40	; 0x28
 8000a22:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a32:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a66:	f001 fd71 	bl	800254c <HAL_CAN_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a70:	f000 fa4e 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  can_init();
 8000a74:	f7ff fdc4 	bl	8000600 <can_init>
  /* USER CODE END CAN1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000114 	.word	0x20000114
 8000a80:	40006400 	.word	0x40006400

08000a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09a      	sub	sp, #104	; 0x68
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	222c      	movs	r2, #44	; 0x2c
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fe02 	bl	80096c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ac6:	4a44      	ldr	r2, [pc, #272]	; (8000bd8 <MX_TIM1_Init+0x154>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000acc:	224f      	movs	r2, #79	; 0x4f
 8000ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ad8:	2263      	movs	r2, #99	; 0x63
 8000ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aee:	4839      	ldr	r0, [pc, #228]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000af0:	f003 fdb0 	bl	8004654 <HAL_TIM_Base_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000afa:	f000 fa09 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4832      	ldr	r0, [pc, #200]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000b0c:	f004 fae4 	bl	80050d8 <HAL_TIM_ConfigClockSource>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b16:	f000 f9fb 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b1a:	482e      	ldr	r0, [pc, #184]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000b1c:	f003 fe46 	bl	80047ac <HAL_TIM_PWM_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b26:	f000 f9f3 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000b3e:	f004 ff55 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000b48:	f000 f9e2 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4c:	2360      	movs	r3, #96	; 0x60
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000b72:	f004 f99d 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000b7c:	f000 f9c8 	bl	8000f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000bb6:	f004 ff7f 	bl	8005ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000bc0:	f000 f9a6 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000bc6:	f000 fabb 	bl	8001140 <HAL_TIM_MspPostInit>

}
 8000bca:	bf00      	nop
 8000bcc:	3768      	adds	r7, #104	; 0x68
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000013c 	.word	0x2000013c
 8000bd8:	40012c00 	.word	0x40012c00

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c14:	601a      	str	r2, [r3, #0]
  //htim2.Init.Prescaler = 8000-1;
  htim2.Init.Prescaler = 80-1;
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c18:	224f      	movs	r2, #79	; 0x4f
 8000c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  //htim2.Init.Period = 10000-1 ;
  htim2.Init.Period = 1000-1;
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c36:	4829      	ldr	r0, [pc, #164]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c38:	f003 fd0c 	bl	8004654 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c42:	f000 f965 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4822      	ldr	r0, [pc, #136]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c54:	f004 fa40 	bl	80050d8 <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c5e:	f000 f957 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c64:	f003 fda2 	bl	80047ac <HAL_TIM_PWM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c6e:	f000 f94f 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4816      	ldr	r0, [pc, #88]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c82:	f004 feb3 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c8c:	f000 f940 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000ca8:	f004 f902 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000cb2:	f000 f92d 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	220c      	movs	r2, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000cbe:	f004 f8f7 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000cc8:	f000 f922 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000cce:	f000 fa37 	bl	8001140 <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000188 	.word	0x20000188

08000ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <MX_USART1_UART_Init+0x5c>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d24:	f004 ff5e 	bl	8005be4 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d2e:	f000 f8ef 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001d4 	.word	0x200001d4
 8000d3c:	40013800 	.word	0x40013800

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a55      	ldr	r2, [pc, #340]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b53      	ldr	r3, [pc, #332]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b47      	ldr	r3, [pc, #284]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a43      	ldr	r2, [pc, #268]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f640 410f 	movw	r1, #3087	; 0xc0f
 8000dd4:	4837      	ldr	r0, [pc, #220]	; (8000eb4 <MX_GPIO_Init+0x174>)
 8000dd6:	f002 fa4f 	bl	8003278 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2103      	movs	r1, #3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f002 fa49 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f240 4105 	movw	r1, #1029	; 0x405
 8000dec:	4832      	ldr	r0, [pc, #200]	; (8000eb8 <MX_GPIO_Init+0x178>)
 8000dee:	f002 fa43 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2104      	movs	r1, #4
 8000df6:	4831      	ldr	r0, [pc, #196]	; (8000ebc <MX_GPIO_Init+0x17c>)
 8000df8:	f002 fa3e 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000dfc:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000e00:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4827      	ldr	r0, [pc, #156]	; (8000eb4 <MX_GPIO_Init+0x174>)
 8000e16:	f002 f8b5 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f002 f8a6 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin;
 8000e38:	f240 4305 	movw	r3, #1029	; 0x405
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <MX_GPIO_Init+0x178>)
 8000e52:	f002 f897 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8000e56:	f24f 2302 	movw	r3, #61954	; 0xf202
 8000e5a:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_GPIO_Init+0x178>)
 8000e6c:	f002 f88a 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 8000e70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <MX_GPIO_Init+0x174>)
 8000e86:	f002 f87d 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <MX_GPIO_Init+0x17c>)
 8000ea2:	f002 f86f 	bl	8002f84 <HAL_GPIO_Init>

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48000c00 	.word	0x48000c00

08000ec0 <steering_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_steering_task */
void steering_task(void *argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN steering_task */
  configure_steppers();
 8000ec8:	f000 facc 	bl	8001464 <configure_steppers>
  start();
 8000ecc:	f000 faee 	bl	80014ac <start>
  //set_setpoint(STEERING, 400, CCW);
  /* Infinite loop */
  for(;;)
  {
	  steer();
 8000ed0:	f000 fbf0 	bl	80016b4 <steer>
	  osDelay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f005 fbfd 	bl	80066d4 <osDelay>
	  steer();
 8000eda:	e7f9      	b.n	8000ed0 <steering_task+0x10>

08000edc <braking_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_braking_task */
void braking_task(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN braking_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f005 fbf5 	bl	80066d4 <osDelay>
 8000eea:	e7fb      	b.n	8000ee4 <braking_task+0x8>

08000eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efe:	f000 fc51 	bl	80017a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40001000 	.word	0x40001000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	210f      	movs	r1, #15
 8000f56:	f06f 0001 	mvn.w	r0, #1
 8000f5a:	f001 ffe9 	bl	8002f30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0a0      	sub	sp, #128	; 0x80
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	225c      	movs	r2, #92	; 0x5c
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f008 fb9b 	bl	80096c8 <memset>
  if(hadc->Instance==ADC1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a25      	ldr	r2, [pc, #148]	; (800102c <HAL_ADC_MspInit+0xc0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d142      	bne.n	8001022 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000fb0:	2314      	movs	r3, #20
 8000fb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 f838 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000fd6:	f7ff ff9b 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 800100a:	2310      	movs	r3, #16
 800100c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_ADC_MspInit+0xc8>)
 800101e:	f001 ffb1 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3780      	adds	r7, #128	; 0x80
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	50040000 	.word	0x50040000
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800

08001038 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <HAL_CAN_MspInit+0x80>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d129      	bne.n	80010ae <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_CAN_MspInit+0x84>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a11      	ldr	r2, [pc, #68]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800108a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800109c:	2309      	movs	r3, #9
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f001 ff6b 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40006400 	.word	0x40006400
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <HAL_TIM_Base_MspInit+0x78>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d114      	bne.n	80010fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	201b      	movs	r0, #27
 80010f0:	f001 ff1e 	bl	8002f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010f4:	201b      	movs	r0, #27
 80010f6:	f001 ff37 	bl	8002f68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010fa:	e018      	b.n	800112e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d113      	bne.n	800112e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6593      	str	r3, [r2, #88]	; 0x58
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2105      	movs	r1, #5
 8001122:	201c      	movs	r0, #28
 8001124:	f001 ff04 	bl	8002f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001128:	201c      	movs	r0, #28
 800112a:	f001 ff1d 	bl	8002f68 <HAL_NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40012c00 	.word	0x40012c00
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a32      	ldr	r2, [pc, #200]	; (8001228 <HAL_TIM_MspPostInit+0xe8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11e      	bne.n	80011a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 800117a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f001 fef3 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800119e:	e03f      	b.n	8001220 <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d13a      	bne.n	8001220 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STPR_PWM_2_Pin;
 80011da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ec:	2301      	movs	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_2_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <HAL_TIM_MspPostInit+0xf0>)
 80011f8:	f001 fec4 	bl	8002f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STPR_PWM_1_Pin;
 80011fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800120e:	2301      	movs	r3, #1
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f001 feb2 	bl	8002f84 <HAL_GPIO_Init>
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40012c00 	.word	0x40012c00
 800122c:	40021000 	.word	0x40021000
 8001230:	48000400 	.word	0x48000400

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0a0      	sub	sp, #128	; 0x80
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	225c      	movs	r2, #92	; 0x5c
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f008 fa37 	bl	80096c8 <memset>
  if(huart->Instance==USART1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_UART_MspInit+0xa8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d137      	bne.n	80012d4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001268:	2300      	movs	r3, #0
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fee5 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800127c:	f7ff fe48 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0xac>)
 8001282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <HAL_UART_MspInit+0xac>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6613      	str	r3, [r2, #96]	; 0x60
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0xac>)
 800128e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0xac>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0xac>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_UART_MspInit+0xac>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c2:	2307      	movs	r3, #7
 80012c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f001 fe58 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3780      	adds	r7, #128	; 0x80
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_InitTick+0xe0>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <HAL_InitTick+0xe0>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <HAL_InitTick+0xe0>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800130a:	f107 0210 	add.w	r2, r7, #16
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fe01 	bl	8003f1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d103      	bne.n	800132c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001324:	f002 fdce 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8001328:	6378      	str	r0, [r7, #52]	; 0x34
 800132a:	e004      	b.n	8001336 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800132c:	f002 fdca 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8001330:	4603      	mov	r3, r0
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <HAL_InitTick+0xe4>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3b01      	subs	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_InitTick+0xe8>)
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_InitTick+0xec>)
 8001348:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_InitTick+0xe8>)
 800134c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001350:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_InitTick+0xe8>)
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_InitTick+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_InitTick+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_InitTick+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <HAL_InitTick+0xe8>)
 800136c:	f003 f972 	bl	8004654 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001376:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11b      	bne.n	80013b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800137e:	4813      	ldr	r0, [pc, #76]	; (80013cc <HAL_InitTick+0xe8>)
 8001380:	f003 f9c0 	bl	8004704 <HAL_TIM_Base_Start_IT>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800138a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800138e:	2b00      	cmp	r3, #0
 8001390:	d111      	bne.n	80013b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001392:	2036      	movs	r0, #54	; 0x36
 8001394:	f001 fde8 	bl	8002f68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	d808      	bhi.n	80013b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800139e:	2200      	movs	r2, #0
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	2036      	movs	r0, #54	; 0x36
 80013a4:	f001 fdc4 	bl	8002f30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_InitTick+0xf0>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e002      	b.n	80013b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3738      	adds	r7, #56	; 0x38
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	431bde83 	.word	0x431bde83
 80013cc:	20000260 	.word	0x20000260
 80013d0:	40001000 	.word	0x40001000
 80013d4:	20000004 	.word	0x20000004

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <TIM1_CC_IRQHandler+0x10>)
 800140a:	f003 fc31 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000013c 	.word	0x2000013c

08001418 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <TIM2_IRQHandler+0x10>)
 800141e:	f003 fc27 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000188 	.word	0x20000188

0800142c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <TIM6_DAC_IRQHandler+0x10>)
 8001432:	f003 fc1d 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000260 	.word	0x20000260

08001440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <configure_steppers>:

volatile stepper braking_stepper;
volatile stepper steering_stepper;

void configure_steppers()
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	steering_stepper.MAX_ANGLE = 57;
	steering_stepper.STEP_ANGLE = 0.9;
	steering_stepper.MAX_STEPS = 63;		// Corresponding to the 57 deg
	steering_stepper.STEPS_REV = 400;
	*/
	steering_stepper.current_step = 0;
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <configure_steppers+0x3c>)
 800146a:	2200      	movs	r2, #0
 800146c:	80da      	strh	r2, [r3, #6]
	steering_stepper.active = 0;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <configure_steppers+0x3c>)
 8001470:	2200      	movs	r2, #0
 8001472:	705a      	strb	r2, [r3, #1]
	steering_stepper.exec_started = 0;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <configure_steppers+0x3c>)
 8001476:	2200      	movs	r2, #0
 8001478:	709a      	strb	r2, [r3, #2]
	braking_stepper.MAX_ANGLE = 1;			// TBD
	braking_stepper.STEP_ANGLE = 1.8;		// TBD
	steering_stepper.MAX_STEPS = 63;		// TBD
	braking_stepper.STEPS_REV = 200;		// TBD
	*/
	braking_stepper.current_step = 0;
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <configure_steppers+0x40>)
 800147c:	2200      	movs	r2, #0
 800147e:	80da      	strh	r2, [r3, #6]
	braking_stepper.active = 0;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <configure_steppers+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	705a      	strb	r2, [r3, #1]
	braking_stepper.exec_started = 0;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <configure_steppers+0x40>)
 8001488:	2200      	movs	r2, #0
 800148a:	709a      	strb	r2, [r3, #2]

	//htim2.Instance->CCR1 = 5000;	// For duty cycle of 50%
	htim2.Instance->CCR1 = 500;	// For duty cycle of 50%
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <configure_steppers+0x44>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin, GPIO_PIN_SET);

}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	200002b4 	.word	0x200002b4
 80014a4:	200002ac 	.word	0x200002ac
 80014a8:	20000188 	.word	0x20000188

080014ac <start>:

void start()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, STPR_EN_1_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b6:	4810      	ldr	r0, [pc, #64]	; (80014f8 <start+0x4c>)
 80014b8:	f001 fede 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin | LVL_SFTR_OE_2_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f240 4101 	movw	r1, #1025	; 0x401
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <start+0x50>)
 80014c4:	f001 fed8 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2104      	movs	r1, #4
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <start+0x54>)
 80014ce:	f001 fed3 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80014d2:	2100      	movs	r1, #0
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <start+0x58>)
 80014d6:	f003 f9cb 	bl	8004870 <HAL_TIM_PWM_Start_IT>
	steering_stepper.active = 1;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <start+0x5c>)
 80014dc:	2201      	movs	r2, #1
 80014de:	705a      	strb	r2, [r3, #1]
	braking_stepper.active = 1;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <start+0x60>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	705a      	strb	r2, [r3, #1]
	steering_stepper.current_step = 0;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <start+0x5c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	80da      	strh	r2, [r3, #6]
	braking_stepper.current_step = 0;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <start+0x60>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	80da      	strh	r2, [r3, #6]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000c00 	.word	0x48000c00
 8001504:	20000188 	.word	0x20000188
 8001508:	200002b4 	.word	0x200002b4
 800150c:	200002ac 	.word	0x200002ac

08001510 <stop>:

void stop()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, STPR_EN_1_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151a:	4810      	ldr	r0, [pc, #64]	; (800155c <stop+0x4c>)
 800151c:	f001 feac 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin | LVL_SFTR_OE_2_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f240 4101 	movw	r1, #1025	; 0x401
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <stop+0x50>)
 8001528:	f001 fea6 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2104      	movs	r1, #4
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <stop+0x54>)
 8001532:	f001 fea1 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001536:	2100      	movs	r1, #0
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <stop+0x58>)
 800153a:	f003 fac5 	bl	8004ac8 <HAL_TIM_PWM_Stop_IT>
	steering_stepper.active = 0;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <stop+0x5c>)
 8001540:	2200      	movs	r2, #0
 8001542:	705a      	strb	r2, [r3, #1]
	braking_stepper.active = 0;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <stop+0x60>)
 8001546:	2200      	movs	r2, #0
 8001548:	705a      	strb	r2, [r3, #1]
	steering_stepper.direction = IDLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <stop+0x5c>)
 800154c:	2202      	movs	r2, #2
 800154e:	70da      	strb	r2, [r3, #3]
	braking_stepper.direction = IDLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <stop+0x60>)
 8001552:	2202      	movs	r2, #2
 8001554:	70da      	strb	r2, [r3, #3]
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	48000800 	.word	0x48000800
 8001560:	48000400 	.word	0x48000400
 8001564:	48000c00 	.word	0x48000c00
 8001568:	20000188 	.word	0x20000188
 800156c:	200002b4 	.word	0x200002b4
 8001570:	200002ac 	.word	0x200002ac

08001574 <set_direction>:

void set_direction(const stepper_id stepper, uint8_t direction){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
	switch(stepper)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <set_direction+0x1c>
 800158a:	2b01      	cmp	r3, #1
 800158c:	d014      	beq.n	80015b8 <set_direction+0x44>
			if(direction != braking_stepper.direction)
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
			braking_stepper.mode = CONTROLLER;
			break;
		default:
			break;
 800158e:	e026      	b.n	80015de <set_direction+0x6a>
			if(direction != steering_stepper.direction)
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <set_direction+0x74>)
 8001592:	78db      	ldrb	r3, [r3, #3]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	79ba      	ldrb	r2, [r7, #6]
 8001598:	429a      	cmp	r2, r3
 800159a:	d009      	beq.n	80015b0 <set_direction+0x3c>
				steering_stepper.direction = direction;
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <set_direction+0x74>)
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	70d3      	strb	r3, [r2, #3]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin, direction);
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015aa:	4810      	ldr	r0, [pc, #64]	; (80015ec <set_direction+0x78>)
 80015ac:	f001 fe64 	bl	8003278 <HAL_GPIO_WritePin>
			steering_stepper.mode = CONTROLLER;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <set_direction+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
			break;
 80015b6:	e012      	b.n	80015de <set_direction+0x6a>
			braking_stepper.direction = direction;
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <set_direction+0x7c>)
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	70d3      	strb	r3, [r2, #3]
			if(direction != braking_stepper.direction)
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <set_direction+0x7c>)
 80015c0:	78db      	ldrb	r3, [r3, #3]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	79ba      	ldrb	r2, [r7, #6]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d005      	beq.n	80015d6 <set_direction+0x62>
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	461a      	mov	r2, r3
 80015ce:	2104      	movs	r1, #4
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <set_direction+0x78>)
 80015d2:	f001 fe51 	bl	8003278 <HAL_GPIO_WritePin>
			braking_stepper.mode = CONTROLLER;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <set_direction+0x7c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
			break;
 80015dc:	bf00      	nop
	}
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200002b4 	.word	0x200002b4
 80015ec:	48000800 	.word	0x48000800
 80015f0:	200002ac 	.word	0x200002ac

080015f4 <set_setpoint>:

void set_setpoint(const stepper_id stepper, uint16_t setpoint, int8_t direction){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	460b      	mov	r3, r1
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	71bb      	strb	r3, [r7, #6]
	switch(stepper)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <set_setpoint+0x1e>
 800160c:	2b01      	cmp	r3, #1
 800160e:	d022      	beq.n	8001656 <set_setpoint+0x62>
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
				braking_stepper.current_step = 0;
			}
			break;
		default:
			break;
 8001610:	e045      	b.n	800169e <set_setpoint+0xaa>
			if(steering_stepper.req_steps != setpoint)
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <set_setpoint+0xb4>)
 8001614:	889b      	ldrh	r3, [r3, #4]
 8001616:	b29b      	uxth	r3, r3
 8001618:	88ba      	ldrh	r2, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	d005      	beq.n	800162a <set_setpoint+0x36>
				steering_stepper.req_steps = setpoint;
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <set_setpoint+0xb4>)
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	8093      	strh	r3, [r2, #4]
				steering_stepper.current_step = 0;
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <set_setpoint+0xb4>)
 8001626:	2200      	movs	r2, #0
 8001628:	80da      	strh	r2, [r3, #6]
			if(steering_stepper.direction != direction)
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <set_setpoint+0xb4>)
 800162c:	78db      	ldrb	r3, [r3, #3]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001636:	429a      	cmp	r2, r3
 8001638:	d02e      	beq.n	8001698 <set_setpoint+0xa4>
				steering_stepper.direction = direction;
 800163a:	79ba      	ldrb	r2, [r7, #6]
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <set_setpoint+0xb4>)
 800163e:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin, direction);
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	461a      	mov	r2, r3
 8001644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001648:	4818      	ldr	r0, [pc, #96]	; (80016ac <set_setpoint+0xb8>)
 800164a:	f001 fe15 	bl	8003278 <HAL_GPIO_WritePin>
				steering_stepper.current_step = 0;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <set_setpoint+0xb4>)
 8001650:	2200      	movs	r2, #0
 8001652:	80da      	strh	r2, [r3, #6]
			break;
 8001654:	e020      	b.n	8001698 <set_setpoint+0xa4>
			if(braking_stepper.req_steps != setpoint)
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <set_setpoint+0xbc>)
 8001658:	889b      	ldrh	r3, [r3, #4]
 800165a:	b29b      	uxth	r3, r3
 800165c:	88ba      	ldrh	r2, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d005      	beq.n	800166e <set_setpoint+0x7a>
				braking_stepper.req_steps = setpoint;
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <set_setpoint+0xbc>)
 8001664:	88bb      	ldrh	r3, [r7, #4]
 8001666:	8093      	strh	r3, [r2, #4]
				braking_stepper.current_step = 0;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <set_setpoint+0xbc>)
 800166a:	2200      	movs	r2, #0
 800166c:	80da      	strh	r2, [r3, #6]
			if(braking_stepper.direction != direction)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <set_setpoint+0xbc>)
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800167a:	429a      	cmp	r2, r3
 800167c:	d00e      	beq.n	800169c <set_setpoint+0xa8>
				braking_stepper.direction = direction;
 800167e:	79ba      	ldrb	r2, [r7, #6]
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <set_setpoint+0xbc>)
 8001682:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	461a      	mov	r2, r3
 8001688:	2104      	movs	r1, #4
 800168a:	4808      	ldr	r0, [pc, #32]	; (80016ac <set_setpoint+0xb8>)
 800168c:	f001 fdf4 	bl	8003278 <HAL_GPIO_WritePin>
				braking_stepper.current_step = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <set_setpoint+0xbc>)
 8001692:	2200      	movs	r2, #0
 8001694:	80da      	strh	r2, [r3, #6]
			break;
 8001696:	e001      	b.n	800169c <set_setpoint+0xa8>
			break;
 8001698:	bf00      	nop
 800169a:	e000      	b.n	800169e <set_setpoint+0xaa>
			break;
 800169c:	bf00      	nop
	}
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200002b4 	.word	0x200002b4
 80016ac:	48000800 	.word	0x48000800
 80016b0:	200002ac 	.word	0x200002ac

080016b4 <steer>:
		}
}
*/

void steer()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	if(steering_stepper.active == 1)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <steer+0x50>)
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d11d      	bne.n	80016fe <steer+0x4a>
		if(steering_stepper.mode == CONTROLLER)			// XBOX CONTROLLER
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <steer+0x50>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d118      	bne.n	80016fe <steer+0x4a>
		{
			if(steering_stepper.direction != IDLE)
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <steer+0x50>)
 80016ce:	78db      	ldrb	r3, [r3, #3]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d00c      	beq.n	80016f0 <steer+0x3c>
			{
				if(steering_stepper.exec_started == 0)
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <steer+0x50>)
 80016d8:	789b      	ldrb	r3, [r3, #2]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10e      	bne.n	80016fe <steer+0x4a>
				{
					HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80016e0:	2100      	movs	r1, #0
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <steer+0x54>)
 80016e4:	f003 f8c4 	bl	8004870 <HAL_TIM_PWM_Start_IT>
					steering_stepper.exec_started = 1;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <steer+0x50>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	709a      	strb	r2, [r3, #2]
		/*
		else										// AUTONOMOUS MODE
			if(steering_stepper.req_steps <= steering_stepper.current_step)
				HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
		*/
}
 80016ee:	e006      	b.n	80016fe <steer+0x4a>
				HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80016f0:	2100      	movs	r1, #0
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <steer+0x54>)
 80016f4:	f003 f9e8 	bl	8004ac8 <HAL_TIM_PWM_Stop_IT>
				steering_stepper.exec_started = 0;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <steer+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	709a      	strb	r2, [r3, #2]
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200002b4 	.word	0x200002b4
 8001708:	20000188 	.word	0x20000188

0800170c <HAL_TIM_PWM_PulseFinishedCallback>:
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
}


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
	//steering_stepper.current_step++;
	//braking_stepper.current_step++;
	//HAL_GPIO_TogglePin(GPIOA, DEBUG_2_Pin);
  }
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001724:	f7ff fe8c 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <LoopForever+0x6>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	; (8001760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <LoopForever+0xe>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	; (800176c <LoopForever+0x16>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f007 ff87 	bl	8009660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001752:	f7ff f86f 	bl	8000834 <main>

08001756 <LoopForever>:

LoopForever:
    b LoopForever
 8001756:	e7fe      	b.n	8001756 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001764:	08009a34 	.word	0x08009a34
  ldr r2, =_sbss
 8001768:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800176c:	20003030 	.word	0x20003030

08001770 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_IRQHandler>

08001772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f001 fbcc 	bl	8002f1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001782:	200f      	movs	r0, #15
 8001784:	f7ff fdae 	bl	80012e4 <HAL_InitTick>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	e001      	b.n	8001798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001794:	f7ff fbc2 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001798:	79fb      	ldrb	r3, [r7, #7]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008
 80017c8:	200002bc 	.word	0x200002bc

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200002bc 	.word	0x200002bc

080017e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3360      	adds	r3, #96	; 0x60
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <LL_ADC_SetOffset+0x44>)
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	4313      	orrs	r3, r2
 800187c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	03fff000 	.word	0x03fff000

08001894 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3360      	adds	r3, #96	; 0x60
 80018a2:	461a      	mov	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3360      	adds	r3, #96	; 0x60
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b087      	sub	sp, #28
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3330      	adds	r3, #48	; 0x30
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	211f      	movs	r1, #31
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	f003 011f 	and.w	r1, r3, #31
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800194e:	b480      	push	{r7}
 8001950:	b087      	sub	sp, #28
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3314      	adds	r3, #20
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	0e5b      	lsrs	r3, r3, #25
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0d1b      	lsrs	r3, r3, #20
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	2107      	movs	r1, #7
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	0d1b      	lsrs	r3, r3, #20
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	431a      	orrs	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0318 	and.w	r3, r3, #24
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019c8:	40d9      	lsrs	r1, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	400b      	ands	r3, r1
 80019ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d2:	431a      	orrs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	0007ffff 	.word	0x0007ffff

080019ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6093      	str	r3, [r2, #8]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a24:	d101      	bne.n	8001a2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <LL_ADC_IsEnabled+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <LL_ADC_IsEnabled+0x1a>
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d101      	bne.n	8001ac6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e12c      	b.n	8001d70 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fa21 	bl	8000f6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff67 	bl	8001a10 <LL_ADC_IsDeepPowerDownEnabled>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff4d 	bl	80019ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff82 	bl	8001a60 <LL_ADC_IsInternalRegulatorEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d115      	bne.n	8001b8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff66 	bl	8001a38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b6c:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_ADC_Init+0x27c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	4a82      	ldr	r2, [pc, #520]	; (8001d7c <HAL_ADC_Init+0x280>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff64 	bl	8001a60 <LL_ADC_IsInternalRegulatorEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10d      	bne.n	8001bba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f043 0210 	orr.w	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff75 	bl	8001aae <LL_ADC_REG_IsConversionOngoing>
 8001bc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 80c5 	bne.w	8001d5e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80c1 	bne.w	8001d5e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001be4:	f043 0202 	orr.w	r2, r3, #2
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff49 	bl	8001a88 <LL_ADC_IsEnabled>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10b      	bne.n	8001c14 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bfc:	4860      	ldr	r0, [pc, #384]	; (8001d80 <HAL_ADC_Init+0x284>)
 8001bfe:	f7ff ff43 	bl	8001a88 <LL_ADC_IsEnabled>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	485d      	ldr	r0, [pc, #372]	; (8001d84 <HAL_ADC_Init+0x288>)
 8001c10:	f7ff fde8 	bl	80017e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7e5b      	ldrb	r3, [r3, #25]
 8001c18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d106      	bne.n	8001c50 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	3b01      	subs	r3, #1
 8001c48:	045b      	lsls	r3, r3, #17
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d009      	beq.n	8001c6c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_ADC_Init+0x28c>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff12 	bl	8001aae <LL_ADC_REG_IsConversionOngoing>
 8001c8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff1f 	bl	8001ad4 <LL_ADC_INJ_IsConversionOngoing>
 8001c96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d13d      	bne.n	8001d1a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d13a      	bne.n	8001d1a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ca8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cb0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cc0:	f023 0302 	bic.w	r3, r3, #2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d118      	bne.n	8001d0a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ce2:	f023 0304 	bic.w	r3, r3, #4
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cf4:	4311      	orrs	r1, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	e007      	b.n	8001d1a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10c      	bne.n	8001d3c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f023 010f 	bic.w	r1, r3, #15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3a:	e007      	b.n	8001d4c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 020f 	bic.w	r2, r2, #15
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f023 0303 	bic.w	r3, r3, #3
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d5c:	e007      	b.n	8001d6e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f043 0210 	orr.w	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	053e2d63 	.word	0x053e2d63
 8001d80:	50040000 	.word	0x50040000
 8001d84:	50040300 	.word	0x50040300
 8001d88:	fff0c007 	.word	0xfff0c007

08001d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0b6      	sub	sp, #216	; 0xd8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x22>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e3b9      	b.n	8002522 <HAL_ADC_ConfigChannel+0x796>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fe77 	bl	8001aae <LL_ADC_REG_IsConversionOngoing>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 839e 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d824      	bhi.n	8001e1a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	3b02      	subs	r3, #2
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d81b      	bhi.n	8001e12 <HAL_ADC_ConfigChannel+0x86>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_ADC_ConfigChannel+0x54>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001df9 	.word	0x08001df9
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e09 	.word	0x08001e09
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	220c      	movs	r2, #12
 8001df4:	605a      	str	r2, [r3, #4]
          break;
 8001df6:	e011      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2212      	movs	r2, #18
 8001dfc:	605a      	str	r2, [r3, #4]
          break;
 8001dfe:	e00d      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2218      	movs	r2, #24
 8001e04:	605a      	str	r2, [r3, #4]
          break;
 8001e06:	e009      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0e:	605a      	str	r2, [r3, #4]
          break;
 8001e10:	e004      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2206      	movs	r2, #6
 8001e16:	605a      	str	r2, [r3, #4]
          break;
 8001e18:	e000      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e1a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f7ff fd64 	bl	80018f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fe3b 	bl	8001aae <LL_ADC_REG_IsConversionOngoing>
 8001e38:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fe47 	bl	8001ad4 <LL_ADC_INJ_IsConversionOngoing>
 8001e46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 81a6 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 81a1 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7ff fd6f 	bl	800194e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	08db      	lsrs	r3, r3, #3
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d00a      	beq.n	8001ea8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6919      	ldr	r1, [r3, #16]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ea2:	f7ff fcd3 	bl	800184c <LL_ADC_SetOffset>
 8001ea6:	e17b      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fcf0 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x148>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fce5 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	0e9b      	lsrs	r3, r3, #26
 8001ece:	f003 021f 	and.w	r2, r3, #31
 8001ed2:	e01e      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x186>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fcda 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e004      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x19e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0e9b      	lsrs	r3, r3, #26
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	e018      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x1d0>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e004      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d106      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fca9 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2101      	movs	r1, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fc8d 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x20e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fc82 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	0e9b      	lsrs	r3, r3, #26
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	e01e      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x24c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fc77 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001fb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e004      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x264>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	e018      	b.n	8002022 <HAL_ADC_ConfigChannel+0x296>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800200c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002022:	429a      	cmp	r2, r3
 8002024:	d106      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	2101      	movs	r1, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fc46 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc2a 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x2d4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2102      	movs	r1, #2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fc1f 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	0e9b      	lsrs	r3, r3, #26
 800205a:	f003 021f 	and.w	r2, r3, #31
 800205e:	e01e      	b.n	800209e <HAL_ADC_ConfigChannel+0x312>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2102      	movs	r1, #2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc14 	bl	8001894 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800207e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800208e:	2320      	movs	r3, #32
 8002090:	e004      	b.n	800209c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x32a>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	e016      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x358>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e004      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80020da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2102      	movs	r1, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fbe5 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2103      	movs	r1, #3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fbc9 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x396>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2103      	movs	r1, #3
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fbbe 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	0e9b      	lsrs	r3, r3, #26
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	e017      	b.n	8002152 <HAL_ADC_ConfigChannel+0x3c6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2103      	movs	r1, #3
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fbb3 	bl	8001894 <LL_ADC_GetOffsetChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800213a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800213c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800213e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002144:	2320      	movs	r3, #32
 8002146:	e003      	b.n	8002150 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_ADC_ConfigChannel+0x3de>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0e9b      	lsrs	r3, r3, #26
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	e011      	b.n	800218e <HAL_ADC_ConfigChannel+0x402>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800217a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800217c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e003      	b.n	800218e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800218e:	429a      	cmp	r2, r3
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	2103      	movs	r1, #3
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fb90 	bl	80018c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fc6f 	bl	8001a88 <LL_ADC_IsEnabled>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 813f 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7ff fbf0 	bl	80019a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a8e      	ldr	r2, [pc, #568]	; (8002404 <HAL_ADC_ConfigChannel+0x678>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	f040 8130 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x46c>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2b09      	cmp	r3, #9
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e019      	b.n	800222c <HAL_ADC_ConfigChannel+0x4a0>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002208:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800220a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2b09      	cmp	r3, #9
 8002224:	bf94      	ite	ls
 8002226:	2301      	movls	r3, #1
 8002228:	2300      	movhi	r3, #0
 800222a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800222c:	2b00      	cmp	r3, #0
 800222e:	d079      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_ADC_ConfigChannel+0x4c0>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	3301      	adds	r3, #1
 8002244:	069b      	lsls	r3, r3, #26
 8002246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224a:	e015      	b.n	8002278 <HAL_ADC_ConfigChannel+0x4ec>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800225a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800225c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800225e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	069b      	lsls	r3, r3, #26
 8002274:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x50c>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	e017      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x53c>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80022b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	ea42 0103 	orr.w	r1, r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10a      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x562>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	051b      	lsls	r3, r3, #20
 80022ec:	e018      	b.n	8002320 <HAL_ADC_ConfigChannel+0x594>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e003      	b.n	8002312 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800230a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002320:	430b      	orrs	r3, r1
 8002322:	e080      	b.n	8002426 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x5b4>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	069b      	lsls	r3, r3, #26
 800233a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800233e:	e015      	b.n	800236c <HAL_ADC_ConfigChannel+0x5e0>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e003      	b.n	8002364 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	069b      	lsls	r3, r3, #26
 8002368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_ADC_ConfigChannel+0x600>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	e017      	b.n	80023bc <HAL_ADC_ConfigChannel+0x630>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	61fb      	str	r3, [r7, #28]
  return result;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	ea42 0103 	orr.w	r1, r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x65c>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	3301      	adds	r3, #1
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	3b1e      	subs	r3, #30
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023e6:	e01d      	b.n	8002424 <HAL_ADC_ConfigChannel+0x698>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	613b      	str	r3, [r7, #16]
  return result;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e005      	b.n	8002410 <HAL_ADC_ConfigChannel+0x684>
 8002404:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 021f 	and.w	r2, r3, #31
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	3b1e      	subs	r3, #30
 800241e:	051b      	lsls	r3, r3, #20
 8002420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002424:	430b      	orrs	r3, r1
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	4619      	mov	r1, r3
 800242c:	f7ff fa8f 	bl	800194e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_ADC_ConfigChannel+0x7a0>)
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d06c      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800243c:	483c      	ldr	r0, [pc, #240]	; (8002530 <HAL_ADC_ConfigChannel+0x7a4>)
 800243e:	f7ff f9f7 	bl	8001830 <LL_ADC_GetCommonPathInternalCh>
 8002442:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3a      	ldr	r2, [pc, #232]	; (8002534 <HAL_ADC_ConfigChannel+0x7a8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d127      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d121      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a35      	ldr	r2, [pc, #212]	; (8002538 <HAL_ADC_ConfigChannel+0x7ac>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d157      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800246a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800246e:	4619      	mov	r1, r3
 8002470:	482f      	ldr	r0, [pc, #188]	; (8002530 <HAL_ADC_ConfigChannel+0x7a4>)
 8002472:	f7ff f9ca 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002476:	4b31      	ldr	r3, [pc, #196]	; (800253c <HAL_ADC_ConfigChannel+0x7b0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	4a30      	ldr	r2, [pc, #192]	; (8002540 <HAL_ADC_ConfigChannel+0x7b4>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002490:	e002      	b.n	8002498 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3b01      	subs	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f9      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800249e:	e03a      	b.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a27      	ldr	r2, [pc, #156]	; (8002544 <HAL_ADC_ConfigChannel+0x7b8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d113      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x746>
 80024aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <HAL_ADC_ConfigChannel+0x7ac>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d12a      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c8:	4619      	mov	r1, r3
 80024ca:	4819      	ldr	r0, [pc, #100]	; (8002530 <HAL_ADC_ConfigChannel+0x7a4>)
 80024cc:	f7ff f99d 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024d0:	e021      	b.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_ADC_ConfigChannel+0x7bc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d11c      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d116      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_ADC_ConfigChannel+0x7ac>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d111      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <HAL_ADC_ConfigChannel+0x7a4>)
 80024fe:	f7ff f984 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
 8002502:	e008      	b.n	8002516 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800251e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002522:	4618      	mov	r0, r3
 8002524:	37d8      	adds	r7, #216	; 0xd8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	80080000 	.word	0x80080000
 8002530:	50040300 	.word	0x50040300
 8002534:	c7520000 	.word	0xc7520000
 8002538:	50040000 	.word	0x50040000
 800253c:	20000000 	.word	0x20000000
 8002540:	053e2d63 	.word	0x053e2d63
 8002544:	cb840000 	.word	0xcb840000
 8002548:	80000001 	.word	0x80000001

0800254c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0ed      	b.n	800273a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fd64 	bl	8001038 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002580:	f7ff f924 	bl	80017cc <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002586:	e012      	b.n	80025ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002588:	f7ff f920 	bl	80017cc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b0a      	cmp	r3, #10
 8002594:	d90b      	bls.n	80025ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2205      	movs	r2, #5
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0c5      	b.n	800273a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0e5      	beq.n	8002588 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0202 	bic.w	r2, r2, #2
 80025ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025cc:	f7ff f8fe 	bl	80017cc <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025d2:	e012      	b.n	80025fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025d4:	f7ff f8fa 	bl	80017cc <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b0a      	cmp	r3, #10
 80025e0:	d90b      	bls.n	80025fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2205      	movs	r2, #5
 80025f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e09f      	b.n	800273a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e5      	bne.n	80025d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7e1b      	ldrb	r3, [r3, #24]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d108      	bne.n	8002622 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e007      	b.n	8002632 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7e5b      	ldrb	r3, [r3, #25]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e007      	b.n	800265c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800265a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e9b      	ldrb	r3, [r3, #26]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d108      	bne.n	8002676 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0220 	orr.w	r2, r2, #32
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e007      	b.n	8002686 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0220 	bic.w	r2, r2, #32
 8002684:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7edb      	ldrb	r3, [r3, #27]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0210 	bic.w	r2, r2, #16
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e007      	b.n	80026b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0210 	orr.w	r2, r2, #16
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7f1b      	ldrb	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d108      	bne.n	80026ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0208 	orr.w	r2, r2, #8
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e007      	b.n	80026da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0208 	bic.w	r2, r2, #8
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7f5b      	ldrb	r3, [r3, #29]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0204 	orr.w	r2, r2, #4
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e007      	b.n	8002704 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0204 	bic.w	r2, r2, #4
 8002702:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	ea42 0103 	orr.w	r1, r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002742:	b480      	push	{r7}
 8002744:	b087      	sub	sp, #28
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002758:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d003      	beq.n	8002768 <HAL_CAN_ConfigFilter+0x26>
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b02      	cmp	r3, #2
 8002764:	f040 80aa 	bne.w	80028bc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2201      	movs	r2, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d123      	bne.n	80027ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	401a      	ands	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3248      	adds	r2, #72	; 0x48
 80027ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027e0:	6979      	ldr	r1, [r7, #20]
 80027e2:	3348      	adds	r3, #72	; 0x48
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d122      	bne.n	8002838 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002812:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3248      	adds	r2, #72	; 0x48
 8002818:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800282c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800282e:	6979      	ldr	r1, [r7, #20]
 8002830:	3348      	adds	r3, #72	; 0x48
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	43db      	mvns	r3, r3
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002852:	e007      	b.n	8002864 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	431a      	orrs	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	43db      	mvns	r3, r3
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800287e:	e007      	b.n	8002890 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	431a      	orrs	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e006      	b.n	80028ca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
  }
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d12e      	bne.n	8002948 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002902:	f7fe ff63 	bl	80017cc <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002908:	e012      	b.n	8002930 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800290a:	f7fe ff5f 	bl	80017cc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b0a      	cmp	r3, #10
 8002916:	d90b      	bls.n	8002930 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2205      	movs	r2, #5
 8002928:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e012      	b.n	8002956 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e5      	bne.n	800290a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e006      	b.n	8002956 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800295e:	b480      	push	{r7}
 8002960:	b089      	sub	sp, #36	; 0x24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002972:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800297c:	7ffb      	ldrb	r3, [r7, #31]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d003      	beq.n	800298a <HAL_CAN_AddTxMessage+0x2c>
 8002982:	7ffb      	ldrb	r3, [r7, #31]
 8002984:	2b02      	cmp	r3, #2
 8002986:	f040 80ad 	bne.w	8002ae4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8095 	beq.w	8002ad4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	0e1b      	lsrs	r3, r3, #24
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029b4:	2201      	movs	r2, #1
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	409a      	lsls	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	6809      	ldr	r1, [r1, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3318      	adds	r3, #24
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	440b      	add	r3, r1
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e00f      	b.n	8002a02 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3318      	adds	r3, #24
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	440b      	add	r3, r1
 8002a00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3318      	adds	r3, #24
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	440b      	add	r3, r1
 8002a12:	3304      	adds	r3, #4
 8002a14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	7d1b      	ldrb	r3, [r3, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d111      	bne.n	8002a42 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3318      	adds	r3, #24
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3318      	adds	r3, #24
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3304      	adds	r3, #4
 8002a40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3307      	adds	r3, #7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	061a      	lsls	r2, r3, #24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3306      	adds	r3, #6
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3305      	adds	r3, #5
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	3204      	adds	r2, #4
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	4610      	mov	r0, r2
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	ea43 0200 	orr.w	r2, r3, r0
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	440b      	add	r3, r1
 8002a74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	061a      	lsls	r2, r3, #24
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3302      	adds	r3, #2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	4313      	orrs	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	6811      	ldr	r1, [r2, #0]
 8002aa0:	ea43 0200 	orr.w	r2, r3, r0
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002aae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3318      	adds	r3, #24
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	4413      	add	r3, r2
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	6811      	ldr	r1, [r2, #0]
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3318      	adds	r3, #24
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	440b      	add	r3, r1
 8002ace:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e00e      	b.n	8002af2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e006      	b.n	8002af2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b12:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d003      	beq.n	8002b22 <HAL_CAN_GetRxMessage+0x24>
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	f040 80f3 	bne.w	8002d08 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10e      	bne.n	8002b46 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e0e7      	b.n	8002d16 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d8      	b.n	8002d16 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	331b      	adds	r3, #27
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4413      	add	r3, r2
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0204 	and.w	r2, r3, #4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	331b      	adds	r3, #27
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	4413      	add	r3, r2
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0d5b      	lsrs	r3, r3, #21
 8002b92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	331b      	adds	r3, #27
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	4413      	add	r3, r2
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	331b      	adds	r3, #27
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	4413      	add	r3, r2
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0202 	and.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	331b      	adds	r3, #27
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	331b      	adds	r3, #27
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	331b      	adds	r3, #27
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	4413      	add	r3, r2
 8002c06:	3304      	adds	r3, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0a1a      	lsrs	r2, r3, #8
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	0c1a      	lsrs	r2, r3, #16
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	3302      	adds	r3, #2
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0e1a      	lsrs	r2, r3, #24
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	3303      	adds	r3, #3
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0a1a      	lsrs	r2, r3, #8
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	3305      	adds	r3, #5
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0c1a      	lsrs	r2, r3, #16
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	3306      	adds	r3, #6
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	0e1a      	lsrs	r2, r3, #24
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	3307      	adds	r3, #7
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0220 	orr.w	r2, r2, #32
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	e007      	b.n	8002d04 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0220 	orr.w	r2, r2, #32
 8002d02:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e006      	b.n	8002d16 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d36:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d38:	7afb      	ldrb	r3, [r7, #11]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d002      	beq.n	8002d44 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d10f      	bne.n	8002d64 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e005      	b.n	8002d64 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002d64:	68fb      	ldr	r3, [r7, #12]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d82:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d002      	beq.n	8002d90 <HAL_CAN_ActivateNotification+0x1e>
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d109      	bne.n	8002da4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6959      	ldr	r1, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e006      	b.n	8002db2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4907      	ldr	r1, [pc, #28]	; (8002e5c <__NVIC_EnableIRQ+0x38>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	; (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff4c 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f42:	f7ff ff61 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	6978      	ldr	r0, [r7, #20]
 8002f4e:	f7ff ffb1 	bl	8002eb4 <NVIC_EncodePriority>
 8002f52:	4602      	mov	r2, r0
 8002f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff80 	bl	8002e60 <__NVIC_SetPriority>
}
 8002f60:	bf00      	nop
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff54 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f92:	e154      	b.n	800323e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8146 	beq.w	8003238 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d005      	beq.n	8002fc4 <HAL_GPIO_Init+0x40>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d130      	bne.n	8003026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 0201 	and.w	r2, r3, #1
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b03      	cmp	r3, #3
 8003030:	d017      	beq.n	8003062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d123      	bne.n	80030b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	08da      	lsrs	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3208      	adds	r2, #8
 8003076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	220f      	movs	r2, #15
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	6939      	ldr	r1, [r7, #16]
 80030b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0203 	and.w	r2, r3, #3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80a0 	beq.w	8003238 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f8:	4b58      	ldr	r3, [pc, #352]	; (800325c <HAL_GPIO_Init+0x2d8>)
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	4a57      	ldr	r2, [pc, #348]	; (800325c <HAL_GPIO_Init+0x2d8>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6613      	str	r3, [r2, #96]	; 0x60
 8003104:	4b55      	ldr	r3, [pc, #340]	; (800325c <HAL_GPIO_Init+0x2d8>)
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003110:	4a53      	ldr	r2, [pc, #332]	; (8003260 <HAL_GPIO_Init+0x2dc>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800313a:	d019      	beq.n	8003170 <HAL_GPIO_Init+0x1ec>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a49      	ldr	r2, [pc, #292]	; (8003264 <HAL_GPIO_Init+0x2e0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <HAL_GPIO_Init+0x1e8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a48      	ldr	r2, [pc, #288]	; (8003268 <HAL_GPIO_Init+0x2e4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00d      	beq.n	8003168 <HAL_GPIO_Init+0x1e4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a47      	ldr	r2, [pc, #284]	; (800326c <HAL_GPIO_Init+0x2e8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <HAL_GPIO_Init+0x1e0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a46      	ldr	r2, [pc, #280]	; (8003270 <HAL_GPIO_Init+0x2ec>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_GPIO_Init+0x1dc>
 800315c:	2304      	movs	r3, #4
 800315e:	e008      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003160:	2307      	movs	r3, #7
 8003162:	e006      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003164:	2303      	movs	r3, #3
 8003166:	e004      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003168:	2302      	movs	r3, #2
 800316a:	e002      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003170:	2300      	movs	r3, #0
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	f002 0203 	and.w	r2, r2, #3
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	4093      	lsls	r3, r2
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003182:	4937      	ldr	r1, [pc, #220]	; (8003260 <HAL_GPIO_Init+0x2dc>)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003190:	4b38      	ldr	r3, [pc, #224]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031b4:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031de:	4a25      	ldr	r2, [pc, #148]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003208:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3301      	adds	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f aea3 	bne.w	8002f94 <HAL_GPIO_Init+0x10>
  }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40021000 	.word	0x40021000
 8003260:	40010000 	.word	0x40010000
 8003264:	48000400 	.word	0x48000400
 8003268:	48000800 	.word	0x48000800
 800326c:	48000c00 	.word	0x48000c00
 8003270:	48001000 	.word	0x48001000
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003294:	e002      	b.n	800329c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40007000 	.word	0x40007000

080032c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d2:	d130      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e0:	d038      	beq.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ea:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2232      	movs	r2, #50	; 0x32
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0c9b      	lsrs	r3, r3, #18
 8003304:	3301      	adds	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003308:	e002      	b.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3b01      	subs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d102      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x60>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f2      	bne.n	800330a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d110      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e00f      	b.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d007      	beq.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800334c:	4a05      	ldr	r2, [pc, #20]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003352:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40007000 	.word	0x40007000
 8003368:	20000000 	.word	0x20000000
 800336c:	431bde83 	.word	0x431bde83

08003370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f000 bc02 	b.w	8003b88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003384:	4b96      	ldr	r3, [pc, #600]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800338e:	4b94      	ldr	r3, [pc, #592]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80e4 	beq.w	800356e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <HAL_RCC_OscConfig+0x4c>
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	f040 808b 	bne.w	80034ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	f040 8087 	bne.w	80034ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033bc:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_OscConfig+0x64>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e3d9      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <HAL_RCC_OscConfig+0x7e>
 80033e4:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ec:	e005      	b.n	80033fa <HAL_RCC_OscConfig+0x8a>
 80033ee:	4b7c      	ldr	r3, [pc, #496]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80033f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d223      	bcs.n	8003446 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fdbc 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e3ba      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a72      	ldr	r2, [pc, #456]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b70      	ldr	r3, [pc, #448]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	496d      	ldr	r1, [pc, #436]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003430:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	4968      	ldr	r1, [pc, #416]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
 8003444:	e025      	b.n	8003492 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003446:	4b66      	ldr	r3, [pc, #408]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a65      	ldr	r2, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4960      	ldr	r1, [pc, #384]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003464:	4b5e      	ldr	r3, [pc, #376]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	495b      	ldr	r1, [pc, #364]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fd7c 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e37a      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003492:	f000 fc81 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	4950      	ldr	r1, [pc, #320]	; (80035e4 <HAL_RCC_OscConfig+0x274>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a4e      	ldr	r2, [pc, #312]	; (80035e8 <HAL_RCC_OscConfig+0x278>)
 80034b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034b2:	4b4e      	ldr	r3, [pc, #312]	; (80035ec <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd ff14 	bl	80012e4 <HAL_InitTick>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d052      	beq.n	800356c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	e35e      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d032      	beq.n	8003538 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034d2:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a42      	ldr	r2, [pc, #264]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034de:	f7fe f975 	bl	80017cc <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034e6:	f7fe f971 	bl	80017cc <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e347      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f8:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a35      	ldr	r2, [pc, #212]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4930      	ldr	r1, [pc, #192]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003522:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	492b      	ldr	r1, [pc, #172]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
 8003536:	e01a      	b.n	800356e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003544:	f7fe f942 	bl	80017cc <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800354c:	f7fe f93e 	bl	80017cc <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e314      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1dc>
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800356c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d073      	beq.n	8003662 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d005      	beq.n	800358c <HAL_RCC_OscConfig+0x21c>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d10e      	bne.n	80035a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d10b      	bne.n	80035a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d063      	beq.n	8003660 <HAL_RCC_OscConfig+0x2f0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d15f      	bne.n	8003660 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e2f1      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d106      	bne.n	80035bc <HAL_RCC_OscConfig+0x24c>
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e025      	b.n	8003608 <HAL_RCC_OscConfig+0x298>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c4:	d114      	bne.n	80035f0 <HAL_RCC_OscConfig+0x280>
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80035cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a02      	ldr	r2, [pc, #8]	; (80035e0 <HAL_RCC_OscConfig+0x270>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e013      	b.n	8003608 <HAL_RCC_OscConfig+0x298>
 80035e0:	40021000 	.word	0x40021000
 80035e4:	0800997c 	.word	0x0800997c
 80035e8:	20000000 	.word	0x20000000
 80035ec:	20000004 	.word	0x20000004
 80035f0:	4ba0      	ldr	r3, [pc, #640]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a9f      	ldr	r2, [pc, #636]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b9d      	ldr	r3, [pc, #628]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a9c      	ldr	r2, [pc, #624]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe f8dc 	bl	80017cc <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe f8d8 	bl	80017cc <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e2ae      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362a:	4b92      	ldr	r3, [pc, #584]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x2a8>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe f8c8 	bl	80017cc <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe f8c4 	bl	80017cc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e29a      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003652:	4b88      	ldr	r3, [pc, #544]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x2d0>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d060      	beq.n	8003730 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d005      	beq.n	8003680 <HAL_RCC_OscConfig+0x310>
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d119      	bne.n	80036ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d116      	bne.n	80036ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003680:	4b7c      	ldr	r3, [pc, #496]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x328>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e277      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b76      	ldr	r3, [pc, #472]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	4973      	ldr	r1, [pc, #460]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ac:	e040      	b.n	8003730 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d023      	beq.n	80036fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b6:	4b6f      	ldr	r3, [pc, #444]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6e      	ldr	r2, [pc, #440]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fe f883 	bl	80017cc <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fe f87f 	bl	80017cc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e255      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	4b65      	ldr	r3, [pc, #404]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	495f      	ldr	r1, [pc, #380]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
 80036fc:	e018      	b.n	8003730 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fe:	4b5d      	ldr	r3, [pc, #372]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a5c      	ldr	r2, [pc, #368]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fe f85f 	bl	80017cc <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003712:	f7fe f85b 	bl	80017cc <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e231      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d03c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01c      	beq.n	800377e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003744:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374a:	4a4a      	ldr	r2, [pc, #296]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe f83a 	bl	80017cc <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375c:	f7fe f836 	bl	80017cc <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e20c      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376e:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ef      	beq.n	800375c <HAL_RCC_OscConfig+0x3ec>
 800377c:	e01b      	b.n	80037b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003784:	4a3b      	ldr	r2, [pc, #236]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7fe f81d 	bl	80017cc <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003796:	f7fe f819 	bl	80017cc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1ef      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1ef      	bne.n	8003796 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80a6 	beq.w	8003910 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c4:	2300      	movs	r3, #0
 80037c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037c8:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	4a26      	ldr	r2, [pc, #152]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	6593      	str	r3, [r2, #88]	; 0x58
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCC_OscConfig+0x508>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d118      	bne.n	800382e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037fc:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCC_OscConfig+0x508>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <HAL_RCC_OscConfig+0x508>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003806:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003808:	f7fd ffe0 	bl	80017cc <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003810:	f7fd ffdc 	bl	80017cc <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1b2      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_RCC_OscConfig+0x508>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <HAL_RCC_OscConfig+0x4d8>
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003846:	e029      	b.n	800389c <HAL_RCC_OscConfig+0x52c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b05      	cmp	r3, #5
 800384e:	d115      	bne.n	800387c <HAL_RCC_OscConfig+0x50c>
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a07      	ldr	r2, [pc, #28]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	4a03      	ldr	r2, [pc, #12]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003870:	e014      	b.n	800389c <HAL_RCC_OscConfig+0x52c>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	4b9a      	ldr	r3, [pc, #616]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	4a99      	ldr	r2, [pc, #612]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800388c:	4b96      	ldr	r3, [pc, #600]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	4a95      	ldr	r2, [pc, #596]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003894:	f023 0304 	bic.w	r3, r3, #4
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d016      	beq.n	80038d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fd ff92 	bl	80017cc <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ac:	f7fd ff8e 	bl	80017cc <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e162      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c2:	4b89      	ldr	r3, [pc, #548]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ed      	beq.n	80038ac <HAL_RCC_OscConfig+0x53c>
 80038d0:	e015      	b.n	80038fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d2:	f7fd ff7b 	bl	80017cc <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fd ff77 	bl	80017cc <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e14b      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f0:	4b7d      	ldr	r3, [pc, #500]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ed      	bne.n	80038da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fe:	7ffb      	ldrb	r3, [r7, #31]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003904:	4b78      	ldr	r3, [pc, #480]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	4a77      	ldr	r2, [pc, #476]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d03c      	beq.n	8003996 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01c      	beq.n	800395e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003924:	4b70      	ldr	r3, [pc, #448]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800392a:	4a6f      	ldr	r2, [pc, #444]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd ff4a 	bl	80017cc <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800393c:	f7fd ff46 	bl	80017cc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e11c      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800394e:	4b66      	ldr	r3, [pc, #408]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ef      	beq.n	800393c <HAL_RCC_OscConfig+0x5cc>
 800395c:	e01b      	b.n	8003996 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800395e:	4b62      	ldr	r3, [pc, #392]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003964:	4a60      	ldr	r2, [pc, #384]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fd ff2d 	bl	80017cc <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003976:	f7fd ff29 	bl	80017cc <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0ff      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003988:	4b57      	ldr	r3, [pc, #348]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 800398a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1ef      	bne.n	8003976 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80f3 	beq.w	8003b86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	f040 80c9 	bne.w	8003b3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039aa:	4b4f      	ldr	r3, [pc, #316]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0203 	and.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d12c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	3b01      	subs	r3, #1
 80039ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d123      	bne.n	8003a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d11b      	bne.n	8003a18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d113      	bne.n	8003a18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	3b01      	subs	r3, #1
 80039fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d109      	bne.n	8003a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	3b01      	subs	r3, #1
 8003a12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d06b      	beq.n	8003af0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d062      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a1e:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0ac      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2d      	ldr	r2, [pc, #180]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a3a:	f7fd fec7 	bl	80017cc <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fd fec3 	bl	80017cc <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e099      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCC_OscConfig+0x77c>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a70:	3a01      	subs	r2, #1
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7a:	0212      	lsls	r2, r2, #8
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a82:	0852      	lsrs	r2, r2, #1
 8003a84:	3a01      	subs	r2, #1
 8003a86:	0552      	lsls	r2, r2, #21
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a8e:	0852      	lsrs	r2, r2, #1
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0652      	lsls	r2, r2, #25
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a9a:	06d2      	lsls	r2, r2, #27
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	4912      	ldr	r1, [pc, #72]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003abc:	f7fd fe86 	bl	80017cc <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fe82 	bl	80017cc <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e058      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <HAL_RCC_OscConfig+0x778>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae2:	e050      	b.n	8003b86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e04f      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af0:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d144      	bne.n	8003b86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003afc:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b14:	f7fd fe5a 	bl	80017cc <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fd fe56 	bl	80017cc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e02c      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x7ac>
 8003b3a:	e024      	b.n	8003b86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	d01f      	beq.n	8003b82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd fe3d 	bl	80017cc <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b56:	f7fd fe39 	bl	80017cc <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e00f      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	4905      	ldr	r1, [pc, #20]	; (8003b90 <HAL_RCC_OscConfig+0x820>)
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCC_OscConfig+0x824>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60cb      	str	r3, [r1, #12]
 8003b80:	e001      	b.n	8003b86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	feeefffc 	.word	0xfeeefffc

08003b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0e7      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b75      	ldr	r3, [pc, #468]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d910      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b72      	ldr	r3, [pc, #456]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4970      	ldr	r1, [pc, #448]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b6e      	ldr	r3, [pc, #440]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0cf      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d010      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d908      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4960      	ldr	r1, [pc, #384]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d04c      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d121      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0a6      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c36:	4b54      	ldr	r3, [pc, #336]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d115      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e09a      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c4e:	4b4e      	ldr	r3, [pc, #312]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e08e      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e086      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4943      	ldr	r1, [pc, #268]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c80:	f7fd fda4 	bl	80017cc <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fd fda0 	bl	80017cc <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e06e      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 020c 	and.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1eb      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d208      	bcs.n	8003cde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	492b      	ldr	r1, [pc, #172]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d210      	bcs.n	8003d0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 0207 	bic.w	r2, r3, #7
 8003cf4:	4923      	ldr	r1, [pc, #140]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e036      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4918      	ldr	r1, [pc, #96]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d38:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4910      	ldr	r1, [pc, #64]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d4c:	f000 f824 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	490b      	ldr	r1, [pc, #44]	; (8003d8c <HAL_RCC_ClockConfig+0x1f4>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <HAL_RCC_ClockConfig+0x1f8>)
 8003d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCC_ClockConfig+0x1fc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fd fab7 	bl	80012e4 <HAL_InitTick>
 8003d76:	4603      	mov	r3, r0
 8003d78:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	0800997c 	.word	0x0800997c
 8003d90:	20000000 	.word	0x20000000
 8003d94:	20000004 	.word	0x20000004

08003d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da6:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db0:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x34>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d121      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d11e      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dd8:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e005      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003df4:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e004      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e1c:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d134      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d003      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0xac>
 8003e3c:	e005      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e40:	617b      	str	r3, [r7, #20]
      break;
 8003e42:	e005      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e44:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e46:	617b      	str	r3, [r7, #20]
      break;
 8003e48:	e002      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	617b      	str	r3, [r7, #20]
      break;
 8003e4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e50:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	fb03 f202 	mul.w	r2, r3, r2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	0e5b      	lsrs	r3, r3, #25
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	3301      	adds	r3, #1
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e90:	69bb      	ldr	r3, [r7, #24]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	08009994 	.word	0x08009994
 8003ea8:	00f42400 	.word	0x00f42400

08003eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000000 	.word	0x20000000

08003ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec8:	f7ff fff0 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4904      	ldr	r1, [pc, #16]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	0800998c 	.word	0x0800998c

08003ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ef4:	f7ff ffda 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	0adb      	lsrs	r3, r3, #11
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4904      	ldr	r1, [pc, #16]	; (8003f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40021000 	.word	0x40021000
 8003f18:	0800998c 	.word	0x0800998c

08003f1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	220f      	movs	r2, #15
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCC_GetClockConfig+0x5c>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0203 	and.w	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_RCC_GetClockConfig+0x5c>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_RCC_GetClockConfig+0x5c>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCC_GetClockConfig+0x5c>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_RCC_GetClockConfig+0x60>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0207 	and.w	r2, r3, #7
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40022000 	.word	0x40022000

08003f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f98:	f7ff f986 	bl	80032a8 <HAL_PWREx_GetVoltageRange>
 8003f9c:	6178      	str	r0, [r7, #20]
 8003f9e:	e014      	b.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	4a24      	ldr	r2, [pc, #144]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6593      	str	r3, [r2, #88]	; 0x58
 8003fac:	4b22      	ldr	r3, [pc, #136]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fb8:	f7ff f976 	bl	80032a8 <HAL_PWREx_GetVoltageRange>
 8003fbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd0:	d10b      	bne.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d919      	bls.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2ba0      	cmp	r3, #160	; 0xa0
 8003fdc:	d902      	bls.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fde:	2302      	movs	r3, #2
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e013      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e010      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d902      	bls.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e00a      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d102      	bne.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e004      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b70      	cmp	r3, #112	; 0x70
 8004006:	d101      	bne.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004008:	2301      	movs	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 0207 	bic.w	r2, r3, #7
 8004014:	4909      	ldr	r1, [pc, #36]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	40022000 	.word	0x40022000

08004040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004048:	2300      	movs	r3, #0
 800404a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800404c:	2300      	movs	r3, #0
 800404e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004058:	2b00      	cmp	r3, #0
 800405a:	d031      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004064:	d01a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004066:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800406a:	d814      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004074:	d10f      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004076:	4b5d      	ldr	r3, [pc, #372]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	4a5c      	ldr	r2, [pc, #368]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004082:	e00c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f9f0 	bl	8004470 <RCCEx_PLLSAI1_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004094:	e003      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	74fb      	strb	r3, [r7, #19]
      break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800409c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a4:	4b51      	ldr	r3, [pc, #324]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	494e      	ldr	r1, [pc, #312]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 809e 	beq.w	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040d2:	4b46      	ldr	r3, [pc, #280]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e8:	4b40      	ldr	r3, [pc, #256]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	4a3f      	ldr	r2, [pc, #252]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6593      	str	r3, [r2, #88]	; 0x58
 80040f4:	4b3d      	ldr	r3, [pc, #244]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004100:	2301      	movs	r3, #1
 8004102:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004104:	4b3a      	ldr	r3, [pc, #232]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a39      	ldr	r2, [pc, #228]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800410a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004110:	f7fd fb5c 	bl	80017cc <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004116:	e009      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004118:	f7fd fb58 	bl	80017cc <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	74fb      	strb	r3, [r7, #19]
        break;
 800412a:	e005      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800412c:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ef      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d15a      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004148:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01e      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	429a      	cmp	r2, r3
 8004158:	d019      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004166:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004186:	4a19      	ldr	r2, [pc, #100]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d016      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fd fb18 	bl	80017cc <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419e:	e00b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fd fb14 	bl	80017cc <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d902      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	74fb      	strb	r3, [r7, #19]
            break;
 80041b6:	e006      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ec      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	4904      	ldr	r1, [pc, #16]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041e2:	e009      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	74bb      	strb	r3, [r7, #18]
 80041e8:	e006      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f8:	7c7b      	ldrb	r3, [r7, #17]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d105      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fe:	4b9b      	ldr	r3, [pc, #620]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	4a9a      	ldr	r2, [pc, #616]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004216:	4b95      	ldr	r3, [pc, #596]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 0203 	bic.w	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4991      	ldr	r1, [pc, #580]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004238:	4b8c      	ldr	r3, [pc, #560]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 020c 	bic.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	4989      	ldr	r1, [pc, #548]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800425a:	4b84      	ldr	r3, [pc, #528]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	4980      	ldr	r1, [pc, #512]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800427c:	4b7b      	ldr	r3, [pc, #492]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4978      	ldr	r1, [pc, #480]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800429e:	4b73      	ldr	r3, [pc, #460]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	496f      	ldr	r1, [pc, #444]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042c0:	4b6a      	ldr	r3, [pc, #424]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	4967      	ldr	r1, [pc, #412]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e2:	4b62      	ldr	r3, [pc, #392]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	495e      	ldr	r1, [pc, #376]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	4956      	ldr	r1, [pc, #344]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004326:	4b51      	ldr	r3, [pc, #324]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d028      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004348:	4b48      	ldr	r3, [pc, #288]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004356:	4945      	ldr	r1, [pc, #276]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004366:	d106      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004368:	4b40      	ldr	r3, [pc, #256]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a3f      	ldr	r2, [pc, #252]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800436e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004372:	60d3      	str	r3, [r2, #12]
 8004374:	e011      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800437e:	d10c      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f872 	bl	8004470 <RCCEx_PLLSAI1_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d028      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a6:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	492d      	ldr	r1, [pc, #180]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c4:	d106      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c6:	4b29      	ldr	r3, [pc, #164]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4a28      	ldr	r2, [pc, #160]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d0:	60d3      	str	r3, [r2, #12]
 80043d2:	e011      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f843 	bl	8004470 <RCCEx_PLLSAI1_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01c      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004422:	d10c      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f820 	bl	8004470 <RCCEx_PLLSAI1_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	4904      	ldr	r1, [pc, #16]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004460:	7cbb      	ldrb	r3, [r7, #18]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000

08004470 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800447e:	4b74      	ldr	r3, [pc, #464]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d018      	beq.n	80044bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800448a:	4b71      	ldr	r3, [pc, #452]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0203 	and.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d10d      	bne.n	80044b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
       ||
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044a2:	4b6b      	ldr	r3, [pc, #428]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
       ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d047      	beq.n	8004546 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
 80044ba:	e044      	b.n	8004546 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d018      	beq.n	80044f6 <RCCEx_PLLSAI1_Config+0x86>
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d825      	bhi.n	8004514 <RCCEx_PLLSAI1_Config+0xa4>
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d002      	beq.n	80044d2 <RCCEx_PLLSAI1_Config+0x62>
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d009      	beq.n	80044e4 <RCCEx_PLLSAI1_Config+0x74>
 80044d0:	e020      	b.n	8004514 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044d2:	4b5f      	ldr	r3, [pc, #380]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11d      	bne.n	800451a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e2:	e01a      	b.n	800451a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044e4:	4b5a      	ldr	r3, [pc, #360]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f4:	e013      	b.n	800451e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044f6:	4b56      	ldr	r3, [pc, #344]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004502:	4b53      	ldr	r3, [pc, #332]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004512:	e006      	b.n	8004522 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
      break;
 8004518:	e004      	b.n	8004524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800451a:	bf00      	nop
 800451c:	e002      	b.n	8004524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004522:	bf00      	nop
    }

    if(status == HAL_OK)
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10d      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800452a:	4b49      	ldr	r3, [pc, #292]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	3b01      	subs	r3, #1
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	430b      	orrs	r3, r1
 8004540:	4943      	ldr	r1, [pc, #268]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d17c      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800454c:	4b40      	ldr	r3, [pc, #256]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3f      	ldr	r2, [pc, #252]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004558:	f7fd f938 	bl	80017cc <HAL_GetTick>
 800455c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800455e:	e009      	b.n	8004574 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004560:	f7fd f934 	bl	80017cc <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d902      	bls.n	8004574 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	73fb      	strb	r3, [r7, #15]
        break;
 8004572:	e005      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004574:	4b36      	ldr	r3, [pc, #216]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ef      	bne.n	8004560 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d15f      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d110      	bne.n	80045ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800458c:	4b30      	ldr	r3, [pc, #192]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004594:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6892      	ldr	r2, [r2, #8]
 800459c:	0211      	lsls	r1, r2, #8
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68d2      	ldr	r2, [r2, #12]
 80045a2:	06d2      	lsls	r2, r2, #27
 80045a4:	430a      	orrs	r2, r1
 80045a6:	492a      	ldr	r1, [pc, #168]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	610b      	str	r3, [r1, #16]
 80045ac:	e027      	b.n	80045fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d112      	bne.n	80045da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b4:	4b26      	ldr	r3, [pc, #152]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6892      	ldr	r2, [r2, #8]
 80045c4:	0211      	lsls	r1, r2, #8
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6912      	ldr	r2, [r2, #16]
 80045ca:	0852      	lsrs	r2, r2, #1
 80045cc:	3a01      	subs	r2, #1
 80045ce:	0552      	lsls	r2, r2, #21
 80045d0:	430a      	orrs	r2, r1
 80045d2:	491f      	ldr	r1, [pc, #124]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	610b      	str	r3, [r1, #16]
 80045d8:	e011      	b.n	80045fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6892      	ldr	r2, [r2, #8]
 80045ea:	0211      	lsls	r1, r2, #8
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6952      	ldr	r2, [r2, #20]
 80045f0:	0852      	lsrs	r2, r2, #1
 80045f2:	3a01      	subs	r2, #1
 80045f4:	0652      	lsls	r2, r2, #25
 80045f6:	430a      	orrs	r2, r1
 80045f8:	4915      	ldr	r1, [pc, #84]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004604:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004608:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd f8df 	bl	80017cc <HAL_GetTick>
 800460e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004610:	e009      	b.n	8004626 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004612:	f7fd f8db 	bl	80017cc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d902      	bls.n	8004626 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	73fb      	strb	r3, [r7, #15]
          break;
 8004624:	e005      	b.n	8004632 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0ef      	beq.n	8004612 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	4903      	ldr	r1, [pc, #12]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004646:	7bfb      	ldrb	r3, [r7, #15]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000

08004654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e049      	b.n	80046fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fd20 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f000 fe08 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d001      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e03b      	b.n	8004794 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x4e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d004      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x4e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d015      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x8c>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d011      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e008      	b.n	8004790 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e000      	b.n	8004792 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40014000 	.word	0x40014000
 80047a8:	00010007 	.word	0x00010007

080047ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e049      	b.n	8004852 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f841 	bl	800485a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f000 fd5c 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_TIM_PWM_Start_IT+0x28>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e03c      	b.n	8004912 <HAL_TIM_PWM_Start_IT+0xa2>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b04      	cmp	r3, #4
 800489c:	d109      	bne.n	80048b2 <HAL_TIM_PWM_Start_IT+0x42>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e02f      	b.n	8004912 <HAL_TIM_PWM_Start_IT+0xa2>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start_IT+0x5c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e022      	b.n	8004912 <HAL_TIM_PWM_Start_IT+0xa2>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d109      	bne.n	80048e6 <HAL_TIM_PWM_Start_IT+0x76>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e015      	b.n	8004912 <HAL_TIM_PWM_Start_IT+0xa2>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_PWM_Start_IT+0x90>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e008      	b.n	8004912 <HAL_TIM_PWM_Start_IT+0xa2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e0c9      	b.n	8004aae <HAL_TIM_PWM_Start_IT+0x23e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start_IT+0xba>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	e023      	b.n	8004972 <HAL_TIM_PWM_Start_IT+0x102>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start_IT+0xca>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	e01b      	b.n	8004972 <HAL_TIM_PWM_Start_IT+0x102>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start_IT+0xda>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004948:	e013      	b.n	8004972 <HAL_TIM_PWM_Start_IT+0x102>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b0c      	cmp	r3, #12
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start_IT+0xea>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004958:	e00b      	b.n	8004972 <HAL_TIM_PWM_Start_IT+0x102>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b10      	cmp	r3, #16
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Start_IT+0xfa>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	e003      	b.n	8004972 <HAL_TIM_PWM_Start_IT+0x102>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d841      	bhi.n	80049fc <HAL_TIM_PWM_Start_IT+0x18c>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_TIM_PWM_Start_IT+0x110>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049b5 	.word	0x080049b5
 8004984:	080049fd 	.word	0x080049fd
 8004988:	080049fd 	.word	0x080049fd
 800498c:	080049fd 	.word	0x080049fd
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049fd 	.word	0x080049fd
 8004998:	080049fd 	.word	0x080049fd
 800499c:	080049fd 	.word	0x080049fd
 80049a0:	080049d9 	.word	0x080049d9
 80049a4:	080049fd 	.word	0x080049fd
 80049a8:	080049fd 	.word	0x080049fd
 80049ac:	080049fd 	.word	0x080049fd
 80049b0:	080049eb 	.word	0x080049eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0202 	orr.w	r2, r2, #2
 80049c2:	60da      	str	r2, [r3, #12]
      break;
 80049c4:	e01d      	b.n	8004a02 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0204 	orr.w	r2, r2, #4
 80049d4:	60da      	str	r2, [r3, #12]
      break;
 80049d6:	e014      	b.n	8004a02 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0208 	orr.w	r2, r2, #8
 80049e6:	60da      	str	r2, [r3, #12]
      break;
 80049e8:	e00b      	b.n	8004a02 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0210 	orr.w	r2, r2, #16
 80049f8:	60da      	str	r2, [r3, #12]
      break;
 80049fa:	e002      	b.n	8004a02 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004a00:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d151      	bne.n	8004aac <HAL_TIM_PWM_Start_IT+0x23c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 ffc5 	bl	80059a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a27      	ldr	r2, [pc, #156]	; (8004ab8 <HAL_TIM_PWM_Start_IT+0x248>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_TIM_PWM_Start_IT+0x1c4>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <HAL_TIM_PWM_Start_IT+0x24c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_TIM_PWM_Start_IT+0x1c4>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <HAL_TIM_PWM_Start_IT+0x250>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d101      	bne.n	8004a38 <HAL_TIM_PWM_Start_IT+0x1c8>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_TIM_PWM_Start_IT+0x1ca>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_TIM_PWM_Start_IT+0x248>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_TIM_PWM_Start_IT+0x1fc>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d004      	beq.n	8004a6c <HAL_TIM_PWM_Start_IT+0x1fc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a15      	ldr	r2, [pc, #84]	; (8004abc <HAL_TIM_PWM_Start_IT+0x24c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d115      	bne.n	8004a98 <HAL_TIM_PWM_Start_IT+0x228>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <HAL_TIM_PWM_Start_IT+0x254>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d015      	beq.n	8004aaa <HAL_TIM_PWM_Start_IT+0x23a>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d011      	beq.n	8004aaa <HAL_TIM_PWM_Start_IT+0x23a>
      {
        __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	e008      	b.n	8004aaa <HAL_TIM_PWM_Start_IT+0x23a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e000      	b.n	8004aac <HAL_TIM_PWM_Start_IT+0x23c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	00010007 	.word	0x00010007

08004ac8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	d841      	bhi.n	8004b60 <HAL_TIM_PWM_Stop_IT+0x98>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b19 	.word	0x08004b19
 8004ae8:	08004b61 	.word	0x08004b61
 8004aec:	08004b61 	.word	0x08004b61
 8004af0:	08004b61 	.word	0x08004b61
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b61 	.word	0x08004b61
 8004afc:	08004b61 	.word	0x08004b61
 8004b00:	08004b61 	.word	0x08004b61
 8004b04:	08004b3d 	.word	0x08004b3d
 8004b08:	08004b61 	.word	0x08004b61
 8004b0c:	08004b61 	.word	0x08004b61
 8004b10:	08004b61 	.word	0x08004b61
 8004b14:	08004b4f 	.word	0x08004b4f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0202 	bic.w	r2, r2, #2
 8004b26:	60da      	str	r2, [r3, #12]
      break;
 8004b28:	e01d      	b.n	8004b66 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	60da      	str	r2, [r3, #12]
      break;
 8004b3a:	e014      	b.n	8004b66 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0208 	bic.w	r2, r2, #8
 8004b4a:	60da      	str	r2, [r3, #12]
      break;
 8004b4c:	e00b      	b.n	8004b66 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0210 	bic.w	r2, r2, #16
 8004b5c:	60da      	str	r2, [r3, #12]
      break;
 8004b5e:	e002      	b.n	8004b66 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
      break;
 8004b64:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d176      	bne.n	8004c5a <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	6839      	ldr	r1, [r7, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 ff13 	bl	80059a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a39      	ldr	r2, [pc, #228]	; (8004c64 <HAL_TIM_PWM_Stop_IT+0x19c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_PWM_Stop_IT+0xd0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a37      	ldr	r2, [pc, #220]	; (8004c68 <HAL_TIM_PWM_Stop_IT+0x1a0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_PWM_Stop_IT+0xd0>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a36      	ldr	r2, [pc, #216]	; (8004c6c <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_TIM_PWM_Stop_IT+0xd4>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_TIM_PWM_Stop_IT+0xd6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d017      	beq.n	8004bd2 <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_TIM_PWM_Stop_IT+0x10a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_TIM_PWM_Stop_IT+0x10a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a1a      	ldr	r2, [r3, #32]
 8004bd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10f      	bne.n	8004c02 <HAL_TIM_PWM_Stop_IT+0x13a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	f240 4344 	movw	r3, #1092	; 0x444
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d107      	bne.n	8004c02 <HAL_TIM_PWM_Stop_IT+0x13a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_PWM_Stop_IT+0x14a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c10:	e023      	b.n	8004c5a <HAL_TIM_PWM_Stop_IT+0x192>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c20:	e01b      	b.n	8004c5a <HAL_TIM_PWM_Stop_IT+0x192>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Stop_IT+0x16a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c30:	e013      	b.n	8004c5a <HAL_TIM_PWM_Stop_IT+0x192>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Stop_IT+0x17a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c40:	e00b      	b.n	8004c5a <HAL_TIM_PWM_Stop_IT+0x192>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_PWM_Stop_IT+0x18a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c50:	e003      	b.n	8004c5a <HAL_TIM_PWM_Stop_IT+0x192>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400

08004c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0202 	mvn.w	r2, #2
 8004c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fae3 	bl	800527e <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fad5 	bl	800526a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fc fd23 	bl	800170c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0204 	mvn.w	r2, #4
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fab9 	bl	800527e <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 faab 	bl	800526a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fc fcf9 	bl	800170c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0208 	mvn.w	r2, #8
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa8f 	bl	800527e <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa81 	bl	800526a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fc fccf 	bl	800170c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0210 	mvn.w	r2, #16
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa65 	bl	800527e <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa57 	bl	800526a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fc fca5 	bl	800170c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10e      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0201 	mvn.w	r2, #1
 8004dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fc f87c 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d107      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fece 	bl	8005bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2e:	d10e      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d107      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fec1 	bl	8005bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d10e      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d107      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fa0c 	bl	8005292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d10e      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d107      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0220 	mvn.w	r2, #32
 8004e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fe81 	bl	8005ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e0ff      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b14      	cmp	r3, #20
 8004eda:	f200 80f0 	bhi.w	80050be <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f39 	.word	0x08004f39
 8004ee8:	080050bf 	.word	0x080050bf
 8004eec:	080050bf 	.word	0x080050bf
 8004ef0:	080050bf 	.word	0x080050bf
 8004ef4:	08004f79 	.word	0x08004f79
 8004ef8:	080050bf 	.word	0x080050bf
 8004efc:	080050bf 	.word	0x080050bf
 8004f00:	080050bf 	.word	0x080050bf
 8004f04:	08004fbb 	.word	0x08004fbb
 8004f08:	080050bf 	.word	0x080050bf
 8004f0c:	080050bf 	.word	0x080050bf
 8004f10:	080050bf 	.word	0x080050bf
 8004f14:	08004ffb 	.word	0x08004ffb
 8004f18:	080050bf 	.word	0x080050bf
 8004f1c:	080050bf 	.word	0x080050bf
 8004f20:	080050bf 	.word	0x080050bf
 8004f24:	0800503d 	.word	0x0800503d
 8004f28:	080050bf 	.word	0x080050bf
 8004f2c:	080050bf 	.word	0x080050bf
 8004f30:	080050bf 	.word	0x080050bf
 8004f34:	0800507d 	.word	0x0800507d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fa16 	bl	8005370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0208 	orr.w	r2, r2, #8
 8004f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0204 	bic.w	r2, r2, #4
 8004f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6999      	ldr	r1, [r3, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	619a      	str	r2, [r3, #24]
      break;
 8004f76:	e0a5      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fa72 	bl	8005468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6999      	ldr	r1, [r3, #24]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	021a      	lsls	r2, r3, #8
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	619a      	str	r2, [r3, #24]
      break;
 8004fb8:	e084      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 facb 	bl	800555c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0208 	orr.w	r2, r2, #8
 8004fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0204 	bic.w	r2, r2, #4
 8004fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69d9      	ldr	r1, [r3, #28]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	61da      	str	r2, [r3, #28]
      break;
 8004ff8:	e064      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fb23 	bl	800564c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69d9      	ldr	r1, [r3, #28]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	021a      	lsls	r2, r3, #8
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	61da      	str	r2, [r3, #28]
      break;
 800503a:	e043      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb60 	bl	8005708 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0208 	orr.w	r2, r2, #8
 8005056:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800507a:	e023      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fb98 	bl	80057b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005096:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	021a      	lsls	r2, r3, #8
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050bc:	e002      	b.n	80050c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
      break;
 80050c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop

080050d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIM_ConfigClockSource+0x1c>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0b6      	b.n	8005262 <HAL_TIM_ConfigClockSource+0x18a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800511e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005130:	d03e      	beq.n	80051b0 <HAL_TIM_ConfigClockSource+0xd8>
 8005132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005136:	f200 8087 	bhi.w	8005248 <HAL_TIM_ConfigClockSource+0x170>
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513e:	f000 8086 	beq.w	800524e <HAL_TIM_ConfigClockSource+0x176>
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	d87f      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x170>
 8005148:	2b70      	cmp	r3, #112	; 0x70
 800514a:	d01a      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0xaa>
 800514c:	2b70      	cmp	r3, #112	; 0x70
 800514e:	d87b      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x170>
 8005150:	2b60      	cmp	r3, #96	; 0x60
 8005152:	d050      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x11e>
 8005154:	2b60      	cmp	r3, #96	; 0x60
 8005156:	d877      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x170>
 8005158:	2b50      	cmp	r3, #80	; 0x50
 800515a:	d03c      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0xfe>
 800515c:	2b50      	cmp	r3, #80	; 0x50
 800515e:	d873      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x170>
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d058      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0x13e>
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d86f      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x170>
 8005168:	2b30      	cmp	r3, #48	; 0x30
 800516a:	d064      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x15e>
 800516c:	2b30      	cmp	r3, #48	; 0x30
 800516e:	d86b      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x170>
 8005170:	2b20      	cmp	r3, #32
 8005172:	d060      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x15e>
 8005174:	2b20      	cmp	r3, #32
 8005176:	d867      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x170>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05c      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x15e>
 800517c:	2b10      	cmp	r3, #16
 800517e:	d05a      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x15e>
 8005180:	e062      	b.n	8005248 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6899      	ldr	r1, [r3, #8]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f000 fbe5 	bl	8005960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	609a      	str	r2, [r3, #8]
      break;
 80051ae:	e04f      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	6899      	ldr	r1, [r3, #8]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f000 fbce 	bl	8005960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d2:	609a      	str	r2, [r3, #8]
      break;
 80051d4:	e03c      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f000 fb42 	bl	800586c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2150      	movs	r1, #80	; 0x50
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fb9b 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 80051f4:	e02c      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6859      	ldr	r1, [r3, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	461a      	mov	r2, r3
 8005204:	f000 fb61 	bl	80058ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2160      	movs	r1, #96	; 0x60
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fb8b 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 8005214:	e01c      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6859      	ldr	r1, [r3, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	461a      	mov	r2, r3
 8005224:	f000 fb22 	bl	800586c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2140      	movs	r1, #64	; 0x40
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fb7b 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 8005234:	e00c      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f000 fb72 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 8005246:	e003      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
      break;
 800524c:	e000      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800524e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a2a      	ldr	r2, [pc, #168]	; (8005364 <TIM_Base_SetConfig+0xbc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0x20>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d108      	bne.n	80052da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a21      	ldr	r2, [pc, #132]	; (8005364 <TIM_Base_SetConfig+0xbc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00b      	beq.n	80052fa <TIM_Base_SetConfig+0x52>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e8:	d007      	beq.n	80052fa <TIM_Base_SetConfig+0x52>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <TIM_Base_SetConfig+0xc0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_Base_SetConfig+0x52>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <TIM_Base_SetConfig+0xc4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0c      	ldr	r2, [pc, #48]	; (8005364 <TIM_Base_SetConfig+0xbc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0xa0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0b      	ldr	r2, [pc, #44]	; (8005368 <TIM_Base_SetConfig+0xc0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0xa0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a0a      	ldr	r2, [pc, #40]	; (800536c <TIM_Base_SetConfig+0xc4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	615a      	str	r2, [r3, #20]
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400

08005370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f023 0201 	bic.w	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 0302 	bic.w	r3, r3, #2
 80053bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a24      	ldr	r2, [pc, #144]	; (800545c <TIM_OC1_SetConfig+0xec>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_OC1_SetConfig+0x70>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a23      	ldr	r2, [pc, #140]	; (8005460 <TIM_OC1_SetConfig+0xf0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC1_SetConfig+0x70>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a22      	ldr	r2, [pc, #136]	; (8005464 <TIM_OC1_SetConfig+0xf4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10c      	bne.n	80053fa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0308 	bic.w	r3, r3, #8
 80053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f023 0304 	bic.w	r3, r3, #4
 80053f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a17      	ldr	r2, [pc, #92]	; (800545c <TIM_OC1_SetConfig+0xec>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d007      	beq.n	8005412 <TIM_OC1_SetConfig+0xa2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a16      	ldr	r2, [pc, #88]	; (8005460 <TIM_OC1_SetConfig+0xf0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_OC1_SetConfig+0xa2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <TIM_OC1_SetConfig+0xf4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d111      	bne.n	8005436 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400

08005468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0210 	bic.w	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0320 	bic.w	r3, r3, #32
 80054b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a22      	ldr	r2, [pc, #136]	; (8005550 <TIM_OC2_SetConfig+0xe8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d10d      	bne.n	80054e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a19      	ldr	r2, [pc, #100]	; (8005550 <TIM_OC2_SetConfig+0xe8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC2_SetConfig+0x98>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a18      	ldr	r2, [pc, #96]	; (8005554 <TIM_OC2_SetConfig+0xec>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC2_SetConfig+0x98>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <TIM_OC2_SetConfig+0xf0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d113      	bne.n	8005528 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400

0800555c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a21      	ldr	r2, [pc, #132]	; (8005640 <TIM_OC3_SetConfig+0xe4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10d      	bne.n	80055da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a18      	ldr	r2, [pc, #96]	; (8005640 <TIM_OC3_SetConfig+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_OC3_SetConfig+0x96>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a17      	ldr	r2, [pc, #92]	; (8005644 <TIM_OC3_SetConfig+0xe8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_OC3_SetConfig+0x96>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <TIM_OC3_SetConfig+0xec>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d113      	bne.n	800561a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	621a      	str	r2, [r3, #32]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400

0800564c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a14      	ldr	r2, [pc, #80]	; (80056fc <TIM_OC4_SetConfig+0xb0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_OC4_SetConfig+0x74>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <TIM_OC4_SetConfig+0xb4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC4_SetConfig+0x74>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <TIM_OC4_SetConfig+0xb8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d109      	bne.n	80056d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	019b      	lsls	r3, r3, #6
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40012c00 	.word	0x40012c00
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400

08005708 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800574c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <TIM_OC5_SetConfig+0xa4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_OC5_SetConfig+0x6a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <TIM_OC5_SetConfig+0xa8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_OC5_SetConfig+0x6a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <TIM_OC5_SetConfig+0xac>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d109      	bne.n	8005786 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005778:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400

080057b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	051b      	lsls	r3, r3, #20
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a14      	ldr	r2, [pc, #80]	; (8005860 <TIM_OC6_SetConfig+0xa8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_OC6_SetConfig+0x6c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a13      	ldr	r2, [pc, #76]	; (8005864 <TIM_OC6_SetConfig+0xac>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC6_SetConfig+0x6c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a12      	ldr	r2, [pc, #72]	; (8005868 <TIM_OC6_SetConfig+0xb0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d109      	bne.n	8005838 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40014000 	.word	0x40014000
 8005868:	40014400 	.word	0x40014400

0800586c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 030a 	bic.w	r3, r3, #10
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f023 0210 	bic.w	r2, r3, #16
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	f043 0307 	orr.w	r3, r3, #7
 800594c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	609a      	str	r2, [r3, #8]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800597a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	021a      	lsls	r2, r3, #8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	431a      	orrs	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4313      	orrs	r3, r2
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	609a      	str	r2, [r3, #8]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2201      	movs	r2, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1a      	ldr	r2, [r3, #32]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	401a      	ands	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	fa01 f303 	lsl.w	r3, r1, r3
 80059d8:	431a      	orrs	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e04f      	b.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a21      	ldr	r2, [pc, #132]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d108      	bne.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d009      	beq.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6c:	d004      	beq.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a10      	ldr	r2, [pc, #64]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d10c      	bne.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40014000 	.word	0x40014000

08005ab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e060      	b.n	8005b96 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d115      	bne.n	8005b84 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	051b      	lsls	r3, r3, #20
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40012c00 	.word	0x40012c00

08005ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e040      	b.n	8005c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fb fb14 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2224      	movs	r2, #36	; 0x24
 8005c10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f82c 	bl	8005c80 <UART_SetConfig>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e022      	b.n	8005c78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fa7a 	bl	8006134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fb01 	bl	8006278 <UART_CheckIdleState>
 8005c76:	4603      	mov	r3, r0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c84:	b08a      	sub	sp, #40	; 0x28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b9e      	ldr	r3, [pc, #632]	; (8005f28 <UART_SetConfig+0x2a8>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a93      	ldr	r2, [pc, #588]	; (8005f2c <UART_SetConfig+0x2ac>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a8a      	ldr	r2, [pc, #552]	; (8005f30 <UART_SetConfig+0x2b0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d126      	bne.n	8005d58 <UART_SetConfig+0xd8>
 8005d0a:	4b8a      	ldr	r3, [pc, #552]	; (8005f34 <UART_SetConfig+0x2b4>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d81b      	bhi.n	8005d50 <UART_SetConfig+0xd0>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0xa0>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d39 	.word	0x08005d39
 8005d2c:	08005d49 	.word	0x08005d49
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e0ab      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3e:	e0a7      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d46:	e0a3      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4e:	e09f      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d56:	e09b      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a76      	ldr	r2, [pc, #472]	; (8005f38 <UART_SetConfig+0x2b8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d138      	bne.n	8005dd4 <UART_SetConfig+0x154>
 8005d62:	4b74      	ldr	r3, [pc, #464]	; (8005f34 <UART_SetConfig+0x2b4>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	f003 030c 	and.w	r3, r3, #12
 8005d6c:	2b0c      	cmp	r3, #12
 8005d6e:	d82d      	bhi.n	8005dcc <UART_SetConfig+0x14c>
 8005d70:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <UART_SetConfig+0xf8>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005dad 	.word	0x08005dad
 8005d7c:	08005dcd 	.word	0x08005dcd
 8005d80:	08005dcd 	.word	0x08005dcd
 8005d84:	08005dcd 	.word	0x08005dcd
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005dcd 	.word	0x08005dcd
 8005d90:	08005dcd 	.word	0x08005dcd
 8005d94:	08005dcd 	.word	0x08005dcd
 8005d98:	08005db5 	.word	0x08005db5
 8005d9c:	08005dcd 	.word	0x08005dcd
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dc5 	.word	0x08005dc5
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db2:	e06d      	b.n	8005e90 <UART_SetConfig+0x210>
 8005db4:	2302      	movs	r3, #2
 8005db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dba:	e069      	b.n	8005e90 <UART_SetConfig+0x210>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e065      	b.n	8005e90 <UART_SetConfig+0x210>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e061      	b.n	8005e90 <UART_SetConfig+0x210>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e05d      	b.n	8005e90 <UART_SetConfig+0x210>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a58      	ldr	r2, [pc, #352]	; (8005f3c <UART_SetConfig+0x2bc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d125      	bne.n	8005e2a <UART_SetConfig+0x1aa>
 8005dde:	4b55      	ldr	r3, [pc, #340]	; (8005f34 <UART_SetConfig+0x2b4>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005de8:	2b30      	cmp	r3, #48	; 0x30
 8005dea:	d016      	beq.n	8005e1a <UART_SetConfig+0x19a>
 8005dec:	2b30      	cmp	r3, #48	; 0x30
 8005dee:	d818      	bhi.n	8005e22 <UART_SetConfig+0x1a2>
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d00a      	beq.n	8005e0a <UART_SetConfig+0x18a>
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d814      	bhi.n	8005e22 <UART_SetConfig+0x1a2>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <UART_SetConfig+0x182>
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d008      	beq.n	8005e12 <UART_SetConfig+0x192>
 8005e00:	e00f      	b.n	8005e22 <UART_SetConfig+0x1a2>
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e08:	e042      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e10:	e03e      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e12:	2304      	movs	r3, #4
 8005e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e18:	e03a      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e20:	e036      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e22:	2310      	movs	r3, #16
 8005e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e28:	e032      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a3f      	ldr	r2, [pc, #252]	; (8005f2c <UART_SetConfig+0x2ac>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d12a      	bne.n	8005e8a <UART_SetConfig+0x20a>
 8005e34:	4b3f      	ldr	r3, [pc, #252]	; (8005f34 <UART_SetConfig+0x2b4>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e42:	d01a      	beq.n	8005e7a <UART_SetConfig+0x1fa>
 8005e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e48:	d81b      	bhi.n	8005e82 <UART_SetConfig+0x202>
 8005e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4e:	d00c      	beq.n	8005e6a <UART_SetConfig+0x1ea>
 8005e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e54:	d815      	bhi.n	8005e82 <UART_SetConfig+0x202>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <UART_SetConfig+0x1e2>
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5e:	d008      	beq.n	8005e72 <UART_SetConfig+0x1f2>
 8005e60:	e00f      	b.n	8005e82 <UART_SetConfig+0x202>
 8005e62:	2300      	movs	r3, #0
 8005e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e68:	e012      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e70:	e00e      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e72:	2304      	movs	r3, #4
 8005e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e78:	e00a      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e80:	e006      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e82:	2310      	movs	r3, #16
 8005e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e88:	e002      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e8a:	2310      	movs	r3, #16
 8005e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <UART_SetConfig+0x2ac>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	f040 808a 	bne.w	8005fb0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d824      	bhi.n	8005eee <UART_SetConfig+0x26e>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x22c>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005eef 	.word	0x08005eef
 8005ebc:	08005edf 	.word	0x08005edf
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005eef 	.word	0x08005eef
 8005ec8:	08005eef 	.word	0x08005eef
 8005ecc:	08005ee7 	.word	0x08005ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fd fff8 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	61f8      	str	r0, [r7, #28]
        break;
 8005ed6:	e010      	b.n	8005efa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <UART_SetConfig+0x2c0>)
 8005eda:	61fb      	str	r3, [r7, #28]
        break;
 8005edc:	e00d      	b.n	8005efa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fd ff5b 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8005ee2:	61f8      	str	r0, [r7, #28]
        break;
 8005ee4:	e009      	b.n	8005efa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	61fb      	str	r3, [r7, #28]
        break;
 8005eec:	e005      	b.n	8005efa <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ef8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8109 	beq.w	8006114 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d305      	bcc.n	8005f1e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d912      	bls.n	8005f44 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f24:	e0f6      	b.n	8006114 <UART_SetConfig+0x494>
 8005f26:	bf00      	nop
 8005f28:	efff69f3 	.word	0xefff69f3
 8005f2c:	40008000 	.word	0x40008000
 8005f30:	40013800 	.word	0x40013800
 8005f34:	40021000 	.word	0x40021000
 8005f38:	40004400 	.word	0x40004400
 8005f3c:	40004800 	.word	0x40004800
 8005f40:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2200      	movs	r2, #0
 8005f48:	461c      	mov	r4, r3
 8005f4a:	4615      	mov	r5, r2
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	022b      	lsls	r3, r5, #8
 8005f56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f5a:	0222      	lsls	r2, r4, #8
 8005f5c:	68f9      	ldr	r1, [r7, #12]
 8005f5e:	6849      	ldr	r1, [r1, #4]
 8005f60:	0849      	lsrs	r1, r1, #1
 8005f62:	2000      	movs	r0, #0
 8005f64:	4688      	mov	r8, r1
 8005f66:	4681      	mov	r9, r0
 8005f68:	eb12 0a08 	adds.w	sl, r2, r8
 8005f6c:	eb43 0b09 	adc.w	fp, r3, r9
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7e:	4650      	mov	r0, sl
 8005f80:	4659      	mov	r1, fp
 8005f82:	f7fa f925 	bl	80001d0 <__aeabi_uldivmod>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f94:	d308      	bcc.n	8005fa8 <UART_SetConfig+0x328>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9c:	d204      	bcs.n	8005fa8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	e0b5      	b.n	8006114 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fae:	e0b1      	b.n	8006114 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb8:	d15d      	bne.n	8006076 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d827      	bhi.n	8006012 <UART_SetConfig+0x392>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <UART_SetConfig+0x348>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	08006013 	.word	0x08006013
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	08006013 	.word	0x08006013
 8005fe0:	08006013 	.word	0x08006013
 8005fe4:	08006013 	.word	0x08006013
 8005fe8:	0800600b 	.word	0x0800600b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fec:	f7fd ff6a 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8005ff0:	61f8      	str	r0, [r7, #28]
        break;
 8005ff2:	e014      	b.n	800601e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff4:	f7fd ff7c 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 8005ff8:	61f8      	str	r0, [r7, #28]
        break;
 8005ffa:	e010      	b.n	800601e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ffc:	4b4c      	ldr	r3, [pc, #304]	; (8006130 <UART_SetConfig+0x4b0>)
 8005ffe:	61fb      	str	r3, [r7, #28]
        break;
 8006000:	e00d      	b.n	800601e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006002:	f7fd fec9 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8006006:	61f8      	str	r0, [r7, #28]
        break;
 8006008:	e009      	b.n	800601e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	61fb      	str	r3, [r7, #28]
        break;
 8006010:	e005      	b.n	800601e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800601c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d077      	beq.n	8006114 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	005a      	lsls	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	441a      	add	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b0f      	cmp	r3, #15
 800603e:	d916      	bls.n	800606e <UART_SetConfig+0x3ee>
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006046:	d212      	bcs.n	800606e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f023 030f 	bic.w	r3, r3, #15
 8006050:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	b29a      	uxth	r2, r3
 800605e:	8afb      	ldrh	r3, [r7, #22]
 8006060:	4313      	orrs	r3, r2
 8006062:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	8afa      	ldrh	r2, [r7, #22]
 800606a:	60da      	str	r2, [r3, #12]
 800606c:	e052      	b.n	8006114 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006074:	e04e      	b.n	8006114 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800607a:	2b08      	cmp	r3, #8
 800607c:	d827      	bhi.n	80060ce <UART_SetConfig+0x44e>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x404>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	080060cf 	.word	0x080060cf
 8006094:	080060bf 	.word	0x080060bf
 8006098:	080060cf 	.word	0x080060cf
 800609c:	080060cf 	.word	0x080060cf
 80060a0:	080060cf 	.word	0x080060cf
 80060a4:	080060c7 	.word	0x080060c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a8:	f7fd ff0c 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 80060ac:	61f8      	str	r0, [r7, #28]
        break;
 80060ae:	e014      	b.n	80060da <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060b0:	f7fd ff1e 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 80060b4:	61f8      	str	r0, [r7, #28]
        break;
 80060b6:	e010      	b.n	80060da <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b8:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <UART_SetConfig+0x4b0>)
 80060ba:	61fb      	str	r3, [r7, #28]
        break;
 80060bc:	e00d      	b.n	80060da <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060be:	f7fd fe6b 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 80060c2:	61f8      	str	r0, [r7, #28]
        break;
 80060c4:	e009      	b.n	80060da <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ca:	61fb      	str	r3, [r7, #28]
        break;
 80060cc:	e005      	b.n	80060da <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060d8:	bf00      	nop
    }

    if (pclk != 0U)
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d019      	beq.n	8006114 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	085a      	lsrs	r2, r3, #1
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d909      	bls.n	800610e <UART_SetConfig+0x48e>
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d205      	bcs.n	800610e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60da      	str	r2, [r3, #12]
 800610c:	e002      	b.n	8006114 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006120:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006124:	4618      	mov	r0, r3
 8006126:	3728      	adds	r7, #40	; 0x28
 8006128:	46bd      	mov	sp, r7
 800612a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612e:	bf00      	nop
 8006130:	00f42400 	.word	0x00f42400

08006134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01a      	beq.n	800624a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006232:	d10a      	bne.n	800624a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af02      	add	r7, sp, #8
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006288:	f7fb faa0 	bl	80017cc <HAL_GetTick>
 800628c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d10e      	bne.n	80062ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800629c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f82d 	bl	800630a <UART_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e023      	b.n	8006302 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d10e      	bne.n	80062e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f817 	bl	800630a <UART_WaitOnFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e00d      	b.n	8006302 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b09c      	sub	sp, #112	; 0x70
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631a:	e0a5      	b.n	8006468 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006322:	f000 80a1 	beq.w	8006468 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006326:	f7fb fa51 	bl	80017cc <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <UART_WaitOnFlagUntilTimeout+0x32>
 8006336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006338:	2b00      	cmp	r3, #0
 800633a:	d13e      	bne.n	80063ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800634a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006350:	667b      	str	r3, [r7, #100]	; 0x64
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800635c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e6      	bne.n	800633c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	663b      	str	r3, [r7, #96]	; 0x60
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800638e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e5      	bne.n	800636e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e067      	b.n	800648a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d04f      	beq.n	8006468 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d6:	d147      	bne.n	8006468 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
 8006402:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e6      	bne.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	66bb      	str	r3, [r7, #104]	; 0x68
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006434:	623a      	str	r2, [r7, #32]
 8006436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	69f9      	ldr	r1, [r7, #28]
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	61bb      	str	r3, [r7, #24]
   return(result);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e5      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e010      	b.n	800648a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69da      	ldr	r2, [r3, #28]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4013      	ands	r3, r2
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	429a      	cmp	r2, r3
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	429a      	cmp	r2, r3
 8006484:	f43f af4a 	beq.w	800631c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3770      	adds	r7, #112	; 0x70
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <__NVIC_SetPriority>:
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	6039      	str	r1, [r7, #0]
 800649e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	db0a      	blt.n	80064be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	490c      	ldr	r1, [pc, #48]	; (80064e0 <__NVIC_SetPriority+0x4c>)
 80064ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b2:	0112      	lsls	r2, r2, #4
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	440b      	add	r3, r1
 80064b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064bc:	e00a      	b.n	80064d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	4908      	ldr	r1, [pc, #32]	; (80064e4 <__NVIC_SetPriority+0x50>)
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	3b04      	subs	r3, #4
 80064cc:	0112      	lsls	r2, r2, #4
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	440b      	add	r3, r1
 80064d2:	761a      	strb	r2, [r3, #24]
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	e000e100 	.word	0xe000e100
 80064e4:	e000ed00 	.word	0xe000ed00

080064e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <SysTick_Handler+0x1c>)
 80064ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80064f0:	f001 fed6 	bl	80082a0 <xTaskGetSchedulerState>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d001      	beq.n	80064fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80064fa:	f002 fcbd 	bl	8008e78 <xPortSysTickHandler>
  }
}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	e000e010 	.word	0xe000e010

08006508 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800650c:	2100      	movs	r1, #0
 800650e:	f06f 0004 	mvn.w	r0, #4
 8006512:	f7ff ffbf 	bl	8006494 <__NVIC_SetPriority>
#endif
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006522:	f3ef 8305 	mrs	r3, IPSR
 8006526:	603b      	str	r3, [r7, #0]
  return(result);
 8006528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800652e:	f06f 0305 	mvn.w	r3, #5
 8006532:	607b      	str	r3, [r7, #4]
 8006534:	e00c      	b.n	8006550 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006536:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <osKernelInitialize+0x44>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800653e:	4b08      	ldr	r3, [pc, #32]	; (8006560 <osKernelInitialize+0x44>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006544:	2300      	movs	r3, #0
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	e002      	b.n	8006550 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800654a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800654e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006550:	687b      	ldr	r3, [r7, #4]
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	200002c0 	.word	0x200002c0

08006564 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800656a:	f3ef 8305 	mrs	r3, IPSR
 800656e:	603b      	str	r3, [r7, #0]
  return(result);
 8006570:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006576:	f06f 0305 	mvn.w	r3, #5
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	e010      	b.n	80065a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800657e:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <osKernelStart+0x48>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d109      	bne.n	800659a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006586:	f7ff ffbf 	bl	8006508 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800658a:	4b08      	ldr	r3, [pc, #32]	; (80065ac <osKernelStart+0x48>)
 800658c:	2202      	movs	r2, #2
 800658e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006590:	f001 fa0c 	bl	80079ac <vTaskStartScheduler>
      stat = osOK;
 8006594:	2300      	movs	r3, #0
 8006596:	607b      	str	r3, [r7, #4]
 8006598:	e002      	b.n	80065a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800659e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065a0:	687b      	ldr	r3, [r7, #4]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200002c0 	.word	0x200002c0

080065b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08e      	sub	sp, #56	; 0x38
 80065b4:	af04      	add	r7, sp, #16
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c0:	f3ef 8305 	mrs	r3, IPSR
 80065c4:	617b      	str	r3, [r7, #20]
  return(result);
 80065c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d17e      	bne.n	80066ca <osThreadNew+0x11a>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d07b      	beq.n	80066ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065d6:	2318      	movs	r3, #24
 80065d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d045      	beq.n	8006676 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <osThreadNew+0x48>
        name = attr->name;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <osThreadNew+0x6e>
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b38      	cmp	r3, #56	; 0x38
 8006610:	d805      	bhi.n	800661e <osThreadNew+0x6e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <osThreadNew+0x72>
        return (NULL);
 800661e:	2300      	movs	r3, #0
 8006620:	e054      	b.n	80066cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	089b      	lsrs	r3, r3, #2
 8006630:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <osThreadNew+0xa8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2bc3      	cmp	r3, #195	; 0xc3
 8006640:	d90a      	bls.n	8006658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006646:	2b00      	cmp	r3, #0
 8006648:	d006      	beq.n	8006658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <osThreadNew+0xa8>
        mem = 1;
 8006652:	2301      	movs	r3, #1
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e010      	b.n	800667a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10c      	bne.n	800667a <osThreadNew+0xca>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d108      	bne.n	800667a <osThreadNew+0xca>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <osThreadNew+0xca>
          mem = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	e001      	b.n	800667a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d110      	bne.n	80066a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006688:	9202      	str	r2, [sp, #8]
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 ff96 	bl	80075c8 <xTaskCreateStatic>
 800669c:	4603      	mov	r3, r0
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	e013      	b.n	80066ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d110      	bne.n	80066ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f107 0310 	add.w	r3, r7, #16
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 ffe1 	bl	8007682 <xTaskCreate>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d001      	beq.n	80066ca <osThreadNew+0x11a>
            hTask = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066ca:	693b      	ldr	r3, [r7, #16]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3728      	adds	r7, #40	; 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066dc:	f3ef 8305 	mrs	r3, IPSR
 80066e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <osDelay+0x1c>
    stat = osErrorISR;
 80066e8:	f06f 0305 	mvn.w	r3, #5
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e007      	b.n	8006700 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 f922 	bl	8007944 <vTaskDelay>
    }
  }

  return (stat);
 8006700:	68fb      	ldr	r3, [r7, #12]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800670a:	b580      	push	{r7, lr}
 800670c:	b08a      	sub	sp, #40	; 0x28
 800670e:	af02      	add	r7, sp, #8
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800671a:	f3ef 8305 	mrs	r3, IPSR
 800671e:	613b      	str	r3, [r7, #16]
  return(result);
 8006720:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006722:	2b00      	cmp	r3, #0
 8006724:	d15f      	bne.n	80067e6 <osMessageQueueNew+0xdc>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d05c      	beq.n	80067e6 <osMessageQueueNew+0xdc>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d059      	beq.n	80067e6 <osMessageQueueNew+0xdc>
    mem = -1;
 8006732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006736:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d029      	beq.n	8006792 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d012      	beq.n	800676c <osMessageQueueNew+0x62>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b4f      	cmp	r3, #79	; 0x4f
 800674c:	d90e      	bls.n	800676c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	429a      	cmp	r2, r3
 8006764:	d302      	bcc.n	800676c <osMessageQueueNew+0x62>
        mem = 1;
 8006766:	2301      	movs	r3, #1
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e014      	b.n	8006796 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d110      	bne.n	8006796 <osMessageQueueNew+0x8c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10c      	bne.n	8006796 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006780:	2b00      	cmp	r3, #0
 8006782:	d108      	bne.n	8006796 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <osMessageQueueNew+0x8c>
          mem = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	e001      	b.n	8006796 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d10b      	bne.n	80067b4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2100      	movs	r1, #0
 80067a6:	9100      	str	r1, [sp, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f9ce 	bl	8006b4c <xQueueGenericCreateStatic>
 80067b0:	61f8      	str	r0, [r7, #28]
 80067b2:	e008      	b.n	80067c6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d105      	bne.n	80067c6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80067ba:	2200      	movs	r2, #0
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 fa3c 	bl	8006c3c <xQueueGenericCreate>
 80067c4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00c      	beq.n	80067e6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <osMessageQueueNew+0xd0>
        name = attr->name;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e001      	b.n	80067de <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80067de:	6979      	ldr	r1, [r7, #20]
 80067e0:	69f8      	ldr	r0, [r7, #28]
 80067e2:	f000 fe93 	bl	800750c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80067e6:	69fb      	ldr	r3, [r7, #28]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006806:	f3ef 8305 	mrs	r3, IPSR
 800680a:	617b      	str	r3, [r7, #20]
  return(result);
 800680c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800680e:	2b00      	cmp	r3, #0
 8006810:	d028      	beq.n	8006864 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d005      	beq.n	8006824 <osMessageQueueGet+0x34>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <osMessageQueueGet+0x34>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006824:	f06f 0303 	mvn.w	r3, #3
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	e037      	b.n	800689c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006830:	f107 0310 	add.w	r3, r7, #16
 8006834:	461a      	mov	r2, r3
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	69b8      	ldr	r0, [r7, #24]
 800683a:	f000 fcd7 	bl	80071ec <xQueueReceiveFromISR>
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d003      	beq.n	800684c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006844:	f06f 0302 	mvn.w	r3, #2
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	e027      	b.n	800689c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d024      	beq.n	800689c <osMessageQueueGet+0xac>
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <osMessageQueueGet+0xb8>)
 8006854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	e01b      	b.n	800689c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <osMessageQueueGet+0x80>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d103      	bne.n	8006878 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006870:	f06f 0303 	mvn.w	r3, #3
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	e011      	b.n	800689c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	69b8      	ldr	r0, [r7, #24]
 800687e:	f000 fbd5 	bl	800702c <xQueueReceive>
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d009      	beq.n	800689c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800688e:	f06f 0301 	mvn.w	r3, #1
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	e002      	b.n	800689c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006896:	f06f 0302 	mvn.w	r3, #2
 800689a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800689c:	69fb      	ldr	r3, [r7, #28]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4a07      	ldr	r2, [pc, #28]	; (80068d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80068bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4a06      	ldr	r2, [pc, #24]	; (80068dc <vApplicationGetIdleTaskMemory+0x30>)
 80068c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2280      	movs	r2, #128	; 0x80
 80068c8:	601a      	str	r2, [r3, #0]
}
 80068ca:	bf00      	nop
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	200002c4 	.word	0x200002c4
 80068dc:	20000388 	.word	0x20000388

080068e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a07      	ldr	r2, [pc, #28]	; (800690c <vApplicationGetTimerTaskMemory+0x2c>)
 80068f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4a06      	ldr	r2, [pc, #24]	; (8006910 <vApplicationGetTimerTaskMemory+0x30>)
 80068f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068fe:	601a      	str	r2, [r3, #0]
}
 8006900:	bf00      	nop
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	20000588 	.word	0x20000588
 8006910:	2000064c 	.word	0x2000064c

08006914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f103 0208 	add.w	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800692c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f103 0208 	add.w	r2, r3, #8
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f103 0208 	add.w	r2, r3, #8
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069b6:	b480      	push	{r7}
 80069b8:	b085      	sub	sp, #20
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069cc:	d103      	bne.n	80069d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e00c      	b.n	80069f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3308      	adds	r3, #8
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	e002      	b.n	80069e4 <vListInsert+0x2e>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d2f6      	bcs.n	80069de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	601a      	str	r2, [r3, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6892      	ldr	r2, [r2, #8]
 8006a3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6852      	ldr	r2, [r2, #4]
 8006a48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d103      	bne.n	8006a5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	1e5a      	subs	r2, r3, #1
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10a      	bne.n	8006aa6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006aa6:	f002 f955 	bl	8008d54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	441a      	add	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	68f9      	ldr	r1, [r7, #12]
 8006ada:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	22ff      	movs	r2, #255	; 0xff
 8006aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	22ff      	movs	r2, #255	; 0xff
 8006af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d114      	bne.n	8006b26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01a      	beq.n	8006b3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3310      	adds	r3, #16
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 fa07 	bl	8007f1c <xTaskRemoveFromEventList>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d012      	beq.n	8006b3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <xQueueGenericReset+0xcc>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	e009      	b.n	8006b3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3310      	adds	r3, #16
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff fef2 	bl	8006914 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3324      	adds	r3, #36	; 0x24
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff feed 	bl	8006914 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b3a:	f002 f93b 	bl	8008db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b3e:	2301      	movs	r3, #1
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08e      	sub	sp, #56	; 0x38
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <xQueueGenericCreateStatic+0x52>
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <xQueueGenericCreateStatic+0x56>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <xQueueGenericCreateStatic+0x58>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	623b      	str	r3, [r7, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <xQueueGenericCreateStatic+0x7e>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <xQueueGenericCreateStatic+0x82>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericCreateStatic+0x84>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	61fb      	str	r3, [r7, #28]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bea:	2350      	movs	r3, #80	; 0x50
 8006bec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b50      	cmp	r3, #80	; 0x50
 8006bf2:	d00a      	beq.n	8006c0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	61bb      	str	r3, [r7, #24]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00d      	beq.n	8006c32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f83f 	bl	8006cb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3730      	adds	r7, #48	; 0x30
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	; 0x28
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	4613      	mov	r3, r2
 8006c48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	613b      	str	r3, [r7, #16]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3350      	adds	r3, #80	; 0x50
 8006c74:	4618      	mov	r0, r3
 8006c76:	f002 f98f 	bl	8008f98 <pvPortMalloc>
 8006c7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d011      	beq.n	8006ca6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	3350      	adds	r3, #80	; 0x50
 8006c8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c94:	79fa      	ldrb	r2, [r7, #7]
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f805 	bl	8006cb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d103      	bne.n	8006ccc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e002      	b.n	8006cd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cde:	2101      	movs	r1, #1
 8006ce0:	69b8      	ldr	r0, [r7, #24]
 8006ce2:	f7ff fecb 	bl	8006a7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	78fa      	ldrb	r2, [r7, #3]
 8006cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08e      	sub	sp, #56	; 0x38
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d06:	2300      	movs	r3, #0
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <xQueueGenericSend+0x32>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <xQueueGenericSend+0x40>
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <xQueueGenericSend+0x44>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <xQueueGenericSend+0x46>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <xQueueGenericSend+0x60>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d103      	bne.n	8006d66 <xQueueGenericSend+0x6e>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <xQueueGenericSend+0x72>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e000      	b.n	8006d6c <xQueueGenericSend+0x74>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xQueueGenericSend+0x8e>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	623b      	str	r3, [r7, #32]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d86:	f001 fa8b 	bl	80082a0 <xTaskGetSchedulerState>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <xQueueGenericSend+0x9e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <xQueueGenericSend+0xa2>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <xQueueGenericSend+0xa4>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	61fb      	str	r3, [r7, #28]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db6:	f001 ffcd 	bl	8008d54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <xQueueGenericSend+0xd4>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d129      	bne.n	8006e20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dd2:	f000 fa8b 	bl	80072ec <prvCopyDataToQueue>
 8006dd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d010      	beq.n	8006e02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	3324      	adds	r3, #36	; 0x24
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 f899 	bl	8007f1c <xTaskRemoveFromEventList>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d013      	beq.n	8006e18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006df0:	4b3f      	ldr	r3, [pc, #252]	; (8006ef0 <xQueueGenericSend+0x1f8>)
 8006df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	e00a      	b.n	8006e18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e08:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <xQueueGenericSend+0x1f8>)
 8006e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e18:	f001 ffcc 	bl	8008db4 <vPortExitCritical>
				return pdPASS;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e063      	b.n	8006ee8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d103      	bne.n	8006e2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e26:	f001 ffc5 	bl	8008db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e05c      	b.n	8006ee8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d106      	bne.n	8006e42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e34:	f107 0314 	add.w	r3, r7, #20
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 f8d3 	bl	8007fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e42:	f001 ffb7 	bl	8008db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e46:	f000 fe23 	bl	8007a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e4a:	f001 ff83 	bl	8008d54 <vPortEnterCritical>
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e54:	b25b      	sxtb	r3, r3
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5a:	d103      	bne.n	8006e64 <xQueueGenericSend+0x16c>
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6a:	b25b      	sxtb	r3, r3
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e70:	d103      	bne.n	8006e7a <xQueueGenericSend+0x182>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7a:	f001 ff9b 	bl	8008db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e7e:	1d3a      	adds	r2, r7, #4
 8006e80:	f107 0314 	add.w	r3, r7, #20
 8006e84:	4611      	mov	r1, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 f8c2 	bl	8008010 <xTaskCheckForTimeOut>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d124      	bne.n	8006edc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e94:	f000 fb22 	bl	80074dc <prvIsQueueFull>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d018      	beq.n	8006ed0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	3310      	adds	r3, #16
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 ffe8 	bl	8007e7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eae:	f000 faad 	bl	800740c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006eb2:	f000 fdfb 	bl	8007aac <xTaskResumeAll>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f47f af7c 	bne.w	8006db6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <xQueueGenericSend+0x1f8>)
 8006ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	e772      	b.n	8006db6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ed2:	f000 fa9b 	bl	800740c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ed6:	f000 fde9 	bl	8007aac <xTaskResumeAll>
 8006eda:	e76c      	b.n	8006db6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ede:	f000 fa95 	bl	800740c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ee2:	f000 fde3 	bl	8007aac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3738      	adds	r7, #56	; 0x38
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	e000ed04 	.word	0xe000ed04

08006ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b090      	sub	sp, #64	; 0x40
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d103      	bne.n	8006f30 <xQueueGenericSendFromISR+0x3c>
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <xQueueGenericSendFromISR+0x40>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <xQueueGenericSendFromISR+0x42>
 8006f34:	2300      	movs	r3, #0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d103      	bne.n	8006f5e <xQueueGenericSendFromISR+0x6a>
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <xQueueGenericSendFromISR+0x6e>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <xQueueGenericSendFromISR+0x70>
 8006f62:	2300      	movs	r3, #0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	623b      	str	r3, [r7, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f7e:	f001 ffcb 	bl	8008f18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f82:	f3ef 8211 	mrs	r2, BASEPRI
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	61fa      	str	r2, [r7, #28]
 8006f98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d302      	bcc.n	8006fb0 <xQueueGenericSendFromISR+0xbc>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d12f      	bne.n	8007010 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fc6:	f000 f991 	bl	80072ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd2:	d112      	bne.n	8006ffa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d016      	beq.n	800700a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	3324      	adds	r3, #36	; 0x24
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 ff9b 	bl	8007f1c <xTaskRemoveFromEventList>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00e      	beq.n	800700a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e007      	b.n	800700a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ffe:	3301      	adds	r3, #1
 8007000:	b2db      	uxtb	r3, r3
 8007002:	b25a      	sxtb	r2, r3
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800700a:	2301      	movs	r3, #1
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800700e:	e001      	b.n	8007014 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007010:	2300      	movs	r3, #0
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007016:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800701e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007022:	4618      	mov	r0, r3
 8007024:	3740      	adds	r7, #64	; 0x40
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08c      	sub	sp, #48	; 0x30
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007038:	2300      	movs	r3, #0
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <xQueueReceive+0x30>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	623b      	str	r3, [r7, #32]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d103      	bne.n	800706a <xQueueReceive+0x3e>
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <xQueueReceive+0x42>
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <xQueueReceive+0x44>
 800706e:	2300      	movs	r3, #0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xQueueReceive+0x5e>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	61fb      	str	r3, [r7, #28]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800708a:	f001 f909 	bl	80082a0 <xTaskGetSchedulerState>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <xQueueReceive+0x6e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <xQueueReceive+0x72>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <xQueueReceive+0x74>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <xQueueReceive+0x8e>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	61bb      	str	r3, [r7, #24]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070ba:	f001 fe4b 	bl	8008d54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01f      	beq.n	800710a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ce:	f000 f977 	bl	80073c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	1e5a      	subs	r2, r3, #1
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00f      	beq.n	8007102 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	3310      	adds	r3, #16
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 ff18 	bl	8007f1c <xTaskRemoveFromEventList>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070f2:	4b3d      	ldr	r3, [pc, #244]	; (80071e8 <xQueueReceive+0x1bc>)
 80070f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007102:	f001 fe57 	bl	8008db4 <vPortExitCritical>
				return pdPASS;
 8007106:	2301      	movs	r3, #1
 8007108:	e069      	b.n	80071de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007110:	f001 fe50 	bl	8008db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007114:	2300      	movs	r3, #0
 8007116:	e062      	b.n	80071de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800711e:	f107 0310 	add.w	r3, r7, #16
 8007122:	4618      	mov	r0, r3
 8007124:	f000 ff5e 	bl	8007fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800712c:	f001 fe42 	bl	8008db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007130:	f000 fcae 	bl	8007a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007134:	f001 fe0e 	bl	8008d54 <vPortEnterCritical>
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800713e:	b25b      	sxtb	r3, r3
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007144:	d103      	bne.n	800714e <xQueueReceive+0x122>
 8007146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007154:	b25b      	sxtb	r3, r3
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800715a:	d103      	bne.n	8007164 <xQueueReceive+0x138>
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007164:	f001 fe26 	bl	8008db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007168:	1d3a      	adds	r2, r7, #4
 800716a:	f107 0310 	add.w	r3, r7, #16
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f000 ff4d 	bl	8008010 <xTaskCheckForTimeOut>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d123      	bne.n	80071c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800717c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800717e:	f000 f997 	bl	80074b0 <prvIsQueueEmpty>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d017      	beq.n	80071b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	3324      	adds	r3, #36	; 0x24
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fe73 	bl	8007e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007198:	f000 f938 	bl	800740c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800719c:	f000 fc86 	bl	8007aac <xTaskResumeAll>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d189      	bne.n	80070ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071a6:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <xQueueReceive+0x1bc>)
 80071a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	e780      	b.n	80070ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ba:	f000 f927 	bl	800740c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071be:	f000 fc75 	bl	8007aac <xTaskResumeAll>
 80071c2:	e77a      	b.n	80070ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c6:	f000 f921 	bl	800740c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071ca:	f000 fc6f 	bl	8007aac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d0:	f000 f96e 	bl	80074b0 <prvIsQueueEmpty>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f43f af6f 	beq.w	80070ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3730      	adds	r7, #48	; 0x30
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	; 0x38
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	623b      	str	r3, [r7, #32]
}
 8007214:	bf00      	nop
 8007216:	e7fe      	b.n	8007216 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <xQueueReceiveFromISR+0x3a>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <xQueueReceiveFromISR+0x3e>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <xQueueReceiveFromISR+0x40>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	61fb      	str	r3, [r7, #28]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007246:	f001 fe67 	bl	8008f18 <vPortValidateInterruptPriority>
	__asm volatile
 800724a:	f3ef 8211 	mrs	r2, BASEPRI
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	61ba      	str	r2, [r7, #24]
 8007260:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007262:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	2b00      	cmp	r3, #0
 8007270:	d02f      	beq.n	80072d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007280:	f000 f89e 	bl	80073c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800728c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007294:	d112      	bne.n	80072bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	3310      	adds	r3, #16
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fe3a 	bl	8007f1c <xTaskRemoveFromEventList>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00e      	beq.n	80072cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00b      	beq.n	80072cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e007      	b.n	80072cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80072bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072c0:	3301      	adds	r3, #1
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	b25a      	sxtb	r2, r3
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80072cc:	2301      	movs	r3, #1
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
 80072d0:	e001      	b.n	80072d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f383 8811 	msr	BASEPRI, r3
}
 80072e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3738      	adds	r7, #56	; 0x38
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10d      	bne.n	8007326 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d14d      	bne.n	80073ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 ffe0 	bl	80082dc <xTaskPriorityDisinherit>
 800731c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	e043      	b.n	80073ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d119      	bne.n	8007360 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6858      	ldr	r0, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	461a      	mov	r2, r3
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	f002 f9b8 	bl	80096ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	d32b      	bcc.n	80073ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	605a      	str	r2, [r3, #4]
 800735e:	e026      	b.n	80073ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	68d8      	ldr	r0, [r3, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	461a      	mov	r2, r3
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	f002 f99e 	bl	80096ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	425b      	negs	r3, r3
 800737a:	441a      	add	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d207      	bcs.n	800739c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	425b      	negs	r3, r3
 8007396:	441a      	add	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d105      	bne.n	80073ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073b6:	697b      	ldr	r3, [r7, #20]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d018      	beq.n	8007404 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	441a      	add	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d303      	bcc.n	80073f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68d9      	ldr	r1, [r3, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	461a      	mov	r2, r3
 80073fe:	6838      	ldr	r0, [r7, #0]
 8007400:	f002 f954 	bl	80096ac <memcpy>
	}
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007414:	f001 fc9e 	bl	8008d54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800741e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007420:	e011      	b.n	8007446 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d012      	beq.n	8007450 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3324      	adds	r3, #36	; 0x24
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fd74 	bl	8007f1c <xTaskRemoveFromEventList>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800743a:	f000 fe4b 	bl	80080d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	3b01      	subs	r3, #1
 8007442:	b2db      	uxtb	r3, r3
 8007444:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800744a:	2b00      	cmp	r3, #0
 800744c:	dce9      	bgt.n	8007422 <prvUnlockQueue+0x16>
 800744e:	e000      	b.n	8007452 <prvUnlockQueue+0x46>
					break;
 8007450:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	22ff      	movs	r2, #255	; 0xff
 8007456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800745a:	f001 fcab 	bl	8008db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800745e:	f001 fc79 	bl	8008d54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007468:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800746a:	e011      	b.n	8007490 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d012      	beq.n	800749a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3310      	adds	r3, #16
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fd4f 	bl	8007f1c <xTaskRemoveFromEventList>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007484:	f000 fe26 	bl	80080d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	3b01      	subs	r3, #1
 800748c:	b2db      	uxtb	r3, r3
 800748e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	dce9      	bgt.n	800746c <prvUnlockQueue+0x60>
 8007498:	e000      	b.n	800749c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800749a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	22ff      	movs	r2, #255	; 0xff
 80074a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074a4:	f001 fc86 	bl	8008db4 <vPortExitCritical>
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074b8:	f001 fc4c 	bl	8008d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074c4:	2301      	movs	r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e001      	b.n	80074ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ce:	f001 fc71 	bl	8008db4 <vPortExitCritical>

	return xReturn;
 80074d2:	68fb      	ldr	r3, [r7, #12]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074e4:	f001 fc36 	bl	8008d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d102      	bne.n	80074fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074f4:	2301      	movs	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	e001      	b.n	80074fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074fe:	f001 fc59 	bl	8008db4 <vPortExitCritical>

	return xReturn;
 8007502:	68fb      	ldr	r3, [r7, #12]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007516:	2300      	movs	r3, #0
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e014      	b.n	8007546 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800751c:	4a0f      	ldr	r2, [pc, #60]	; (800755c <vQueueAddToRegistry+0x50>)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007528:	490c      	ldr	r1, [pc, #48]	; (800755c <vQueueAddToRegistry+0x50>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007532:	4a0a      	ldr	r2, [pc, #40]	; (800755c <vQueueAddToRegistry+0x50>)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	4413      	add	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800753e:	e006      	b.n	800754e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b07      	cmp	r3, #7
 800754a:	d9e7      	bls.n	800751c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000a4c 	.word	0x20000a4c

08007560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007570:	f001 fbf0 	bl	8008d54 <vPortEnterCritical>
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800757a:	b25b      	sxtb	r3, r3
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007580:	d103      	bne.n	800758a <vQueueWaitForMessageRestricted+0x2a>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007590:	b25b      	sxtb	r3, r3
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007596:	d103      	bne.n	80075a0 <vQueueWaitForMessageRestricted+0x40>
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a0:	f001 fc08 	bl	8008db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d106      	bne.n	80075ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	3324      	adds	r3, #36	; 0x24
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fc85 	bl	8007ec4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075ba:	6978      	ldr	r0, [r7, #20]
 80075bc:	f7ff ff26 	bl	800740c <prvUnlockQueue>
	}
 80075c0:	bf00      	nop
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08e      	sub	sp, #56	; 0x38
 80075cc:	af04      	add	r7, sp, #16
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	623b      	str	r3, [r7, #32]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <xTaskCreateStatic+0x46>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	61fb      	str	r3, [r7, #28]
}
 800760a:	bf00      	nop
 800760c:	e7fe      	b.n	800760c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800760e:	23c4      	movs	r3, #196	; 0xc4
 8007610:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	2bc4      	cmp	r3, #196	; 0xc4
 8007616:	d00a      	beq.n	800762e <xTaskCreateStatic+0x66>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	61bb      	str	r3, [r7, #24]
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800762e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01e      	beq.n	8007674 <xTaskCreateStatic+0xac>
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01b      	beq.n	8007674 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007644:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	2202      	movs	r2, #2
 800764a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800764e:	2300      	movs	r3, #0
 8007650:	9303      	str	r3, [sp, #12]
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	f107 0314 	add.w	r3, r7, #20
 800765a:	9301      	str	r3, [sp, #4]
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 f850 	bl	800770c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800766c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800766e:	f000 f8f9 	bl	8007864 <prvAddNewTaskToReadyList>
 8007672:	e001      	b.n	8007678 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007678:	697b      	ldr	r3, [r7, #20]
	}
 800767a:	4618      	mov	r0, r3
 800767c:	3728      	adds	r7, #40	; 0x28
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007682:	b580      	push	{r7, lr}
 8007684:	b08c      	sub	sp, #48	; 0x30
 8007686:	af04      	add	r7, sp, #16
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	603b      	str	r3, [r7, #0]
 800768e:	4613      	mov	r3, r2
 8007690:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007692:	88fb      	ldrh	r3, [r7, #6]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fc7e 	bl	8008f98 <pvPortMalloc>
 800769c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00e      	beq.n	80076c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076a4:	20c4      	movs	r0, #196	; 0xc4
 80076a6:	f001 fc77 	bl	8008f98 <pvPortMalloc>
 80076aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30
 80076b8:	e005      	b.n	80076c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076ba:	6978      	ldr	r0, [r7, #20]
 80076bc:	f001 fd38 	bl	8009130 <vPortFree>
 80076c0:	e001      	b.n	80076c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d017      	beq.n	80076fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076d4:	88fa      	ldrh	r2, [r7, #6]
 80076d6:	2300      	movs	r3, #0
 80076d8:	9303      	str	r3, [sp, #12]
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	9302      	str	r3, [sp, #8]
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f80e 	bl	800770c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076f0:	69f8      	ldr	r0, [r7, #28]
 80076f2:	f000 f8b7 	bl	8007864 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076f6:	2301      	movs	r3, #1
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	e002      	b.n	8007702 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007700:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007702:	69bb      	ldr	r3, [r7, #24]
	}
 8007704:	4618      	mov	r0, r3
 8007706:	3720      	adds	r7, #32
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	461a      	mov	r2, r3
 8007724:	21a5      	movs	r1, #165	; 0xa5
 8007726:	f001 ffcf 	bl	80096c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007734:	3b01      	subs	r3, #1
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f023 0307 	bic.w	r3, r3, #7
 8007742:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <prvInitialiseNewTask+0x58>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	617b      	str	r3, [r7, #20]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01f      	beq.n	80077b0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	e012      	b.n	800779c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	7819      	ldrb	r1, [r3, #0]
 800777e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	3334      	adds	r3, #52	; 0x34
 8007786:	460a      	mov	r2, r1
 8007788:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	3301      	adds	r3, #1
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b0f      	cmp	r3, #15
 80077a0:	d9e9      	bls.n	8007776 <prvInitialiseNewTask+0x6a>
 80077a2:	e000      	b.n	80077a6 <prvInitialiseNewTask+0x9a>
			{
				break;
 80077a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077ae:	e003      	b.n	80077b8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2b37      	cmp	r3, #55	; 0x37
 80077bc:	d901      	bls.n	80077c2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077be:	2337      	movs	r3, #55	; 0x37
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077cc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2200      	movs	r2, #0
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff f8bb 	bl	8006954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	3318      	adds	r3, #24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff f8b6 	bl	8006954 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	2200      	movs	r2, #0
 8007802:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	2200      	movs	r2, #0
 8007810:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	335c      	adds	r3, #92	; 0x5c
 8007818:	2260      	movs	r2, #96	; 0x60
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f001 ff53 	bl	80096c8 <memset>
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	4a0c      	ldr	r2, [pc, #48]	; (8007858 <prvInitialiseNewTask+0x14c>)
 8007826:	661a      	str	r2, [r3, #96]	; 0x60
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	4a0c      	ldr	r2, [pc, #48]	; (800785c <prvInitialiseNewTask+0x150>)
 800782c:	665a      	str	r2, [r3, #100]	; 0x64
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	4a0b      	ldr	r2, [pc, #44]	; (8007860 <prvInitialiseNewTask+0x154>)
 8007832:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	68f9      	ldr	r1, [r7, #12]
 8007838:	69b8      	ldr	r0, [r7, #24]
 800783a:	f001 f95f 	bl	8008afc <pxPortInitialiseStack>
 800783e:	4602      	mov	r2, r0
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007850:	bf00      	nop
 8007852:	3720      	adds	r7, #32
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	080099e4 	.word	0x080099e4
 800785c:	08009a04 	.word	0x08009a04
 8007860:	080099c4 	.word	0x080099c4

08007864 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800786c:	f001 fa72 	bl	8008d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007870:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <prvAddNewTaskToReadyList+0xc4>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	4a2c      	ldr	r2, [pc, #176]	; (8007928 <prvAddNewTaskToReadyList+0xc4>)
 8007878:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800787a:	4b2c      	ldr	r3, [pc, #176]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007882:	4a2a      	ldr	r2, [pc, #168]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007888:	4b27      	ldr	r3, [pc, #156]	; (8007928 <prvAddNewTaskToReadyList+0xc4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d110      	bne.n	80078b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007890:	f000 fc44 	bl	800811c <prvInitialiseTaskLists>
 8007894:	e00d      	b.n	80078b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007896:	4b26      	ldr	r3, [pc, #152]	; (8007930 <prvAddNewTaskToReadyList+0xcc>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d109      	bne.n	80078b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800789e:	4b23      	ldr	r3, [pc, #140]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d802      	bhi.n	80078b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078ac:	4a1f      	ldr	r2, [pc, #124]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078b2:	4b20      	ldr	r3, [pc, #128]	; (8007934 <prvAddNewTaskToReadyList+0xd0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	4a1e      	ldr	r2, [pc, #120]	; (8007934 <prvAddNewTaskToReadyList+0xd0>)
 80078ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078bc:	4b1d      	ldr	r3, [pc, #116]	; (8007934 <prvAddNewTaskToReadyList+0xd0>)
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <prvAddNewTaskToReadyList+0xd4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d903      	bls.n	80078d8 <prvAddNewTaskToReadyList+0x74>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a18      	ldr	r2, [pc, #96]	; (8007938 <prvAddNewTaskToReadyList+0xd4>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a15      	ldr	r2, [pc, #84]	; (800793c <prvAddNewTaskToReadyList+0xd8>)
 80078e6:	441a      	add	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7ff f83d 	bl	800696e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078f4:	f001 fa5e 	bl	8008db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078f8:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <prvAddNewTaskToReadyList+0xcc>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	429a      	cmp	r2, r3
 800790c:	d207      	bcs.n	800791e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800790e:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <prvAddNewTaskToReadyList+0xdc>)
 8007910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000f60 	.word	0x20000f60
 800792c:	20000a8c 	.word	0x20000a8c
 8007930:	20000f6c 	.word	0x20000f6c
 8007934:	20000f7c 	.word	0x20000f7c
 8007938:	20000f68 	.word	0x20000f68
 800793c:	20000a90 	.word	0x20000a90
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d017      	beq.n	8007986 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007956:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <vTaskDelay+0x60>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <vTaskDelay+0x30>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60bb      	str	r3, [r7, #8]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007974:	f000 f88c 	bl	8007a90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007978:	2100      	movs	r1, #0
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fd1c 	bl	80083b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007980:	f000 f894 	bl	8007aac <xTaskResumeAll>
 8007984:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d107      	bne.n	800799c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <vTaskDelay+0x64>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800799c:	bf00      	nop
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000f88 	.word	0x20000f88
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079ba:	463a      	mov	r2, r7
 80079bc:	1d39      	adds	r1, r7, #4
 80079be:	f107 0308 	add.w	r3, r7, #8
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe ff72 	bl	80068ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	9202      	str	r2, [sp, #8]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	2300      	movs	r3, #0
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	2300      	movs	r3, #0
 80079d8:	460a      	mov	r2, r1
 80079da:	4925      	ldr	r1, [pc, #148]	; (8007a70 <vTaskStartScheduler+0xc4>)
 80079dc:	4825      	ldr	r0, [pc, #148]	; (8007a74 <vTaskStartScheduler+0xc8>)
 80079de:	f7ff fdf3 	bl	80075c8 <xTaskCreateStatic>
 80079e2:	4603      	mov	r3, r0
 80079e4:	4a24      	ldr	r2, [pc, #144]	; (8007a78 <vTaskStartScheduler+0xcc>)
 80079e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079e8:	4b23      	ldr	r3, [pc, #140]	; (8007a78 <vTaskStartScheduler+0xcc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e001      	b.n	80079fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d102      	bne.n	8007a06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a00:	f000 fd2e 	bl	8008460 <xTimerCreateTimerTask>
 8007a04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d11d      	bne.n	8007a48 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	613b      	str	r3, [r7, #16]
}
 8007a1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a20:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <vTaskStartScheduler+0xd0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	335c      	adds	r3, #92	; 0x5c
 8007a26:	4a16      	ldr	r2, [pc, #88]	; (8007a80 <vTaskStartScheduler+0xd4>)
 8007a28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a2a:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <vTaskStartScheduler+0xd8>)
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a32:	4b15      	ldr	r3, [pc, #84]	; (8007a88 <vTaskStartScheduler+0xdc>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a38:	4b14      	ldr	r3, [pc, #80]	; (8007a8c <vTaskStartScheduler+0xe0>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007a3e:	f7f8 fee9 	bl	8000814 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a42:	f001 f8e5 	bl	8008c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a46:	e00e      	b.n	8007a66 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a4e:	d10a      	bne.n	8007a66 <vTaskStartScheduler+0xba>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	60fb      	str	r3, [r7, #12]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <vTaskStartScheduler+0xb8>
}
 8007a66:	bf00      	nop
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	080098a8 	.word	0x080098a8
 8007a74:	080080ed 	.word	0x080080ed
 8007a78:	20000f84 	.word	0x20000f84
 8007a7c:	20000a8c 	.word	0x20000a8c
 8007a80:	20000010 	.word	0x20000010
 8007a84:	20000f80 	.word	0x20000f80
 8007a88:	20000f6c 	.word	0x20000f6c
 8007a8c:	20000f64 	.word	0x20000f64

08007a90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <vTaskSuspendAll+0x18>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	4a03      	ldr	r2, [pc, #12]	; (8007aa8 <vTaskSuspendAll+0x18>)
 8007a9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a9e:	bf00      	nop
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	20000f88 	.word	0x20000f88

08007aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aba:	4b42      	ldr	r3, [pc, #264]	; (8007bc4 <xTaskResumeAll+0x118>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	603b      	str	r3, [r7, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ad8:	f001 f93c 	bl	8008d54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007adc:	4b39      	ldr	r3, [pc, #228]	; (8007bc4 <xTaskResumeAll+0x118>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	4a38      	ldr	r2, [pc, #224]	; (8007bc4 <xTaskResumeAll+0x118>)
 8007ae4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae6:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <xTaskResumeAll+0x118>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d162      	bne.n	8007bb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007aee:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <xTaskResumeAll+0x11c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d05e      	beq.n	8007bb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007af6:	e02f      	b.n	8007b58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af8:	4b34      	ldr	r3, [pc, #208]	; (8007bcc <xTaskResumeAll+0x120>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3318      	adds	r3, #24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe ff8f 	bl	8006a28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe ff8a 	bl	8006a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b18:	4b2d      	ldr	r3, [pc, #180]	; (8007bd0 <xTaskResumeAll+0x124>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d903      	bls.n	8007b28 <xTaskResumeAll+0x7c>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	4a2a      	ldr	r2, [pc, #168]	; (8007bd0 <xTaskResumeAll+0x124>)
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4a27      	ldr	r2, [pc, #156]	; (8007bd4 <xTaskResumeAll+0x128>)
 8007b36:	441a      	add	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7fe ff15 	bl	800696e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	4b23      	ldr	r3, [pc, #140]	; (8007bd8 <xTaskResumeAll+0x12c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d302      	bcc.n	8007b58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b52:	4b22      	ldr	r3, [pc, #136]	; (8007bdc <xTaskResumeAll+0x130>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b58:	4b1c      	ldr	r3, [pc, #112]	; (8007bcc <xTaskResumeAll+0x120>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1cb      	bne.n	8007af8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b66:	f000 fb7b 	bl	8008260 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b6a:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <xTaskResumeAll+0x134>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d010      	beq.n	8007b98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b76:	f000 f847 	bl	8007c08 <xTaskIncrementTick>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b80:	4b16      	ldr	r3, [pc, #88]	; (8007bdc <xTaskResumeAll+0x130>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f1      	bne.n	8007b76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b92:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <xTaskResumeAll+0x134>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b98:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <xTaskResumeAll+0x130>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ba4:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <xTaskResumeAll+0x138>)
 8007ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bb4:	f001 f8fe 	bl	8008db4 <vPortExitCritical>

	return xAlreadyYielded;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000f88 	.word	0x20000f88
 8007bc8:	20000f60 	.word	0x20000f60
 8007bcc:	20000f20 	.word	0x20000f20
 8007bd0:	20000f68 	.word	0x20000f68
 8007bd4:	20000a90 	.word	0x20000a90
 8007bd8:	20000a8c 	.word	0x20000a8c
 8007bdc:	20000f74 	.word	0x20000f74
 8007be0:	20000f70 	.word	0x20000f70
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007bee:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <xTaskGetTickCount+0x1c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007bf4:	687b      	ldr	r3, [r7, #4]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20000f64 	.word	0x20000f64

08007c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c12:	4b4f      	ldr	r3, [pc, #316]	; (8007d50 <xTaskIncrementTick+0x148>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f040 808f 	bne.w	8007d3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c1c:	4b4d      	ldr	r3, [pc, #308]	; (8007d54 <xTaskIncrementTick+0x14c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3301      	adds	r3, #1
 8007c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c24:	4a4b      	ldr	r2, [pc, #300]	; (8007d54 <xTaskIncrementTick+0x14c>)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d120      	bne.n	8007c72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c30:	4b49      	ldr	r3, [pc, #292]	; (8007d58 <xTaskIncrementTick+0x150>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	603b      	str	r3, [r7, #0]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <xTaskIncrementTick+0x46>
 8007c50:	4b41      	ldr	r3, [pc, #260]	; (8007d58 <xTaskIncrementTick+0x150>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	4b41      	ldr	r3, [pc, #260]	; (8007d5c <xTaskIncrementTick+0x154>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a3f      	ldr	r2, [pc, #252]	; (8007d58 <xTaskIncrementTick+0x150>)
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	4a3f      	ldr	r2, [pc, #252]	; (8007d5c <xTaskIncrementTick+0x154>)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <xTaskIncrementTick+0x158>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	4a3d      	ldr	r2, [pc, #244]	; (8007d60 <xTaskIncrementTick+0x158>)
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	f000 faf7 	bl	8008260 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c72:	4b3c      	ldr	r3, [pc, #240]	; (8007d64 <xTaskIncrementTick+0x15c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d349      	bcc.n	8007d10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c7c:	4b36      	ldr	r3, [pc, #216]	; (8007d58 <xTaskIncrementTick+0x150>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d104      	bne.n	8007c90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c86:	4b37      	ldr	r3, [pc, #220]	; (8007d64 <xTaskIncrementTick+0x15c>)
 8007c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c8c:	601a      	str	r2, [r3, #0]
					break;
 8007c8e:	e03f      	b.n	8007d10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c90:	4b31      	ldr	r3, [pc, #196]	; (8007d58 <xTaskIncrementTick+0x150>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d203      	bcs.n	8007cb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ca8:	4a2e      	ldr	r2, [pc, #184]	; (8007d64 <xTaskIncrementTick+0x15c>)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cae:	e02f      	b.n	8007d10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe feb7 	bl	8006a28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	3318      	adds	r3, #24
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe feae 	bl	8006a28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <xTaskIncrementTick+0x160>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d903      	bls.n	8007ce0 <xTaskIncrementTick+0xd8>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	4a22      	ldr	r2, [pc, #136]	; (8007d68 <xTaskIncrementTick+0x160>)
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4a1f      	ldr	r2, [pc, #124]	; (8007d6c <xTaskIncrementTick+0x164>)
 8007cee:	441a      	add	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7fe fe39 	bl	800696e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d00:	4b1b      	ldr	r3, [pc, #108]	; (8007d70 <xTaskIncrementTick+0x168>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d3b8      	bcc.n	8007c7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d0e:	e7b5      	b.n	8007c7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d10:	4b17      	ldr	r3, [pc, #92]	; (8007d70 <xTaskIncrementTick+0x168>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	4915      	ldr	r1, [pc, #84]	; (8007d6c <xTaskIncrementTick+0x164>)
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	440b      	add	r3, r1
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d901      	bls.n	8007d2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d2c:	4b11      	ldr	r3, [pc, #68]	; (8007d74 <xTaskIncrementTick+0x16c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d007      	beq.n	8007d44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007d34:	2301      	movs	r3, #1
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e004      	b.n	8007d44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <xTaskIncrementTick+0x170>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	4a0d      	ldr	r2, [pc, #52]	; (8007d78 <xTaskIncrementTick+0x170>)
 8007d42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d44:	697b      	ldr	r3, [r7, #20]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000f88 	.word	0x20000f88
 8007d54:	20000f64 	.word	0x20000f64
 8007d58:	20000f18 	.word	0x20000f18
 8007d5c:	20000f1c 	.word	0x20000f1c
 8007d60:	20000f78 	.word	0x20000f78
 8007d64:	20000f80 	.word	0x20000f80
 8007d68:	20000f68 	.word	0x20000f68
 8007d6c:	20000a90 	.word	0x20000a90
 8007d70:	20000a8c 	.word	0x20000a8c
 8007d74:	20000f74 	.word	0x20000f74
 8007d78:	20000f70 	.word	0x20000f70

08007d7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d82:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <vTaskSwitchContext+0xe0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d8a:	4b35      	ldr	r3, [pc, #212]	; (8007e60 <vTaskSwitchContext+0xe4>)
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d90:	e05f      	b.n	8007e52 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8007d92:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <vTaskSwitchContext+0xe4>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007d98:	f7f8 fd43 	bl	8000822 <getRunTimeCounterValue>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	4a31      	ldr	r2, [pc, #196]	; (8007e64 <vTaskSwitchContext+0xe8>)
 8007da0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007da2:	4b30      	ldr	r3, [pc, #192]	; (8007e64 <vTaskSwitchContext+0xe8>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	4b30      	ldr	r3, [pc, #192]	; (8007e68 <vTaskSwitchContext+0xec>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d909      	bls.n	8007dc2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007dae:	4b2f      	ldr	r3, [pc, #188]	; (8007e6c <vTaskSwitchContext+0xf0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007db4:	4a2b      	ldr	r2, [pc, #172]	; (8007e64 <vTaskSwitchContext+0xe8>)
 8007db6:	6810      	ldr	r0, [r2, #0]
 8007db8:	4a2b      	ldr	r2, [pc, #172]	; (8007e68 <vTaskSwitchContext+0xec>)
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	1a82      	subs	r2, r0, r2
 8007dbe:	440a      	add	r2, r1
 8007dc0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007dc2:	4b28      	ldr	r3, [pc, #160]	; (8007e64 <vTaskSwitchContext+0xe8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a28      	ldr	r2, [pc, #160]	; (8007e68 <vTaskSwitchContext+0xec>)
 8007dc8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dca:	4b29      	ldr	r3, [pc, #164]	; (8007e70 <vTaskSwitchContext+0xf4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	e010      	b.n	8007df4 <vTaskSwitchContext+0x78>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <vTaskSwitchContext+0x72>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	607b      	str	r3, [r7, #4]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <vTaskSwitchContext+0x70>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	491f      	ldr	r1, [pc, #124]	; (8007e74 <vTaskSwitchContext+0xf8>)
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0e4      	beq.n	8007dd2 <vTaskSwitchContext+0x56>
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4a18      	ldr	r2, [pc, #96]	; (8007e74 <vTaskSwitchContext+0xf8>)
 8007e14:	4413      	add	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d104      	bne.n	8007e38 <vTaskSwitchContext+0xbc>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	605a      	str	r2, [r3, #4]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4a0b      	ldr	r2, [pc, #44]	; (8007e6c <vTaskSwitchContext+0xf0>)
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4a0b      	ldr	r2, [pc, #44]	; (8007e70 <vTaskSwitchContext+0xf4>)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e48:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <vTaskSwitchContext+0xf0>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	335c      	adds	r3, #92	; 0x5c
 8007e4e:	4a0a      	ldr	r2, [pc, #40]	; (8007e78 <vTaskSwitchContext+0xfc>)
 8007e50:	6013      	str	r3, [r2, #0]
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000f88 	.word	0x20000f88
 8007e60:	20000f74 	.word	0x20000f74
 8007e64:	20000f90 	.word	0x20000f90
 8007e68:	20000f8c 	.word	0x20000f8c
 8007e6c:	20000a8c 	.word	0x20000a8c
 8007e70:	20000f68 	.word	0x20000f68
 8007e74:	20000a90 	.word	0x20000a90
 8007e78:	20000010 	.word	0x20000010

08007e7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	60fb      	str	r3, [r7, #12]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ea2:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <vTaskPlaceOnEventList+0x44>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7fe fd83 	bl	80069b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	6838      	ldr	r0, [r7, #0]
 8007eb4:	f000 fa80 	bl	80083b8 <prvAddCurrentTaskToDelayedList>
}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20000a8c 	.word	0x20000a8c

08007ec4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10a      	bne.n	8007eec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	617b      	str	r3, [r7, #20]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <vTaskPlaceOnEventListRestricted+0x54>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3318      	adds	r3, #24
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7fe fd3a 	bl	800696e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	68b8      	ldr	r0, [r7, #8]
 8007f0a:	f000 fa55 	bl	80083b8 <prvAddCurrentTaskToDelayedList>
	}
 8007f0e:	bf00      	nop
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000a8c 	.word	0x20000a8c

08007f1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	60fb      	str	r3, [r7, #12]
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	3318      	adds	r3, #24
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe fd6b 	bl	8006a28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f52:	4b1e      	ldr	r3, [pc, #120]	; (8007fcc <xTaskRemoveFromEventList+0xb0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d11d      	bne.n	8007f96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fd62 	bl	8006a28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <xTaskRemoveFromEventList+0xb4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d903      	bls.n	8007f78 <xTaskRemoveFromEventList+0x5c>
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	4a16      	ldr	r2, [pc, #88]	; (8007fd0 <xTaskRemoveFromEventList+0xb4>)
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4a13      	ldr	r2, [pc, #76]	; (8007fd4 <xTaskRemoveFromEventList+0xb8>)
 8007f86:	441a      	add	r2, r3
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f7fe fced 	bl	800696e <vListInsertEnd>
 8007f94:	e005      	b.n	8007fa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	3318      	adds	r3, #24
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	480e      	ldr	r0, [pc, #56]	; (8007fd8 <xTaskRemoveFromEventList+0xbc>)
 8007f9e:	f7fe fce6 	bl	800696e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <xTaskRemoveFromEventList+0xc0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d905      	bls.n	8007fbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fb4:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <xTaskRemoveFromEventList+0xc4>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	e001      	b.n	8007fc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fc0:	697b      	ldr	r3, [r7, #20]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000f88 	.word	0x20000f88
 8007fd0:	20000f68 	.word	0x20000f68
 8007fd4:	20000a90 	.word	0x20000a90
 8007fd8:	20000f20 	.word	0x20000f20
 8007fdc:	20000a8c 	.word	0x20000a8c
 8007fe0:	20000f74 	.word	0x20000f74

08007fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <vTaskInternalSetTimeOutState+0x24>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <vTaskInternalSetTimeOutState+0x28>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	605a      	str	r2, [r3, #4]
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20000f78 	.word	0x20000f78
 800800c:	20000f64 	.word	0x20000f64

08008010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	613b      	str	r3, [r7, #16]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	60fb      	str	r3, [r7, #12]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008052:	f000 fe7f 	bl	8008d54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008056:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <xTaskCheckForTimeOut+0xbc>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800806e:	d102      	bne.n	8008076 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008070:	2300      	movs	r3, #0
 8008072:	61fb      	str	r3, [r7, #28]
 8008074:	e023      	b.n	80080be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <xTaskCheckForTimeOut+0xc0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d007      	beq.n	8008092 <xTaskCheckForTimeOut+0x82>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800808c:	2301      	movs	r3, #1
 800808e:	61fb      	str	r3, [r7, #28]
 8008090:	e015      	b.n	80080be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	429a      	cmp	r2, r3
 800809a:	d20b      	bcs.n	80080b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff ff9b 	bl	8007fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	61fb      	str	r3, [r7, #28]
 80080b2:	e004      	b.n	80080be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080be:	f000 fe79 	bl	8008db4 <vPortExitCritical>

	return xReturn;
 80080c2:	69fb      	ldr	r3, [r7, #28]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20000f64 	.word	0x20000f64
 80080d0:	20000f78 	.word	0x20000f78

080080d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080d8:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <vTaskMissedYield+0x14>)
 80080da:	2201      	movs	r2, #1
 80080dc:	601a      	str	r2, [r3, #0]
}
 80080de:	bf00      	nop
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	20000f74 	.word	0x20000f74

080080ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080f4:	f000 f852 	bl	800819c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080f8:	4b06      	ldr	r3, [pc, #24]	; (8008114 <prvIdleTask+0x28>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d9f9      	bls.n	80080f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008100:	4b05      	ldr	r3, [pc, #20]	; (8008118 <prvIdleTask+0x2c>)
 8008102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008110:	e7f0      	b.n	80080f4 <prvIdleTask+0x8>
 8008112:	bf00      	nop
 8008114:	20000a90 	.word	0x20000a90
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008122:	2300      	movs	r3, #0
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	e00c      	b.n	8008142 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4a12      	ldr	r2, [pc, #72]	; (800817c <prvInitialiseTaskLists+0x60>)
 8008134:	4413      	add	r3, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fbec 	bl	8006914 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3301      	adds	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b37      	cmp	r3, #55	; 0x37
 8008146:	d9ef      	bls.n	8008128 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008148:	480d      	ldr	r0, [pc, #52]	; (8008180 <prvInitialiseTaskLists+0x64>)
 800814a:	f7fe fbe3 	bl	8006914 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800814e:	480d      	ldr	r0, [pc, #52]	; (8008184 <prvInitialiseTaskLists+0x68>)
 8008150:	f7fe fbe0 	bl	8006914 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008154:	480c      	ldr	r0, [pc, #48]	; (8008188 <prvInitialiseTaskLists+0x6c>)
 8008156:	f7fe fbdd 	bl	8006914 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800815a:	480c      	ldr	r0, [pc, #48]	; (800818c <prvInitialiseTaskLists+0x70>)
 800815c:	f7fe fbda 	bl	8006914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008160:	480b      	ldr	r0, [pc, #44]	; (8008190 <prvInitialiseTaskLists+0x74>)
 8008162:	f7fe fbd7 	bl	8006914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <prvInitialiseTaskLists+0x78>)
 8008168:	4a05      	ldr	r2, [pc, #20]	; (8008180 <prvInitialiseTaskLists+0x64>)
 800816a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <prvInitialiseTaskLists+0x7c>)
 800816e:	4a05      	ldr	r2, [pc, #20]	; (8008184 <prvInitialiseTaskLists+0x68>)
 8008170:	601a      	str	r2, [r3, #0]
}
 8008172:	bf00      	nop
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20000a90 	.word	0x20000a90
 8008180:	20000ef0 	.word	0x20000ef0
 8008184:	20000f04 	.word	0x20000f04
 8008188:	20000f20 	.word	0x20000f20
 800818c:	20000f34 	.word	0x20000f34
 8008190:	20000f4c 	.word	0x20000f4c
 8008194:	20000f18 	.word	0x20000f18
 8008198:	20000f1c 	.word	0x20000f1c

0800819c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081a2:	e019      	b.n	80081d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081a4:	f000 fdd6 	bl	8008d54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081a8:	4b10      	ldr	r3, [pc, #64]	; (80081ec <prvCheckTasksWaitingTermination+0x50>)
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe fc37 	bl	8006a28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081ba:	4b0d      	ldr	r3, [pc, #52]	; (80081f0 <prvCheckTasksWaitingTermination+0x54>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3b01      	subs	r3, #1
 80081c0:	4a0b      	ldr	r2, [pc, #44]	; (80081f0 <prvCheckTasksWaitingTermination+0x54>)
 80081c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081c4:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <prvCheckTasksWaitingTermination+0x58>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	4a0a      	ldr	r2, [pc, #40]	; (80081f4 <prvCheckTasksWaitingTermination+0x58>)
 80081cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081ce:	f000 fdf1 	bl	8008db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f810 	bl	80081f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <prvCheckTasksWaitingTermination+0x58>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e1      	bne.n	80081a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000f34 	.word	0x20000f34
 80081f0:	20000f60 	.word	0x20000f60
 80081f4:	20000f48 	.word	0x20000f48

080081f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	335c      	adds	r3, #92	; 0x5c
 8008204:	4618      	mov	r0, r3
 8008206:	f001 fa75 	bl	80096f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d108      	bne.n	8008226 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	4618      	mov	r0, r3
 800821a:	f000 ff89 	bl	8009130 <vPortFree>
				vPortFree( pxTCB );
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 ff86 	bl	8009130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008224:	e018      	b.n	8008258 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800822c:	2b01      	cmp	r3, #1
 800822e:	d103      	bne.n	8008238 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 ff7d 	bl	8009130 <vPortFree>
	}
 8008236:	e00f      	b.n	8008258 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800823e:	2b02      	cmp	r3, #2
 8008240:	d00a      	beq.n	8008258 <prvDeleteTCB+0x60>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	60fb      	str	r3, [r7, #12]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <prvDeleteTCB+0x5e>
	}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008266:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <prvResetNextTaskUnblockTime+0x38>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008270:	4b0a      	ldr	r3, [pc, #40]	; (800829c <prvResetNextTaskUnblockTime+0x3c>)
 8008272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008276:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008278:	e008      	b.n	800828c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800827a:	4b07      	ldr	r3, [pc, #28]	; (8008298 <prvResetNextTaskUnblockTime+0x38>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4a04      	ldr	r2, [pc, #16]	; (800829c <prvResetNextTaskUnblockTime+0x3c>)
 800828a:	6013      	str	r3, [r2, #0]
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	20000f18 	.word	0x20000f18
 800829c:	20000f80 	.word	0x20000f80

080082a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082a6:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <xTaskGetSchedulerState+0x34>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082ae:	2301      	movs	r3, #1
 80082b0:	607b      	str	r3, [r7, #4]
 80082b2:	e008      	b.n	80082c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082b4:	4b08      	ldr	r3, [pc, #32]	; (80082d8 <xTaskGetSchedulerState+0x38>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082bc:	2302      	movs	r3, #2
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	e001      	b.n	80082c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082c2:	2300      	movs	r3, #0
 80082c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082c6:	687b      	ldr	r3, [r7, #4]
	}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	20000f6c 	.word	0x20000f6c
 80082d8:	20000f88 	.word	0x20000f88

080082dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d056      	beq.n	80083a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082f2:	4b2e      	ldr	r3, [pc, #184]	; (80083ac <xTaskPriorityDisinherit+0xd0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d00a      	beq.n	8008312 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	60fb      	str	r3, [r7, #12]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	60bb      	str	r3, [r7, #8]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008334:	1e5a      	subs	r2, r3, #1
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008342:	429a      	cmp	r2, r3
 8008344:	d02c      	beq.n	80083a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834a:	2b00      	cmp	r3, #0
 800834c:	d128      	bne.n	80083a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	3304      	adds	r3, #4
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fb68 	bl	8006a28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008370:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <xTaskPriorityDisinherit+0xd4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d903      	bls.n	8008380 <xTaskPriorityDisinherit+0xa4>
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	4a0c      	ldr	r2, [pc, #48]	; (80083b0 <xTaskPriorityDisinherit+0xd4>)
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4a09      	ldr	r2, [pc, #36]	; (80083b4 <xTaskPriorityDisinherit+0xd8>)
 800838e:	441a      	add	r2, r3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	3304      	adds	r3, #4
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f7fe fae9 	bl	800696e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800839c:	2301      	movs	r3, #1
 800839e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083a0:	697b      	ldr	r3, [r7, #20]
	}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000a8c 	.word	0x20000a8c
 80083b0:	20000f68 	.word	0x20000f68
 80083b4:	20000a90 	.word	0x20000a90

080083b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083c2:	4b21      	ldr	r3, [pc, #132]	; (8008448 <prvAddCurrentTaskToDelayedList+0x90>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083c8:	4b20      	ldr	r3, [pc, #128]	; (800844c <prvAddCurrentTaskToDelayedList+0x94>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3304      	adds	r3, #4
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fb2a 	bl	8006a28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083da:	d10a      	bne.n	80083f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d007      	beq.n	80083f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083e2:	4b1a      	ldr	r3, [pc, #104]	; (800844c <prvAddCurrentTaskToDelayedList+0x94>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4819      	ldr	r0, [pc, #100]	; (8008450 <prvAddCurrentTaskToDelayedList+0x98>)
 80083ec:	f7fe fabf 	bl	800696e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083f0:	e026      	b.n	8008440 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083fa:	4b14      	ldr	r3, [pc, #80]	; (800844c <prvAddCurrentTaskToDelayedList+0x94>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	429a      	cmp	r2, r3
 8008408:	d209      	bcs.n	800841e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800840a:	4b12      	ldr	r3, [pc, #72]	; (8008454 <prvAddCurrentTaskToDelayedList+0x9c>)
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	4b0f      	ldr	r3, [pc, #60]	; (800844c <prvAddCurrentTaskToDelayedList+0x94>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3304      	adds	r3, #4
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f7fe facd 	bl	80069b6 <vListInsert>
}
 800841c:	e010      	b.n	8008440 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800841e:	4b0e      	ldr	r3, [pc, #56]	; (8008458 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b0a      	ldr	r3, [pc, #40]	; (800844c <prvAddCurrentTaskToDelayedList+0x94>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	4610      	mov	r0, r2
 800842c:	f7fe fac3 	bl	80069b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008430:	4b0a      	ldr	r3, [pc, #40]	; (800845c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	d202      	bcs.n	8008440 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800843a:	4a08      	ldr	r2, [pc, #32]	; (800845c <prvAddCurrentTaskToDelayedList+0xa4>)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	6013      	str	r3, [r2, #0]
}
 8008440:	bf00      	nop
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000f64 	.word	0x20000f64
 800844c:	20000a8c 	.word	0x20000a8c
 8008450:	20000f4c 	.word	0x20000f4c
 8008454:	20000f1c 	.word	0x20000f1c
 8008458:	20000f18 	.word	0x20000f18
 800845c:	20000f80 	.word	0x20000f80

08008460 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08a      	sub	sp, #40	; 0x28
 8008464:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800846a:	f000 fb07 	bl	8008a7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800846e:	4b1c      	ldr	r3, [pc, #112]	; (80084e0 <xTimerCreateTimerTask+0x80>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d021      	beq.n	80084ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800847e:	1d3a      	adds	r2, r7, #4
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	f107 030c 	add.w	r3, r7, #12
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fa29 	bl	80068e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	9202      	str	r2, [sp, #8]
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	2306      	movs	r3, #6
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2300      	movs	r3, #0
 800849e:	460a      	mov	r2, r1
 80084a0:	4910      	ldr	r1, [pc, #64]	; (80084e4 <xTimerCreateTimerTask+0x84>)
 80084a2:	4811      	ldr	r0, [pc, #68]	; (80084e8 <xTimerCreateTimerTask+0x88>)
 80084a4:	f7ff f890 	bl	80075c8 <xTaskCreateStatic>
 80084a8:	4603      	mov	r3, r0
 80084aa:	4a10      	ldr	r2, [pc, #64]	; (80084ec <xTimerCreateTimerTask+0x8c>)
 80084ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084ae:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <xTimerCreateTimerTask+0x8c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084b6:	2301      	movs	r3, #1
 80084b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	613b      	str	r3, [r7, #16]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084d6:	697b      	ldr	r3, [r7, #20]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000fc4 	.word	0x20000fc4
 80084e4:	080098d8 	.word	0x080098d8
 80084e8:	08008625 	.word	0x08008625
 80084ec:	20000fc8 	.word	0x20000fc8

080084f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	; 0x28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084fe:	2300      	movs	r3, #0
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	623b      	str	r3, [r7, #32]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800851e:	4b1a      	ldr	r3, [pc, #104]	; (8008588 <xTimerGenericCommand+0x98>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d02a      	beq.n	800857c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b05      	cmp	r3, #5
 8008536:	dc18      	bgt.n	800856a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008538:	f7ff feb2 	bl	80082a0 <xTaskGetSchedulerState>
 800853c:	4603      	mov	r3, r0
 800853e:	2b02      	cmp	r3, #2
 8008540:	d109      	bne.n	8008556 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008542:	4b11      	ldr	r3, [pc, #68]	; (8008588 <xTimerGenericCommand+0x98>)
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	f107 0110 	add.w	r1, r7, #16
 800854a:	2300      	movs	r3, #0
 800854c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854e:	f7fe fbd3 	bl	8006cf8 <xQueueGenericSend>
 8008552:	6278      	str	r0, [r7, #36]	; 0x24
 8008554:	e012      	b.n	800857c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008556:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <xTimerGenericCommand+0x98>)
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	f107 0110 	add.w	r1, r7, #16
 800855e:	2300      	movs	r3, #0
 8008560:	2200      	movs	r2, #0
 8008562:	f7fe fbc9 	bl	8006cf8 <xQueueGenericSend>
 8008566:	6278      	str	r0, [r7, #36]	; 0x24
 8008568:	e008      	b.n	800857c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800856a:	4b07      	ldr	r3, [pc, #28]	; (8008588 <xTimerGenericCommand+0x98>)
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	f107 0110 	add.w	r1, r7, #16
 8008572:	2300      	movs	r3, #0
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	f7fe fcbd 	bl	8006ef4 <xQueueGenericSendFromISR>
 800857a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800857e:	4618      	mov	r0, r3
 8008580:	3728      	adds	r7, #40	; 0x28
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000fc4 	.word	0x20000fc4

0800858c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af02      	add	r7, sp, #8
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008596:	4b22      	ldr	r3, [pc, #136]	; (8008620 <prvProcessExpiredTimer+0x94>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe fa3f 	bl	8006a28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d022      	beq.n	80085fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	18d1      	adds	r1, r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	6978      	ldr	r0, [r7, #20]
 80085c6:	f000 f8d1 	bl	800876c <prvInsertTimerInActiveList>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01f      	beq.n	8008610 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085d0:	2300      	movs	r3, #0
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	2300      	movs	r3, #0
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	2100      	movs	r1, #0
 80085da:	6978      	ldr	r0, [r7, #20]
 80085dc:	f7ff ff88 	bl	80084f0 <xTimerGenericCommand>
 80085e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d113      	bne.n	8008610 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	60fb      	str	r3, [r7, #12]
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	b2da      	uxtb	r2, r3
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	6978      	ldr	r0, [r7, #20]
 8008616:	4798      	blx	r3
}
 8008618:	bf00      	nop
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20000fbc 	.word	0x20000fbc

08008624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800862c:	f107 0308 	add.w	r3, r7, #8
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f857 	bl	80086e4 <prvGetNextExpireTime>
 8008636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4619      	mov	r1, r3
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f803 	bl	8008648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008642:	f000 f8d5 	bl	80087f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008646:	e7f1      	b.n	800862c <prvTimerTask+0x8>

08008648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008652:	f7ff fa1d 	bl	8007a90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008656:	f107 0308 	add.w	r3, r7, #8
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f866 	bl	800872c <prvSampleTimeNow>
 8008660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d130      	bne.n	80086ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <prvProcessTimerOrBlockTask+0x3c>
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	429a      	cmp	r2, r3
 8008674:	d806      	bhi.n	8008684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008676:	f7ff fa19 	bl	8007aac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800867a:	68f9      	ldr	r1, [r7, #12]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff ff85 	bl	800858c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008682:	e024      	b.n	80086ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d008      	beq.n	800869c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800868a:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <prvProcessTimerOrBlockTask+0x90>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <prvProcessTimerOrBlockTask+0x50>
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <prvProcessTimerOrBlockTask+0x52>
 8008698:	2300      	movs	r3, #0
 800869a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800869c:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <prvProcessTimerOrBlockTask+0x94>)
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	4619      	mov	r1, r3
 80086aa:	f7fe ff59 	bl	8007560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086ae:	f7ff f9fd 	bl	8007aac <xTaskResumeAll>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086b8:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <prvProcessTimerOrBlockTask+0x98>)
 80086ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	f3bf 8f6f 	isb	sy
}
 80086c8:	e001      	b.n	80086ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086ca:	f7ff f9ef 	bl	8007aac <xTaskResumeAll>
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20000fc0 	.word	0x20000fc0
 80086dc:	20000fc4 	.word	0x20000fc4
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086ec:	4b0e      	ldr	r3, [pc, #56]	; (8008728 <prvGetNextExpireTime+0x44>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <prvGetNextExpireTime+0x16>
 80086f6:	2201      	movs	r2, #1
 80086f8:	e000      	b.n	80086fc <prvGetNextExpireTime+0x18>
 80086fa:	2200      	movs	r2, #0
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d105      	bne.n	8008714 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008708:	4b07      	ldr	r3, [pc, #28]	; (8008728 <prvGetNextExpireTime+0x44>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	e001      	b.n	8008718 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008718:	68fb      	ldr	r3, [r7, #12]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20000fbc 	.word	0x20000fbc

0800872c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008734:	f7ff fa58 	bl	8007be8 <xTaskGetTickCount>
 8008738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <prvSampleTimeNow+0x3c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	429a      	cmp	r2, r3
 8008742:	d205      	bcs.n	8008750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008744:	f000 f936 	bl	80089b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	e002      	b.n	8008756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008756:	4a04      	ldr	r2, [pc, #16]	; (8008768 <prvSampleTimeNow+0x3c>)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000fcc 	.word	0x20000fcc

0800876c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	429a      	cmp	r2, r3
 8008790:	d812      	bhi.n	80087b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	1ad2      	subs	r2, r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	429a      	cmp	r2, r3
 800879e:	d302      	bcc.n	80087a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087a0:	2301      	movs	r3, #1
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	e01b      	b.n	80087de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087a6:	4b10      	ldr	r3, [pc, #64]	; (80087e8 <prvInsertTimerInActiveList+0x7c>)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4619      	mov	r1, r3
 80087b0:	4610      	mov	r0, r2
 80087b2:	f7fe f900 	bl	80069b6 <vListInsert>
 80087b6:	e012      	b.n	80087de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d206      	bcs.n	80087ce <prvInsertTimerInActiveList+0x62>
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d302      	bcc.n	80087ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e007      	b.n	80087de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087ce:	4b07      	ldr	r3, [pc, #28]	; (80087ec <prvInsertTimerInActiveList+0x80>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7fe f8ec 	bl	80069b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087de:	697b      	ldr	r3, [r7, #20]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20000fc0 	.word	0x20000fc0
 80087ec:	20000fbc 	.word	0x20000fbc

080087f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08e      	sub	sp, #56	; 0x38
 80087f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087f6:	e0ca      	b.n	800898e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	da18      	bge.n	8008830 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087fe:	1d3b      	adds	r3, r7, #4
 8008800:	3304      	adds	r3, #4
 8008802:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10a      	bne.n	8008820 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	61fb      	str	r3, [r7, #28]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008826:	6850      	ldr	r0, [r2, #4]
 8008828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800882a:	6892      	ldr	r2, [r2, #8]
 800882c:	4611      	mov	r1, r2
 800882e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f2c0 80aa 	blt.w	800898c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d004      	beq.n	800884e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	3304      	adds	r3, #4
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe f8ed 	bl	8006a28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800884e:	463b      	mov	r3, r7
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff ff6b 	bl	800872c <prvSampleTimeNow>
 8008856:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b09      	cmp	r3, #9
 800885c:	f200 8097 	bhi.w	800898e <prvProcessReceivedCommands+0x19e>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <prvProcessReceivedCommands+0x78>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	08008891 	.word	0x08008891
 800886c:	08008891 	.word	0x08008891
 8008870:	08008891 	.word	0x08008891
 8008874:	08008905 	.word	0x08008905
 8008878:	08008919 	.word	0x08008919
 800887c:	08008963 	.word	0x08008963
 8008880:	08008891 	.word	0x08008891
 8008884:	08008891 	.word	0x08008891
 8008888:	08008905 	.word	0x08008905
 800888c:	08008919 	.word	0x08008919
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	b2da      	uxtb	r2, r3
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	18d1      	adds	r1, r2, r3
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b0:	f7ff ff5c 	bl	800876c <prvInsertTimerInActiveList>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d069      	beq.n	800898e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d05e      	beq.n	800898e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	441a      	add	r2, r3
 80088d8:	2300      	movs	r3, #0
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	2300      	movs	r3, #0
 80088de:	2100      	movs	r1, #0
 80088e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088e2:	f7ff fe05 	bl	80084f0 <xTimerGenericCommand>
 80088e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d14f      	bne.n	800898e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	61bb      	str	r3, [r7, #24]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800890a:	f023 0301 	bic.w	r3, r3, #1
 800890e:	b2da      	uxtb	r2, r3
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008916:	e03a      	b.n	800898e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800891e:	f043 0301 	orr.w	r3, r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10a      	bne.n	800894e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	617b      	str	r3, [r7, #20]
}
 800894a:	bf00      	nop
 800894c:	e7fe      	b.n	800894c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	18d1      	adds	r1, r2, r3
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800895c:	f7ff ff06 	bl	800876c <prvInsertTimerInActiveList>
					break;
 8008960:	e015      	b.n	800898e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d103      	bne.n	8008978 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008972:	f000 fbdd 	bl	8009130 <vPortFree>
 8008976:	e00a      	b.n	800898e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	b2da      	uxtb	r2, r3
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800898a:	e000      	b.n	800898e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800898c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800898e:	4b08      	ldr	r3, [pc, #32]	; (80089b0 <prvProcessReceivedCommands+0x1c0>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	1d39      	adds	r1, r7, #4
 8008994:	2200      	movs	r2, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fb48 	bl	800702c <xQueueReceive>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f47f af2a 	bne.w	80087f8 <prvProcessReceivedCommands+0x8>
	}
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	3730      	adds	r7, #48	; 0x30
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000fc4 	.word	0x20000fc4

080089b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089ba:	e048      	b.n	8008a4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089bc:	4b2d      	ldr	r3, [pc, #180]	; (8008a74 <prvSwitchTimerLists+0xc0>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c6:	4b2b      	ldr	r3, [pc, #172]	; (8008a74 <prvSwitchTimerLists+0xc0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3304      	adds	r3, #4
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe f827 	bl	8006a28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d02e      	beq.n	8008a4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	4413      	add	r3, r2
 80089f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d90e      	bls.n	8008a20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a0e:	4b19      	ldr	r3, [pc, #100]	; (8008a74 <prvSwitchTimerLists+0xc0>)
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4619      	mov	r1, r3
 8008a18:	4610      	mov	r0, r2
 8008a1a:	f7fd ffcc 	bl	80069b6 <vListInsert>
 8008a1e:	e016      	b.n	8008a4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a20:	2300      	movs	r3, #0
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	2300      	movs	r3, #0
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	2100      	movs	r1, #0
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f7ff fd60 	bl	80084f0 <xTimerGenericCommand>
 8008a30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	603b      	str	r3, [r7, #0]
}
 8008a4a:	bf00      	nop
 8008a4c:	e7fe      	b.n	8008a4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <prvSwitchTimerLists+0xc0>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1b1      	bne.n	80089bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a58:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <prvSwitchTimerLists+0xc0>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a5e:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <prvSwitchTimerLists+0xc4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a04      	ldr	r2, [pc, #16]	; (8008a74 <prvSwitchTimerLists+0xc0>)
 8008a64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a66:	4a04      	ldr	r2, [pc, #16]	; (8008a78 <prvSwitchTimerLists+0xc4>)
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	6013      	str	r3, [r2, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20000fbc 	.word	0x20000fbc
 8008a78:	20000fc0 	.word	0x20000fc0

08008a7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a82:	f000 f967 	bl	8008d54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a86:	4b15      	ldr	r3, [pc, #84]	; (8008adc <prvCheckForValidListAndQueue+0x60>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d120      	bne.n	8008ad0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a8e:	4814      	ldr	r0, [pc, #80]	; (8008ae0 <prvCheckForValidListAndQueue+0x64>)
 8008a90:	f7fd ff40 	bl	8006914 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a94:	4813      	ldr	r0, [pc, #76]	; (8008ae4 <prvCheckForValidListAndQueue+0x68>)
 8008a96:	f7fd ff3d 	bl	8006914 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a9a:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <prvCheckForValidListAndQueue+0x6c>)
 8008a9c:	4a10      	ldr	r2, [pc, #64]	; (8008ae0 <prvCheckForValidListAndQueue+0x64>)
 8008a9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008aa0:	4b12      	ldr	r3, [pc, #72]	; (8008aec <prvCheckForValidListAndQueue+0x70>)
 8008aa2:	4a10      	ldr	r2, [pc, #64]	; (8008ae4 <prvCheckForValidListAndQueue+0x68>)
 8008aa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <prvCheckForValidListAndQueue+0x74>)
 8008aac:	4a11      	ldr	r2, [pc, #68]	; (8008af4 <prvCheckForValidListAndQueue+0x78>)
 8008aae:	2110      	movs	r1, #16
 8008ab0:	200a      	movs	r0, #10
 8008ab2:	f7fe f84b 	bl	8006b4c <xQueueGenericCreateStatic>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4a08      	ldr	r2, [pc, #32]	; (8008adc <prvCheckForValidListAndQueue+0x60>)
 8008aba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008abc:	4b07      	ldr	r3, [pc, #28]	; (8008adc <prvCheckForValidListAndQueue+0x60>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <prvCheckForValidListAndQueue+0x60>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	490b      	ldr	r1, [pc, #44]	; (8008af8 <prvCheckForValidListAndQueue+0x7c>)
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fd1e 	bl	800750c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ad0:	f000 f970 	bl	8008db4 <vPortExitCritical>
}
 8008ad4:	bf00      	nop
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000fc4 	.word	0x20000fc4
 8008ae0:	20000f94 	.word	0x20000f94
 8008ae4:	20000fa8 	.word	0x20000fa8
 8008ae8:	20000fbc 	.word	0x20000fbc
 8008aec:	20000fc0 	.word	0x20000fc0
 8008af0:	20001070 	.word	0x20001070
 8008af4:	20000fd0 	.word	0x20000fd0
 8008af8:	080098e0 	.word	0x080098e0

08008afc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3b04      	subs	r3, #4
 8008b0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f023 0201 	bic.w	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3b04      	subs	r3, #4
 8008b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b2c:	4a0c      	ldr	r2, [pc, #48]	; (8008b60 <pxPortInitialiseStack+0x64>)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3b14      	subs	r3, #20
 8008b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f06f 0202 	mvn.w	r2, #2
 8008b4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3b20      	subs	r3, #32
 8008b50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b52:	68fb      	ldr	r3, [r7, #12]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	08008b65 	.word	0x08008b65

08008b64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b6e:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <prvTaskExitError+0x54>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b76:	d00a      	beq.n	8008b8e <prvTaskExitError+0x2a>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	60fb      	str	r3, [r7, #12]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <prvTaskExitError+0x28>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	60bb      	str	r3, [r7, #8]
}
 8008ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ba2:	bf00      	nop
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0fc      	beq.n	8008ba4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	2000000c 	.word	0x2000000c
 8008bbc:	00000000 	.word	0x00000000

08008bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <pxCurrentTCBConst2>)
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	6808      	ldr	r0, [r1, #0]
 8008bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	f380 8809 	msr	PSP, r0
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8811 	msr	BASEPRI, r0
 8008bda:	4770      	bx	lr
 8008bdc:	f3af 8000 	nop.w

08008be0 <pxCurrentTCBConst2>:
 8008be0:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop

08008be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008be8:	4808      	ldr	r0, [pc, #32]	; (8008c0c <prvPortStartFirstTask+0x24>)
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	6800      	ldr	r0, [r0, #0]
 8008bee:	f380 8808 	msr	MSP, r0
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8814 	msr	CONTROL, r0
 8008bfa:	b662      	cpsie	i
 8008bfc:	b661      	cpsie	f
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	df00      	svc	0
 8008c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c0a:	bf00      	nop
 8008c0c:	e000ed08 	.word	0xe000ed08

08008c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c16:	4b46      	ldr	r3, [pc, #280]	; (8008d30 <xPortStartScheduler+0x120>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a46      	ldr	r2, [pc, #280]	; (8008d34 <xPortStartScheduler+0x124>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10a      	bne.n	8008c36 <xPortStartScheduler+0x26>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	613b      	str	r3, [r7, #16]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c36:	4b3e      	ldr	r3, [pc, #248]	; (8008d30 <xPortStartScheduler+0x120>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a3f      	ldr	r2, [pc, #252]	; (8008d38 <xPortStartScheduler+0x128>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d10a      	bne.n	8008c56 <xPortStartScheduler+0x46>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c56:	4b39      	ldr	r3, [pc, #228]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008c58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	22ff      	movs	r2, #255	; 0xff
 8008c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	4b31      	ldr	r3, [pc, #196]	; (8008d40 <xPortStartScheduler+0x130>)
 8008c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c7e:	4b31      	ldr	r3, [pc, #196]	; (8008d44 <xPortStartScheduler+0x134>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c84:	e009      	b.n	8008c9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c86:	4b2f      	ldr	r3, [pc, #188]	; (8008d44 <xPortStartScheduler+0x134>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	4a2d      	ldr	r2, [pc, #180]	; (8008d44 <xPortStartScheduler+0x134>)
 8008c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c9a:	78fb      	ldrb	r3, [r7, #3]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d0ef      	beq.n	8008c86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ca6:	4b27      	ldr	r3, [pc, #156]	; (8008d44 <xPortStartScheduler+0x134>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f1c3 0307 	rsb	r3, r3, #7
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d00a      	beq.n	8008cc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	60bb      	str	r3, [r7, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cc8:	4b1e      	ldr	r3, [pc, #120]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cda:	4a1a      	ldr	r2, [pc, #104]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ce6:	4b18      	ldr	r3, [pc, #96]	; (8008d48 <xPortStartScheduler+0x138>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <xPortStartScheduler+0x138>)
 8008cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <xPortStartScheduler+0x138>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a14      	ldr	r2, [pc, #80]	; (8008d48 <xPortStartScheduler+0x138>)
 8008cf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cfe:	f000 f8dd 	bl	8008ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <xPortStartScheduler+0x13c>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d08:	f000 f8fc 	bl	8008f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d0c:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <xPortStartScheduler+0x140>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a0f      	ldr	r2, [pc, #60]	; (8008d50 <xPortStartScheduler+0x140>)
 8008d12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d18:	f7ff ff66 	bl	8008be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d1c:	f7ff f82e 	bl	8007d7c <vTaskSwitchContext>
	prvTaskExitError();
 8008d20:	f7ff ff20 	bl	8008b64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	e000ed00 	.word	0xe000ed00
 8008d34:	410fc271 	.word	0x410fc271
 8008d38:	410fc270 	.word	0x410fc270
 8008d3c:	e000e400 	.word	0xe000e400
 8008d40:	200010c0 	.word	0x200010c0
 8008d44:	200010c4 	.word	0x200010c4
 8008d48:	e000ed20 	.word	0xe000ed20
 8008d4c:	2000000c 	.word	0x2000000c
 8008d50:	e000ef34 	.word	0xe000ef34

08008d54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	607b      	str	r3, [r7, #4]
}
 8008d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <vPortEnterCritical+0x58>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a0d      	ldr	r2, [pc, #52]	; (8008dac <vPortEnterCritical+0x58>)
 8008d76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <vPortEnterCritical+0x58>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d10f      	bne.n	8008da0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d80:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <vPortEnterCritical+0x5c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	603b      	str	r3, [r7, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <vPortEnterCritical+0x4a>
	}
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	2000000c 	.word	0x2000000c
 8008db0:	e000ed04 	.word	0xe000ed04

08008db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dba:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <vPortExitCritical+0x50>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <vPortExitCritical+0x24>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	607b      	str	r3, [r7, #4]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <vPortExitCritical+0x50>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	4a09      	ldr	r2, [pc, #36]	; (8008e04 <vPortExitCritical+0x50>)
 8008de0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008de2:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <vPortExitCritical+0x50>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d105      	bne.n	8008df6 <vPortExitCritical+0x42>
 8008dea:	2300      	movs	r3, #0
 8008dec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	f383 8811 	msr	BASEPRI, r3
}
 8008df4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	2000000c 	.word	0x2000000c
	...

08008e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e10:	f3ef 8009 	mrs	r0, PSP
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	4b15      	ldr	r3, [pc, #84]	; (8008e70 <pxCurrentTCBConst>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	f01e 0f10 	tst.w	lr, #16
 8008e20:	bf08      	it	eq
 8008e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2a:	6010      	str	r0, [r2, #0]
 8008e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e34:	f380 8811 	msr	BASEPRI, r0
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f7fe ff9c 	bl	8007d7c <vTaskSwitchContext>
 8008e44:	f04f 0000 	mov.w	r0, #0
 8008e48:	f380 8811 	msr	BASEPRI, r0
 8008e4c:	bc09      	pop	{r0, r3}
 8008e4e:	6819      	ldr	r1, [r3, #0]
 8008e50:	6808      	ldr	r0, [r1, #0]
 8008e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e56:	f01e 0f10 	tst.w	lr, #16
 8008e5a:	bf08      	it	eq
 8008e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e60:	f380 8809 	msr	PSP, r0
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	f3af 8000 	nop.w

08008e70 <pxCurrentTCBConst>:
 8008e70:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop

08008e78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	607b      	str	r3, [r7, #4]
}
 8008e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e92:	f7fe feb9 	bl	8007c08 <xTaskIncrementTick>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <xPortSysTickHandler+0x40>)
 8008e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
}
 8008eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ec0:	4b0b      	ldr	r3, [pc, #44]	; (8008ef0 <vPortSetupTimerInterrupt+0x34>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <vPortSetupTimerInterrupt+0x38>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <vPortSetupTimerInterrupt+0x3c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <vPortSetupTimerInterrupt+0x40>)
 8008ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed6:	099b      	lsrs	r3, r3, #6
 8008ed8:	4a09      	ldr	r2, [pc, #36]	; (8008f00 <vPortSetupTimerInterrupt+0x44>)
 8008eda:	3b01      	subs	r3, #1
 8008edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ede:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <vPortSetupTimerInterrupt+0x34>)
 8008ee0:	2207      	movs	r2, #7
 8008ee2:	601a      	str	r2, [r3, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	e000e010 	.word	0xe000e010
 8008ef4:	e000e018 	.word	0xe000e018
 8008ef8:	20000000 	.word	0x20000000
 8008efc:	10624dd3 	.word	0x10624dd3
 8008f00:	e000e014 	.word	0xe000e014

08008f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f14 <vPortEnableVFP+0x10>
 8008f08:	6801      	ldr	r1, [r0, #0]
 8008f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f0e:	6001      	str	r1, [r0, #0]
 8008f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f12:	bf00      	nop
 8008f14:	e000ed88 	.word	0xe000ed88

08008f18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f1e:	f3ef 8305 	mrs	r3, IPSR
 8008f22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b0f      	cmp	r3, #15
 8008f28:	d914      	bls.n	8008f54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f2a:	4a17      	ldr	r2, [pc, #92]	; (8008f88 <vPortValidateInterruptPriority+0x70>)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f34:	4b15      	ldr	r3, [pc, #84]	; (8008f8c <vPortValidateInterruptPriority+0x74>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	7afa      	ldrb	r2, [r7, #11]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d20a      	bcs.n	8008f54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	607b      	str	r3, [r7, #4]
}
 8008f50:	bf00      	nop
 8008f52:	e7fe      	b.n	8008f52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f54:	4b0e      	ldr	r3, [pc, #56]	; (8008f90 <vPortValidateInterruptPriority+0x78>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f5c:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <vPortValidateInterruptPriority+0x7c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d90a      	bls.n	8008f7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	603b      	str	r3, [r7, #0]
}
 8008f76:	bf00      	nop
 8008f78:	e7fe      	b.n	8008f78 <vPortValidateInterruptPriority+0x60>
	}
 8008f7a:	bf00      	nop
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	e000e3f0 	.word	0xe000e3f0
 8008f8c:	200010c0 	.word	0x200010c0
 8008f90:	e000ed0c 	.word	0xe000ed0c
 8008f94:	200010c4 	.word	0x200010c4

08008f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08a      	sub	sp, #40	; 0x28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fa4:	f7fe fd74 	bl	8007a90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fa8:	4b5b      	ldr	r3, [pc, #364]	; (8009118 <pvPortMalloc+0x180>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fb0:	f000 f920 	bl	80091f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fb4:	4b59      	ldr	r3, [pc, #356]	; (800911c <pvPortMalloc+0x184>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f040 8093 	bne.w	80090e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01d      	beq.n	8009004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fc8:	2208      	movs	r2, #8
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4413      	add	r3, r2
 8008fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d014      	beq.n	8009004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f023 0307 	bic.w	r3, r3, #7
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00a      	beq.n	8009004 <pvPortMalloc+0x6c>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	617b      	str	r3, [r7, #20]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d06e      	beq.n	80090e8 <pvPortMalloc+0x150>
 800900a:	4b45      	ldr	r3, [pc, #276]	; (8009120 <pvPortMalloc+0x188>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d869      	bhi.n	80090e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009014:	4b43      	ldr	r3, [pc, #268]	; (8009124 <pvPortMalloc+0x18c>)
 8009016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009018:	4b42      	ldr	r3, [pc, #264]	; (8009124 <pvPortMalloc+0x18c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800901e:	e004      	b.n	800902a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	429a      	cmp	r2, r3
 8009032:	d903      	bls.n	800903c <pvPortMalloc+0xa4>
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f1      	bne.n	8009020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800903c:	4b36      	ldr	r3, [pc, #216]	; (8009118 <pvPortMalloc+0x180>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009042:	429a      	cmp	r2, r3
 8009044:	d050      	beq.n	80090e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2208      	movs	r2, #8
 800904c:	4413      	add	r3, r2
 800904e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	2308      	movs	r3, #8
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	429a      	cmp	r2, r3
 8009066:	d91f      	bls.n	80090a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <pvPortMalloc+0xf8>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	613b      	str	r3, [r7, #16]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	1ad2      	subs	r2, r2, r3
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090a2:	69b8      	ldr	r0, [r7, #24]
 80090a4:	f000 f908 	bl	80092b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090a8:	4b1d      	ldr	r3, [pc, #116]	; (8009120 <pvPortMalloc+0x188>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1b      	ldr	r2, [pc, #108]	; (8009120 <pvPortMalloc+0x188>)
 80090b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090b6:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <pvPortMalloc+0x188>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	4b1b      	ldr	r3, [pc, #108]	; (8009128 <pvPortMalloc+0x190>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d203      	bcs.n	80090ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090c2:	4b17      	ldr	r3, [pc, #92]	; (8009120 <pvPortMalloc+0x188>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a18      	ldr	r2, [pc, #96]	; (8009128 <pvPortMalloc+0x190>)
 80090c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	4b13      	ldr	r3, [pc, #76]	; (800911c <pvPortMalloc+0x184>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	431a      	orrs	r2, r3
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <pvPortMalloc+0x194>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3301      	adds	r3, #1
 80090e4:	4a11      	ldr	r2, [pc, #68]	; (800912c <pvPortMalloc+0x194>)
 80090e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090e8:	f7fe fce0 	bl	8007aac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <pvPortMalloc+0x174>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	60fb      	str	r3, [r7, #12]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <pvPortMalloc+0x172>
	return pvReturn;
 800910c:	69fb      	ldr	r3, [r7, #28]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3728      	adds	r7, #40	; 0x28
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20003010 	.word	0x20003010
 800911c:	20003024 	.word	0x20003024
 8009120:	20003014 	.word	0x20003014
 8009124:	20003008 	.word	0x20003008
 8009128:	20003018 	.word	0x20003018
 800912c:	2000301c 	.word	0x2000301c

08009130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d04d      	beq.n	80091de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009142:	2308      	movs	r3, #8
 8009144:	425b      	negs	r3, r3
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	4413      	add	r3, r2
 800914a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	4b24      	ldr	r3, [pc, #144]	; (80091e8 <vPortFree+0xb8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4013      	ands	r3, r2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10a      	bne.n	8009174 <vPortFree+0x44>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	60fb      	str	r3, [r7, #12]
}
 8009170:	bf00      	nop
 8009172:	e7fe      	b.n	8009172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <vPortFree+0x62>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	60bb      	str	r3, [r7, #8]
}
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <vPortFree+0xb8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4013      	ands	r3, r2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01e      	beq.n	80091de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d11a      	bne.n	80091de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	4b0e      	ldr	r3, [pc, #56]	; (80091e8 <vPortFree+0xb8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	43db      	mvns	r3, r3
 80091b2:	401a      	ands	r2, r3
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091b8:	f7fe fc6a 	bl	8007a90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <vPortFree+0xbc>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4413      	add	r3, r2
 80091c6:	4a09      	ldr	r2, [pc, #36]	; (80091ec <vPortFree+0xbc>)
 80091c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091ca:	6938      	ldr	r0, [r7, #16]
 80091cc:	f000 f874 	bl	80092b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091d0:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <vPortFree+0xc0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3301      	adds	r3, #1
 80091d6:	4a06      	ldr	r2, [pc, #24]	; (80091f0 <vPortFree+0xc0>)
 80091d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091da:	f7fe fc67 	bl	8007aac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091de:	bf00      	nop
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20003024 	.word	0x20003024
 80091ec:	20003014 	.word	0x20003014
 80091f0:	20003020 	.word	0x20003020

080091f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091fa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80091fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009200:	4b27      	ldr	r3, [pc, #156]	; (80092a0 <prvHeapInit+0xac>)
 8009202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00c      	beq.n	8009228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3307      	adds	r3, #7
 8009212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f023 0307 	bic.w	r3, r3, #7
 800921a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	4a1f      	ldr	r2, [pc, #124]	; (80092a0 <prvHeapInit+0xac>)
 8009224:	4413      	add	r3, r2
 8009226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800922c:	4a1d      	ldr	r2, [pc, #116]	; (80092a4 <prvHeapInit+0xb0>)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009232:	4b1c      	ldr	r3, [pc, #112]	; (80092a4 <prvHeapInit+0xb0>)
 8009234:	2200      	movs	r2, #0
 8009236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	4413      	add	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009240:	2208      	movs	r2, #8
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0307 	bic.w	r3, r3, #7
 800924e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a15      	ldr	r2, [pc, #84]	; (80092a8 <prvHeapInit+0xb4>)
 8009254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009256:	4b14      	ldr	r3, [pc, #80]	; (80092a8 <prvHeapInit+0xb4>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2200      	movs	r2, #0
 800925c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800925e:	4b12      	ldr	r3, [pc, #72]	; (80092a8 <prvHeapInit+0xb4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009274:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <prvHeapInit+0xb4>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	4a0a      	ldr	r2, [pc, #40]	; (80092ac <prvHeapInit+0xb8>)
 8009282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	4a09      	ldr	r2, [pc, #36]	; (80092b0 <prvHeapInit+0xbc>)
 800928a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800928c:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <prvHeapInit+0xc0>)
 800928e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009292:	601a      	str	r2, [r3, #0]
}
 8009294:	bf00      	nop
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	200010c8 	.word	0x200010c8
 80092a4:	20003008 	.word	0x20003008
 80092a8:	20003010 	.word	0x20003010
 80092ac:	20003018 	.word	0x20003018
 80092b0:	20003014 	.word	0x20003014
 80092b4:	20003024 	.word	0x20003024

080092b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092c0:	4b28      	ldr	r3, [pc, #160]	; (8009364 <prvInsertBlockIntoFreeList+0xac>)
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	e002      	b.n	80092cc <prvInsertBlockIntoFreeList+0x14>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d8f7      	bhi.n	80092c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	4413      	add	r3, r2
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d108      	bne.n	80092fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	441a      	add	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	441a      	add	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d118      	bne.n	8009340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b15      	ldr	r3, [pc, #84]	; (8009368 <prvInsertBlockIntoFreeList+0xb0>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d00d      	beq.n	8009336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	441a      	add	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	e008      	b.n	8009348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009336:	4b0c      	ldr	r3, [pc, #48]	; (8009368 <prvInsertBlockIntoFreeList+0xb0>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	e003      	b.n	8009348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	429a      	cmp	r2, r3
 800934e:	d002      	beq.n	8009356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009356:	bf00      	nop
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20003008 	.word	0x20003008
 8009368:	20003010 	.word	0x20003010

0800936c <vanttec_ntohl>:
#else
    return __builtin_bswap16(hostshort);
#endif
}

uint32_t vanttec_ntohl(uint32_t netlong) {
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
    return netlong; //No conversion needed
#else
    return __builtin_bswap32(netlong);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	ba1b      	rev	r3, r3
#endif
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <can_parse_id>:
#endif

#ifdef __cplusplus
extern "C" {
#endif
uint8_t can_parse_id(const uint8_t *data, uint8_t len) {
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
    if (len == 0 || data == 0) return 0;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <can_parse_id+0x18>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <can_parse_id+0x1c>
 800939c:	2300      	movs	r3, #0
 800939e:	e001      	b.n	80093a4 <can_parse_id+0x20>
    return data[0];
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	781b      	ldrb	r3, [r3, #0]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <can_parse_float>:

uint8_t can_pack_float(uint8_t id, float n, uint8_t *data, uint8_t len) {
    return can_pack_long(id, serialize_float(n), data, len);
}

float can_parse_float(const uint8_t *data, uint8_t len) {
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
    if (data == 0 || len < 5) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <can_parse_float+0x18>
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d802      	bhi.n	80093ce <can_parse_float+0x1e>
        return NAN;
 80093c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80093f0 <can_parse_float+0x40>
 80093cc:	e00b      	b.n	80093e6 <can_parse_float+0x36>
    }

    return deserialize_float(deserialize_long(data + 1));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3301      	adds	r3, #1
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f870 	bl	80094b8 <deserialize_long>
 80093d8:	4603      	mov	r3, r0
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 f836 	bl	800944c <deserialize_float>
 80093e0:	eef0 7a40 	vmov.f32	s15, s0
 80093e4:	bf00      	nop
}
 80093e6:	eeb0 0a67 	vmov.f32	s0, s15
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	7fc00000 	.word	0x7fc00000

080093f4 <can_parse_long>:
    data[0] = id;
    serialize_long(data + 1, n);
    return 5;
}

uint32_t can_parse_long(const uint8_t *data, uint8_t len) {
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
    if (data == 0 || len < 5) return 0;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <can_parse_long+0x18>
 8009406:	78fb      	ldrb	r3, [r7, #3]
 8009408:	2b04      	cmp	r3, #4
 800940a:	d801      	bhi.n	8009410 <can_parse_long+0x1c>
 800940c:	2300      	movs	r3, #0
 800940e:	e006      	b.n	800941e <can_parse_long+0x2a>
    return deserialize_long(data + 1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3301      	adds	r3, #1
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f84f 	bl	80094b8 <deserialize_long>
 800941a:	4603      	mov	r3, r0
 800941c:	bf00      	nop
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <_ZSt5ldexpfi>:
  using ::ldexp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	ed87 0a01 	vstr	s0, [r7, #4]
 8009430:	6038      	str	r0, [r7, #0]
 8009432:	6838      	ldr	r0, [r7, #0]
 8009434:	ed97 0a01 	vldr	s0, [r7, #4]
 8009438:	f000 f865 	bl	8009506 <ldexpf>
 800943c:	eef0 7a40 	vmov.f32	s15, s0
 8009440:	eeb0 0a67 	vmov.f32	s0, s15
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <deserialize_float>:
#include <math.h>

#ifdef __cplusplus
extern "C" {
#endif
float deserialize_float(uint32_t in) {
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
    bool sgn = in >> 31;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	0fdb      	lsrs	r3, r3, #31
 8009458:	75fb      	strb	r3, [r7, #23]
    uint8_t exp = (in >> 23) & 0b011111111;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	0ddb      	lsrs	r3, r3, #23
 800945e:	75bb      	strb	r3, [r7, #22]
    uint32_t frac = in & 0x7FFFFF;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009466:	613b      	str	r3, [r7, #16]

    float out = ldexp((float) frac / 0x7FFFFF, exp - 127);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009472:	eddf 6a10 	vldr	s13, [pc, #64]	; 80094b4 <deserialize_float+0x68>
 8009476:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800947a:	7dbb      	ldrb	r3, [r7, #22]
 800947c:	3b7f      	subs	r3, #127	; 0x7f
 800947e:	4618      	mov	r0, r3
 8009480:	eeb0 0a47 	vmov.f32	s0, s14
 8009484:	f7ff ffcf 	bl	8009426 <_ZSt5ldexpfi>
 8009488:	ed87 0a03 	vstr	s0, [r7, #12]
    out = sgn ? -out : out;
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d004      	beq.n	800949c <deserialize_float+0x50>
 8009492:	edd7 7a03 	vldr	s15, [r7, #12]
 8009496:	eef1 7a67 	vneg.f32	s15, s15
 800949a:	e001      	b.n	80094a0 <deserialize_float+0x54>
 800949c:	edd7 7a03 	vldr	s15, [r7, #12]
 80094a0:	edc7 7a03 	vstr	s15, [r7, #12]
    return out;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	ee07 3a90 	vmov	s15, r3
}
 80094aa:	eeb0 0a67 	vmov.f32	s0, s15
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	4afffffe 	.word	0x4afffffe

080094b8 <deserialize_long>:
    out |= data[1];

    return vanttec_ntohs(out);
}

uint32_t deserialize_long(const uint8_t *data) {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
    uint32_t out;
    out = data[0] << (8 * 3);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	061b      	lsls	r3, r3, #24
 80094c6:	60fb      	str	r3, [r7, #12]
    out |= data[1] << (8 * 2);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3301      	adds	r3, #1
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	041b      	lsls	r3, r3, #16
 80094d0:	461a      	mov	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
    out |= data[2] << (8);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3302      	adds	r3, #2
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	021b      	lsls	r3, r3, #8
 80094e0:	461a      	mov	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
    out |= data[3] & 0xff;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3303      	adds	r3, #3
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]

    return vanttec_ntohl(out);
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff ff38 	bl	800936c <vanttec_ntohl>
 80094fc:	4603      	mov	r3, r0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <ldexpf>:
 8009506:	b510      	push	{r4, lr}
 8009508:	ed2d 8b02 	vpush	{d8}
 800950c:	4604      	mov	r4, r0
 800950e:	eeb0 8a40 	vmov.f32	s16, s0
 8009512:	f000 f891 	bl	8009638 <finitef>
 8009516:	b1b8      	cbz	r0, 8009548 <ldexpf+0x42>
 8009518:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800951c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009520:	d012      	beq.n	8009548 <ldexpf+0x42>
 8009522:	eeb0 0a48 	vmov.f32	s0, s16
 8009526:	4620      	mov	r0, r4
 8009528:	f000 f814 	bl	8009554 <scalbnf>
 800952c:	eeb0 8a40 	vmov.f32	s16, s0
 8009530:	f000 f882 	bl	8009638 <finitef>
 8009534:	b120      	cbz	r0, 8009540 <ldexpf+0x3a>
 8009536:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953e:	d103      	bne.n	8009548 <ldexpf+0x42>
 8009540:	f000 f888 	bl	8009654 <__errno>
 8009544:	2322      	movs	r3, #34	; 0x22
 8009546:	6003      	str	r3, [r0, #0]
 8009548:	eeb0 0a48 	vmov.f32	s0, s16
 800954c:	ecbd 8b02 	vpop	{d8}
 8009550:	bd10      	pop	{r4, pc}
	...

08009554 <scalbnf>:
 8009554:	ee10 3a10 	vmov	r3, s0
 8009558:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800955c:	d025      	beq.n	80095aa <scalbnf+0x56>
 800955e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009562:	d302      	bcc.n	800956a <scalbnf+0x16>
 8009564:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009568:	4770      	bx	lr
 800956a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800956e:	d122      	bne.n	80095b6 <scalbnf+0x62>
 8009570:	4b2a      	ldr	r3, [pc, #168]	; (800961c <scalbnf+0xc8>)
 8009572:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009620 <scalbnf+0xcc>
 8009576:	4298      	cmp	r0, r3
 8009578:	ee20 0a27 	vmul.f32	s0, s0, s15
 800957c:	db16      	blt.n	80095ac <scalbnf+0x58>
 800957e:	ee10 3a10 	vmov	r3, s0
 8009582:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009586:	3a19      	subs	r2, #25
 8009588:	4402      	add	r2, r0
 800958a:	2afe      	cmp	r2, #254	; 0xfe
 800958c:	dd15      	ble.n	80095ba <scalbnf+0x66>
 800958e:	ee10 3a10 	vmov	r3, s0
 8009592:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009624 <scalbnf+0xd0>
 8009596:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009628 <scalbnf+0xd4>
 800959a:	2b00      	cmp	r3, #0
 800959c:	eeb0 7a67 	vmov.f32	s14, s15
 80095a0:	bfb8      	it	lt
 80095a2:	eef0 7a66 	vmovlt.f32	s15, s13
 80095a6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80095aa:	4770      	bx	lr
 80095ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800962c <scalbnf+0xd8>
 80095b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80095b4:	4770      	bx	lr
 80095b6:	0dd2      	lsrs	r2, r2, #23
 80095b8:	e7e6      	b.n	8009588 <scalbnf+0x34>
 80095ba:	2a00      	cmp	r2, #0
 80095bc:	dd06      	ble.n	80095cc <scalbnf+0x78>
 80095be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80095c6:	ee00 3a10 	vmov	s0, r3
 80095ca:	4770      	bx	lr
 80095cc:	f112 0f16 	cmn.w	r2, #22
 80095d0:	da1a      	bge.n	8009608 <scalbnf+0xb4>
 80095d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80095d6:	4298      	cmp	r0, r3
 80095d8:	ee10 3a10 	vmov	r3, s0
 80095dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095e0:	dd0a      	ble.n	80095f8 <scalbnf+0xa4>
 80095e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009624 <scalbnf+0xd0>
 80095e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009628 <scalbnf+0xd4>
 80095ea:	eef0 7a40 	vmov.f32	s15, s0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bf18      	it	ne
 80095f2:	eeb0 0a47 	vmovne.f32	s0, s14
 80095f6:	e7db      	b.n	80095b0 <scalbnf+0x5c>
 80095f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800962c <scalbnf+0xd8>
 80095fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009630 <scalbnf+0xdc>
 8009600:	eef0 7a40 	vmov.f32	s15, s0
 8009604:	2b00      	cmp	r3, #0
 8009606:	e7f3      	b.n	80095f0 <scalbnf+0x9c>
 8009608:	3219      	adds	r2, #25
 800960a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800960e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009612:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009634 <scalbnf+0xe0>
 8009616:	ee07 3a10 	vmov	s14, r3
 800961a:	e7c4      	b.n	80095a6 <scalbnf+0x52>
 800961c:	ffff3cb0 	.word	0xffff3cb0
 8009620:	4c000000 	.word	0x4c000000
 8009624:	7149f2ca 	.word	0x7149f2ca
 8009628:	f149f2ca 	.word	0xf149f2ca
 800962c:	0da24260 	.word	0x0da24260
 8009630:	8da24260 	.word	0x8da24260
 8009634:	33000000 	.word	0x33000000

08009638 <finitef>:
 8009638:	b082      	sub	sp, #8
 800963a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800963e:	9801      	ldr	r0, [sp, #4]
 8009640:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009644:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009648:	bfac      	ite	ge
 800964a:	2000      	movge	r0, #0
 800964c:	2001      	movlt	r0, #1
 800964e:	b002      	add	sp, #8
 8009650:	4770      	bx	lr
	...

08009654 <__errno>:
 8009654:	4b01      	ldr	r3, [pc, #4]	; (800965c <__errno+0x8>)
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	20000010 	.word	0x20000010

08009660 <__libc_init_array>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	4d0d      	ldr	r5, [pc, #52]	; (8009698 <__libc_init_array+0x38>)
 8009664:	4c0d      	ldr	r4, [pc, #52]	; (800969c <__libc_init_array+0x3c>)
 8009666:	1b64      	subs	r4, r4, r5
 8009668:	10a4      	asrs	r4, r4, #2
 800966a:	2600      	movs	r6, #0
 800966c:	42a6      	cmp	r6, r4
 800966e:	d109      	bne.n	8009684 <__libc_init_array+0x24>
 8009670:	4d0b      	ldr	r5, [pc, #44]	; (80096a0 <__libc_init_array+0x40>)
 8009672:	4c0c      	ldr	r4, [pc, #48]	; (80096a4 <__libc_init_array+0x44>)
 8009674:	f000 f8f2 	bl	800985c <_init>
 8009678:	1b64      	subs	r4, r4, r5
 800967a:	10a4      	asrs	r4, r4, #2
 800967c:	2600      	movs	r6, #0
 800967e:	42a6      	cmp	r6, r4
 8009680:	d105      	bne.n	800968e <__libc_init_array+0x2e>
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	f855 3b04 	ldr.w	r3, [r5], #4
 8009688:	4798      	blx	r3
 800968a:	3601      	adds	r6, #1
 800968c:	e7ee      	b.n	800966c <__libc_init_array+0xc>
 800968e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009692:	4798      	blx	r3
 8009694:	3601      	adds	r6, #1
 8009696:	e7f2      	b.n	800967e <__libc_init_array+0x1e>
 8009698:	08009a2c 	.word	0x08009a2c
 800969c:	08009a2c 	.word	0x08009a2c
 80096a0:	08009a2c 	.word	0x08009a2c
 80096a4:	08009a30 	.word	0x08009a30

080096a8 <__retarget_lock_acquire_recursive>:
 80096a8:	4770      	bx	lr

080096aa <__retarget_lock_release_recursive>:
 80096aa:	4770      	bx	lr

080096ac <memcpy>:
 80096ac:	440a      	add	r2, r1
 80096ae:	4291      	cmp	r1, r2
 80096b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096b4:	d100      	bne.n	80096b8 <memcpy+0xc>
 80096b6:	4770      	bx	lr
 80096b8:	b510      	push	{r4, lr}
 80096ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c2:	4291      	cmp	r1, r2
 80096c4:	d1f9      	bne.n	80096ba <memcpy+0xe>
 80096c6:	bd10      	pop	{r4, pc}

080096c8 <memset>:
 80096c8:	4402      	add	r2, r0
 80096ca:	4603      	mov	r3, r0
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d100      	bne.n	80096d2 <memset+0xa>
 80096d0:	4770      	bx	lr
 80096d2:	f803 1b01 	strb.w	r1, [r3], #1
 80096d6:	e7f9      	b.n	80096cc <memset+0x4>

080096d8 <cleanup_glue>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	460c      	mov	r4, r1
 80096dc:	6809      	ldr	r1, [r1, #0]
 80096de:	4605      	mov	r5, r0
 80096e0:	b109      	cbz	r1, 80096e6 <cleanup_glue+0xe>
 80096e2:	f7ff fff9 	bl	80096d8 <cleanup_glue>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ee:	f000 b869 	b.w	80097c4 <_free_r>
	...

080096f4 <_reclaim_reent>:
 80096f4:	4b2c      	ldr	r3, [pc, #176]	; (80097a8 <_reclaim_reent+0xb4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4283      	cmp	r3, r0
 80096fa:	b570      	push	{r4, r5, r6, lr}
 80096fc:	4604      	mov	r4, r0
 80096fe:	d051      	beq.n	80097a4 <_reclaim_reent+0xb0>
 8009700:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009702:	b143      	cbz	r3, 8009716 <_reclaim_reent+0x22>
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d14a      	bne.n	80097a0 <_reclaim_reent+0xac>
 800970a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800970c:	6819      	ldr	r1, [r3, #0]
 800970e:	b111      	cbz	r1, 8009716 <_reclaim_reent+0x22>
 8009710:	4620      	mov	r0, r4
 8009712:	f000 f857 	bl	80097c4 <_free_r>
 8009716:	6961      	ldr	r1, [r4, #20]
 8009718:	b111      	cbz	r1, 8009720 <_reclaim_reent+0x2c>
 800971a:	4620      	mov	r0, r4
 800971c:	f000 f852 	bl	80097c4 <_free_r>
 8009720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009722:	b111      	cbz	r1, 800972a <_reclaim_reent+0x36>
 8009724:	4620      	mov	r0, r4
 8009726:	f000 f84d 	bl	80097c4 <_free_r>
 800972a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800972c:	b111      	cbz	r1, 8009734 <_reclaim_reent+0x40>
 800972e:	4620      	mov	r0, r4
 8009730:	f000 f848 	bl	80097c4 <_free_r>
 8009734:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009736:	b111      	cbz	r1, 800973e <_reclaim_reent+0x4a>
 8009738:	4620      	mov	r0, r4
 800973a:	f000 f843 	bl	80097c4 <_free_r>
 800973e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009740:	b111      	cbz	r1, 8009748 <_reclaim_reent+0x54>
 8009742:	4620      	mov	r0, r4
 8009744:	f000 f83e 	bl	80097c4 <_free_r>
 8009748:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800974a:	b111      	cbz	r1, 8009752 <_reclaim_reent+0x5e>
 800974c:	4620      	mov	r0, r4
 800974e:	f000 f839 	bl	80097c4 <_free_r>
 8009752:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009754:	b111      	cbz	r1, 800975c <_reclaim_reent+0x68>
 8009756:	4620      	mov	r0, r4
 8009758:	f000 f834 	bl	80097c4 <_free_r>
 800975c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800975e:	b111      	cbz	r1, 8009766 <_reclaim_reent+0x72>
 8009760:	4620      	mov	r0, r4
 8009762:	f000 f82f 	bl	80097c4 <_free_r>
 8009766:	69a3      	ldr	r3, [r4, #24]
 8009768:	b1e3      	cbz	r3, 80097a4 <_reclaim_reent+0xb0>
 800976a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800976c:	4620      	mov	r0, r4
 800976e:	4798      	blx	r3
 8009770:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009772:	b1b9      	cbz	r1, 80097a4 <_reclaim_reent+0xb0>
 8009774:	4620      	mov	r0, r4
 8009776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800977a:	f7ff bfad 	b.w	80096d8 <cleanup_glue>
 800977e:	5949      	ldr	r1, [r1, r5]
 8009780:	b941      	cbnz	r1, 8009794 <_reclaim_reent+0xa0>
 8009782:	3504      	adds	r5, #4
 8009784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009786:	2d80      	cmp	r5, #128	; 0x80
 8009788:	68d9      	ldr	r1, [r3, #12]
 800978a:	d1f8      	bne.n	800977e <_reclaim_reent+0x8a>
 800978c:	4620      	mov	r0, r4
 800978e:	f000 f819 	bl	80097c4 <_free_r>
 8009792:	e7ba      	b.n	800970a <_reclaim_reent+0x16>
 8009794:	680e      	ldr	r6, [r1, #0]
 8009796:	4620      	mov	r0, r4
 8009798:	f000 f814 	bl	80097c4 <_free_r>
 800979c:	4631      	mov	r1, r6
 800979e:	e7ef      	b.n	8009780 <_reclaim_reent+0x8c>
 80097a0:	2500      	movs	r5, #0
 80097a2:	e7ef      	b.n	8009784 <_reclaim_reent+0x90>
 80097a4:	bd70      	pop	{r4, r5, r6, pc}
 80097a6:	bf00      	nop
 80097a8:	20000010 	.word	0x20000010

080097ac <__malloc_lock>:
 80097ac:	4801      	ldr	r0, [pc, #4]	; (80097b4 <__malloc_lock+0x8>)
 80097ae:	f7ff bf7b 	b.w	80096a8 <__retarget_lock_acquire_recursive>
 80097b2:	bf00      	nop
 80097b4:	20003028 	.word	0x20003028

080097b8 <__malloc_unlock>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__malloc_unlock+0x8>)
 80097ba:	f7ff bf76 	b.w	80096aa <__retarget_lock_release_recursive>
 80097be:	bf00      	nop
 80097c0:	20003028 	.word	0x20003028

080097c4 <_free_r>:
 80097c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d044      	beq.n	8009854 <_free_r+0x90>
 80097ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ce:	9001      	str	r0, [sp, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f1a1 0404 	sub.w	r4, r1, #4
 80097d6:	bfb8      	it	lt
 80097d8:	18e4      	addlt	r4, r4, r3
 80097da:	f7ff ffe7 	bl	80097ac <__malloc_lock>
 80097de:	4a1e      	ldr	r2, [pc, #120]	; (8009858 <_free_r+0x94>)
 80097e0:	9801      	ldr	r0, [sp, #4]
 80097e2:	6813      	ldr	r3, [r2, #0]
 80097e4:	b933      	cbnz	r3, 80097f4 <_free_r+0x30>
 80097e6:	6063      	str	r3, [r4, #4]
 80097e8:	6014      	str	r4, [r2, #0]
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097f0:	f7ff bfe2 	b.w	80097b8 <__malloc_unlock>
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	d908      	bls.n	800980a <_free_r+0x46>
 80097f8:	6825      	ldr	r5, [r4, #0]
 80097fa:	1961      	adds	r1, r4, r5
 80097fc:	428b      	cmp	r3, r1
 80097fe:	bf01      	itttt	eq
 8009800:	6819      	ldreq	r1, [r3, #0]
 8009802:	685b      	ldreq	r3, [r3, #4]
 8009804:	1949      	addeq	r1, r1, r5
 8009806:	6021      	streq	r1, [r4, #0]
 8009808:	e7ed      	b.n	80097e6 <_free_r+0x22>
 800980a:	461a      	mov	r2, r3
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	b10b      	cbz	r3, 8009814 <_free_r+0x50>
 8009810:	42a3      	cmp	r3, r4
 8009812:	d9fa      	bls.n	800980a <_free_r+0x46>
 8009814:	6811      	ldr	r1, [r2, #0]
 8009816:	1855      	adds	r5, r2, r1
 8009818:	42a5      	cmp	r5, r4
 800981a:	d10b      	bne.n	8009834 <_free_r+0x70>
 800981c:	6824      	ldr	r4, [r4, #0]
 800981e:	4421      	add	r1, r4
 8009820:	1854      	adds	r4, r2, r1
 8009822:	42a3      	cmp	r3, r4
 8009824:	6011      	str	r1, [r2, #0]
 8009826:	d1e0      	bne.n	80097ea <_free_r+0x26>
 8009828:	681c      	ldr	r4, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	6053      	str	r3, [r2, #4]
 800982e:	4421      	add	r1, r4
 8009830:	6011      	str	r1, [r2, #0]
 8009832:	e7da      	b.n	80097ea <_free_r+0x26>
 8009834:	d902      	bls.n	800983c <_free_r+0x78>
 8009836:	230c      	movs	r3, #12
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	e7d6      	b.n	80097ea <_free_r+0x26>
 800983c:	6825      	ldr	r5, [r4, #0]
 800983e:	1961      	adds	r1, r4, r5
 8009840:	428b      	cmp	r3, r1
 8009842:	bf04      	itt	eq
 8009844:	6819      	ldreq	r1, [r3, #0]
 8009846:	685b      	ldreq	r3, [r3, #4]
 8009848:	6063      	str	r3, [r4, #4]
 800984a:	bf04      	itt	eq
 800984c:	1949      	addeq	r1, r1, r5
 800984e:	6021      	streq	r1, [r4, #0]
 8009850:	6054      	str	r4, [r2, #4]
 8009852:	e7ca      	b.n	80097ea <_free_r+0x26>
 8009854:	b003      	add	sp, #12
 8009856:	bd30      	pop	{r4, r5, pc}
 8009858:	2000302c 	.word	0x2000302c

0800985c <_init>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr

08009868 <_fini>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	bf00      	nop
 800986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986e:	bc08      	pop	{r3}
 8009870:	469e      	mov	lr, r3
 8009872:	4770      	bx	lr
