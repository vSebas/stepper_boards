
stepper_boards_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08008c60  08008c60  00018c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dac  08008dac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008dac  08008dac  00018dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db4  08008db4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008db8  08008db8  00018db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  20000074  08008e30  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb0  08008e30  00021cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213db  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d33  00000000  00000000  0004147f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  000451b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  00046c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f8e  00000000  00000000  00048500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc5f  00000000  00000000  0004c48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee688  00000000  00000000  000690ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007348  00000000  00000000  001577c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c48 	.word	0x08008c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008c48 	.word	0x08008c48

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <configure_steppers>:

volatile stepper braking_stepper;
volatile stepper steering_stepper;

void configure_steppers()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	steering_stepper.MAX_ANGLE = 57;
	steering_stepper.STEP_ANGLE = 0.9;
	steering_stepper.MAX_STEPS = 63;		// Corresponding to the 57 deg
	steering_stepper.STEPS_REV = 400;
	*/
	steering_stepper.current_step = 0;
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <configure_steppers+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	831a      	strh	r2, [r3, #24]
	braking_stepper.MAX_ANGLE = 1;			// TBD
	braking_stepper.STEP_ANGLE = 1.8;		// TBD
	steering_stepper.MAX_STEPS = 63;		// TBD
	braking_stepper.STEPS_REV = 200;		// TBD
	*/
	braking_stepper.current_step = 0;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <configure_steppers+0x44>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(GPIOC, STPR_EN_1_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	480c      	ldr	r0, [pc, #48]	; (800051c <configure_steppers+0x48>)
 80004ec:	f002 fbbc 	bl	8002c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin | LVL_SFTR_OE_2_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f240 4101 	movw	r1, #1025	; 0x401
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <configure_steppers+0x4c>)
 80004f8:	f002 fbb6 	bl	8002c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <configure_steppers+0x50>)
 8000502:	f002 fbb1 	bl	8002c68 <HAL_GPIO_WritePin>

	//htim2.Instance->CCR1 = 5000;	// For duty cycle of 50%
	htim2.Instance->CCR1 = 500;	// For duty cycle of 50%
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <configure_steppers+0x54>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin, GPIO_PIN_SET);

}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200000ac 	.word	0x200000ac
 8000518:	20000090 	.word	0x20000090
 800051c:	48000800 	.word	0x48000800
 8000520:	48000400 	.word	0x48000400
 8000524:	48000c00 	.word	0x48000c00
 8000528:	200001a0 	.word	0x200001a0

0800052c <set_setpoint>:

void set_setpoint(const stepper_id stepper, uint16_t setpoint, int8_t direction){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	460b      	mov	r3, r1
 8000538:	80bb      	strh	r3, [r7, #4]
 800053a:	4613      	mov	r3, r2
 800053c:	71bb      	strb	r3, [r7, #6]
	switch(stepper)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <set_setpoint+0x1e>
 8000544:	2b01      	cmp	r3, #1
 8000546:	d01f      	beq.n	8000588 <set_setpoint+0x5c>
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
				braking_stepper.current_step = 0;
			}
			break;
		default:
			break;
 8000548:	e03f      	b.n	80005ca <set_setpoint+0x9e>
			if(steering_stepper.req_steps != setpoint || steering_stepper.direction != direction)
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <set_setpoint+0xa8>)
 800054c:	8adb      	ldrh	r3, [r3, #22]
 800054e:	b29b      	uxth	r3, r3
 8000550:	88ba      	ldrh	r2, [r7, #4]
 8000552:	429a      	cmp	r2, r3
 8000554:	d107      	bne.n	8000566 <set_setpoint+0x3a>
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <set_setpoint+0xa8>)
 8000558:	7d1b      	ldrb	r3, [r3, #20]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	461a      	mov	r2, r3
 800055e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000562:	429a      	cmp	r2, r3
 8000564:	d02e      	beq.n	80005c4 <set_setpoint+0x98>
				steering_stepper.req_steps = setpoint;
 8000566:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <set_setpoint+0xa8>)
 8000568:	88bb      	ldrh	r3, [r7, #4]
 800056a:	82d3      	strh	r3, [r2, #22]
				steering_stepper.direction = direction;
 800056c:	79ba      	ldrb	r2, [r7, #6]
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <set_setpoint+0xa8>)
 8000570:	751a      	strb	r2, [r3, #20]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin, direction);
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	461a      	mov	r2, r3
 8000576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057a:	4817      	ldr	r0, [pc, #92]	; (80005d8 <set_setpoint+0xac>)
 800057c:	f002 fb74 	bl	8002c68 <HAL_GPIO_WritePin>
				steering_stepper.current_step = 0;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <set_setpoint+0xa8>)
 8000582:	2200      	movs	r2, #0
 8000584:	831a      	strh	r2, [r3, #24]
			break;
 8000586:	e01d      	b.n	80005c4 <set_setpoint+0x98>
			if(braking_stepper.req_steps != setpoint || braking_stepper.direction != direction)
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <set_setpoint+0xb0>)
 800058a:	8adb      	ldrh	r3, [r3, #22]
 800058c:	b29b      	uxth	r3, r3
 800058e:	88ba      	ldrh	r2, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	d107      	bne.n	80005a4 <set_setpoint+0x78>
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <set_setpoint+0xb0>)
 8000596:	7d1b      	ldrb	r3, [r3, #20]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d011      	beq.n	80005c8 <set_setpoint+0x9c>
				braking_stepper.req_steps = setpoint;
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <set_setpoint+0xb0>)
 80005a6:	88bb      	ldrh	r3, [r7, #4]
 80005a8:	82d3      	strh	r3, [r2, #22]
				braking_stepper.direction = direction;
 80005aa:	79ba      	ldrb	r2, [r7, #6]
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <set_setpoint+0xb0>)
 80005ae:	751a      	strb	r2, [r3, #20]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	461a      	mov	r2, r3
 80005b4:	2104      	movs	r1, #4
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <set_setpoint+0xac>)
 80005b8:	f002 fb56 	bl	8002c68 <HAL_GPIO_WritePin>
				braking_stepper.current_step = 0;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <set_setpoint+0xb0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	831a      	strh	r2, [r3, #24]
			break;
 80005c2:	e001      	b.n	80005c8 <set_setpoint+0x9c>
			break;
 80005c4:	bf00      	nop
 80005c6:	e000      	b.n	80005ca <set_setpoint+0x9e>
			break;
 80005c8:	bf00      	nop
	}
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000ac 	.word	0x200000ac
 80005d8:	48000800 	.word	0x48000800
 80005dc:	20000090 	.word	0x20000090

080005e0 <steer>:
		}
}
*/

void steer()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	//set_setpoint(STEERING, can_rx_data.motor_1_steps, can_rx_data.motor_1_direction);
	if(steering_stepper.current_step == 0)
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <steer+0x6c>)
 80005e6:	8b1b      	ldrh	r3, [r3, #24]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d103      	bne.n	80005f6 <steer+0x16>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80005ee:	2100      	movs	r1, #0
 80005f0:	4817      	ldr	r0, [pc, #92]	; (8000650 <steer+0x70>)
 80005f2:	f003 fe35 	bl	8004260 <HAL_TIM_PWM_Start_IT>
	if(steering_stepper.req_steps <= steering_stepper.current_step)
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <steer+0x6c>)
 80005f8:	8adb      	ldrh	r3, [r3, #22]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <steer+0x6c>)
 80005fe:	8b1b      	ldrh	r3, [r3, #24]
 8000600:	b29b      	uxth	r3, r3
 8000602:	429a      	cmp	r2, r3
 8000604:	d81f      	bhi.n	8000646 <steer+0x66>
	{
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000606:	2100      	movs	r1, #0
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <steer+0x70>)
 800060a:	f003 ff55 	bl	80044b8 <HAL_TIM_PWM_Stop_IT>
		HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2103      	movs	r1, #3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f002 fb27 	bl	8002c68 <HAL_GPIO_WritePin>
		if(steering_stepper.direction == CW)
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <steer+0x6c>)
 800061c:	7d1b      	ldrb	r3, [r3, #20]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d106      	bne.n	8000632 <steer+0x52>
			  set_setpoint(STEERING, 400, CCW);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ff7e 	bl	800052c <set_setpoint>
 8000630:	e005      	b.n	800063e <steer+0x5e>
		else
			  set_setpoint(STEERING, 400, CW);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ff77 	bl	800052c <set_setpoint>
		osDelay(1000);
 800063e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000642:	f005 fd3f 	bl	80060c4 <osDelay>
	}
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000ac 	.word	0x200000ac
 8000650:	200001a0 	.word	0x200001a0

08000654 <HAL_TIM_PWM_PulseFinishedCallback>:
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
}


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000664:	d106      	bne.n	8000674 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	  steering_stepper.current_step++;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000668:	8b1b      	ldrh	r3, [r3, #24]
 800066a:	b29b      	uxth	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000672:	831a      	strh	r2, [r3, #24]
	//braking_stepper.current_step++;
	//HAL_GPIO_TogglePin(GPIOA, DEBUG_2_Pin);
  }
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	200000ac 	.word	0x200000ac

08000684 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
	...

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f000 fe61 	bl	800136e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f834 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 fa7a 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006b4:	f000 fa48 	bl	8000b48 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006b8:	f000 f9c4 	bl	8000a44 <MX_TIM2_Init>
  MX_TIM1_Init();
 80006bc:	f000 f916 	bl	80008ec <MX_TIM1_Init>
  MX_ADC1_Init();
 80006c0:	f000 f87a 	bl	80007b8 <MX_ADC1_Init>
  MX_CAN1_Init();
 80006c4:	f000 f8dc 	bl	8000880 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	210f      	movs	r1, #15
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <main+0x58>)
 80006ce:	f002 facb 	bl	8002c68 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d2:	f005 fc1b 	bl	8005f0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of steeringTask */
  steeringTaskHandle = osThreadNew(steering_task, NULL, &steeringTask_attributes);
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <main+0x5c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	480a      	ldr	r0, [pc, #40]	; (8000704 <main+0x60>)
 80006dc:	f005 fc60 	bl	8005fa0 <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a09      	ldr	r2, [pc, #36]	; (8000708 <main+0x64>)
 80006e4:	6013      	str	r3, [r2, #0]

  /* creation of brakingTask */
  brakingTaskHandle = osThreadNew(braking_task, NULL, &brakingTask_attributes);
 80006e6:	4a09      	ldr	r2, [pc, #36]	; (800070c <main+0x68>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <main+0x6c>)
 80006ec:	f005 fc58 	bl	8005fa0 <osThreadNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <main+0x70>)
 80006f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f6:	f005 fc2d 	bl	8005f54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <main+0x56>
 80006fc:	48000800 	.word	0x48000800
 8000700:	08008cbc 	.word	0x08008cbc
 8000704:	08000d29 	.word	0x08000d29
 8000708:	20000270 	.word	0x20000270
 800070c:	08008ce0 	.word	0x08008ce0
 8000710:	08000d4d 	.word	0x08000d4d
 8000714:	20000274 	.word	0x20000274

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	; 0x58
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2244      	movs	r2, #68	; 0x44
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f008 f9c4 	bl	8008ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073e:	f002 fab9 	bl	8002cb4 <HAL_PWREx_ControlVoltageScaling>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000748:	f000 fb1a 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2303      	movs	r3, #3
 800075c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000762:	2314      	movs	r3, #20
 8000764:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000766:	2307      	movs	r3, #7
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800076e:	2304      	movs	r3, #4
 8000770:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4618      	mov	r0, r3
 8000778:	f002 faf2 	bl	8002d60 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000782:	f000 fafd 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2303      	movs	r3, #3
 800078c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	2104      	movs	r1, #4
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fef2 	bl	8003588 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007aa:	f000 fae9 	bl	8000d80 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3758      	adds	r7, #88	; 0x58
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_ADC1_Init+0xbc>)
 80007d0:	4a29      	ldr	r2, [pc, #164]	; (8000878 <MX_ADC1_Init+0xc0>)
 80007d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_ADC1_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_ADC1_Init+0xbc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_ADC1_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <MX_ADC1_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_ADC1_Init+0xbc>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_ADC1_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_ADC1_Init+0xbc>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_ADC1_Init+0xbc>)
 8000800:	2201      	movs	r2, #1
 8000802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_ADC1_Init+0xbc>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_ADC1_Init+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_ADC1_Init+0xbc>)
 8000814:	2200      	movs	r2, #0
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_ADC1_Init+0xbc>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_ADC1_Init+0xbc>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_ADC1_Init+0xbc>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_ADC1_Init+0xbc>)
 8000830:	f000 ff62 	bl	80016f8 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800083a:	f000 faa1 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_ADC1_Init+0xc4>)
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000842:	2306      	movs	r3, #6
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084a:	237f      	movs	r3, #127	; 0x7f
 800084c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800084e:	2304      	movs	r3, #4
 8000850:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_ADC1_Init+0xbc>)
 800085c:	f001 f894 	bl	8001988 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000866:	f000 fa8b 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000c8 	.word	0x200000c8
 8000878:	50040000 	.word	0x50040000
 800087c:	c7520000 	.word	0xc7520000

08000880 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_CAN1_Init+0x64>)
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <MX_CAN1_Init+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_CAN1_Init+0x64>)
 800088c:	2228      	movs	r2, #40	; 0x28
 800088e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_CAN1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_CAN1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_CAN1_Init+0x64>)
 800089e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_CAN1_Init+0x64>)
 80008a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_CAN1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_CAN1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_CAN1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_CAN1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_CAN1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_CAN1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_CAN1_Init+0x64>)
 80008d2:	f001 fc39 	bl	8002148 <HAL_CAN_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008dc:	f000 fa50 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000012c 	.word	0x2000012c
 80008e8:	40006400 	.word	0x40006400

080008ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09a      	sub	sp, #104	; 0x68
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	222c      	movs	r2, #44	; 0x2c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f008 f8c4 	bl	8008ab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800092c:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <MX_TIM1_Init+0x150>)
 800092e:	4a44      	ldr	r2, [pc, #272]	; (8000a40 <MX_TIM1_Init+0x154>)
 8000930:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000932:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000934:	224f      	movs	r2, #79	; 0x4f
 8000936:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <MX_TIM1_Init+0x150>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800093e:	4b3f      	ldr	r3, [pc, #252]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000940:	2263      	movs	r2, #99	; 0x63
 8000942:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094a:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <MX_TIM1_Init+0x150>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000956:	4839      	ldr	r0, [pc, #228]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000958:	f003 fb74 	bl	8004044 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000962:	f000 fa0d 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000970:	4619      	mov	r1, r3
 8000972:	4832      	ldr	r0, [pc, #200]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000974:	f004 f8a8 	bl	8004ac8 <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800097e:	f000 f9ff 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000982:	482e      	ldr	r0, [pc, #184]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000984:	f003 fc0a 	bl	800419c <HAL_TIM_PWM_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800098e:	f000 f9f7 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800099e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009a2:	4619      	mov	r1, r3
 80009a4:	4825      	ldr	r0, [pc, #148]	; (8000a3c <MX_TIM1_Init+0x150>)
 80009a6:	f004 fd19 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80009b0:	f000 f9e6 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b4:	2360      	movs	r3, #96	; 0x60
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	4818      	ldr	r0, [pc, #96]	; (8000a3c <MX_TIM1_Init+0x150>)
 80009da:	f003 ff61 	bl	80048a0 <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009e4:	f000 f9cc 	bl	8000d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000a1e:	f004 fd43 	bl	80054a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a28:	f000 f9aa 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000a2e:	f000 facf 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3768      	adds	r7, #104	; 0x68
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000154 	.word	0x20000154
 8000a40:	40012c00 	.word	0x40012c00

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000a78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7c:	601a      	str	r2, [r3, #0]
  //htim2.Init.Prescaler = 8000-1;
  htim2.Init.Prescaler = 80-1;
 8000a7e:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000a80:	224f      	movs	r2, #79	; 0x4f
 8000a82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  //htim2.Init.Period = 10000-1 ;
  htim2.Init.Period = 1000-1;
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a9e:	4829      	ldr	r0, [pc, #164]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000aa0:	f003 fad0 	bl	8004044 <HAL_TIM_Base_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000aaa:	f000 f969 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4822      	ldr	r0, [pc, #136]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000abc:	f004 f804 	bl	8004ac8 <HAL_TIM_ConfigClockSource>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ac6:	f000 f95b 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aca:	481e      	ldr	r0, [pc, #120]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000acc:	f003 fb66 	bl	800419c <HAL_TIM_PWM_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ad6:	f000 f953 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4816      	ldr	r0, [pc, #88]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000aea:	f004 fc77 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000af4:	f000 f944 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af8:	2360      	movs	r3, #96	; 0x60
 8000afa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000b10:	f003 fec6 	bl	80048a0 <HAL_TIM_PWM_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b1a:	f000 f931 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	220c      	movs	r2, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000b26:	f003 febb 	bl	80048a0 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b30:	f000 f926 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <MX_TIM2_Init+0x100>)
 8000b36:	f000 fa4b 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000b3a:	bf00      	nop
 8000b3c:	3738      	adds	r7, #56	; 0x38
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001a0 	.word	0x200001a0

08000b48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <MX_USART1_UART_Init+0x5c>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b8c:	f004 fd22 	bl	80055d4 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b96:	f000 f8f3 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001ec 	.word	0x200001ec
 8000ba4:	40013800 	.word	0x40013800

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	4b56      	ldr	r3, [pc, #344]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a55      	ldr	r2, [pc, #340]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a4f      	ldr	r2, [pc, #316]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a3d      	ldr	r2, [pc, #244]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000c36:	2200      	movs	r2, #0
 8000c38:	f640 410f 	movw	r1, #3087	; 0xc0f
 8000c3c:	4837      	ldr	r0, [pc, #220]	; (8000d1c <MX_GPIO_Init+0x174>)
 8000c3e:	f002 f813 	bl	8002c68 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2103      	movs	r1, #3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f002 f80d 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f240 4105 	movw	r1, #1029	; 0x405
 8000c54:	4832      	ldr	r0, [pc, #200]	; (8000d20 <MX_GPIO_Init+0x178>)
 8000c56:	f002 f807 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4831      	ldr	r0, [pc, #196]	; (8000d24 <MX_GPIO_Init+0x17c>)
 8000c60:	f002 f802 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000c64:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000c68:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4827      	ldr	r0, [pc, #156]	; (8000d1c <MX_GPIO_Init+0x174>)
 8000c7e:	f001 fe79 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin;
 8000c82:	2303      	movs	r3, #3
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f001 fe6a 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin;
 8000ca0:	f240 4305 	movw	r3, #1029	; 0x405
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4819      	ldr	r0, [pc, #100]	; (8000d20 <MX_GPIO_Init+0x178>)
 8000cba:	f001 fe5b 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8000cbe:	f24f 2302 	movw	r3, #61954	; 0xf202
 8000cc2:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4813      	ldr	r0, [pc, #76]	; (8000d20 <MX_GPIO_Init+0x178>)
 8000cd4:	f001 fe4e 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 8000cd8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <MX_GPIO_Init+0x174>)
 8000cee:	f001 fe41 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <MX_GPIO_Init+0x17c>)
 8000d0a:	f001 fe33 	bl	8002974 <HAL_GPIO_Init>

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000c00 	.word	0x48000c00

08000d28 <steering_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_steering_task */
void steering_task(void *argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN steering_task */
  configure_steppers();
 8000d30:	f7ff fbd0 	bl	80004d4 <configure_steppers>
  set_setpoint(STEERING, 400, CCW);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fbf6 	bl	800052c <set_setpoint>
  /* Infinite loop */
  for(;;)
  {
	  steer();
 8000d40:	f7ff fc4e 	bl	80005e0 <steer>
	  osDelay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f005 f9bd 	bl	80060c4 <osDelay>
	  steer();
 8000d4a:	e7f9      	b.n	8000d40 <steering_task+0x18>

08000d4c <braking_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_braking_task */
void braking_task(void *argument)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN braking_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f005 f9b5 	bl	80060c4 <osDelay>
 8000d5a:	e7fb      	b.n	8000d54 <braking_task+0x8>

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6e:	f000 fb17 	bl	80013a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40001000 	.word	0x40001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6593      	str	r3, [r2, #88]	; 0x58
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	f06f 0001 	mvn.w	r0, #1
 8000dca:	f001 fda9 	bl	8002920 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0a0      	sub	sp, #128	; 0x80
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	225c      	movs	r2, #92	; 0x5c
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fe59 	bl	8008ab4 <memset>
  if(hadc->Instance==ADC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d142      	bne.n	8000e92 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e16:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000e20:	2314      	movs	r3, #20
 8000e22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e24:	2307      	movs	r3, #7
 8000e26:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fdf8 	bl	8003a30 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e46:	f7ff ff9b 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_ADC_MspInit+0xc4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_ADC_MspInit+0xc4>)
 8000e50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_ADC_MspInit+0xc4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_ADC_MspInit+0xc4>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_ADC_MspInit+0xc4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_ADC_MspInit+0xc4>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_ADC_MspInit+0xc8>)
 8000e8e:	f001 fd71 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3780      	adds	r7, #128	; 0x80
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	50040000 	.word	0x50040000
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000800 	.word	0x48000800

08000ea8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <HAL_CAN_MspInit+0xa0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d139      	bne.n	8000f3e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <HAL_CAN_MspInit+0xa4>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <HAL_CAN_MspInit+0xa4>)
 8000ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <HAL_CAN_MspInit+0xa4>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <HAL_CAN_MspInit+0xa4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_CAN_MspInit+0xa4>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_CAN_MspInit+0xa4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000efa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f001 fd2b 	bl	8002974 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2105      	movs	r1, #5
 8000f22:	2014      	movs	r0, #20
 8000f24:	f001 fcfc 	bl	8002920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f28:	2014      	movs	r0, #20
 8000f2a:	f001 fd15 	bl	8002958 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2105      	movs	r1, #5
 8000f32:	2015      	movs	r0, #21
 8000f34:	f001 fcf4 	bl	8002920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f38:	2015      	movs	r0, #21
 8000f3a:	f001 fd0d 	bl	8002958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40006400 	.word	0x40006400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <HAL_TIM_Base_MspInit+0x78>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d114      	bne.n	8000f8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_TIM_Base_MspInit+0x7c>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <HAL_TIM_Base_MspInit+0x7c>)
 8000f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_TIM_Base_MspInit+0x7c>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	201b      	movs	r0, #27
 8000f80:	f001 fcce 	bl	8002920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f84:	201b      	movs	r0, #27
 8000f86:	f001 fce7 	bl	8002958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f8a:	e018      	b.n	8000fbe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f94:	d113      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_TIM_Base_MspInit+0x7c>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <HAL_TIM_Base_MspInit+0x7c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_TIM_Base_MspInit+0x7c>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2105      	movs	r1, #5
 8000fb2:	201c      	movs	r0, #28
 8000fb4:	f001 fcb4 	bl	8002920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb8:	201c      	movs	r0, #28
 8000fba:	f001 fccd 	bl	8002958 <HAL_NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012c00 	.word	0x40012c00
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a32      	ldr	r2, [pc, #200]	; (80010b8 <HAL_TIM_MspPostInit+0xe8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11e      	bne.n	8001030 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a31      	ldr	r2, [pc, #196]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800101c:	2301      	movs	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f001 fca3 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800102e:	e03f      	b.n	80010b0 <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001038:	d13a      	bne.n	80010b0 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a19      	ldr	r2, [pc, #100]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_TIM_MspPostInit+0xec>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STPR_PWM_2_Pin;
 800106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_2_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <HAL_TIM_MspPostInit+0xf0>)
 8001088:	f001 fc74 	bl	8002974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STPR_PWM_1_Pin;
 800108c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800109e:	2301      	movs	r3, #1
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_1_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f001 fc62 	bl	8002974 <HAL_GPIO_Init>
}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40012c00 	.word	0x40012c00
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000400 	.word	0x48000400

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a0      	sub	sp, #128	; 0x80
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	225c      	movs	r2, #92	; 0x5c
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 fce5 	bl	8008ab4 <memset>
  if(huart->Instance==USART1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_UART_MspInit+0xa8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d137      	bne.n	8001164 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fc95 	bl	8003a30 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800110c:	f7ff fe38 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_UART_MspInit+0xac>)
 8001112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001114:	4a16      	ldr	r2, [pc, #88]	; (8001170 <HAL_UART_MspInit+0xac>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111a:	6613      	str	r3, [r2, #96]	; 0x60
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_UART_MspInit+0xac>)
 800111e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_UART_MspInit+0xac>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_UART_MspInit+0xac>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_UART_MspInit+0xac>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001140:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001144:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001152:	2307      	movs	r3, #7
 8001154:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f001 fc08 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001164:	bf00      	nop
 8001166:	3780      	adds	r7, #128	; 0x80
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013800 	.word	0x40013800
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001182:	4b34      	ldr	r3, [pc, #208]	; (8001254 <HAL_InitTick+0xe0>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	4a33      	ldr	r2, [pc, #204]	; (8001254 <HAL_InitTick+0xe0>)
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HAL_InitTick+0xe0>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800119a:	f107 0210 	add.w	r2, r7, #16
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fbb1 	bl	800390c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d103      	bne.n	80011bc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b4:	f002 fb7e 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 80011b8:	6378      	str	r0, [r7, #52]	; 0x34
 80011ba:	e004      	b.n	80011c6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011bc:	f002 fb7a 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 80011c0:	4603      	mov	r3, r0
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c8:	4a23      	ldr	r2, [pc, #140]	; (8001258 <HAL_InitTick+0xe4>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0c9b      	lsrs	r3, r3, #18
 80011d0:	3b01      	subs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_InitTick+0xe8>)
 80011d6:	4a22      	ldr	r2, [pc, #136]	; (8001260 <HAL_InitTick+0xec>)
 80011d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_InitTick+0xe8>)
 80011dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <HAL_InitTick+0xe8>)
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_InitTick+0xe8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_InitTick+0xe8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_InitTick+0xe8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011fa:	4818      	ldr	r0, [pc, #96]	; (800125c <HAL_InitTick+0xe8>)
 80011fc:	f002 ff22 	bl	8004044 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001206:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800120a:	2b00      	cmp	r3, #0
 800120c:	d11b      	bne.n	8001246 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <HAL_InitTick+0xe8>)
 8001210:	f002 ff70 	bl	80040f4 <HAL_TIM_Base_Start_IT>
 8001214:	4603      	mov	r3, r0
 8001216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800121a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800121e:	2b00      	cmp	r3, #0
 8001220:	d111      	bne.n	8001246 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001222:	2036      	movs	r0, #54	; 0x36
 8001224:	f001 fb98 	bl	8002958 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	d808      	bhi.n	8001240 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800122e:	2200      	movs	r2, #0
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	2036      	movs	r0, #54	; 0x36
 8001234:	f001 fb74 	bl	8002920 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_InitTick+0xf0>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e002      	b.n	8001246 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001246:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800124a:	4618      	mov	r0, r3
 800124c:	3738      	adds	r7, #56	; 0x38
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	431bde83 	.word	0x431bde83
 800125c:	20000278 	.word	0x20000278
 8001260:	40001000 	.word	0x40001000
 8001264:	20000004 	.word	0x20000004

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <CAN1_RX0_IRQHandler+0x10>)
 800129a:	f001 f850 	bl	800233e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000012c 	.word	0x2000012c

080012a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <CAN1_RX1_IRQHandler+0x10>)
 80012ae:	f001 f846 	bl	800233e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000012c 	.word	0x2000012c

080012bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM1_CC_IRQHandler+0x10>)
 80012c2:	f003 f9cd 	bl	8004660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000154 	.word	0x20000154

080012d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM2_IRQHandler+0x10>)
 80012d6:	f003 f9c3 	bl	8004660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001a0 	.word	0x200001a0

080012e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <TIM6_DAC_IRQHandler+0x10>)
 80012ea:	f003 f9b9 	bl	8004660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000278 	.word	0x20000278

080012f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SystemInit+0x20>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <SystemInit+0x20>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001320:	f7ff ffea 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <LoopForever+0x6>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <LoopForever+0xe>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	; (8001368 <LoopForever+0x16>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f007 fb7f 	bl	8008a4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134e:	f7ff f9a9 	bl	80006a4 <main>

08001352 <LoopForever>:

LoopForever:
    b LoopForever
 8001352:	e7fe      	b.n	8001352 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001354:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001360:	08008dbc 	.word	0x08008dbc
  ldr r2, =_sbss
 8001364:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001368:	20001cb0 	.word	0x20001cb0

0800136c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_IRQHandler>

0800136e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f001 fac6 	bl	800290a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800137e:	200f      	movs	r0, #15
 8001380:	f7ff fef8 	bl	8001174 <HAL_InitTick>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	e001      	b.n	8001394 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001390:	f7ff fcfc 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001394:	79fb      	ldrb	r3, [r7, #7]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008
 80013c4:	200002c4 	.word	0x200002c4

080013c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	200002c4 	.word	0x200002c4

080013e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	609a      	str	r2, [r3, #8]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	609a      	str	r2, [r3, #8]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3360      	adds	r3, #96	; 0x60
 800145a:	461a      	mov	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <LL_ADC_SetOffset+0x44>)
 800146a:	4013      	ands	r3, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	4313      	orrs	r3, r2
 8001478:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	03fff000 	.word	0x03fff000

08001490 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3360      	adds	r3, #96	; 0x60
 800149e:	461a      	mov	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3360      	adds	r3, #96	; 0x60
 80014cc:	461a      	mov	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014e6:	bf00      	nop
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b087      	sub	sp, #28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3330      	adds	r3, #48	; 0x30
 8001502:	461a      	mov	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	4413      	add	r3, r2
 8001510:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f003 031f 	and.w	r3, r3, #31
 800151c:	211f      	movs	r1, #31
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	401a      	ands	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0e9b      	lsrs	r3, r3, #26
 800152a:	f003 011f 	and.w	r1, r3, #31
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f003 031f 	and.w	r3, r3, #31
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	431a      	orrs	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800154a:	b480      	push	{r7}
 800154c:	b087      	sub	sp, #28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3314      	adds	r3, #20
 800155a:	461a      	mov	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	0e5b      	lsrs	r3, r3, #25
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	0d1b      	lsrs	r3, r3, #20
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	2107      	movs	r1, #7
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	401a      	ands	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	0d1b      	lsrs	r3, r3, #20
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	431a      	orrs	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0318 	and.w	r3, r3, #24
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015c4:	40d9      	lsrs	r1, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	400b      	ands	r3, r1
 80015ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ce:	431a      	orrs	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	0007ffff 	.word	0x0007ffff

080015e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6093      	str	r3, [r2, #8]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800161c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001620:	d101      	bne.n	8001626 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001670:	d101      	bne.n	8001676 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <LL_ADC_IsEnabled+0x18>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_ADC_IsEnabled+0x1a>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d101      	bne.n	80016c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d101      	bne.n	80016e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e12c      	b.n	800196c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fb5b 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff67 	bl	800160c <LL_ADC_IsDeepPowerDownEnabled>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff4d 	bl	80015e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff82 	bl	800165c <LL_ADC_IsInternalRegulatorEnabled>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d115      	bne.n	800178a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff66 	bl	8001634 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001768:	4b82      	ldr	r3, [pc, #520]	; (8001974 <HAL_ADC_Init+0x27c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	4a82      	ldr	r2, [pc, #520]	; (8001978 <HAL_ADC_Init+0x280>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	099b      	lsrs	r3, r3, #6
 8001776:	3301      	adds	r3, #1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800177c:	e002      	b.n	8001784 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff64 	bl	800165c <LL_ADC_IsInternalRegulatorEnabled>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10d      	bne.n	80017b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff75 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 80017c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80c5 	bne.w	800195a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 80c1 	bne.w	800195a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017e0:	f043 0202 	orr.w	r2, r3, #2
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff49 	bl	8001684 <LL_ADC_IsEnabled>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017f8:	4860      	ldr	r0, [pc, #384]	; (800197c <HAL_ADC_Init+0x284>)
 80017fa:	f7ff ff43 	bl	8001684 <LL_ADC_IsEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4619      	mov	r1, r3
 800180a:	485d      	ldr	r0, [pc, #372]	; (8001980 <HAL_ADC_Init+0x288>)
 800180c:	f7ff fde8 	bl	80013e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e5b      	ldrb	r3, [r3, #25]
 8001814:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800181a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001820:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001826:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d106      	bne.n	800184c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	3b01      	subs	r3, #1
 8001844:	045b      	lsls	r3, r3, #17
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	4b45      	ldr	r3, [pc, #276]	; (8001984 <HAL_ADC_Init+0x28c>)
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	69b9      	ldr	r1, [r7, #24]
 8001878:	430b      	orrs	r3, r1
 800187a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff12 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 8001886:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff1f 	bl	80016d0 <LL_ADC_INJ_IsConversionOngoing>
 8001892:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d13d      	bne.n	8001916 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d13a      	bne.n	8001916 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018bc:	f023 0302 	bic.w	r3, r3, #2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	430b      	orrs	r3, r1
 80018c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d118      	bne.n	8001906 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018f0:	4311      	orrs	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018f6:	430a      	orrs	r2, r1
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	e007      	b.n	8001916 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d10c      	bne.n	8001938 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f023 010f 	bic.w	r1, r3, #15
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
 8001936:	e007      	b.n	8001948 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 020f 	bic.w	r2, r2, #15
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f023 0303 	bic.w	r3, r3, #3
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
 8001958:	e007      	b.n	800196a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	f043 0210 	orr.w	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800196a:	7ffb      	ldrb	r3, [r7, #31]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000000 	.word	0x20000000
 8001978:	053e2d63 	.word	0x053e2d63
 800197c:	50040000 	.word	0x50040000
 8001980:	50040300 	.word	0x50040300
 8001984:	fff0c007 	.word	0xfff0c007

08001988 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0b6      	sub	sp, #216	; 0xd8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x22>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e3b9      	b.n	800211e <HAL_ADC_ConfigChannel+0x796>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fe77 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 839e 	bne.w	8002100 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d824      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	3b02      	subs	r3, #2
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d81b      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0x86>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <HAL_ADC_ConfigChannel+0x54>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	080019ed 	.word	0x080019ed
 80019e0:	080019f5 	.word	0x080019f5
 80019e4:	080019fd 	.word	0x080019fd
 80019e8:	08001a05 	.word	0x08001a05
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	220c      	movs	r2, #12
 80019f0:	605a      	str	r2, [r3, #4]
          break;
 80019f2:	e011      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2212      	movs	r2, #18
 80019f8:	605a      	str	r2, [r3, #4]
          break;
 80019fa:	e00d      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2218      	movs	r2, #24
 8001a00:	605a      	str	r2, [r3, #4]
          break;
 8001a02:	e009      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0a:	605a      	str	r2, [r3, #4]
          break;
 8001a0c:	e004      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2206      	movs	r2, #6
 8001a12:	605a      	str	r2, [r3, #4]
          break;
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a16:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	f7ff fd64 	bl	80014f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fe3b 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 8001a34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe47 	bl	80016d0 <LL_ADC_INJ_IsConversionOngoing>
 8001a42:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 81a6 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 81a1 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6819      	ldr	r1, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f7ff fd6f 	bl	800154a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	08db      	lsrs	r3, r3, #3
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d00a      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6919      	ldr	r1, [r3, #16]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a9e:	f7ff fcd3 	bl	8001448 <LL_ADC_SetOffset>
 8001aa2:	e17b      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fcf0 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x148>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fce5 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	0e9b      	lsrs	r3, r3, #26
 8001aca:	f003 021f 	and.w	r2, r3, #31
 8001ace:	e01e      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x186>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fcda 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001af2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e004      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x19e>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	e018      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x1d0>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	e004      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d106      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fca9 	bl	80014bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fc8d 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x20e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fc82 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	e01e      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x24c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fc77 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001bb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	e004      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x264>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0e9b      	lsrs	r3, r3, #26
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	e018      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x296>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c10:	2320      	movs	r3, #32
 8001c12:	e004      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d106      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fc46 	bl	80014bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fc2a 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10a      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x2d4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fc1f 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	e01e      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x312>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2102      	movs	r1, #2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fc14 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e004      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x32a>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	e016      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x358>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	e004      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2102      	movs	r1, #2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fbe5 	bl	80014bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fbc9 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x396>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fbbe 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	e017      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x3c6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2103      	movs	r1, #3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fbb3 	bl	8001490 <LL_ADC_GetOffsetChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d38:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d40:	2320      	movs	r3, #32
 8001d42:	e003      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d105      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x3de>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0e9b      	lsrs	r3, r3, #26
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	e011      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x402>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e003      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d106      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	2103      	movs	r1, #3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fb90 	bl	80014bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fc6f 	bl	8001684 <LL_ADC_IsEnabled>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f040 813f 	bne.w	800202c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f7ff fbf0 	bl	80015a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a8e      	ldr	r2, [pc, #568]	; (8002000 <HAL_ADC_ConfigChannel+0x678>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f040 8130 	bne.w	800202c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x46c>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e019      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x4a0>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e04:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	e003      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	bf94      	ite	ls
 8001e22:	2301      	movls	r3, #1
 8001e24:	2300      	movhi	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d079      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x4c0>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	3301      	adds	r3, #1
 8001e40:	069b      	lsls	r3, r3, #26
 8001e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e46:	e015      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x4ec>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e58:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e003      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x50c>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	3301      	adds	r3, #1
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	e017      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x53c>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	ea42 0103 	orr.w	r1, r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x562>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	3301      	adds	r3, #1
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	051b      	lsls	r3, r3, #20
 8001ee8:	e018      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x594>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e003      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	e080      	b.n	8002022 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x5b4>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	3301      	adds	r3, #1
 8001f34:	069b      	lsls	r3, r3, #26
 8001f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3a:	e015      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x5e0>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e003      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	069b      	lsls	r3, r3, #26
 8001f64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x600>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	e017      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x630>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	61fb      	str	r3, [r7, #28]
  return result;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	ea42 0103 	orr.w	r1, r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x65c>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b1e      	subs	r3, #30
 8001fdc:	051b      	lsls	r3, r3, #20
 8001fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	e01d      	b.n	8002020 <HAL_ADC_ConfigChannel+0x698>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	613b      	str	r3, [r7, #16]
  return result;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d103      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e005      	b.n	800200c <HAL_ADC_ConfigChannel+0x684>
 8002000:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f003 021f 	and.w	r2, r3, #31
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	3b1e      	subs	r3, #30
 800201a:	051b      	lsls	r3, r3, #20
 800201c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002020:	430b      	orrs	r3, r1
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	6892      	ldr	r2, [r2, #8]
 8002026:	4619      	mov	r1, r3
 8002028:	f7ff fa8f 	bl	800154a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_ADC_ConfigChannel+0x7a0>)
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d06c      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002038:	483c      	ldr	r0, [pc, #240]	; (800212c <HAL_ADC_ConfigChannel+0x7a4>)
 800203a:	f7ff f9f7 	bl	800142c <LL_ADC_GetCommonPathInternalCh>
 800203e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <HAL_ADC_ConfigChannel+0x7a8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d127      	bne.n	800209c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800204c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d121      	bne.n	800209c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a35      	ldr	r2, [pc, #212]	; (8002134 <HAL_ADC_ConfigChannel+0x7ac>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d157      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002062:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002066:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800206a:	4619      	mov	r1, r3
 800206c:	482f      	ldr	r0, [pc, #188]	; (800212c <HAL_ADC_ConfigChannel+0x7a4>)
 800206e:	f7ff f9ca 	bl	8001406 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_ADC_ConfigChannel+0x7b0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	4a30      	ldr	r2, [pc, #192]	; (800213c <HAL_ADC_ConfigChannel+0x7b4>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800208c:	e002      	b.n	8002094 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3b01      	subs	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209a:	e03a      	b.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a27      	ldr	r2, [pc, #156]	; (8002140 <HAL_ADC_ConfigChannel+0x7b8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d113      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x746>
 80020a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <HAL_ADC_ConfigChannel+0x7ac>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d12a      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c4:	4619      	mov	r1, r3
 80020c6:	4819      	ldr	r0, [pc, #100]	; (800212c <HAL_ADC_ConfigChannel+0x7a4>)
 80020c8:	f7ff f99d 	bl	8001406 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020cc:	e021      	b.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_ADC_ConfigChannel+0x7bc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d11c      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d116      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_ADC_ConfigChannel+0x7ac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d111      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <HAL_ADC_ConfigChannel+0x7a4>)
 80020fa:	f7ff f984 	bl	8001406 <LL_ADC_SetCommonPathInternalCh>
 80020fe:	e008      	b.n	8002112 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800211a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800211e:	4618      	mov	r0, r3
 8002120:	37d8      	adds	r7, #216	; 0xd8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	80080000 	.word	0x80080000
 800212c:	50040300 	.word	0x50040300
 8002130:	c7520000 	.word	0xc7520000
 8002134:	50040000 	.word	0x50040000
 8002138:	20000000 	.word	0x20000000
 800213c:	053e2d63 	.word	0x053e2d63
 8002140:	cb840000 	.word	0xcb840000
 8002144:	80000001 	.word	0x80000001

08002148 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0ed      	b.n	8002336 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fe9e 	bl	8000ea8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800217c:	f7ff f924 	bl	80013c8 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002182:	e012      	b.n	80021aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002184:	f7ff f920 	bl	80013c8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b0a      	cmp	r3, #10
 8002190:	d90b      	bls.n	80021aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2205      	movs	r2, #5
 80021a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0c5      	b.n	8002336 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0e5      	beq.n	8002184 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0202 	bic.w	r2, r2, #2
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c8:	f7ff f8fe 	bl	80013c8 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ce:	e012      	b.n	80021f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d0:	f7ff f8fa 	bl	80013c8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b0a      	cmp	r3, #10
 80021dc:	d90b      	bls.n	80021f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2205      	movs	r2, #5
 80021ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e09f      	b.n	8002336 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e5      	bne.n	80021d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7e1b      	ldrb	r3, [r3, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d108      	bne.n	800221e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e007      	b.n	800222e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7e5b      	ldrb	r3, [r3, #25]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e007      	b.n	8002258 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e9b      	ldrb	r3, [r3, #26]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d108      	bne.n	8002272 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0220 	orr.w	r2, r2, #32
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e007      	b.n	8002282 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0220 	bic.w	r2, r2, #32
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7edb      	ldrb	r3, [r3, #27]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d108      	bne.n	800229c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0210 	bic.w	r2, r2, #16
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e007      	b.n	80022ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0210 	orr.w	r2, r2, #16
 80022aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7f1b      	ldrb	r3, [r3, #28]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d108      	bne.n	80022c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e007      	b.n	80022d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0208 	bic.w	r2, r2, #8
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7f5b      	ldrb	r3, [r3, #29]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0204 	orr.w	r2, r2, #4
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e007      	b.n	8002300 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	ea42 0103 	orr.w	r1, r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b08a      	sub	sp, #40	; 0x28
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d07c      	beq.n	800247e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d023      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f983 	bl	80026ac <HAL_CAN_TxMailbox0CompleteCallback>
 80023a6:	e016      	b.n	80023d6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	e00c      	b.n	80023d6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	e002      	b.n	80023d6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f989 	bl	80026e8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d024      	beq.n	800242a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f963 	bl	80026c0 <HAL_CAN_TxMailbox1CompleteCallback>
 80023fa:	e016      	b.n	800242a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	e00c      	b.n	800242a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	e002      	b.n	800242a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f969 	bl	80026fc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d024      	beq.n	800247e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800243c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f943 	bl	80026d4 <HAL_CAN_TxMailbox2CompleteCallback>
 800244e:	e016      	b.n	800247e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	e00c      	b.n	800247e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e002      	b.n	800247e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f949 	bl	8002710 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00c      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002498:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2210      	movs	r2, #16
 80024a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2208      	movs	r2, #8
 80024bc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f93a 	bl	8002738 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f921 	bl	8002724 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2210      	movs	r2, #16
 8002504:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00b      	beq.n	8002528 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2208      	movs	r2, #8
 8002520:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f91c 	bl	8002760 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f903 	bl	800274c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2210      	movs	r2, #16
 8002560:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f906 	bl	8002774 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2208      	movs	r2, #8
 8002582:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f8ff 	bl	8002788 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d07b      	beq.n	800268c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d072      	beq.n	8002684 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d043      	beq.n	8002684 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002602:	2b00      	cmp	r3, #0
 8002604:	d03e      	beq.n	8002684 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800260c:	2b60      	cmp	r3, #96	; 0x60
 800260e:	d02b      	beq.n	8002668 <HAL_CAN_IRQHandler+0x32a>
 8002610:	2b60      	cmp	r3, #96	; 0x60
 8002612:	d82e      	bhi.n	8002672 <HAL_CAN_IRQHandler+0x334>
 8002614:	2b50      	cmp	r3, #80	; 0x50
 8002616:	d022      	beq.n	800265e <HAL_CAN_IRQHandler+0x320>
 8002618:	2b50      	cmp	r3, #80	; 0x50
 800261a:	d82a      	bhi.n	8002672 <HAL_CAN_IRQHandler+0x334>
 800261c:	2b40      	cmp	r3, #64	; 0x40
 800261e:	d019      	beq.n	8002654 <HAL_CAN_IRQHandler+0x316>
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d826      	bhi.n	8002672 <HAL_CAN_IRQHandler+0x334>
 8002624:	2b30      	cmp	r3, #48	; 0x30
 8002626:	d010      	beq.n	800264a <HAL_CAN_IRQHandler+0x30c>
 8002628:	2b30      	cmp	r3, #48	; 0x30
 800262a:	d822      	bhi.n	8002672 <HAL_CAN_IRQHandler+0x334>
 800262c:	2b10      	cmp	r3, #16
 800262e:	d002      	beq.n	8002636 <HAL_CAN_IRQHandler+0x2f8>
 8002630:	2b20      	cmp	r3, #32
 8002632:	d005      	beq.n	8002640 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002634:	e01d      	b.n	8002672 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800263e:	e019      	b.n	8002674 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	f043 0310 	orr.w	r3, r3, #16
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002648:	e014      	b.n	8002674 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f043 0320 	orr.w	r3, r3, #32
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002652:	e00f      	b.n	8002674 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800265c:	e00a      	b.n	8002674 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002666:	e005      	b.n	8002674 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002670:	e000      	b.n	8002674 <HAL_CAN_IRQHandler+0x336>
            break;
 8002672:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002682:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2204      	movs	r2, #4
 800268a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f87c 	bl	800279c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026a4:	bf00      	nop
 80026a6:	3728      	adds	r7, #40	; 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	60d3      	str	r3, [r2, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <__NVIC_EnableIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	; (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
         );
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff4c 	bl	80027b0 <__NVIC_SetPriorityGrouping>
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002932:	f7ff ff61 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 8002936:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	6978      	ldr	r0, [r7, #20]
 800293e:	f7ff ffb1 	bl	80028a4 <NVIC_EncodePriority>
 8002942:	4602      	mov	r2, r0
 8002944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ff80 	bl	8002850 <__NVIC_SetPriority>
}
 8002950:	bf00      	nop
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ff54 	bl	8002814 <__NVIC_EnableIRQ>
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002982:	e154      	b.n	8002c2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8146 	beq.w	8002c28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d005      	beq.n	80029b4 <HAL_GPIO_Init+0x40>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d130      	bne.n	8002a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ea:	2201      	movs	r2, #1
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 0201 	and.w	r2, r3, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d017      	beq.n	8002a52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d123      	bne.n	8002aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	220f      	movs	r2, #15
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	08da      	lsrs	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	6939      	ldr	r1, [r7, #16]
 8002aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80a0 	beq.w	8002c28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae8:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <HAL_GPIO_Init+0x2d8>)
 8002aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aec:	4a57      	ldr	r2, [pc, #348]	; (8002c4c <HAL_GPIO_Init+0x2d8>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6613      	str	r3, [r2, #96]	; 0x60
 8002af4:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <HAL_GPIO_Init+0x2d8>)
 8002af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b00:	4a53      	ldr	r2, [pc, #332]	; (8002c50 <HAL_GPIO_Init+0x2dc>)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	089b      	lsrs	r3, r3, #2
 8002b06:	3302      	adds	r3, #2
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	220f      	movs	r2, #15
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b2a:	d019      	beq.n	8002b60 <HAL_GPIO_Init+0x1ec>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a49      	ldr	r2, [pc, #292]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <HAL_GPIO_Init+0x1e8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a48      	ldr	r2, [pc, #288]	; (8002c58 <HAL_GPIO_Init+0x2e4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00d      	beq.n	8002b58 <HAL_GPIO_Init+0x1e4>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a47      	ldr	r2, [pc, #284]	; (8002c5c <HAL_GPIO_Init+0x2e8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d007      	beq.n	8002b54 <HAL_GPIO_Init+0x1e0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <HAL_GPIO_Init+0x2ec>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_GPIO_Init+0x1dc>
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	e008      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b50:	2307      	movs	r3, #7
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b54:	2303      	movs	r3, #3
 8002b56:	e004      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e002      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b60:	2300      	movs	r3, #0
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	f002 0203 	and.w	r2, r2, #3
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b72:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_GPIO_Init+0x2dc>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002baa:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bce:	4a25      	ldr	r2, [pc, #148]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f aea3 	bne.w	8002984 <HAL_GPIO_Init+0x10>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	48000400 	.word	0x48000400
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000c00 	.word	0x48000c00
 8002c60:	48001000 	.word	0x48001000
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc2:	d130      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d038      	beq.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cda:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2232      	movs	r2, #50	; 0x32
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf8:	e002      	b.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0c:	d102      	bne.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f2      	bne.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d110      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e00f      	b.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d007      	beq.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40007000 	.word	0x40007000
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	431bde83 	.word	0x431bde83

08002d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f000 bc02 	b.w	8003578 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d74:	4b96      	ldr	r3, [pc, #600]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d7e:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80e4 	beq.w	8002f5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d007      	beq.n	8002dac <HAL_RCC_OscConfig+0x4c>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	f040 808b 	bne.w	8002eba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	f040 8087 	bne.w	8002eba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dac:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x64>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e3d9      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	4b81      	ldr	r3, [pc, #516]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_RCC_OscConfig+0x7e>
 8002dd4:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ddc:	e005      	b.n	8002dea <HAL_RCC_OscConfig+0x8a>
 8002dde:	4b7c      	ldr	r3, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d223      	bcs.n	8002e36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fdbc 	bl	8003970 <RCC_SetFlashLatencyFromMSIRange>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e3ba      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e02:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	496d      	ldr	r1, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e20:	4b6b      	ldr	r3, [pc, #428]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	4968      	ldr	r1, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
 8002e34:	e025      	b.n	8002e82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e36:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a65      	ldr	r2, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4960      	ldr	r1, [pc, #384]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e54:	4b5e      	ldr	r3, [pc, #376]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	495b      	ldr	r1, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fd7c 	bl	8003970 <RCC_SetFlashLatencyFromMSIRange>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e37a      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e82:	f000 fc81 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	4950      	ldr	r1, [pc, #320]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9e:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_RCC_OscConfig+0x278>)
 8002ea0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe f964 	bl	8001174 <HAL_InitTick>
 8002eac:	4603      	mov	r3, r0
 8002eae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d052      	beq.n	8002f5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	e35e      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d032      	beq.n	8002f28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec2:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fa7b 	bl	80013c8 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fa77 	bl	80013c8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e347      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee8:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef4:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a35      	ldr	r2, [pc, #212]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002efa:	f043 0308 	orr.w	r3, r3, #8
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4930      	ldr	r1, [pc, #192]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	492b      	ldr	r1, [pc, #172]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
 8002f26:	e01a      	b.n	8002f5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fa48 	bl	80013c8 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fa44 	bl	80013c8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e314      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x1dc>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d073      	beq.n	8003052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_OscConfig+0x21c>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d10e      	bne.n	8002f94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d063      	beq.n	8003050 <HAL_RCC_OscConfig+0x2f0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d15f      	bne.n	8003050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e2f1      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x24c>
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e025      	b.n	8002ff8 <HAL_RCC_OscConfig+0x298>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d114      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x280>
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a02      	ldr	r2, [pc, #8]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e013      	b.n	8002ff8 <HAL_RCC_OscConfig+0x298>
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08008d04 	.word	0x08008d04
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	20000004 	.word	0x20000004
 8002fe0:	4ba0      	ldr	r3, [pc, #640]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a9f      	ldr	r2, [pc, #636]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b9d      	ldr	r3, [pc, #628]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a9c      	ldr	r2, [pc, #624]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe f9e2 	bl	80013c8 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe f9de 	bl	80013c8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e2ae      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301a:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x2a8>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f9ce 	bl	80013c8 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe f9ca 	bl	80013c8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e29a      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003042:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d0>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d060      	beq.n	8003120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x310>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d119      	bne.n	800309e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d116      	bne.n	800309e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003070:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_OscConfig+0x328>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e277      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b76      	ldr	r3, [pc, #472]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	4973      	ldr	r1, [pc, #460]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800309c:	e040      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d023      	beq.n	80030ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe f989 	bl	80013c8 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fe f985 	bl	80013c8 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e255      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030cc:	4b65      	ldr	r3, [pc, #404]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b62      	ldr	r3, [pc, #392]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	495f      	ldr	r1, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	e018      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe f965 	bl	80013c8 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7fe f961 	bl	80013c8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e231      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01c      	beq.n	800316e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	4a4a      	ldr	r2, [pc, #296]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fe f940 	bl	80013c8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314c:	f7fe f93c 	bl	80013c8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e20c      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800315e:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <HAL_RCC_OscConfig+0x3ec>
 800316c:	e01b      	b.n	80031a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003174:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe f923 	bl	80013c8 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe f91f 	bl	80013c8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1ef      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ef      	bne.n	8003186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80a6 	beq.w	8003300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d118      	bne.n	800321e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f8:	f7fe f8e6 	bl	80013c8 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fe f8e2 	bl	80013c8 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e1b2      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <HAL_RCC_OscConfig+0x4d8>
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003236:	e029      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d115      	bne.n	800326c <HAL_RCC_OscConfig+0x50c>
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40007000 	.word	0x40007000
 800326c:	4b9a      	ldr	r3, [pc, #616]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a99      	ldr	r2, [pc, #612]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327c:	4b96      	ldr	r3, [pc, #600]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a95      	ldr	r2, [pc, #596]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d016      	beq.n	80032c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe f898 	bl	80013c8 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe f894 	bl	80013c8 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e162      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ed      	beq.n	800329c <HAL_RCC_OscConfig+0x53c>
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe f881 	bl	80013c8 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fe f87d 	bl	80013c8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e14b      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e0:	4b7d      	ldr	r3, [pc, #500]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1ed      	bne.n	80032ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a77      	ldr	r2, [pc, #476]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d03c      	beq.n	8003386 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01c      	beq.n	800334e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003314:	4b70      	ldr	r3, [pc, #448]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800331a:	4a6f      	ldr	r2, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe f850 	bl	80013c8 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800332c:	f7fe f84c 	bl	80013c8 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e11c      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800333e:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ef      	beq.n	800332c <HAL_RCC_OscConfig+0x5cc>
 800334c:	e01b      	b.n	8003386 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800334e:	4b62      	ldr	r3, [pc, #392]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003354:	4a60      	ldr	r2, [pc, #384]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe f833 	bl	80013c8 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003366:	f7fe f82f 	bl	80013c8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e0ff      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003378:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 800337a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ef      	bne.n	8003366 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80f3 	beq.w	8003576 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	2b02      	cmp	r3, #2
 8003396:	f040 80c9 	bne.w	800352c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800339a:	4b4f      	ldr	r3, [pc, #316]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0203 	and.w	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d12c      	bne.n	8003408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	3b01      	subs	r3, #1
 80033ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d123      	bne.n	8003408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d11b      	bne.n	8003408 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d113      	bne.n	8003408 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d109      	bne.n	8003408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	3b01      	subs	r3, #1
 8003402:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d06b      	beq.n	80034e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d062      	beq.n	80034d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800340e:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e0ac      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800341e:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2d      	ldr	r2, [pc, #180]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003428:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800342a:	f7fd ffcd 	bl	80013c8 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003432:	f7fd ffc9 	bl	80013c8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e099      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCC_OscConfig+0x77c>)
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003460:	3a01      	subs	r2, #1
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	4311      	orrs	r1, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800346a:	0212      	lsls	r2, r2, #8
 800346c:	4311      	orrs	r1, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003472:	0852      	lsrs	r2, r2, #1
 8003474:	3a01      	subs	r2, #1
 8003476:	0552      	lsls	r2, r2, #21
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800347e:	0852      	lsrs	r2, r2, #1
 8003480:	3a01      	subs	r2, #1
 8003482:	0652      	lsls	r2, r2, #25
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800348a:	06d2      	lsls	r2, r2, #27
 800348c:	430a      	orrs	r2, r1
 800348e:	4912      	ldr	r1, [pc, #72]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 800349a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ac:	f7fd ff8c 	bl	80013c8 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fd ff88 	bl	80013c8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e058      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_RCC_OscConfig+0x778>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034d2:	e050      	b.n	8003576 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e04f      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d144      	bne.n	8003576 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a23      	ldr	r2, [pc, #140]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 80034f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4a20      	ldr	r2, [pc, #128]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 80034fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003502:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003504:	f7fd ff60 	bl	80013c8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fd ff5c 	bl	80013c8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e02c      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x7ac>
 800352a:	e024      	b.n	8003576 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d01f      	beq.n	8003572 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 8003538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fd ff43 	bl	80013c8 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003546:	f7fd ff3f 	bl	80013c8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e00f      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	4905      	ldr	r1, [pc, #20]	; (8003580 <HAL_RCC_OscConfig+0x820>)
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_OscConfig+0x824>)
 800356c:	4013      	ands	r3, r2
 800356e:	60cb      	str	r3, [r1, #12]
 8003570:	e001      	b.n	8003576 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	feeefffc 	.word	0xfeeefffc

08003588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0e7      	b.n	800376c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b75      	ldr	r3, [pc, #468]	; (8003774 <HAL_RCC_ClockConfig+0x1ec>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d910      	bls.n	80035cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b72      	ldr	r3, [pc, #456]	; (8003774 <HAL_RCC_ClockConfig+0x1ec>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	4970      	ldr	r1, [pc, #448]	; (8003774 <HAL_RCC_ClockConfig+0x1ec>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <HAL_RCC_ClockConfig+0x1ec>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0cf      	b.n	800376c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d010      	beq.n	80035fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d908      	bls.n	80035fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4960      	ldr	r1, [pc, #384]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d04c      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	4b5a      	ldr	r3, [pc, #360]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d121      	bne.n	800365e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e0a6      	b.n	800376c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003626:	4b54      	ldr	r3, [pc, #336]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d115      	bne.n	800365e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e09a      	b.n	800376c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800363e:	4b4e      	ldr	r3, [pc, #312]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e08e      	b.n	800376c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364e:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e086      	b.n	800376c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800365e:	4b46      	ldr	r3, [pc, #280]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4943      	ldr	r1, [pc, #268]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003670:	f7fd feaa 	bl	80013c8 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fd fea6 	bl	80013c8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e06e      	b.n	800376c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d010      	beq.n	80036ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	4b31      	ldr	r3, [pc, #196]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d208      	bcs.n	80036ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036bc:	4b2e      	ldr	r3, [pc, #184]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	492b      	ldr	r1, [pc, #172]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ce:	4b29      	ldr	r3, [pc, #164]	; (8003774 <HAL_RCC_ClockConfig+0x1ec>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d210      	bcs.n	80036fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <HAL_RCC_ClockConfig+0x1ec>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 0207 	bic.w	r2, r3, #7
 80036e4:	4923      	ldr	r1, [pc, #140]	; (8003774 <HAL_RCC_ClockConfig+0x1ec>)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_ClockConfig+0x1ec>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e036      	b.n	800376c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4918      	ldr	r1, [pc, #96]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4910      	ldr	r1, [pc, #64]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800373c:	f000 f824 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	490b      	ldr	r1, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x1f4>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
 8003758:	4a09      	ldr	r2, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1f8>)
 800375a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1fc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fd07 	bl	8001174 <HAL_InitTick>
 8003766:	4603      	mov	r3, r0
 8003768:	72fb      	strb	r3, [r7, #11]

  return status;
 800376a:	7afb      	ldrb	r3, [r7, #11]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40022000 	.word	0x40022000
 8003778:	40021000 	.word	0x40021000
 800377c:	08008d04 	.word	0x08008d04
 8003780:	20000000 	.word	0x20000000
 8003784:	20000004 	.word	0x20000004

08003788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003796:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a0:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x34>
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b0c      	cmp	r3, #12
 80037b4:	d121      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d11e      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037bc:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	e005      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037e4:	4a2b      	ldr	r2, [pc, #172]	; (8003894 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d102      	bne.n	8003806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <HAL_RCC_GetSysClockFreq+0x110>)
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	e004      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d101      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_RCC_GetSysClockFreq+0x110>)
 800380e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d134      	bne.n	8003880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0xa6>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d003      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0xac>
 800382c:	e005      	b.n	800383a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <HAL_RCC_GetSysClockFreq+0x110>)
 8003830:	617b      	str	r3, [r7, #20]
      break;
 8003832:	e005      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <HAL_RCC_GetSysClockFreq+0x110>)
 8003836:	617b      	str	r3, [r7, #20]
      break;
 8003838:	e002      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	617b      	str	r3, [r7, #20]
      break;
 800383e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003840:	4b13      	ldr	r3, [pc, #76]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	3301      	adds	r3, #1
 800384c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	fb03 f202 	mul.w	r2, r3, r2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCC_GetSysClockFreq+0x108>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	0e5b      	lsrs	r3, r3, #25
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	3301      	adds	r3, #1
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003880:	69bb      	ldr	r3, [r7, #24]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	08008d1c 	.word	0x08008d1c
 8003898:	00f42400 	.word	0x00f42400

0800389c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4904      	ldr	r1, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08008d14 	.word	0x08008d14

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038e4:	f7ff ffda 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0adb      	lsrs	r3, r3, #11
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4904      	ldr	r1, [pc, #16]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	08008d14 	.word	0x08008d14

0800390c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	220f      	movs	r2, #15
 800391a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800391c:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_RCC_GetClockConfig+0x5c>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0203 	and.w	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <HAL_RCC_GetClockConfig+0x5c>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_RCC_GetClockConfig+0x5c>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_RCC_GetClockConfig+0x5c>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	08db      	lsrs	r3, r3, #3
 8003946:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_RCC_GetClockConfig+0x60>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0207 	and.w	r2, r3, #7
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	601a      	str	r2, [r3, #0]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	40022000 	.word	0x40022000

08003970 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003988:	f7ff f986 	bl	8002c98 <HAL_PWREx_GetVoltageRange>
 800398c:	6178      	str	r0, [r7, #20]
 800398e:	e014      	b.n	80039ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399a:	6593      	str	r3, [r2, #88]	; 0x58
 800399c:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039a8:	f7ff f976 	bl	8002c98 <HAL_PWREx_GetVoltageRange>
 80039ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ae:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c0:	d10b      	bne.n	80039da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d919      	bls.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2ba0      	cmp	r3, #160	; 0xa0
 80039cc:	d902      	bls.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ce:	2302      	movs	r3, #2
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e013      	b.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d4:	2301      	movs	r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e010      	b.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d902      	bls.n	80039e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039e0:	2303      	movs	r3, #3
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	e00a      	b.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b80      	cmp	r3, #128	; 0x80
 80039ea:	d102      	bne.n	80039f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ec:	2302      	movs	r3, #2
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	e004      	b.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d101      	bne.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f8:	2301      	movs	r3, #1
 80039fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 0207 	bic.w	r2, r3, #7
 8003a04:	4909      	ldr	r1, [pc, #36]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d001      	beq.n	8003a1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40022000 	.word	0x40022000

08003a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a38:	2300      	movs	r3, #0
 8003a3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d031      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a54:	d01a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a5a:	d814      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a64:	d10f      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a66:	4b5d      	ldr	r3, [pc, #372]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a72:	e00c      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f9f0 	bl	8003e60 <RCCEx_PLLSAI1_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a84:	e003      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	74fb      	strb	r3, [r7, #19]
      break;
 8003a8a:	e000      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a94:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	494e      	ldr	r1, [pc, #312]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aaa:	e001      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 809e 	beq.w	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ac2:	4b46      	ldr	r3, [pc, #280]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b40      	ldr	r3, [pc, #256]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	4a3f      	ldr	r2, [pc, #252]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae4:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af0:	2301      	movs	r3, #1
 8003af2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af4:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a39      	ldr	r2, [pc, #228]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b00:	f7fd fc62 	bl	80013c8 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b06:	e009      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fd fc5e 	bl	80013c8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d902      	bls.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	74fb      	strb	r3, [r7, #19]
        break;
 8003b1a:	e005      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b1c:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ef      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d15a      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01e      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d019      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b56:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b76:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d016      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fc1e 	bl	80013c8 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fd fc1a 	bl	80013c8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d902      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	74fb      	strb	r3, [r7, #19]
            break;
 8003ba6:	e006      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ec      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	4904      	ldr	r1, [pc, #16]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bd2:	e009      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	74bb      	strb	r3, [r7, #18]
 8003bd8:	e006      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be8:	7c7b      	ldrb	r3, [r7, #17]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bee:	4b9b      	ldr	r3, [pc, #620]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	4a9a      	ldr	r2, [pc, #616]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c06:	4b95      	ldr	r3, [pc, #596]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f023 0203 	bic.w	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4991      	ldr	r1, [pc, #580]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c28:	4b8c      	ldr	r3, [pc, #560]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f023 020c 	bic.w	r2, r3, #12
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	4989      	ldr	r1, [pc, #548]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c4a:	4b84      	ldr	r3, [pc, #528]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	4980      	ldr	r1, [pc, #512]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c6c:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4978      	ldr	r1, [pc, #480]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c8e:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	496f      	ldr	r1, [pc, #444]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4967      	ldr	r1, [pc, #412]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cd2:	4b62      	ldr	r3, [pc, #392]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	495e      	ldr	r1, [pc, #376]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	4956      	ldr	r1, [pc, #344]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d16:	4b51      	ldr	r3, [pc, #324]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	494d      	ldr	r1, [pc, #308]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d028      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d38:	4b48      	ldr	r3, [pc, #288]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	4945      	ldr	r1, [pc, #276]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d58:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d62:	60d3      	str	r3, [r2, #12]
 8003d64:	e011      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f872 	bl	8003e60 <RCCEx_PLLSAI1_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d028      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da4:	492d      	ldr	r1, [pc, #180]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc0:	60d3      	str	r3, [r2, #12]
 8003dc2:	e011      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f843 	bl	8003e60 <RCCEx_PLLSAI1_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dde:	7cfb      	ldrb	r3, [r7, #19]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01c      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e02:	4916      	ldr	r1, [pc, #88]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	2102      	movs	r1, #2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f820 	bl	8003e60 <RCCEx_PLLSAI1_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	4904      	ldr	r1, [pc, #16]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e50:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000

08003e60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e6e:	4b74      	ldr	r3, [pc, #464]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e7a:	4b71      	ldr	r3, [pc, #452]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0203 	and.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d10d      	bne.n	8003ea6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e92:	4b6b      	ldr	r3, [pc, #428]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d047      	beq.n	8003f36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	e044      	b.n	8003f36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d018      	beq.n	8003ee6 <RCCEx_PLLSAI1_Config+0x86>
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d825      	bhi.n	8003f04 <RCCEx_PLLSAI1_Config+0xa4>
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d002      	beq.n	8003ec2 <RCCEx_PLLSAI1_Config+0x62>
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d009      	beq.n	8003ed4 <RCCEx_PLLSAI1_Config+0x74>
 8003ec0:	e020      	b.n	8003f04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11d      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed2:	e01a      	b.n	8003f0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ed4:	4b5a      	ldr	r3, [pc, #360]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d116      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee4:	e013      	b.n	8003f0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ee6:	4b56      	ldr	r3, [pc, #344]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ef2:	4b53      	ldr	r3, [pc, #332]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f02:	e006      	b.n	8003f12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      break;
 8003f08:	e004      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e002      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f0e:	bf00      	nop
 8003f10:	e000      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10d      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	4943      	ldr	r1, [pc, #268]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d17c      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f3c:	4b40      	ldr	r3, [pc, #256]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3f      	ldr	r2, [pc, #252]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f48:	f7fd fa3e 	bl	80013c8 <HAL_GetTick>
 8003f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f4e:	e009      	b.n	8003f64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f50:	f7fd fa3a 	bl	80013c8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d902      	bls.n	8003f64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	73fb      	strb	r3, [r7, #15]
        break;
 8003f62:	e005      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f64:	4b36      	ldr	r3, [pc, #216]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ef      	bne.n	8003f50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d15f      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d110      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f7c:	4b30      	ldr	r3, [pc, #192]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6892      	ldr	r2, [r2, #8]
 8003f8c:	0211      	lsls	r1, r2, #8
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	06d2      	lsls	r2, r2, #27
 8003f94:	430a      	orrs	r2, r1
 8003f96:	492a      	ldr	r1, [pc, #168]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	610b      	str	r3, [r1, #16]
 8003f9c:	e027      	b.n	8003fee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d112      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fa4:	4b26      	ldr	r3, [pc, #152]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6892      	ldr	r2, [r2, #8]
 8003fb4:	0211      	lsls	r1, r2, #8
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6912      	ldr	r2, [r2, #16]
 8003fba:	0852      	lsrs	r2, r2, #1
 8003fbc:	3a01      	subs	r2, #1
 8003fbe:	0552      	lsls	r2, r2, #21
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	491f      	ldr	r1, [pc, #124]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	610b      	str	r3, [r1, #16]
 8003fc8:	e011      	b.n	8003fee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6892      	ldr	r2, [r2, #8]
 8003fda:	0211      	lsls	r1, r2, #8
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6952      	ldr	r2, [r2, #20]
 8003fe0:	0852      	lsrs	r2, r2, #1
 8003fe2:	3a01      	subs	r2, #1
 8003fe4:	0652      	lsls	r2, r2, #25
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	4915      	ldr	r1, [pc, #84]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fee:	4b14      	ldr	r3, [pc, #80]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a13      	ldr	r2, [pc, #76]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffa:	f7fd f9e5 	bl	80013c8 <HAL_GetTick>
 8003ffe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004000:	e009      	b.n	8004016 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004002:	f7fd f9e1 	bl	80013c8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d902      	bls.n	8004016 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	73fb      	strb	r3, [r7, #15]
          break;
 8004014:	e005      	b.n	8004022 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0ef      	beq.n	8004002 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	4903      	ldr	r1, [pc, #12]	; (8004040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004032:	4313      	orrs	r3, r2
 8004034:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e049      	b.n	80040ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc ff70 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f000 fe08 	bl	8004c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e03b      	b.n	8004184 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_TIM_Base_Start_IT+0x9c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_TIM_Base_Start_IT+0x4e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d004      	beq.n	8004142 <HAL_TIM_Base_Start_IT+0x4e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a15      	ldr	r2, [pc, #84]	; (8004194 <HAL_TIM_Base_Start_IT+0xa0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d115      	bne.n	800416e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_TIM_Base_Start_IT+0xa4>)
 800414a:	4013      	ands	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d015      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x8c>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d011      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	e008      	b.n	8004180 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e000      	b.n	8004182 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40014000 	.word	0x40014000
 8004198:	00010007 	.word	0x00010007

0800419c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e049      	b.n	8004242 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f841 	bl	800424a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 fd5c 	bl	8004c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_TIM_PWM_Start_IT+0x28>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e03c      	b.n	8004302 <HAL_TIM_PWM_Start_IT+0xa2>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d109      	bne.n	80042a2 <HAL_TIM_PWM_Start_IT+0x42>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	bf14      	ite	ne
 800429a:	2301      	movne	r3, #1
 800429c:	2300      	moveq	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	e02f      	b.n	8004302 <HAL_TIM_PWM_Start_IT+0xa2>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d109      	bne.n	80042bc <HAL_TIM_PWM_Start_IT+0x5c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	e022      	b.n	8004302 <HAL_TIM_PWM_Start_IT+0xa2>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d109      	bne.n	80042d6 <HAL_TIM_PWM_Start_IT+0x76>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e015      	b.n	8004302 <HAL_TIM_PWM_Start_IT+0xa2>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d109      	bne.n	80042f0 <HAL_TIM_PWM_Start_IT+0x90>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e008      	b.n	8004302 <HAL_TIM_PWM_Start_IT+0xa2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	bf14      	ite	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	2300      	moveq	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0c9      	b.n	800449e <HAL_TIM_PWM_Start_IT+0x23e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Start_IT+0xba>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004318:	e023      	b.n	8004362 <HAL_TIM_PWM_Start_IT+0x102>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d104      	bne.n	800432a <HAL_TIM_PWM_Start_IT+0xca>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004328:	e01b      	b.n	8004362 <HAL_TIM_PWM_Start_IT+0x102>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d104      	bne.n	800433a <HAL_TIM_PWM_Start_IT+0xda>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	e013      	b.n	8004362 <HAL_TIM_PWM_Start_IT+0x102>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d104      	bne.n	800434a <HAL_TIM_PWM_Start_IT+0xea>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004348:	e00b      	b.n	8004362 <HAL_TIM_PWM_Start_IT+0x102>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b10      	cmp	r3, #16
 800434e:	d104      	bne.n	800435a <HAL_TIM_PWM_Start_IT+0xfa>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	e003      	b.n	8004362 <HAL_TIM_PWM_Start_IT+0x102>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d841      	bhi.n	80043ec <HAL_TIM_PWM_Start_IT+0x18c>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <HAL_TIM_PWM_Start_IT+0x110>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043ed 	.word	0x080043ed
 8004378:	080043ed 	.word	0x080043ed
 800437c:	080043ed 	.word	0x080043ed
 8004380:	080043b7 	.word	0x080043b7
 8004384:	080043ed 	.word	0x080043ed
 8004388:	080043ed 	.word	0x080043ed
 800438c:	080043ed 	.word	0x080043ed
 8004390:	080043c9 	.word	0x080043c9
 8004394:	080043ed 	.word	0x080043ed
 8004398:	080043ed 	.word	0x080043ed
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080043db 	.word	0x080043db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0202 	orr.w	r2, r2, #2
 80043b2:	60da      	str	r2, [r3, #12]
      break;
 80043b4:	e01d      	b.n	80043f2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0204 	orr.w	r2, r2, #4
 80043c4:	60da      	str	r2, [r3, #12]
      break;
 80043c6:	e014      	b.n	80043f2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0208 	orr.w	r2, r2, #8
 80043d6:	60da      	str	r2, [r3, #12]
      break;
 80043d8:	e00b      	b.n	80043f2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0210 	orr.w	r2, r2, #16
 80043e8:	60da      	str	r2, [r3, #12]
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      break;
 80043f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d151      	bne.n	800449c <HAL_TIM_PWM_Start_IT+0x23c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2201      	movs	r2, #1
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 ffc5 	bl	8005390 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <HAL_TIM_PWM_Start_IT+0x248>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_TIM_PWM_Start_IT+0x1c4>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a25      	ldr	r2, [pc, #148]	; (80044ac <HAL_TIM_PWM_Start_IT+0x24c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_TIM_PWM_Start_IT+0x1c4>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a24      	ldr	r2, [pc, #144]	; (80044b0 <HAL_TIM_PWM_Start_IT+0x250>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d101      	bne.n	8004428 <HAL_TIM_PWM_Start_IT+0x1c8>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_TIM_PWM_Start_IT+0x1ca>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <HAL_TIM_PWM_Start_IT+0x248>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_TIM_PWM_Start_IT+0x1fc>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d004      	beq.n	800445c <HAL_TIM_PWM_Start_IT+0x1fc>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_TIM_PWM_Start_IT+0x24c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d115      	bne.n	8004488 <HAL_TIM_PWM_Start_IT+0x228>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_TIM_PWM_Start_IT+0x254>)
 8004464:	4013      	ands	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b06      	cmp	r3, #6
 800446c:	d015      	beq.n	800449a <HAL_TIM_PWM_Start_IT+0x23a>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d011      	beq.n	800449a <HAL_TIM_PWM_Start_IT+0x23a>
      {
        __HAL_TIM_ENABLE(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004486:	e008      	b.n	800449a <HAL_TIM_PWM_Start_IT+0x23a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e000      	b.n	800449c <HAL_TIM_PWM_Start_IT+0x23c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	00010007 	.word	0x00010007

080044b8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	d841      	bhi.n	8004550 <HAL_TIM_PWM_Stop_IT+0x98>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	08004509 	.word	0x08004509
 80044d8:	08004551 	.word	0x08004551
 80044dc:	08004551 	.word	0x08004551
 80044e0:	08004551 	.word	0x08004551
 80044e4:	0800451b 	.word	0x0800451b
 80044e8:	08004551 	.word	0x08004551
 80044ec:	08004551 	.word	0x08004551
 80044f0:	08004551 	.word	0x08004551
 80044f4:	0800452d 	.word	0x0800452d
 80044f8:	08004551 	.word	0x08004551
 80044fc:	08004551 	.word	0x08004551
 8004500:	08004551 	.word	0x08004551
 8004504:	0800453f 	.word	0x0800453f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0202 	bic.w	r2, r2, #2
 8004516:	60da      	str	r2, [r3, #12]
      break;
 8004518:	e01d      	b.n	8004556 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0204 	bic.w	r2, r2, #4
 8004528:	60da      	str	r2, [r3, #12]
      break;
 800452a:	e014      	b.n	8004556 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0208 	bic.w	r2, r2, #8
 800453a:	60da      	str	r2, [r3, #12]
      break;
 800453c:	e00b      	b.n	8004556 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0210 	bic.w	r2, r2, #16
 800454c:	60da      	str	r2, [r3, #12]
      break;
 800454e:	e002      	b.n	8004556 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      break;
 8004554:	bf00      	nop
  }

  if (status == HAL_OK)
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d176      	bne.n	800464a <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2200      	movs	r2, #0
 8004562:	6839      	ldr	r1, [r7, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 ff13 	bl	8005390 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a39      	ldr	r2, [pc, #228]	; (8004654 <HAL_TIM_PWM_Stop_IT+0x19c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_PWM_Stop_IT+0xd0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a37      	ldr	r2, [pc, #220]	; (8004658 <HAL_TIM_PWM_Stop_IT+0x1a0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_PWM_Stop_IT+0xd0>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a36      	ldr	r2, [pc, #216]	; (800465c <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_TIM_PWM_Stop_IT+0xd4>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_TIM_PWM_Stop_IT+0xd6>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d017      	beq.n	80045c2 <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	f241 1311 	movw	r3, #4369	; 0x1111
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <HAL_TIM_PWM_Stop_IT+0x10a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	f240 4344 	movw	r3, #1092	; 0x444
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d107      	bne.n	80045c2 <HAL_TIM_PWM_Stop_IT+0x10a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_TIM_PWM_Stop_IT+0x13a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	f240 4344 	movw	r3, #1092	; 0x444
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_PWM_Stop_IT+0x13a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Stop_IT+0x14a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	e023      	b.n	800464a <HAL_TIM_PWM_Stop_IT+0x192>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	e01b      	b.n	800464a <HAL_TIM_PWM_Stop_IT+0x192>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Stop_IT+0x16a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	e013      	b.n	800464a <HAL_TIM_PWM_Stop_IT+0x192>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Stop_IT+0x17a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004630:	e00b      	b.n	800464a <HAL_TIM_PWM_Stop_IT+0x192>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b10      	cmp	r3, #16
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Stop_IT+0x18a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004640:	e003      	b.n	800464a <HAL_TIM_PWM_Stop_IT+0x192>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400

08004660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b02      	cmp	r3, #2
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0202 	mvn.w	r2, #2
 800468c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fae3 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fad5 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fb ffcf 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0204 	mvn.w	r2, #4
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fab9 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 faab 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7fb ffa5 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b08      	cmp	r3, #8
 800471c:	d122      	bne.n	8004764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b08      	cmp	r3, #8
 800472a:	d11b      	bne.n	8004764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0208 	mvn.w	r2, #8
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2204      	movs	r2, #4
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fa8f 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa81 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fb ff7b 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b10      	cmp	r3, #16
 8004770:	d122      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d11b      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0210 	mvn.w	r2, #16
 8004788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2208      	movs	r2, #8
 800478e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa65 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 80047a4:	e005      	b.n	80047b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa57 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fb ff51 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d10e      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d107      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0201 	mvn.w	r2, #1
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc fabc 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d10e      	bne.n	8004810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	2b80      	cmp	r3, #128	; 0x80
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fece 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481e:	d10e      	bne.n	800483e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d107      	bne.n	800483e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fec1 	bl	80055c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d10e      	bne.n	800486a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d107      	bne.n	800486a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa0c 	bl	8004c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b20      	cmp	r3, #32
 8004876:	d10e      	bne.n	8004896 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b20      	cmp	r3, #32
 8004884:	d107      	bne.n	8004896 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f06f 0220 	mvn.w	r2, #32
 800488e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fe81 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e0ff      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b14      	cmp	r3, #20
 80048ca:	f200 80f0 	bhi.w	8004aae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	08004929 	.word	0x08004929
 80048d8:	08004aaf 	.word	0x08004aaf
 80048dc:	08004aaf 	.word	0x08004aaf
 80048e0:	08004aaf 	.word	0x08004aaf
 80048e4:	08004969 	.word	0x08004969
 80048e8:	08004aaf 	.word	0x08004aaf
 80048ec:	08004aaf 	.word	0x08004aaf
 80048f0:	08004aaf 	.word	0x08004aaf
 80048f4:	080049ab 	.word	0x080049ab
 80048f8:	08004aaf 	.word	0x08004aaf
 80048fc:	08004aaf 	.word	0x08004aaf
 8004900:	08004aaf 	.word	0x08004aaf
 8004904:	080049eb 	.word	0x080049eb
 8004908:	08004aaf 	.word	0x08004aaf
 800490c:	08004aaf 	.word	0x08004aaf
 8004910:	08004aaf 	.word	0x08004aaf
 8004914:	08004a2d 	.word	0x08004a2d
 8004918:	08004aaf 	.word	0x08004aaf
 800491c:	08004aaf 	.word	0x08004aaf
 8004920:	08004aaf 	.word	0x08004aaf
 8004924:	08004a6d 	.word	0x08004a6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fa16 	bl	8004d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0208 	orr.w	r2, r2, #8
 8004942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0204 	bic.w	r2, r2, #4
 8004952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	619a      	str	r2, [r3, #24]
      break;
 8004966:	e0a5      	b.n	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fa72 	bl	8004e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	021a      	lsls	r2, r3, #8
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	619a      	str	r2, [r3, #24]
      break;
 80049a8:	e084      	b.n	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 facb 	bl	8004f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0208 	orr.w	r2, r2, #8
 80049c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0204 	bic.w	r2, r2, #4
 80049d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69d9      	ldr	r1, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	61da      	str	r2, [r3, #28]
      break;
 80049e8:	e064      	b.n	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fb23 	bl	800503c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69d9      	ldr	r1, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	021a      	lsls	r2, r3, #8
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	61da      	str	r2, [r3, #28]
      break;
 8004a2a:	e043      	b.n	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb60 	bl	80050f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0208 	orr.w	r2, r2, #8
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0204 	bic.w	r2, r2, #4
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a6a:	e023      	b.n	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fb98 	bl	80051a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aac:	e002      	b.n	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop

08004ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e0b6      	b.n	8004c52 <HAL_TIM_ConfigClockSource+0x18a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b20:	d03e      	beq.n	8004ba0 <HAL_TIM_ConfigClockSource+0xd8>
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b26:	f200 8087 	bhi.w	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	f000 8086 	beq.w	8004c3e <HAL_TIM_ConfigClockSource+0x176>
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	d87f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b38:	2b70      	cmp	r3, #112	; 0x70
 8004b3a:	d01a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0xaa>
 8004b3c:	2b70      	cmp	r3, #112	; 0x70
 8004b3e:	d87b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	d050      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x11e>
 8004b44:	2b60      	cmp	r3, #96	; 0x60
 8004b46:	d877      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b48:	2b50      	cmp	r3, #80	; 0x50
 8004b4a:	d03c      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0xfe>
 8004b4c:	2b50      	cmp	r3, #80	; 0x50
 8004b4e:	d873      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	d058      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x13e>
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d86f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b58:	2b30      	cmp	r3, #48	; 0x30
 8004b5a:	d064      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d86b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d060      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d867      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d05a      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b70:	e062      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f000 fbe5 	bl	8005350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
      break;
 8004b9e:	e04f      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6899      	ldr	r1, [r3, #8]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f000 fbce 	bl	8005350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc2:	609a      	str	r2, [r3, #8]
      break;
 8004bc4:	e03c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 fb42 	bl	800525c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2150      	movs	r1, #80	; 0x50
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fb9b 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004be4:	e02c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 fb61 	bl	80052ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2160      	movs	r1, #96	; 0x60
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fb8b 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004c04:	e01c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 fb22 	bl	800525c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fb7b 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004c24:	e00c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 fb72 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004c36:	e003      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e000      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <TIM_Base_SetConfig+0xbc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_Base_SetConfig+0x20>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d108      	bne.n	8004cca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <TIM_Base_SetConfig+0xbc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_Base_SetConfig+0x52>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d007      	beq.n	8004cea <TIM_Base_SetConfig+0x52>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <TIM_Base_SetConfig+0xc0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_Base_SetConfig+0x52>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	; (8004d5c <TIM_Base_SetConfig+0xc4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <TIM_Base_SetConfig+0xbc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_Base_SetConfig+0xa0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a0b      	ldr	r2, [pc, #44]	; (8004d58 <TIM_Base_SetConfig+0xc0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0xa0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <TIM_Base_SetConfig+0xc4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d103      	bne.n	8004d40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	615a      	str	r2, [r3, #20]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400

08004d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0201 	bic.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f023 0302 	bic.w	r3, r3, #2
 8004dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a24      	ldr	r2, [pc, #144]	; (8004e4c <TIM_OC1_SetConfig+0xec>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_OC1_SetConfig+0x70>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <TIM_OC1_SetConfig+0xf0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC1_SetConfig+0x70>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <TIM_OC1_SetConfig+0xf4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10c      	bne.n	8004dea <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0308 	bic.w	r3, r3, #8
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 0304 	bic.w	r3, r3, #4
 8004de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <TIM_OC1_SetConfig+0xec>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_OC1_SetConfig+0xa2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <TIM_OC1_SetConfig+0xf0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_OC1_SetConfig+0xa2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <TIM_OC1_SetConfig+0xf4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d111      	bne.n	8004e26 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40014400 	.word	0x40014400

08004e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f023 0210 	bic.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <TIM_OC2_SetConfig+0xe8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10d      	bne.n	8004ed8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <TIM_OC2_SetConfig+0xe8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <TIM_OC2_SetConfig+0x98>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <TIM_OC2_SetConfig+0xec>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_OC2_SetConfig+0x98>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <TIM_OC2_SetConfig+0xf0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d113      	bne.n	8004f18 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400

08004f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a21      	ldr	r2, [pc, #132]	; (8005030 <TIM_OC3_SetConfig+0xe4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10d      	bne.n	8004fca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a18      	ldr	r2, [pc, #96]	; (8005030 <TIM_OC3_SetConfig+0xe4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <TIM_OC3_SetConfig+0x96>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a17      	ldr	r2, [pc, #92]	; (8005034 <TIM_OC3_SetConfig+0xe8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <TIM_OC3_SetConfig+0x96>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a16      	ldr	r2, [pc, #88]	; (8005038 <TIM_OC3_SetConfig+0xec>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d113      	bne.n	800500a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400

0800503c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800508a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	031b      	lsls	r3, r3, #12
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a14      	ldr	r2, [pc, #80]	; (80050ec <TIM_OC4_SetConfig+0xb0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_OC4_SetConfig+0x74>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <TIM_OC4_SetConfig+0xb4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_OC4_SetConfig+0x74>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <TIM_OC4_SetConfig+0xb8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d109      	bne.n	80050c4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	019b      	lsls	r3, r3, #6
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400

080050f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800513c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <TIM_OC5_SetConfig+0xa4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d007      	beq.n	8005162 <TIM_OC5_SetConfig+0x6a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <TIM_OC5_SetConfig+0xa8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC5_SetConfig+0x6a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a11      	ldr	r2, [pc, #68]	; (80051a4 <TIM_OC5_SetConfig+0xac>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d109      	bne.n	8005176 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005168:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400

080051a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	051b      	lsls	r3, r3, #20
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a14      	ldr	r2, [pc, #80]	; (8005250 <TIM_OC6_SetConfig+0xa8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_OC6_SetConfig+0x6c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a13      	ldr	r2, [pc, #76]	; (8005254 <TIM_OC6_SetConfig+0xac>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC6_SetConfig+0x6c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a12      	ldr	r2, [pc, #72]	; (8005258 <TIM_OC6_SetConfig+0xb0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d109      	bne.n	8005228 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400

0800525c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 030a 	bic.w	r3, r3, #10
 8005298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b087      	sub	sp, #28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0210 	bic.w	r2, r3, #16
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	031b      	lsls	r3, r3, #12
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	f043 0307 	orr.w	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	021a      	lsls	r2, r3, #8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	431a      	orrs	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4313      	orrs	r3, r2
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2201      	movs	r2, #1
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1a      	ldr	r2, [r3, #32]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	401a      	ands	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1a      	ldr	r2, [r3, #32]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e04f      	b.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005424:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a14      	ldr	r2, [pc, #80]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d004      	beq.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a10      	ldr	r2, [pc, #64]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10c      	bne.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40014000 	.word	0x40014000

080054a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e060      	b.n	8005586 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	041b      	lsls	r3, r3, #16
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a14      	ldr	r2, [pc, #80]	; (8005594 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d115      	bne.n	8005574 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	051b      	lsls	r3, r3, #20
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40012c00 	.word	0x40012c00

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e040      	b.n	8005668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fb fd64 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2224      	movs	r2, #36	; 0x24
 8005600:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f82c 	bl	8005670 <UART_SetConfig>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e022      	b.n	8005668 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa7a 	bl	8005b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800563e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800564e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fb01 	bl	8005c68 <UART_CheckIdleState>
 8005666:	4603      	mov	r3, r0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005674:	b08a      	sub	sp, #40	; 0x28
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	431a      	orrs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	431a      	orrs	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	4313      	orrs	r3, r2
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	4b9e      	ldr	r3, [pc, #632]	; (8005918 <UART_SetConfig+0x2a8>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a93      	ldr	r2, [pc, #588]	; (800591c <UART_SetConfig+0x2ac>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	4313      	orrs	r3, r2
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ec:	430a      	orrs	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a8a      	ldr	r2, [pc, #552]	; (8005920 <UART_SetConfig+0x2b0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d126      	bne.n	8005748 <UART_SetConfig+0xd8>
 80056fa:	4b8a      	ldr	r3, [pc, #552]	; (8005924 <UART_SetConfig+0x2b4>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b03      	cmp	r3, #3
 8005706:	d81b      	bhi.n	8005740 <UART_SetConfig+0xd0>
 8005708:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0xa0>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005721 	.word	0x08005721
 8005714:	08005731 	.word	0x08005731
 8005718:	08005729 	.word	0x08005729
 800571c:	08005739 	.word	0x08005739
 8005720:	2301      	movs	r3, #1
 8005722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005726:	e0ab      	b.n	8005880 <UART_SetConfig+0x210>
 8005728:	2302      	movs	r3, #2
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572e:	e0a7      	b.n	8005880 <UART_SetConfig+0x210>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005736:	e0a3      	b.n	8005880 <UART_SetConfig+0x210>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573e:	e09f      	b.n	8005880 <UART_SetConfig+0x210>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005746:	e09b      	b.n	8005880 <UART_SetConfig+0x210>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a76      	ldr	r2, [pc, #472]	; (8005928 <UART_SetConfig+0x2b8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d138      	bne.n	80057c4 <UART_SetConfig+0x154>
 8005752:	4b74      	ldr	r3, [pc, #464]	; (8005924 <UART_SetConfig+0x2b4>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	f003 030c 	and.w	r3, r3, #12
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d82d      	bhi.n	80057bc <UART_SetConfig+0x14c>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0xf8>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800579d 	.word	0x0800579d
 800576c:	080057bd 	.word	0x080057bd
 8005770:	080057bd 	.word	0x080057bd
 8005774:	080057bd 	.word	0x080057bd
 8005778:	080057ad 	.word	0x080057ad
 800577c:	080057bd 	.word	0x080057bd
 8005780:	080057bd 	.word	0x080057bd
 8005784:	080057bd 	.word	0x080057bd
 8005788:	080057a5 	.word	0x080057a5
 800578c:	080057bd 	.word	0x080057bd
 8005790:	080057bd 	.word	0x080057bd
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057b5 	.word	0x080057b5
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a2:	e06d      	b.n	8005880 <UART_SetConfig+0x210>
 80057a4:	2302      	movs	r3, #2
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057aa:	e069      	b.n	8005880 <UART_SetConfig+0x210>
 80057ac:	2304      	movs	r3, #4
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b2:	e065      	b.n	8005880 <UART_SetConfig+0x210>
 80057b4:	2308      	movs	r3, #8
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ba:	e061      	b.n	8005880 <UART_SetConfig+0x210>
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c2:	e05d      	b.n	8005880 <UART_SetConfig+0x210>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a58      	ldr	r2, [pc, #352]	; (800592c <UART_SetConfig+0x2bc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d125      	bne.n	800581a <UART_SetConfig+0x1aa>
 80057ce:	4b55      	ldr	r3, [pc, #340]	; (8005924 <UART_SetConfig+0x2b4>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057d8:	2b30      	cmp	r3, #48	; 0x30
 80057da:	d016      	beq.n	800580a <UART_SetConfig+0x19a>
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d818      	bhi.n	8005812 <UART_SetConfig+0x1a2>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d00a      	beq.n	80057fa <UART_SetConfig+0x18a>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d814      	bhi.n	8005812 <UART_SetConfig+0x1a2>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <UART_SetConfig+0x182>
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d008      	beq.n	8005802 <UART_SetConfig+0x192>
 80057f0:	e00f      	b.n	8005812 <UART_SetConfig+0x1a2>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f8:	e042      	b.n	8005880 <UART_SetConfig+0x210>
 80057fa:	2302      	movs	r3, #2
 80057fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005800:	e03e      	b.n	8005880 <UART_SetConfig+0x210>
 8005802:	2304      	movs	r3, #4
 8005804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005808:	e03a      	b.n	8005880 <UART_SetConfig+0x210>
 800580a:	2308      	movs	r3, #8
 800580c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005810:	e036      	b.n	8005880 <UART_SetConfig+0x210>
 8005812:	2310      	movs	r3, #16
 8005814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005818:	e032      	b.n	8005880 <UART_SetConfig+0x210>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3f      	ldr	r2, [pc, #252]	; (800591c <UART_SetConfig+0x2ac>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d12a      	bne.n	800587a <UART_SetConfig+0x20a>
 8005824:	4b3f      	ldr	r3, [pc, #252]	; (8005924 <UART_SetConfig+0x2b4>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800582e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005832:	d01a      	beq.n	800586a <UART_SetConfig+0x1fa>
 8005834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005838:	d81b      	bhi.n	8005872 <UART_SetConfig+0x202>
 800583a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583e:	d00c      	beq.n	800585a <UART_SetConfig+0x1ea>
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005844:	d815      	bhi.n	8005872 <UART_SetConfig+0x202>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <UART_SetConfig+0x1e2>
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584e:	d008      	beq.n	8005862 <UART_SetConfig+0x1f2>
 8005850:	e00f      	b.n	8005872 <UART_SetConfig+0x202>
 8005852:	2300      	movs	r3, #0
 8005854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005858:	e012      	b.n	8005880 <UART_SetConfig+0x210>
 800585a:	2302      	movs	r3, #2
 800585c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005860:	e00e      	b.n	8005880 <UART_SetConfig+0x210>
 8005862:	2304      	movs	r3, #4
 8005864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005868:	e00a      	b.n	8005880 <UART_SetConfig+0x210>
 800586a:	2308      	movs	r3, #8
 800586c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005870:	e006      	b.n	8005880 <UART_SetConfig+0x210>
 8005872:	2310      	movs	r3, #16
 8005874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005878:	e002      	b.n	8005880 <UART_SetConfig+0x210>
 800587a:	2310      	movs	r3, #16
 800587c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a25      	ldr	r2, [pc, #148]	; (800591c <UART_SetConfig+0x2ac>)
 8005886:	4293      	cmp	r3, r2
 8005888:	f040 808a 	bne.w	80059a0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800588c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005890:	2b08      	cmp	r3, #8
 8005892:	d824      	bhi.n	80058de <UART_SetConfig+0x26e>
 8005894:	a201      	add	r2, pc, #4	; (adr r2, 800589c <UART_SetConfig+0x22c>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058df 	.word	0x080058df
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058df 	.word	0x080058df
 80058ac:	080058cf 	.word	0x080058cf
 80058b0:	080058df 	.word	0x080058df
 80058b4:	080058df 	.word	0x080058df
 80058b8:	080058df 	.word	0x080058df
 80058bc:	080058d7 	.word	0x080058d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c0:	f7fd fff8 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 80058c4:	61f8      	str	r0, [r7, #28]
        break;
 80058c6:	e010      	b.n	80058ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c8:	4b19      	ldr	r3, [pc, #100]	; (8005930 <UART_SetConfig+0x2c0>)
 80058ca:	61fb      	str	r3, [r7, #28]
        break;
 80058cc:	e00d      	b.n	80058ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ce:	f7fd ff5b 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 80058d2:	61f8      	str	r0, [r7, #28]
        break;
 80058d4:	e009      	b.n	80058ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058da:	61fb      	str	r3, [r7, #28]
        break;
 80058dc:	e005      	b.n	80058ea <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8109 	beq.w	8005b04 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d305      	bcc.n	800590e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	429a      	cmp	r2, r3
 800590c:	d912      	bls.n	8005934 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005914:	e0f6      	b.n	8005b04 <UART_SetConfig+0x494>
 8005916:	bf00      	nop
 8005918:	efff69f3 	.word	0xefff69f3
 800591c:	40008000 	.word	0x40008000
 8005920:	40013800 	.word	0x40013800
 8005924:	40021000 	.word	0x40021000
 8005928:	40004400 	.word	0x40004400
 800592c:	40004800 	.word	0x40004800
 8005930:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2200      	movs	r2, #0
 8005938:	461c      	mov	r4, r3
 800593a:	4615      	mov	r5, r2
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	022b      	lsls	r3, r5, #8
 8005946:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800594a:	0222      	lsls	r2, r4, #8
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	6849      	ldr	r1, [r1, #4]
 8005950:	0849      	lsrs	r1, r1, #1
 8005952:	2000      	movs	r0, #0
 8005954:	4688      	mov	r8, r1
 8005956:	4681      	mov	r9, r0
 8005958:	eb12 0a08 	adds.w	sl, r2, r8
 800595c:	eb43 0b09 	adc.w	fp, r3, r9
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800596e:	4650      	mov	r0, sl
 8005970:	4659      	mov	r1, fp
 8005972:	f7fa fc2d 	bl	80001d0 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4613      	mov	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005984:	d308      	bcc.n	8005998 <UART_SetConfig+0x328>
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598c:	d204      	bcs.n	8005998 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	e0b5      	b.n	8005b04 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800599e:	e0b1      	b.n	8005b04 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a8:	d15d      	bne.n	8005a66 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80059aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d827      	bhi.n	8005a02 <UART_SetConfig+0x392>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x348>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	080059e5 	.word	0x080059e5
 80059c0:	080059ed 	.word	0x080059ed
 80059c4:	08005a03 	.word	0x08005a03
 80059c8:	080059f3 	.word	0x080059f3
 80059cc:	08005a03 	.word	0x08005a03
 80059d0:	08005a03 	.word	0x08005a03
 80059d4:	08005a03 	.word	0x08005a03
 80059d8:	080059fb 	.word	0x080059fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059dc:	f7fd ff6a 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 80059e0:	61f8      	str	r0, [r7, #28]
        break;
 80059e2:	e014      	b.n	8005a0e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e4:	f7fd ff7c 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 80059e8:	61f8      	str	r0, [r7, #28]
        break;
 80059ea:	e010      	b.n	8005a0e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ec:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <UART_SetConfig+0x4b0>)
 80059ee:	61fb      	str	r3, [r7, #28]
        break;
 80059f0:	e00d      	b.n	8005a0e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f2:	f7fd fec9 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 80059f6:	61f8      	str	r0, [r7, #28]
        break;
 80059f8:	e009      	b.n	8005a0e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fe:	61fb      	str	r3, [r7, #28]
        break;
 8005a00:	e005      	b.n	8005a0e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d077      	beq.n	8005b04 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005a      	lsls	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	441a      	add	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d916      	bls.n	8005a5e <UART_SetConfig+0x3ee>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a36:	d212      	bcs.n	8005a5e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f023 030f 	bic.w	r3, r3, #15
 8005a40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	8afb      	ldrh	r3, [r7, #22]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	8afa      	ldrh	r2, [r7, #22]
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	e052      	b.n	8005b04 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a64:	e04e      	b.n	8005b04 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d827      	bhi.n	8005abe <UART_SetConfig+0x44e>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <UART_SetConfig+0x404>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	08005abf 	.word	0x08005abf
 8005a84:	08005aaf 	.word	0x08005aaf
 8005a88:	08005abf 	.word	0x08005abf
 8005a8c:	08005abf 	.word	0x08005abf
 8005a90:	08005abf 	.word	0x08005abf
 8005a94:	08005ab7 	.word	0x08005ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a98:	f7fd ff0c 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8005a9c:	61f8      	str	r0, [r7, #28]
        break;
 8005a9e:	e014      	b.n	8005aca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7fd ff1e 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	61f8      	str	r0, [r7, #28]
        break;
 8005aa6:	e010      	b.n	8005aca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <UART_SetConfig+0x4b0>)
 8005aaa:	61fb      	str	r3, [r7, #28]
        break;
 8005aac:	e00d      	b.n	8005aca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aae:	f7fd fe6b 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8005ab2:	61f8      	str	r0, [r7, #28]
        break;
 8005ab4:	e009      	b.n	8005aca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aba:	61fb      	str	r3, [r7, #28]
        break;
 8005abc:	e005      	b.n	8005aca <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d019      	beq.n	8005b04 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	085a      	lsrs	r2, r3, #1
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	441a      	add	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	d909      	bls.n	8005afe <UART_SetConfig+0x48e>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af0:	d205      	bcs.n	8005afe <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	e002      	b.n	8005b04 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3728      	adds	r7, #40	; 0x28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1e:	bf00      	nop
 8005b20:	00f42400 	.word	0x00f42400

08005b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01a      	beq.n	8005c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c22:	d10a      	bne.n	8005c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
  }
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c78:	f7fb fba6 	bl	80013c8 <HAL_GetTick>
 8005c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d10e      	bne.n	8005caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f82d 	bl	8005cfa <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e023      	b.n	8005cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d10e      	bne.n	8005cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f817 	bl	8005cfa <UART_WaitOnFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e00d      	b.n	8005cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b09c      	sub	sp, #112	; 0x70
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	603b      	str	r3, [r7, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0a:	e0a5      	b.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d12:	f000 80a1 	beq.w	8005e58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d16:	f7fb fb57 	bl	80013c8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d302      	bcc.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x32>
 8005d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d13e      	bne.n	8005daa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d40:	667b      	str	r3, [r7, #100]	; 0x64
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e6      	bne.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3308      	adds	r3, #8
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	663b      	str	r3, [r7, #96]	; 0x60
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e5      	bne.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e067      	b.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d04f      	beq.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc6:	d147      	bne.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
 8005df2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e6      	bne.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	613b      	str	r3, [r7, #16]
   return(result);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3308      	adds	r3, #8
 8005e22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e24:	623a      	str	r2, [r7, #32]
 8005e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	69f9      	ldr	r1, [r7, #28]
 8005e2a:	6a3a      	ldr	r2, [r7, #32]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e5      	bne.n	8005e04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e010      	b.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	f43f af4a 	beq.w	8005d0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3770      	adds	r7, #112	; 0x70
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <__NVIC_SetPriority>:
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	6039      	str	r1, [r7, #0]
 8005e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	db0a      	blt.n	8005eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	490c      	ldr	r1, [pc, #48]	; (8005ed0 <__NVIC_SetPriority+0x4c>)
 8005e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea2:	0112      	lsls	r2, r2, #4
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005eac:	e00a      	b.n	8005ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	4908      	ldr	r1, [pc, #32]	; (8005ed4 <__NVIC_SetPriority+0x50>)
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	3b04      	subs	r3, #4
 8005ebc:	0112      	lsls	r2, r2, #4
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	761a      	strb	r2, [r3, #24]
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	e000e100 	.word	0xe000e100
 8005ed4:	e000ed00 	.word	0xe000ed00

08005ed8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <SysTick_Handler+0x1c>)
 8005ede:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ee0:	f001 fd4c 	bl	800797c <xTaskGetSchedulerState>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d001      	beq.n	8005eee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005eea:	f002 fb35 	bl	8008558 <xPortSysTickHandler>
  }
}
 8005eee:	bf00      	nop
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	e000e010 	.word	0xe000e010

08005ef8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005efc:	2100      	movs	r1, #0
 8005efe:	f06f 0004 	mvn.w	r0, #4
 8005f02:	f7ff ffbf 	bl	8005e84 <__NVIC_SetPriority>
#endif
}
 8005f06:	bf00      	nop
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f12:	f3ef 8305 	mrs	r3, IPSR
 8005f16:	603b      	str	r3, [r7, #0]
  return(result);
 8005f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f1e:	f06f 0305 	mvn.w	r3, #5
 8005f22:	607b      	str	r3, [r7, #4]
 8005f24:	e00c      	b.n	8005f40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <osKernelInitialize+0x44>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d105      	bne.n	8005f3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <osKernelInitialize+0x44>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	e002      	b.n	8005f40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f40:	687b      	ldr	r3, [r7, #4]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	200002c8 	.word	0x200002c8

08005f54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5a:	f3ef 8305 	mrs	r3, IPSR
 8005f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f66:	f06f 0305 	mvn.w	r3, #5
 8005f6a:	607b      	str	r3, [r7, #4]
 8005f6c:	e010      	b.n	8005f90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <osKernelStart+0x48>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d109      	bne.n	8005f8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f76:	f7ff ffbf 	bl	8005ef8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f7a:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <osKernelStart+0x48>)
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f80:	f001 f882 	bl	8007088 <vTaskStartScheduler>
      stat = osOK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	e002      	b.n	8005f90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f90:	687b      	ldr	r3, [r7, #4]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200002c8 	.word	0x200002c8

08005fa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	; 0x38
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb0:	f3ef 8305 	mrs	r3, IPSR
 8005fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8005fb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d17e      	bne.n	80060ba <osThreadNew+0x11a>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d07b      	beq.n	80060ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005fc2:	2380      	movs	r3, #128	; 0x80
 8005fc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005fc6:	2318      	movs	r3, #24
 8005fc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d045      	beq.n	8006066 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <osThreadNew+0x48>
        name = attr->name;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <osThreadNew+0x6e>
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b38      	cmp	r3, #56	; 0x38
 8006000:	d805      	bhi.n	800600e <osThreadNew+0x6e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <osThreadNew+0x72>
        return (NULL);
 800600e:	2300      	movs	r3, #0
 8006010:	e054      	b.n	80060bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	089b      	lsrs	r3, r3, #2
 8006020:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00e      	beq.n	8006048 <osThreadNew+0xa8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2bc3      	cmp	r3, #195	; 0xc3
 8006030:	d90a      	bls.n	8006048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006036:	2b00      	cmp	r3, #0
 8006038:	d006      	beq.n	8006048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <osThreadNew+0xa8>
        mem = 1;
 8006042:	2301      	movs	r3, #1
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e010      	b.n	800606a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10c      	bne.n	800606a <osThreadNew+0xca>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d108      	bne.n	800606a <osThreadNew+0xca>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <osThreadNew+0xca>
          mem = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	e001      	b.n	800606a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d110      	bne.n	8006092 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006078:	9202      	str	r2, [sp, #8]
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fe0c 	bl	8006ca4 <xTaskCreateStatic>
 800608c:	4603      	mov	r3, r0
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	e013      	b.n	80060ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d110      	bne.n	80060ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	b29a      	uxth	r2, r3
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fe57 	bl	8006d5e <xTaskCreate>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d001      	beq.n	80060ba <osThreadNew+0x11a>
            hTask = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060ba:	693b      	ldr	r3, [r7, #16]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3728      	adds	r7, #40	; 0x28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060cc:	f3ef 8305 	mrs	r3, IPSR
 80060d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80060d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <osDelay+0x1c>
    stat = osErrorISR;
 80060d8:	f06f 0305 	mvn.w	r3, #5
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e007      	b.n	80060f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 ff98 	bl	8007020 <vTaskDelay>
    }
  }

  return (stat);
 80060f0:	68fb      	ldr	r3, [r7, #12]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4a07      	ldr	r2, [pc, #28]	; (8006128 <vApplicationGetIdleTaskMemory+0x2c>)
 800610c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4a06      	ldr	r2, [pc, #24]	; (800612c <vApplicationGetIdleTaskMemory+0x30>)
 8006112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2280      	movs	r2, #128	; 0x80
 8006118:	601a      	str	r2, [r3, #0]
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	200002cc 	.word	0x200002cc
 800612c:	20000390 	.word	0x20000390

08006130 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a07      	ldr	r2, [pc, #28]	; (800615c <vApplicationGetTimerTaskMemory+0x2c>)
 8006140:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4a06      	ldr	r2, [pc, #24]	; (8006160 <vApplicationGetTimerTaskMemory+0x30>)
 8006146:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800614e:	601a      	str	r2, [r3, #0]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	20000590 	.word	0x20000590
 8006160:	20000654 	.word	0x20000654

08006164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f103 0208 	add.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800617c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f103 0208 	add.w	r2, r3, #8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f103 0208 	add.w	r2, r3, #8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	601a      	str	r2, [r3, #0]
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800621c:	d103      	bne.n	8006226 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e00c      	b.n	8006240 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3308      	adds	r3, #8
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e002      	b.n	8006234 <vListInsert+0x2e>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	d2f6      	bcs.n	800622e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	601a      	str	r2, [r3, #0]
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6892      	ldr	r2, [r2, #8]
 800628e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6852      	ldr	r2, [r2, #4]
 8006298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d103      	bne.n	80062ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062f6:	f002 f89d 	bl	8008434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006302:	68f9      	ldr	r1, [r7, #12]
 8006304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	441a      	add	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	3b01      	subs	r3, #1
 8006328:	68f9      	ldr	r1, [r7, #12]
 800632a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800632c:	fb01 f303 	mul.w	r3, r1, r3
 8006330:	441a      	add	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	22ff      	movs	r2, #255	; 0xff
 800633a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	22ff      	movs	r2, #255	; 0xff
 8006342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d114      	bne.n	8006376 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01a      	beq.n	800638a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3310      	adds	r3, #16
 8006358:	4618      	mov	r0, r3
 800635a:	f001 f94d 	bl	80075f8 <xTaskRemoveFromEventList>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d012      	beq.n	800638a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006364:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <xQueueGenericReset+0xcc>)
 8006366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	e009      	b.n	800638a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3310      	adds	r3, #16
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fef2 	bl	8006164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3324      	adds	r3, #36	; 0x24
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff feed 	bl	8006164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800638a:	f002 f883 	bl	8008494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800638e:	2301      	movs	r3, #1
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08e      	sub	sp, #56	; 0x38
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <xQueueGenericCreateStatic+0x52>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <xQueueGenericCreateStatic+0x56>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <xQueueGenericCreateStatic+0x58>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	623b      	str	r3, [r7, #32]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <xQueueGenericCreateStatic+0x7e>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <xQueueGenericCreateStatic+0x82>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xQueueGenericCreateStatic+0x84>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	61fb      	str	r3, [r7, #28]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800643a:	2350      	movs	r3, #80	; 0x50
 800643c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b50      	cmp	r3, #80	; 0x50
 8006442:	d00a      	beq.n	800645a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	61bb      	str	r3, [r7, #24]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800645a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00d      	beq.n	8006482 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800646e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	4613      	mov	r3, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f805 	bl	800648c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006484:	4618      	mov	r0, r3
 8006486:	3730      	adds	r7, #48	; 0x30
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d103      	bne.n	80064a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	e002      	b.n	80064ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064ba:	2101      	movs	r1, #1
 80064bc:	69b8      	ldr	r0, [r7, #24]
 80064be:	f7ff ff05 	bl	80062cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	78fa      	ldrb	r2, [r7, #3]
 80064c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08e      	sub	sp, #56	; 0x38
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064e2:	2300      	movs	r3, #0
 80064e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <xQueueGenericSend+0x32>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <xQueueGenericSend+0x40>
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <xQueueGenericSend+0x44>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <xQueueGenericSend+0x46>
 8006518:	2300      	movs	r3, #0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <xQueueGenericSend+0x60>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d103      	bne.n	8006542 <xQueueGenericSend+0x6e>
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <xQueueGenericSend+0x72>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <xQueueGenericSend+0x74>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueGenericSend+0x8e>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	623b      	str	r3, [r7, #32]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006562:	f001 fa0b 	bl	800797c <xTaskGetSchedulerState>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <xQueueGenericSend+0x9e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <xQueueGenericSend+0xa2>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <xQueueGenericSend+0xa4>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <xQueueGenericSend+0xbe>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	61fb      	str	r3, [r7, #28]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006592:	f001 ff4f 	bl	8008434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <xQueueGenericSend+0xd4>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d129      	bne.n	80065fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ae:	f000 fa0b 	bl	80069c8 <prvCopyDataToQueue>
 80065b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d010      	beq.n	80065de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	3324      	adds	r3, #36	; 0x24
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 f819 	bl	80075f8 <xTaskRemoveFromEventList>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d013      	beq.n	80065f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065cc:	4b3f      	ldr	r3, [pc, #252]	; (80066cc <xQueueGenericSend+0x1f8>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	e00a      	b.n	80065f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065e4:	4b39      	ldr	r3, [pc, #228]	; (80066cc <xQueueGenericSend+0x1f8>)
 80065e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065f4:	f001 ff4e 	bl	8008494 <vPortExitCritical>
				return pdPASS;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e063      	b.n	80066c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006602:	f001 ff47 	bl	8008494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006606:	2300      	movs	r3, #0
 8006608:	e05c      	b.n	80066c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006610:	f107 0314 	add.w	r3, r7, #20
 8006614:	4618      	mov	r0, r3
 8006616:	f001 f853 	bl	80076c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800661e:	f001 ff39 	bl	8008494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006622:	f000 fda3 	bl	800716c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006626:	f001 ff05 	bl	8008434 <vPortEnterCritical>
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006630:	b25b      	sxtb	r3, r3
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006636:	d103      	bne.n	8006640 <xQueueGenericSend+0x16c>
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006646:	b25b      	sxtb	r3, r3
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800664c:	d103      	bne.n	8006656 <xQueueGenericSend+0x182>
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006656:	f001 ff1d 	bl	8008494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800665a:	1d3a      	adds	r2, r7, #4
 800665c:	f107 0314 	add.w	r3, r7, #20
 8006660:	4611      	mov	r1, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f001 f842 	bl	80076ec <xTaskCheckForTimeOut>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d124      	bne.n	80066b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800666e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006670:	f000 faa2 	bl	8006bb8 <prvIsQueueFull>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d018      	beq.n	80066ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	3310      	adds	r3, #16
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4611      	mov	r1, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f000 ff68 	bl	8007558 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800668a:	f000 fa2d 	bl	8006ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800668e:	f000 fd7b 	bl	8007188 <xTaskResumeAll>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	f47f af7c 	bne.w	8006592 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <xQueueGenericSend+0x1f8>)
 800669c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	e772      	b.n	8006592 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ae:	f000 fa1b 	bl	8006ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066b2:	f000 fd69 	bl	8007188 <xTaskResumeAll>
 80066b6:	e76c      	b.n	8006592 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ba:	f000 fa15 	bl	8006ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066be:	f000 fd63 	bl	8007188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3738      	adds	r7, #56	; 0x38
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b090      	sub	sp, #64	; 0x40
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <xQueueGenericSendFromISR+0x3c>
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <xQueueGenericSendFromISR+0x40>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <xQueueGenericSendFromISR+0x42>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d103      	bne.n	800673a <xQueueGenericSendFromISR+0x6a>
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <xQueueGenericSendFromISR+0x6e>
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <xQueueGenericSendFromISR+0x70>
 800673e:	2300      	movs	r3, #0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	623b      	str	r3, [r7, #32]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800675a:	f001 ff4d 	bl	80085f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800675e:	f3ef 8211 	mrs	r2, BASEPRI
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	61fa      	str	r2, [r7, #28]
 8006774:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006776:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <xQueueGenericSendFromISR+0xbc>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d12f      	bne.n	80067ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067a2:	f000 f911 	bl	80069c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ae:	d112      	bne.n	80067d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d016      	beq.n	80067e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	3324      	adds	r3, #36	; 0x24
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff1b 	bl	80075f8 <xTaskRemoveFromEventList>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00e      	beq.n	80067e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e007      	b.n	80067e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067da:	3301      	adds	r3, #1
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	b25a      	sxtb	r2, r3
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067e6:	2301      	movs	r3, #1
 80067e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80067ea:	e001      	b.n	80067f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3740      	adds	r7, #64	; 0x40
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08c      	sub	sp, #48	; 0x30
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006814:	2300      	movs	r3, #0
 8006816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <xQueueReceive+0x30>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	623b      	str	r3, [r7, #32]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <xQueueReceive+0x3e>
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <xQueueReceive+0x42>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueReceive+0x44>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xQueueReceive+0x5e>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	61fb      	str	r3, [r7, #28]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006866:	f001 f889 	bl	800797c <xTaskGetSchedulerState>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <xQueueReceive+0x6e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <xQueueReceive+0x72>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueReceive+0x74>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xQueueReceive+0x8e>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61bb      	str	r3, [r7, #24]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006896:	f001 fdcd 	bl	8008434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d01f      	beq.n	80068e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068aa:	f000 f8f7 	bl	8006a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00f      	beq.n	80068de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	3310      	adds	r3, #16
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fe98 	bl	80075f8 <xTaskRemoveFromEventList>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068ce:	4b3d      	ldr	r3, [pc, #244]	; (80069c4 <xQueueReceive+0x1bc>)
 80068d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068de:	f001 fdd9 	bl	8008494 <vPortExitCritical>
				return pdPASS;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e069      	b.n	80069ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d103      	bne.n	80068f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068ec:	f001 fdd2 	bl	8008494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e062      	b.n	80069ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068fa:	f107 0310 	add.w	r3, r7, #16
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fede 	bl	80076c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006908:	f001 fdc4 	bl	8008494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800690c:	f000 fc2e 	bl	800716c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006910:	f001 fd90 	bl	8008434 <vPortEnterCritical>
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800691a:	b25b      	sxtb	r3, r3
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006920:	d103      	bne.n	800692a <xQueueReceive+0x122>
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006930:	b25b      	sxtb	r3, r3
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006936:	d103      	bne.n	8006940 <xQueueReceive+0x138>
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006940:	f001 fda8 	bl	8008494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006944:	1d3a      	adds	r2, r7, #4
 8006946:	f107 0310 	add.w	r3, r7, #16
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fecd 	bl	80076ec <xTaskCheckForTimeOut>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d123      	bne.n	80069a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800695a:	f000 f917 	bl	8006b8c <prvIsQueueEmpty>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d017      	beq.n	8006994 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	3324      	adds	r3, #36	; 0x24
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fdf3 	bl	8007558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006974:	f000 f8b8 	bl	8006ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006978:	f000 fc06 	bl	8007188 <xTaskResumeAll>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d189      	bne.n	8006896 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <xQueueReceive+0x1bc>)
 8006984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	e780      	b.n	8006896 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006996:	f000 f8a7 	bl	8006ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800699a:	f000 fbf5 	bl	8007188 <xTaskResumeAll>
 800699e:	e77a      	b.n	8006896 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a2:	f000 f8a1 	bl	8006ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069a6:	f000 fbef 	bl	8007188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ac:	f000 f8ee 	bl	8006b8c <prvIsQueueEmpty>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f43f af6f 	beq.w	8006896 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3730      	adds	r7, #48	; 0x30
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10d      	bne.n	8006a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d14d      	bne.n	8006a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 ffe0 	bl	80079b8 <xTaskPriorityDisinherit>
 80069f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	609a      	str	r2, [r3, #8]
 8006a00:	e043      	b.n	8006a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d119      	bne.n	8006a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6858      	ldr	r0, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	461a      	mov	r2, r3
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	f002 f840 	bl	8008a98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	441a      	add	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d32b      	bcc.n	8006a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	e026      	b.n	8006a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68d8      	ldr	r0, [r3, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	461a      	mov	r2, r3
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	f002 f826 	bl	8008a98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	425b      	negs	r3, r3
 8006a56:	441a      	add	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d207      	bcs.n	8006a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	425b      	negs	r3, r3
 8006a72:	441a      	add	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d105      	bne.n	8006a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a92:	697b      	ldr	r3, [r7, #20]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d018      	beq.n	8006ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	441a      	add	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d303      	bcc.n	8006ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68d9      	ldr	r1, [r3, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6838      	ldr	r0, [r7, #0]
 8006adc:	f001 ffdc 	bl	8008a98 <memcpy>
	}
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006af0:	f001 fca0 	bl	8008434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006afc:	e011      	b.n	8006b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d012      	beq.n	8006b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3324      	adds	r3, #36	; 0x24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fd74 	bl	80075f8 <xTaskRemoveFromEventList>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b16:	f000 fe4b 	bl	80077b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	dce9      	bgt.n	8006afe <prvUnlockQueue+0x16>
 8006b2a:	e000      	b.n	8006b2e <prvUnlockQueue+0x46>
					break;
 8006b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	22ff      	movs	r2, #255	; 0xff
 8006b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b36:	f001 fcad 	bl	8008494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b3a:	f001 fc7b 	bl	8008434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b46:	e011      	b.n	8006b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d012      	beq.n	8006b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3310      	adds	r3, #16
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fd4f 	bl	80075f8 <xTaskRemoveFromEventList>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b60:	f000 fe26 	bl	80077b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dce9      	bgt.n	8006b48 <prvUnlockQueue+0x60>
 8006b74:	e000      	b.n	8006b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	22ff      	movs	r2, #255	; 0xff
 8006b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b80:	f001 fc88 	bl	8008494 <vPortExitCritical>
}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b94:	f001 fc4e 	bl	8008434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e001      	b.n	8006baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006baa:	f001 fc73 	bl	8008494 <vPortExitCritical>

	return xReturn;
 8006bae:	68fb      	ldr	r3, [r7, #12]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bc0:	f001 fc38 	bl	8008434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d102      	bne.n	8006bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e001      	b.n	8006bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bda:	f001 fc5b 	bl	8008494 <vPortExitCritical>

	return xReturn;
 8006bde:	68fb      	ldr	r3, [r7, #12]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e014      	b.n	8006c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006bf8:	4a0f      	ldr	r2, [pc, #60]	; (8006c38 <vQueueAddToRegistry+0x50>)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c04:	490c      	ldr	r1, [pc, #48]	; (8006c38 <vQueueAddToRegistry+0x50>)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <vQueueAddToRegistry+0x50>)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4413      	add	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c1a:	e006      	b.n	8006c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b07      	cmp	r3, #7
 8006c26:	d9e7      	bls.n	8006bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000a54 	.word	0x20000a54

08006c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c4c:	f001 fbf2 	bl	8008434 <vPortEnterCritical>
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c56:	b25b      	sxtb	r3, r3
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c5c:	d103      	bne.n	8006c66 <vQueueWaitForMessageRestricted+0x2a>
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c6c:	b25b      	sxtb	r3, r3
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c72:	d103      	bne.n	8006c7c <vQueueWaitForMessageRestricted+0x40>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c7c:	f001 fc0a 	bl	8008494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	3324      	adds	r3, #36	; 0x24
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fc85 	bl	80075a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c96:	6978      	ldr	r0, [r7, #20]
 8006c98:	f7ff ff26 	bl	8006ae8 <prvUnlockQueue>
	}
 8006c9c:	bf00      	nop
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	; 0x38
 8006ca8:	af04      	add	r7, sp, #16
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	623b      	str	r3, [r7, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <xTaskCreateStatic+0x46>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	61fb      	str	r3, [r7, #28]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cea:	23c4      	movs	r3, #196	; 0xc4
 8006cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2bc4      	cmp	r3, #196	; 0xc4
 8006cf2:	d00a      	beq.n	8006d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	61bb      	str	r3, [r7, #24]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01e      	beq.n	8006d50 <xTaskCreateStatic+0xac>
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01b      	beq.n	8006d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	9302      	str	r3, [sp, #8]
 8006d32:	f107 0314 	add.w	r3, r7, #20
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 f850 	bl	8006de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d4a:	f000 f8f9 	bl	8006f40 <prvAddNewTaskToReadyList>
 8006d4e:	e001      	b.n	8006d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d54:	697b      	ldr	r3, [r7, #20]
	}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3728      	adds	r7, #40	; 0x28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b08c      	sub	sp, #48	; 0x30
 8006d62:	af04      	add	r7, sp, #16
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	603b      	str	r3, [r7, #0]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 fc80 	bl	8008678 <pvPortMalloc>
 8006d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00e      	beq.n	8006d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d80:	20c4      	movs	r0, #196	; 0xc4
 8006d82:	f001 fc79 	bl	8008678 <pvPortMalloc>
 8006d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30
 8006d94:	e005      	b.n	8006da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d96:	6978      	ldr	r0, [r7, #20]
 8006d98:	f001 fd3a 	bl	8008810 <vPortFree>
 8006d9c:	e001      	b.n	8006da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d017      	beq.n	8006dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006db0:	88fa      	ldrh	r2, [r7, #6]
 8006db2:	2300      	movs	r3, #0
 8006db4:	9303      	str	r3, [sp, #12]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	9302      	str	r3, [sp, #8]
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 f80e 	bl	8006de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dcc:	69f8      	ldr	r0, [r7, #28]
 8006dce:	f000 f8b7 	bl	8006f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	e002      	b.n	8006dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dde:	69bb      	ldr	r3, [r7, #24]
	}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3720      	adds	r7, #32
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	461a      	mov	r2, r3
 8006e00:	21a5      	movs	r1, #165	; 0xa5
 8006e02:	f001 fe57 	bl	8008ab4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e10:	3b01      	subs	r3, #1
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	617b      	str	r3, [r7, #20]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01f      	beq.n	8006e8c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	e012      	b.n	8006e78 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	7819      	ldrb	r1, [r3, #0]
 8006e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	3334      	adds	r3, #52	; 0x34
 8006e62:	460a      	mov	r2, r1
 8006e64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d006      	beq.n	8006e80 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	61fb      	str	r3, [r7, #28]
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	d9e9      	bls.n	8006e52 <prvInitialiseNewTask+0x6a>
 8006e7e:	e000      	b.n	8006e82 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006e80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e8a:	e003      	b.n	8006e94 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	2b37      	cmp	r3, #55	; 0x37
 8006e98:	d901      	bls.n	8006e9e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e9a:	2337      	movs	r3, #55	; 0x37
 8006e9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	2200      	movs	r2, #0
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff f975 	bl	80061a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	3318      	adds	r3, #24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff f970 	bl	80061a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	2200      	movs	r2, #0
 8006ede:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	335c      	adds	r3, #92	; 0x5c
 8006ef4:	2260      	movs	r2, #96	; 0x60
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 fddb 	bl	8008ab4 <memset>
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	4a0c      	ldr	r2, [pc, #48]	; (8006f34 <prvInitialiseNewTask+0x14c>)
 8006f02:	661a      	str	r2, [r3, #96]	; 0x60
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <prvInitialiseNewTask+0x150>)
 8006f08:	665a      	str	r2, [r3, #100]	; 0x64
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	4a0b      	ldr	r2, [pc, #44]	; (8006f3c <prvInitialiseNewTask+0x154>)
 8006f0e:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	69b8      	ldr	r0, [r7, #24]
 8006f16:	f001 f95f 	bl	80081d8 <pxPortInitialiseStack>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f2c:	bf00      	nop
 8006f2e:	3720      	adds	r7, #32
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	08008d6c 	.word	0x08008d6c
 8006f38:	08008d8c 	.word	0x08008d8c
 8006f3c:	08008d4c 	.word	0x08008d4c

08006f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f48:	f001 fa74 	bl	8008434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f4c:	4b2d      	ldr	r3, [pc, #180]	; (8007004 <prvAddNewTaskToReadyList+0xc4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	4a2c      	ldr	r2, [pc, #176]	; (8007004 <prvAddNewTaskToReadyList+0xc4>)
 8006f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f56:	4b2c      	ldr	r3, [pc, #176]	; (8007008 <prvAddNewTaskToReadyList+0xc8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	; (8007008 <prvAddNewTaskToReadyList+0xc8>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f64:	4b27      	ldr	r3, [pc, #156]	; (8007004 <prvAddNewTaskToReadyList+0xc4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d110      	bne.n	8006f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f6c:	f000 fc44 	bl	80077f8 <prvInitialiseTaskLists>
 8006f70:	e00d      	b.n	8006f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f72:	4b26      	ldr	r3, [pc, #152]	; (800700c <prvAddNewTaskToReadyList+0xcc>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f7a:	4b23      	ldr	r3, [pc, #140]	; (8007008 <prvAddNewTaskToReadyList+0xc8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d802      	bhi.n	8006f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f88:	4a1f      	ldr	r2, [pc, #124]	; (8007008 <prvAddNewTaskToReadyList+0xc8>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f8e:	4b20      	ldr	r3, [pc, #128]	; (8007010 <prvAddNewTaskToReadyList+0xd0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	4a1e      	ldr	r2, [pc, #120]	; (8007010 <prvAddNewTaskToReadyList+0xd0>)
 8006f96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f98:	4b1d      	ldr	r3, [pc, #116]	; (8007010 <prvAddNewTaskToReadyList+0xd0>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	4b1b      	ldr	r3, [pc, #108]	; (8007014 <prvAddNewTaskToReadyList+0xd4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d903      	bls.n	8006fb4 <prvAddNewTaskToReadyList+0x74>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	4a18      	ldr	r2, [pc, #96]	; (8007014 <prvAddNewTaskToReadyList+0xd4>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4a15      	ldr	r2, [pc, #84]	; (8007018 <prvAddNewTaskToReadyList+0xd8>)
 8006fc2:	441a      	add	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7ff f8f7 	bl	80061be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fd0:	f001 fa60 	bl	8008494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fd4:	4b0d      	ldr	r3, [pc, #52]	; (800700c <prvAddNewTaskToReadyList+0xcc>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00e      	beq.n	8006ffa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <prvAddNewTaskToReadyList+0xc8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d207      	bcs.n	8006ffa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fea:	4b0c      	ldr	r3, [pc, #48]	; (800701c <prvAddNewTaskToReadyList+0xdc>)
 8006fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000f68 	.word	0x20000f68
 8007008:	20000a94 	.word	0x20000a94
 800700c:	20000f74 	.word	0x20000f74
 8007010:	20000f84 	.word	0x20000f84
 8007014:	20000f70 	.word	0x20000f70
 8007018:	20000a98 	.word	0x20000a98
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d017      	beq.n	8007062 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007032:	4b13      	ldr	r3, [pc, #76]	; (8007080 <vTaskDelay+0x60>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <vTaskDelay+0x30>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	60bb      	str	r3, [r7, #8]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007050:	f000 f88c 	bl	800716c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007054:	2100      	movs	r1, #0
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fd1c 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800705c:	f000 f894 	bl	8007188 <xTaskResumeAll>
 8007060:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d107      	bne.n	8007078 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <vTaskDelay+0x64>)
 800706a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000f90 	.word	0x20000f90
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	; 0x28
 800708c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007096:	463a      	mov	r2, r7
 8007098:	1d39      	adds	r1, r7, #4
 800709a:	f107 0308 	add.w	r3, r7, #8
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff f82c 	bl	80060fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	9202      	str	r2, [sp, #8]
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	2300      	movs	r3, #0
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	2300      	movs	r3, #0
 80070b4:	460a      	mov	r2, r1
 80070b6:	4925      	ldr	r1, [pc, #148]	; (800714c <vTaskStartScheduler+0xc4>)
 80070b8:	4825      	ldr	r0, [pc, #148]	; (8007150 <vTaskStartScheduler+0xc8>)
 80070ba:	f7ff fdf3 	bl	8006ca4 <xTaskCreateStatic>
 80070be:	4603      	mov	r3, r0
 80070c0:	4a24      	ldr	r2, [pc, #144]	; (8007154 <vTaskStartScheduler+0xcc>)
 80070c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070c4:	4b23      	ldr	r3, [pc, #140]	; (8007154 <vTaskStartScheduler+0xcc>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070cc:	2301      	movs	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e001      	b.n	80070d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d102      	bne.n	80070e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80070dc:	f000 fd2e 	bl	8007b3c <xTimerCreateTimerTask>
 80070e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d11d      	bne.n	8007124 <vTaskStartScheduler+0x9c>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	613b      	str	r3, [r7, #16]
}
 80070fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070fc:	4b16      	ldr	r3, [pc, #88]	; (8007158 <vTaskStartScheduler+0xd0>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	335c      	adds	r3, #92	; 0x5c
 8007102:	4a16      	ldr	r2, [pc, #88]	; (800715c <vTaskStartScheduler+0xd4>)
 8007104:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007106:	4b16      	ldr	r3, [pc, #88]	; (8007160 <vTaskStartScheduler+0xd8>)
 8007108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800710c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800710e:	4b15      	ldr	r3, [pc, #84]	; (8007164 <vTaskStartScheduler+0xdc>)
 8007110:	2201      	movs	r2, #1
 8007112:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007114:	4b14      	ldr	r3, [pc, #80]	; (8007168 <vTaskStartScheduler+0xe0>)
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800711a:	f7f9 fab3 	bl	8000684 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800711e:	f001 f8e7 	bl	80082f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007122:	e00e      	b.n	8007142 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712a:	d10a      	bne.n	8007142 <vTaskStartScheduler+0xba>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60fb      	str	r3, [r7, #12]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <vTaskStartScheduler+0xb8>
}
 8007142:	bf00      	nop
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	08008c7c 	.word	0x08008c7c
 8007150:	080077c9 	.word	0x080077c9
 8007154:	20000f8c 	.word	0x20000f8c
 8007158:	20000a94 	.word	0x20000a94
 800715c:	20000010 	.word	0x20000010
 8007160:	20000f88 	.word	0x20000f88
 8007164:	20000f74 	.word	0x20000f74
 8007168:	20000f6c 	.word	0x20000f6c

0800716c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <vTaskSuspendAll+0x18>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	4a03      	ldr	r2, [pc, #12]	; (8007184 <vTaskSuspendAll+0x18>)
 8007178:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800717a:	bf00      	nop
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000f90 	.word	0x20000f90

08007188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007192:	2300      	movs	r3, #0
 8007194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007196:	4b42      	ldr	r3, [pc, #264]	; (80072a0 <xTaskResumeAll+0x118>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	603b      	str	r3, [r7, #0]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071b4:	f001 f93e 	bl	8008434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071b8:	4b39      	ldr	r3, [pc, #228]	; (80072a0 <xTaskResumeAll+0x118>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3b01      	subs	r3, #1
 80071be:	4a38      	ldr	r2, [pc, #224]	; (80072a0 <xTaskResumeAll+0x118>)
 80071c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c2:	4b37      	ldr	r3, [pc, #220]	; (80072a0 <xTaskResumeAll+0x118>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d162      	bne.n	8007290 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071ca:	4b36      	ldr	r3, [pc, #216]	; (80072a4 <xTaskResumeAll+0x11c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d05e      	beq.n	8007290 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071d2:	e02f      	b.n	8007234 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d4:	4b34      	ldr	r3, [pc, #208]	; (80072a8 <xTaskResumeAll+0x120>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3318      	adds	r3, #24
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff f849 	bl	8006278 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff f844 	bl	8006278 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	4b2d      	ldr	r3, [pc, #180]	; (80072ac <xTaskResumeAll+0x124>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d903      	bls.n	8007204 <xTaskResumeAll+0x7c>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a2a      	ldr	r2, [pc, #168]	; (80072ac <xTaskResumeAll+0x124>)
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4a27      	ldr	r2, [pc, #156]	; (80072b0 <xTaskResumeAll+0x128>)
 8007212:	441a      	add	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f7fe ffcf 	bl	80061be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007224:	4b23      	ldr	r3, [pc, #140]	; (80072b4 <xTaskResumeAll+0x12c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	429a      	cmp	r2, r3
 800722c:	d302      	bcc.n	8007234 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800722e:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <xTaskResumeAll+0x130>)
 8007230:	2201      	movs	r2, #1
 8007232:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007234:	4b1c      	ldr	r3, [pc, #112]	; (80072a8 <xTaskResumeAll+0x120>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1cb      	bne.n	80071d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007242:	f000 fb7b 	bl	800793c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007246:	4b1d      	ldr	r3, [pc, #116]	; (80072bc <xTaskResumeAll+0x134>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d010      	beq.n	8007274 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007252:	f000 f847 	bl	80072e4 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800725c:	4b16      	ldr	r3, [pc, #88]	; (80072b8 <xTaskResumeAll+0x130>)
 800725e:	2201      	movs	r2, #1
 8007260:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3b01      	subs	r3, #1
 8007266:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f1      	bne.n	8007252 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800726e:	4b13      	ldr	r3, [pc, #76]	; (80072bc <xTaskResumeAll+0x134>)
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007274:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <xTaskResumeAll+0x130>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007280:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <xTaskResumeAll+0x138>)
 8007282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007290:	f001 f900 	bl	8008494 <vPortExitCritical>

	return xAlreadyYielded;
 8007294:	68bb      	ldr	r3, [r7, #8]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000f90 	.word	0x20000f90
 80072a4:	20000f68 	.word	0x20000f68
 80072a8:	20000f28 	.word	0x20000f28
 80072ac:	20000f70 	.word	0x20000f70
 80072b0:	20000a98 	.word	0x20000a98
 80072b4:	20000a94 	.word	0x20000a94
 80072b8:	20000f7c 	.word	0x20000f7c
 80072bc:	20000f78 	.word	0x20000f78
 80072c0:	e000ed04 	.word	0xe000ed04

080072c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072ca:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <xTaskGetTickCount+0x1c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072d0:	687b      	ldr	r3, [r7, #4]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000f6c 	.word	0x20000f6c

080072e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ee:	4b4f      	ldr	r3, [pc, #316]	; (800742c <xTaskIncrementTick+0x148>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 808f 	bne.w	8007416 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072f8:	4b4d      	ldr	r3, [pc, #308]	; (8007430 <xTaskIncrementTick+0x14c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3301      	adds	r3, #1
 80072fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007300:	4a4b      	ldr	r2, [pc, #300]	; (8007430 <xTaskIncrementTick+0x14c>)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d120      	bne.n	800734e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800730c:	4b49      	ldr	r3, [pc, #292]	; (8007434 <xTaskIncrementTick+0x150>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <xTaskIncrementTick+0x48>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	603b      	str	r3, [r7, #0]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <xTaskIncrementTick+0x46>
 800732c:	4b41      	ldr	r3, [pc, #260]	; (8007434 <xTaskIncrementTick+0x150>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	4b41      	ldr	r3, [pc, #260]	; (8007438 <xTaskIncrementTick+0x154>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a3f      	ldr	r2, [pc, #252]	; (8007434 <xTaskIncrementTick+0x150>)
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	4a3f      	ldr	r2, [pc, #252]	; (8007438 <xTaskIncrementTick+0x154>)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	4b3e      	ldr	r3, [pc, #248]	; (800743c <xTaskIncrementTick+0x158>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	4a3d      	ldr	r2, [pc, #244]	; (800743c <xTaskIncrementTick+0x158>)
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	f000 faf7 	bl	800793c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800734e:	4b3c      	ldr	r3, [pc, #240]	; (8007440 <xTaskIncrementTick+0x15c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	429a      	cmp	r2, r3
 8007356:	d349      	bcc.n	80073ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007358:	4b36      	ldr	r3, [pc, #216]	; (8007434 <xTaskIncrementTick+0x150>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d104      	bne.n	800736c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007362:	4b37      	ldr	r3, [pc, #220]	; (8007440 <xTaskIncrementTick+0x15c>)
 8007364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007368:	601a      	str	r2, [r3, #0]
					break;
 800736a:	e03f      	b.n	80073ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736c:	4b31      	ldr	r3, [pc, #196]	; (8007434 <xTaskIncrementTick+0x150>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d203      	bcs.n	800738c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007384:	4a2e      	ldr	r2, [pc, #184]	; (8007440 <xTaskIncrementTick+0x15c>)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800738a:	e02f      	b.n	80073ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	3304      	adds	r3, #4
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe ff71 	bl	8006278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	3318      	adds	r3, #24
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe ff68 	bl	8006278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	4b25      	ldr	r3, [pc, #148]	; (8007444 <xTaskIncrementTick+0x160>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <xTaskIncrementTick+0xd8>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	4a22      	ldr	r2, [pc, #136]	; (8007444 <xTaskIncrementTick+0x160>)
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4a1f      	ldr	r2, [pc, #124]	; (8007448 <xTaskIncrementTick+0x164>)
 80073ca:	441a      	add	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	3304      	adds	r3, #4
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f7fe fef3 	bl	80061be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	4b1b      	ldr	r3, [pc, #108]	; (800744c <xTaskIncrementTick+0x168>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d3b8      	bcc.n	8007358 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80073e6:	2301      	movs	r3, #1
 80073e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ea:	e7b5      	b.n	8007358 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073ec:	4b17      	ldr	r3, [pc, #92]	; (800744c <xTaskIncrementTick+0x168>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f2:	4915      	ldr	r1, [pc, #84]	; (8007448 <xTaskIncrementTick+0x164>)
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d901      	bls.n	8007408 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007404:	2301      	movs	r3, #1
 8007406:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007408:	4b11      	ldr	r3, [pc, #68]	; (8007450 <xTaskIncrementTick+0x16c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007410:	2301      	movs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e004      	b.n	8007420 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <xTaskIncrementTick+0x170>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	4a0d      	ldr	r2, [pc, #52]	; (8007454 <xTaskIncrementTick+0x170>)
 800741e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007420:	697b      	ldr	r3, [r7, #20]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000f90 	.word	0x20000f90
 8007430:	20000f6c 	.word	0x20000f6c
 8007434:	20000f20 	.word	0x20000f20
 8007438:	20000f24 	.word	0x20000f24
 800743c:	20000f80 	.word	0x20000f80
 8007440:	20000f88 	.word	0x20000f88
 8007444:	20000f70 	.word	0x20000f70
 8007448:	20000a98 	.word	0x20000a98
 800744c:	20000a94 	.word	0x20000a94
 8007450:	20000f7c 	.word	0x20000f7c
 8007454:	20000f78 	.word	0x20000f78

08007458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800745e:	4b36      	ldr	r3, [pc, #216]	; (8007538 <vTaskSwitchContext+0xe0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007466:	4b35      	ldr	r3, [pc, #212]	; (800753c <vTaskSwitchContext+0xe4>)
 8007468:	2201      	movs	r2, #1
 800746a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800746c:	e05f      	b.n	800752e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800746e:	4b33      	ldr	r3, [pc, #204]	; (800753c <vTaskSwitchContext+0xe4>)
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007474:	f7f9 f90d 	bl	8000692 <getRunTimeCounterValue>
 8007478:	4603      	mov	r3, r0
 800747a:	4a31      	ldr	r2, [pc, #196]	; (8007540 <vTaskSwitchContext+0xe8>)
 800747c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800747e:	4b30      	ldr	r3, [pc, #192]	; (8007540 <vTaskSwitchContext+0xe8>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b30      	ldr	r3, [pc, #192]	; (8007544 <vTaskSwitchContext+0xec>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d909      	bls.n	800749e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800748a:	4b2f      	ldr	r3, [pc, #188]	; (8007548 <vTaskSwitchContext+0xf0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007490:	4a2b      	ldr	r2, [pc, #172]	; (8007540 <vTaskSwitchContext+0xe8>)
 8007492:	6810      	ldr	r0, [r2, #0]
 8007494:	4a2b      	ldr	r2, [pc, #172]	; (8007544 <vTaskSwitchContext+0xec>)
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	1a82      	subs	r2, r0, r2
 800749a:	440a      	add	r2, r1
 800749c:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800749e:	4b28      	ldr	r3, [pc, #160]	; (8007540 <vTaskSwitchContext+0xe8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a28      	ldr	r2, [pc, #160]	; (8007544 <vTaskSwitchContext+0xec>)
 80074a4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a6:	4b29      	ldr	r3, [pc, #164]	; (800754c <vTaskSwitchContext+0xf4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e010      	b.n	80074d0 <vTaskSwitchContext+0x78>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <vTaskSwitchContext+0x72>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	607b      	str	r3, [r7, #4]
}
 80074c6:	bf00      	nop
 80074c8:	e7fe      	b.n	80074c8 <vTaskSwitchContext+0x70>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	491f      	ldr	r1, [pc, #124]	; (8007550 <vTaskSwitchContext+0xf8>)
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0e4      	beq.n	80074ae <vTaskSwitchContext+0x56>
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4a18      	ldr	r2, [pc, #96]	; (8007550 <vTaskSwitchContext+0xf8>)
 80074f0:	4413      	add	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	3308      	adds	r3, #8
 8007506:	429a      	cmp	r2, r3
 8007508:	d104      	bne.n	8007514 <vTaskSwitchContext+0xbc>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	605a      	str	r2, [r3, #4]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	4a0b      	ldr	r2, [pc, #44]	; (8007548 <vTaskSwitchContext+0xf0>)
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	4a0b      	ldr	r2, [pc, #44]	; (800754c <vTaskSwitchContext+0xf4>)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007524:	4b08      	ldr	r3, [pc, #32]	; (8007548 <vTaskSwitchContext+0xf0>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	335c      	adds	r3, #92	; 0x5c
 800752a:	4a0a      	ldr	r2, [pc, #40]	; (8007554 <vTaskSwitchContext+0xfc>)
 800752c:	6013      	str	r3, [r2, #0]
}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000f90 	.word	0x20000f90
 800753c:	20000f7c 	.word	0x20000f7c
 8007540:	20000f98 	.word	0x20000f98
 8007544:	20000f94 	.word	0x20000f94
 8007548:	20000a94 	.word	0x20000a94
 800754c:	20000f70 	.word	0x20000f70
 8007550:	20000a98 	.word	0x20000a98
 8007554:	20000010 	.word	0x20000010

08007558 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	60fb      	str	r3, [r7, #12]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800757e:	4b07      	ldr	r3, [pc, #28]	; (800759c <vTaskPlaceOnEventList+0x44>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3318      	adds	r3, #24
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fe fe3d 	bl	8006206 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800758c:	2101      	movs	r1, #1
 800758e:	6838      	ldr	r0, [r7, #0]
 8007590:	f000 fa80 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20000a94 	.word	0x20000a94

080075a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	617b      	str	r3, [r7, #20]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075c8:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3318      	adds	r3, #24
 80075ce:	4619      	mov	r1, r3
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7fe fdf4 	bl	80061be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	68b8      	ldr	r0, [r7, #8]
 80075e6:	f000 fa55 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
	}
 80075ea:	bf00      	nop
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000a94 	.word	0x20000a94

080075f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60fb      	str	r3, [r7, #12]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3318      	adds	r3, #24
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fe25 	bl	8006278 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800762e:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <xTaskRemoveFromEventList+0xb0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d11d      	bne.n	8007672 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fe1c 	bl	8006278 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <xTaskRemoveFromEventList+0xb4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d903      	bls.n	8007654 <xTaskRemoveFromEventList+0x5c>
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	4a16      	ldr	r2, [pc, #88]	; (80076ac <xTaskRemoveFromEventList+0xb4>)
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <xTaskRemoveFromEventList+0xb8>)
 8007662:	441a      	add	r2, r3
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	3304      	adds	r3, #4
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f7fe fda7 	bl	80061be <vListInsertEnd>
 8007670:	e005      	b.n	800767e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	3318      	adds	r3, #24
 8007676:	4619      	mov	r1, r3
 8007678:	480e      	ldr	r0, [pc, #56]	; (80076b4 <xTaskRemoveFromEventList+0xbc>)
 800767a:	f7fe fda0 	bl	80061be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <xTaskRemoveFromEventList+0xc0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	429a      	cmp	r2, r3
 800768a:	d905      	bls.n	8007698 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <xTaskRemoveFromEventList+0xc4>)
 8007692:	2201      	movs	r2, #1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e001      	b.n	800769c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800769c:	697b      	ldr	r3, [r7, #20]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000f90 	.word	0x20000f90
 80076ac:	20000f70 	.word	0x20000f70
 80076b0:	20000a98 	.word	0x20000a98
 80076b4:	20000f28 	.word	0x20000f28
 80076b8:	20000a94 	.word	0x20000a94
 80076bc:	20000f7c 	.word	0x20000f7c

080076c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <vTaskInternalSetTimeOutState+0x24>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <vTaskInternalSetTimeOutState+0x28>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	605a      	str	r2, [r3, #4]
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	20000f80 	.word	0x20000f80
 80076e8:	20000f6c 	.word	0x20000f6c

080076ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	613b      	str	r3, [r7, #16]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	60fb      	str	r3, [r7, #12]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800772e:	f000 fe81 	bl	8008434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007732:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <xTaskCheckForTimeOut+0xbc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800774a:	d102      	bne.n	8007752 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	e023      	b.n	800779a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b15      	ldr	r3, [pc, #84]	; (80077ac <xTaskCheckForTimeOut+0xc0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d007      	beq.n	800776e <xTaskCheckForTimeOut+0x82>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	429a      	cmp	r2, r3
 8007766:	d302      	bcc.n	800776e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	e015      	b.n	800779a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	429a      	cmp	r2, r3
 8007776:	d20b      	bcs.n	8007790 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff ff9b 	bl	80076c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	e004      	b.n	800779a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007796:	2301      	movs	r3, #1
 8007798:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800779a:	f000 fe7b 	bl	8008494 <vPortExitCritical>

	return xReturn;
 800779e:	69fb      	ldr	r3, [r7, #28]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000f6c 	.word	0x20000f6c
 80077ac:	20000f80 	.word	0x20000f80

080077b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077b4:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <vTaskMissedYield+0x14>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
}
 80077ba:	bf00      	nop
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	20000f7c 	.word	0x20000f7c

080077c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077d0:	f000 f852 	bl	8007878 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077d4:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <prvIdleTask+0x28>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d9f9      	bls.n	80077d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077dc:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <prvIdleTask+0x2c>)
 80077de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077ec:	e7f0      	b.n	80077d0 <prvIdleTask+0x8>
 80077ee:	bf00      	nop
 80077f0:	20000a98 	.word	0x20000a98
 80077f4:	e000ed04 	.word	0xe000ed04

080077f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]
 8007802:	e00c      	b.n	800781e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4a12      	ldr	r2, [pc, #72]	; (8007858 <prvInitialiseTaskLists+0x60>)
 8007810:	4413      	add	r3, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fca6 	bl	8006164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3301      	adds	r3, #1
 800781c:	607b      	str	r3, [r7, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b37      	cmp	r3, #55	; 0x37
 8007822:	d9ef      	bls.n	8007804 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007824:	480d      	ldr	r0, [pc, #52]	; (800785c <prvInitialiseTaskLists+0x64>)
 8007826:	f7fe fc9d 	bl	8006164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800782a:	480d      	ldr	r0, [pc, #52]	; (8007860 <prvInitialiseTaskLists+0x68>)
 800782c:	f7fe fc9a 	bl	8006164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007830:	480c      	ldr	r0, [pc, #48]	; (8007864 <prvInitialiseTaskLists+0x6c>)
 8007832:	f7fe fc97 	bl	8006164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007836:	480c      	ldr	r0, [pc, #48]	; (8007868 <prvInitialiseTaskLists+0x70>)
 8007838:	f7fe fc94 	bl	8006164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800783c:	480b      	ldr	r0, [pc, #44]	; (800786c <prvInitialiseTaskLists+0x74>)
 800783e:	f7fe fc91 	bl	8006164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007842:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <prvInitialiseTaskLists+0x78>)
 8007844:	4a05      	ldr	r2, [pc, #20]	; (800785c <prvInitialiseTaskLists+0x64>)
 8007846:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <prvInitialiseTaskLists+0x7c>)
 800784a:	4a05      	ldr	r2, [pc, #20]	; (8007860 <prvInitialiseTaskLists+0x68>)
 800784c:	601a      	str	r2, [r3, #0]
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000a98 	.word	0x20000a98
 800785c:	20000ef8 	.word	0x20000ef8
 8007860:	20000f0c 	.word	0x20000f0c
 8007864:	20000f28 	.word	0x20000f28
 8007868:	20000f3c 	.word	0x20000f3c
 800786c:	20000f54 	.word	0x20000f54
 8007870:	20000f20 	.word	0x20000f20
 8007874:	20000f24 	.word	0x20000f24

08007878 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800787e:	e019      	b.n	80078b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007880:	f000 fdd8 	bl	8008434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <prvCheckTasksWaitingTermination+0x50>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3304      	adds	r3, #4
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe fcf1 	bl	8006278 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007896:	4b0d      	ldr	r3, [pc, #52]	; (80078cc <prvCheckTasksWaitingTermination+0x54>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3b01      	subs	r3, #1
 800789c:	4a0b      	ldr	r2, [pc, #44]	; (80078cc <prvCheckTasksWaitingTermination+0x54>)
 800789e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078a0:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <prvCheckTasksWaitingTermination+0x58>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	4a0a      	ldr	r2, [pc, #40]	; (80078d0 <prvCheckTasksWaitingTermination+0x58>)
 80078a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078aa:	f000 fdf3 	bl	8008494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f810 	bl	80078d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <prvCheckTasksWaitingTermination+0x58>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e1      	bne.n	8007880 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000f3c 	.word	0x20000f3c
 80078cc:	20000f68 	.word	0x20000f68
 80078d0:	20000f50 	.word	0x20000f50

080078d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	335c      	adds	r3, #92	; 0x5c
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 f8fd 	bl	8008ae0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d108      	bne.n	8007902 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 ff8b 	bl	8008810 <vPortFree>
				vPortFree( pxTCB );
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 ff88 	bl	8008810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007900:	e018      	b.n	8007934 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007908:	2b01      	cmp	r3, #1
 800790a:	d103      	bne.n	8007914 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 ff7f 	bl	8008810 <vPortFree>
	}
 8007912:	e00f      	b.n	8007934 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800791a:	2b02      	cmp	r3, #2
 800791c:	d00a      	beq.n	8007934 <prvDeleteTCB+0x60>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	60fb      	str	r3, [r7, #12]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <prvDeleteTCB+0x5e>
	}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007942:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <prvResetNextTaskUnblockTime+0x38>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <prvResetNextTaskUnblockTime+0x3c>)
 800794e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007954:	e008      	b.n	8007968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007956:	4b07      	ldr	r3, [pc, #28]	; (8007974 <prvResetNextTaskUnblockTime+0x38>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	4a04      	ldr	r2, [pc, #16]	; (8007978 <prvResetNextTaskUnblockTime+0x3c>)
 8007966:	6013      	str	r3, [r2, #0]
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	20000f20 	.word	0x20000f20
 8007978:	20000f88 	.word	0x20000f88

0800797c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <xTaskGetSchedulerState+0x34>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800798a:	2301      	movs	r3, #1
 800798c:	607b      	str	r3, [r7, #4]
 800798e:	e008      	b.n	80079a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007990:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <xTaskGetSchedulerState+0x38>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007998:	2302      	movs	r3, #2
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	e001      	b.n	80079a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800799e:	2300      	movs	r3, #0
 80079a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079a2:	687b      	ldr	r3, [r7, #4]
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	20000f74 	.word	0x20000f74
 80079b4:	20000f90 	.word	0x20000f90

080079b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d056      	beq.n	8007a7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079ce:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <xTaskPriorityDisinherit+0xd0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d00a      	beq.n	80079ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	60fb      	str	r3, [r7, #12]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60bb      	str	r3, [r7, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a10:	1e5a      	subs	r2, r3, #1
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d02c      	beq.n	8007a7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d128      	bne.n	8007a7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fc22 	bl	8006278 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <xTaskPriorityDisinherit+0xd4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d903      	bls.n	8007a5c <xTaskPriorityDisinherit+0xa4>
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a0c      	ldr	r2, [pc, #48]	; (8007a8c <xTaskPriorityDisinherit+0xd4>)
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <xTaskPriorityDisinherit+0xd8>)
 8007a6a:	441a      	add	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7fe fba3 	bl	80061be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a7c:	697b      	ldr	r3, [r7, #20]
	}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20000a94 	.word	0x20000a94
 8007a8c:	20000f70 	.word	0x20000f70
 8007a90:	20000a98 	.word	0x20000a98

08007a94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a9e:	4b21      	ldr	r3, [pc, #132]	; (8007b24 <prvAddCurrentTaskToDelayedList+0x90>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aa4:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fbe4 	bl	8006278 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab6:	d10a      	bne.n	8007ace <prvAddCurrentTaskToDelayedList+0x3a>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007abe:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4819      	ldr	r0, [pc, #100]	; (8007b2c <prvAddCurrentTaskToDelayedList+0x98>)
 8007ac8:	f7fe fb79 	bl	80061be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007acc:	e026      	b.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d209      	bcs.n	8007afa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae6:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7fe fb87 	bl	8006206 <vListInsert>
}
 8007af8:	e010      	b.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afa:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7fe fb7d 	bl	8006206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d202      	bcs.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b16:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6013      	str	r3, [r2, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20000f6c 	.word	0x20000f6c
 8007b28:	20000a94 	.word	0x20000a94
 8007b2c:	20000f54 	.word	0x20000f54
 8007b30:	20000f24 	.word	0x20000f24
 8007b34:	20000f20 	.word	0x20000f20
 8007b38:	20000f88 	.word	0x20000f88

08007b3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	; 0x28
 8007b40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b46:	f000 fb07 	bl	8008158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b4a:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <xTimerCreateTimerTask+0x80>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d021      	beq.n	8007b96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b5a:	1d3a      	adds	r2, r7, #4
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	f107 030c 	add.w	r3, r7, #12
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe fae3 	bl	8006130 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	9202      	str	r2, [sp, #8]
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	2306      	movs	r3, #6
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	460a      	mov	r2, r1
 8007b7c:	4910      	ldr	r1, [pc, #64]	; (8007bc0 <xTimerCreateTimerTask+0x84>)
 8007b7e:	4811      	ldr	r0, [pc, #68]	; (8007bc4 <xTimerCreateTimerTask+0x88>)
 8007b80:	f7ff f890 	bl	8006ca4 <xTaskCreateStatic>
 8007b84:	4603      	mov	r3, r0
 8007b86:	4a10      	ldr	r2, [pc, #64]	; (8007bc8 <xTimerCreateTimerTask+0x8c>)
 8007b88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <xTimerCreateTimerTask+0x8c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b92:	2301      	movs	r3, #1
 8007b94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	613b      	str	r3, [r7, #16]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007bb2:	697b      	ldr	r3, [r7, #20]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000fcc 	.word	0x20000fcc
 8007bc0:	08008cac 	.word	0x08008cac
 8007bc4:	08007d01 	.word	0x08007d01
 8007bc8:	20000fd0 	.word	0x20000fd0

08007bcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10a      	bne.n	8007bfa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	623b      	str	r3, [r7, #32]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bfa:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <xTimerGenericCommand+0x98>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d02a      	beq.n	8007c58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b05      	cmp	r3, #5
 8007c12:	dc18      	bgt.n	8007c46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c14:	f7ff feb2 	bl	800797c <xTaskGetSchedulerState>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d109      	bne.n	8007c32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <xTimerGenericCommand+0x98>)
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	f107 0110 	add.w	r1, r7, #16
 8007c26:	2300      	movs	r3, #0
 8007c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c2a:	f7fe fc53 	bl	80064d4 <xQueueGenericSend>
 8007c2e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c30:	e012      	b.n	8007c58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <xTimerGenericCommand+0x98>)
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	f107 0110 	add.w	r1, r7, #16
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f7fe fc49 	bl	80064d4 <xQueueGenericSend>
 8007c42:	6278      	str	r0, [r7, #36]	; 0x24
 8007c44:	e008      	b.n	8007c58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <xTimerGenericCommand+0x98>)
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f107 0110 	add.w	r1, r7, #16
 8007c4e:	2300      	movs	r3, #0
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	f7fe fd3d 	bl	80066d0 <xQueueGenericSendFromISR>
 8007c56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3728      	adds	r7, #40	; 0x28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000fcc 	.word	0x20000fcc

08007c68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c72:	4b22      	ldr	r3, [pc, #136]	; (8007cfc <prvProcessExpiredTimer+0x94>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe faf9 	bl	8006278 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d022      	beq.n	8007cda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	18d1      	adds	r1, r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	6978      	ldr	r0, [r7, #20]
 8007ca2:	f000 f8d1 	bl	8007e48 <prvInsertTimerInActiveList>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01f      	beq.n	8007cec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cac:	2300      	movs	r3, #0
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6978      	ldr	r0, [r7, #20]
 8007cb8:	f7ff ff88 	bl	8007bcc <xTimerGenericCommand>
 8007cbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d113      	bne.n	8007cec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	60fb      	str	r3, [r7, #12]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	6978      	ldr	r0, [r7, #20]
 8007cf2:	4798      	blx	r3
}
 8007cf4:	bf00      	nop
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000fc4 	.word	0x20000fc4

08007d00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f857 	bl	8007dc0 <prvGetNextExpireTime>
 8007d12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4619      	mov	r1, r3
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f803 	bl	8007d24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d1e:	f000 f8d5 	bl	8007ecc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d22:	e7f1      	b.n	8007d08 <prvTimerTask+0x8>

08007d24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d2e:	f7ff fa1d 	bl	800716c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d32:	f107 0308 	add.w	r3, r7, #8
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 f866 	bl	8007e08 <prvSampleTimeNow>
 8007d3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d130      	bne.n	8007da6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <prvProcessTimerOrBlockTask+0x3c>
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d806      	bhi.n	8007d60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d52:	f7ff fa19 	bl	8007188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ff85 	bl	8007c68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d5e:	e024      	b.n	8007daa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d66:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <prvProcessTimerOrBlockTask+0x90>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <prvProcessTimerOrBlockTask+0x50>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <prvProcessTimerOrBlockTask+0x52>
 8007d74:	2300      	movs	r3, #0
 8007d76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d78:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <prvProcessTimerOrBlockTask+0x94>)
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	4619      	mov	r1, r3
 8007d86:	f7fe ff59 	bl	8006c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d8a:	f7ff f9fd 	bl	8007188 <xTaskResumeAll>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d94:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <prvProcessTimerOrBlockTask+0x98>)
 8007d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	f3bf 8f6f 	isb	sy
}
 8007da4:	e001      	b.n	8007daa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007da6:	f7ff f9ef 	bl	8007188 <xTaskResumeAll>
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000fc8 	.word	0x20000fc8
 8007db8:	20000fcc 	.word	0x20000fcc
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dc8:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <prvGetNextExpireTime+0x44>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <prvGetNextExpireTime+0x16>
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	e000      	b.n	8007dd8 <prvGetNextExpireTime+0x18>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007de4:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <prvGetNextExpireTime+0x44>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	e001      	b.n	8007df4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007df4:	68fb      	ldr	r3, [r7, #12]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000fc4 	.word	0x20000fc4

08007e08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e10:	f7ff fa58 	bl	80072c4 <xTaskGetTickCount>
 8007e14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <prvSampleTimeNow+0x3c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d205      	bcs.n	8007e2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e20:	f000 f936 	bl	8008090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e32:	4a04      	ldr	r2, [pc, #16]	; (8007e44 <prvSampleTimeNow+0x3c>)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e38:	68fb      	ldr	r3, [r7, #12]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000fd4 	.word	0x20000fd4

08007e48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d812      	bhi.n	8007e94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	1ad2      	subs	r2, r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d302      	bcc.n	8007e82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	e01b      	b.n	8007eba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e82:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <prvInsertTimerInActiveList+0x7c>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fe f9ba 	bl	8006206 <vListInsert>
 8007e92:	e012      	b.n	8007eba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d206      	bcs.n	8007eaa <prvInsertTimerInActiveList+0x62>
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d302      	bcc.n	8007eaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	e007      	b.n	8007eba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eaa:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <prvInsertTimerInActiveList+0x80>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	f7fe f9a6 	bl	8006206 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007eba:	697b      	ldr	r3, [r7, #20]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000fc8 	.word	0x20000fc8
 8007ec8:	20000fc4 	.word	0x20000fc4

08007ecc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08e      	sub	sp, #56	; 0x38
 8007ed0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ed2:	e0ca      	b.n	800806a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	da18      	bge.n	8007f0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	3304      	adds	r3, #4
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	61fb      	str	r3, [r7, #28]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f02:	6850      	ldr	r0, [r2, #4]
 8007f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f06:	6892      	ldr	r2, [r2, #8]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f2c0 80aa 	blt.w	8008068 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	3304      	adds	r3, #4
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe f9a7 	bl	8006278 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff ff6b 	bl	8007e08 <prvSampleTimeNow>
 8007f32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	f200 8097 	bhi.w	800806a <prvProcessReceivedCommands+0x19e>
 8007f3c:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <prvProcessReceivedCommands+0x78>)
 8007f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f42:	bf00      	nop
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f6d 	.word	0x08007f6d
 8007f50:	08007fe1 	.word	0x08007fe1
 8007f54:	08007ff5 	.word	0x08007ff5
 8007f58:	0800803f 	.word	0x0800803f
 8007f5c:	08007f6d 	.word	0x08007f6d
 8007f60:	08007f6d 	.word	0x08007f6d
 8007f64:	08007fe1 	.word	0x08007fe1
 8007f68:	08007ff5 	.word	0x08007ff5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	18d1      	adds	r1, r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8c:	f7ff ff5c 	bl	8007e48 <prvInsertTimerInActiveList>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d069      	beq.n	800806a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d05e      	beq.n	800806a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	441a      	add	r2, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fbe:	f7ff fe05 	bl	8007bcc <xTimerGenericCommand>
 8007fc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d14f      	bne.n	800806a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	61bb      	str	r3, [r7, #24]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe6:	f023 0301 	bic.w	r3, r3, #1
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007ff2:	e03a      	b.n	800806a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	617b      	str	r3, [r7, #20]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	18d1      	adds	r1, r2, r3
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008038:	f7ff ff06 	bl	8007e48 <prvInsertTimerInActiveList>
					break;
 800803c:	e015      	b.n	800806a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800804c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800804e:	f000 fbdf 	bl	8008810 <vPortFree>
 8008052:	e00a      	b.n	800806a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	b2da      	uxtb	r2, r3
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008066:	e000      	b.n	800806a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800806a:	4b08      	ldr	r3, [pc, #32]	; (800808c <prvProcessReceivedCommands+0x1c0>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	1d39      	adds	r1, r7, #4
 8008070:	2200      	movs	r2, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fbc8 	bl	8006808 <xQueueReceive>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	f47f af2a 	bne.w	8007ed4 <prvProcessReceivedCommands+0x8>
	}
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	3730      	adds	r7, #48	; 0x30
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000fcc 	.word	0x20000fcc

08008090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008096:	e048      	b.n	800812a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008098:	4b2d      	ldr	r3, [pc, #180]	; (8008150 <prvSwitchTimerLists+0xc0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a2:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <prvSwitchTimerLists+0xc0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe f8e1 	bl	8006278 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d02e      	beq.n	800812a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d90e      	bls.n	80080fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ea:	4b19      	ldr	r3, [pc, #100]	; (8008150 <prvSwitchTimerLists+0xc0>)
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fe f886 	bl	8006206 <vListInsert>
 80080fa:	e016      	b.n	800812a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	2100      	movs	r1, #0
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fd60 	bl	8007bcc <xTimerGenericCommand>
 800810c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	603b      	str	r3, [r7, #0]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <prvSwitchTimerLists+0xc0>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1b1      	bne.n	8008098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <prvSwitchTimerLists+0xc0>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <prvSwitchTimerLists+0xc4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a04      	ldr	r2, [pc, #16]	; (8008150 <prvSwitchTimerLists+0xc0>)
 8008140:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008142:	4a04      	ldr	r2, [pc, #16]	; (8008154 <prvSwitchTimerLists+0xc4>)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	6013      	str	r3, [r2, #0]
}
 8008148:	bf00      	nop
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000fc4 	.word	0x20000fc4
 8008154:	20000fc8 	.word	0x20000fc8

08008158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800815e:	f000 f969 	bl	8008434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008162:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d120      	bne.n	80081ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800816a:	4814      	ldr	r0, [pc, #80]	; (80081bc <prvCheckForValidListAndQueue+0x64>)
 800816c:	f7fd fffa 	bl	8006164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008170:	4813      	ldr	r0, [pc, #76]	; (80081c0 <prvCheckForValidListAndQueue+0x68>)
 8008172:	f7fd fff7 	bl	8006164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008176:	4b13      	ldr	r3, [pc, #76]	; (80081c4 <prvCheckForValidListAndQueue+0x6c>)
 8008178:	4a10      	ldr	r2, [pc, #64]	; (80081bc <prvCheckForValidListAndQueue+0x64>)
 800817a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800817c:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <prvCheckForValidListAndQueue+0x70>)
 800817e:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <prvCheckForValidListAndQueue+0x68>)
 8008180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008182:	2300      	movs	r3, #0
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4b11      	ldr	r3, [pc, #68]	; (80081cc <prvCheckForValidListAndQueue+0x74>)
 8008188:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <prvCheckForValidListAndQueue+0x78>)
 800818a:	2110      	movs	r1, #16
 800818c:	200a      	movs	r0, #10
 800818e:	f7fe f905 	bl	800639c <xQueueGenericCreateStatic>
 8008192:	4603      	mov	r3, r0
 8008194:	4a08      	ldr	r2, [pc, #32]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 8008196:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008198:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081a0:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	490b      	ldr	r1, [pc, #44]	; (80081d4 <prvCheckForValidListAndQueue+0x7c>)
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fd1e 	bl	8006be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ac:	f000 f972 	bl	8008494 <vPortExitCritical>
}
 80081b0:	bf00      	nop
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000fcc 	.word	0x20000fcc
 80081bc:	20000f9c 	.word	0x20000f9c
 80081c0:	20000fb0 	.word	0x20000fb0
 80081c4:	20000fc4 	.word	0x20000fc4
 80081c8:	20000fc8 	.word	0x20000fc8
 80081cc:	20001078 	.word	0x20001078
 80081d0:	20000fd8 	.word	0x20000fd8
 80081d4:	08008cb4 	.word	0x08008cb4

080081d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3b04      	subs	r3, #4
 80081e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3b04      	subs	r3, #4
 80081f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3b04      	subs	r3, #4
 8008206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <pxPortInitialiseStack+0x64>)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3b14      	subs	r3, #20
 8008212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3b04      	subs	r3, #4
 800821e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f06f 0202 	mvn.w	r2, #2
 8008226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3b20      	subs	r3, #32
 800822c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	08008241 	.word	0x08008241

08008240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <prvTaskExitError+0x54>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008252:	d00a      	beq.n	800826a <prvTaskExitError+0x2a>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	60fb      	str	r3, [r7, #12]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <prvTaskExitError+0x28>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	60bb      	str	r3, [r7, #8]
}
 800827c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800827e:	bf00      	nop
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0fc      	beq.n	8008280 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	2000000c 	.word	0x2000000c
	...

080082a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <pxCurrentTCBConst2>)
 80082a2:	6819      	ldr	r1, [r3, #0]
 80082a4:	6808      	ldr	r0, [r1, #0]
 80082a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	f380 8809 	msr	PSP, r0
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f380 8811 	msr	BASEPRI, r0
 80082ba:	4770      	bx	lr
 80082bc:	f3af 8000 	nop.w

080082c0 <pxCurrentTCBConst2>:
 80082c0:	20000a94 	.word	0x20000a94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <prvPortStartFirstTask+0x24>)
 80082ca:	6800      	ldr	r0, [r0, #0]
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	f380 8808 	msr	MSP, r0
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f380 8814 	msr	CONTROL, r0
 80082da:	b662      	cpsie	i
 80082dc:	b661      	cpsie	f
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	df00      	svc	0
 80082e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ea:	bf00      	nop
 80082ec:	e000ed08 	.word	0xe000ed08

080082f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082f6:	4b46      	ldr	r3, [pc, #280]	; (8008410 <xPortStartScheduler+0x120>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a46      	ldr	r2, [pc, #280]	; (8008414 <xPortStartScheduler+0x124>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10a      	bne.n	8008316 <xPortStartScheduler+0x26>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	613b      	str	r3, [r7, #16]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008316:	4b3e      	ldr	r3, [pc, #248]	; (8008410 <xPortStartScheduler+0x120>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a3f      	ldr	r2, [pc, #252]	; (8008418 <xPortStartScheduler+0x128>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d10a      	bne.n	8008336 <xPortStartScheduler+0x46>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60fb      	str	r3, [r7, #12]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008336:	4b39      	ldr	r3, [pc, #228]	; (800841c <xPortStartScheduler+0x12c>)
 8008338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b2db      	uxtb	r3, r3
 8008340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	22ff      	movs	r2, #255	; 0xff
 8008346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	b2db      	uxtb	r3, r3
 800834e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4b31      	ldr	r3, [pc, #196]	; (8008420 <xPortStartScheduler+0x130>)
 800835c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800835e:	4b31      	ldr	r3, [pc, #196]	; (8008424 <xPortStartScheduler+0x134>)
 8008360:	2207      	movs	r2, #7
 8008362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008364:	e009      	b.n	800837a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008366:	4b2f      	ldr	r3, [pc, #188]	; (8008424 <xPortStartScheduler+0x134>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3b01      	subs	r3, #1
 800836c:	4a2d      	ldr	r2, [pc, #180]	; (8008424 <xPortStartScheduler+0x134>)
 800836e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	b2db      	uxtb	r3, r3
 8008378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008382:	2b80      	cmp	r3, #128	; 0x80
 8008384:	d0ef      	beq.n	8008366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008386:	4b27      	ldr	r3, [pc, #156]	; (8008424 <xPortStartScheduler+0x134>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f1c3 0307 	rsb	r3, r3, #7
 800838e:	2b04      	cmp	r3, #4
 8008390:	d00a      	beq.n	80083a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	60bb      	str	r3, [r7, #8]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083a8:	4b1e      	ldr	r3, [pc, #120]	; (8008424 <xPortStartScheduler+0x134>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <xPortStartScheduler+0x134>)
 80083b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <xPortStartScheduler+0x134>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083ba:	4a1a      	ldr	r2, [pc, #104]	; (8008424 <xPortStartScheduler+0x134>)
 80083bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083c6:	4b18      	ldr	r3, [pc, #96]	; (8008428 <xPortStartScheduler+0x138>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a17      	ldr	r2, [pc, #92]	; (8008428 <xPortStartScheduler+0x138>)
 80083cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083d2:	4b15      	ldr	r3, [pc, #84]	; (8008428 <xPortStartScheduler+0x138>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <xPortStartScheduler+0x138>)
 80083d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083de:	f000 f8dd 	bl	800859c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <xPortStartScheduler+0x13c>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083e8:	f000 f8fc 	bl	80085e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083ec:	4b10      	ldr	r3, [pc, #64]	; (8008430 <xPortStartScheduler+0x140>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0f      	ldr	r2, [pc, #60]	; (8008430 <xPortStartScheduler+0x140>)
 80083f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083f8:	f7ff ff66 	bl	80082c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083fc:	f7ff f82c 	bl	8007458 <vTaskSwitchContext>
	prvTaskExitError();
 8008400:	f7ff ff1e 	bl	8008240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	e000ed00 	.word	0xe000ed00
 8008414:	410fc271 	.word	0x410fc271
 8008418:	410fc270 	.word	0x410fc270
 800841c:	e000e400 	.word	0xe000e400
 8008420:	200010c8 	.word	0x200010c8
 8008424:	200010cc 	.word	0x200010cc
 8008428:	e000ed20 	.word	0xe000ed20
 800842c:	2000000c 	.word	0x2000000c
 8008430:	e000ef34 	.word	0xe000ef34

08008434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	607b      	str	r3, [r7, #4]
}
 800844c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <vPortEnterCritical+0x58>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	4a0d      	ldr	r2, [pc, #52]	; (800848c <vPortEnterCritical+0x58>)
 8008456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <vPortEnterCritical+0x58>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d10f      	bne.n	8008480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <vPortEnterCritical+0x5c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <vPortEnterCritical+0x4c>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	603b      	str	r3, [r7, #0]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <vPortEnterCritical+0x4a>
	}
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	2000000c 	.word	0x2000000c
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <vPortExitCritical+0x50>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <vPortExitCritical+0x24>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	607b      	str	r3, [r7, #4]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084b8:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <vPortExitCritical+0x50>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3b01      	subs	r3, #1
 80084be:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <vPortExitCritical+0x50>)
 80084c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084c2:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <vPortExitCritical+0x50>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <vPortExitCritical+0x42>
 80084ca:	2300      	movs	r3, #0
 80084cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	f383 8811 	msr	BASEPRI, r3
}
 80084d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	2000000c 	.word	0x2000000c
	...

080084f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084f0:	f3ef 8009 	mrs	r0, PSP
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	4b15      	ldr	r3, [pc, #84]	; (8008550 <pxCurrentTCBConst>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	f01e 0f10 	tst.w	lr, #16
 8008500:	bf08      	it	eq
 8008502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	6010      	str	r0, [r2, #0]
 800850c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008514:	f380 8811 	msr	BASEPRI, r0
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f7fe ff9a 	bl	8007458 <vTaskSwitchContext>
 8008524:	f04f 0000 	mov.w	r0, #0
 8008528:	f380 8811 	msr	BASEPRI, r0
 800852c:	bc09      	pop	{r0, r3}
 800852e:	6819      	ldr	r1, [r3, #0]
 8008530:	6808      	ldr	r0, [r1, #0]
 8008532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008536:	f01e 0f10 	tst.w	lr, #16
 800853a:	bf08      	it	eq
 800853c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008540:	f380 8809 	msr	PSP, r0
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	f3af 8000 	nop.w

08008550 <pxCurrentTCBConst>:
 8008550:	20000a94 	.word	0x20000a94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop

08008558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	607b      	str	r3, [r7, #4]
}
 8008570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008572:	f7fe feb7 	bl	80072e4 <xTaskIncrementTick>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <xPortSysTickHandler+0x40>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	2300      	movs	r3, #0
 8008586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f383 8811 	msr	BASEPRI, r3
}
 800858e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085a0:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <vPortSetupTimerInterrupt+0x34>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <vPortSetupTimerInterrupt+0x38>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <vPortSetupTimerInterrupt+0x3c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <vPortSetupTimerInterrupt+0x40>)
 80085b2:	fba2 2303 	umull	r2, r3, r2, r3
 80085b6:	099b      	lsrs	r3, r3, #6
 80085b8:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <vPortSetupTimerInterrupt+0x44>)
 80085ba:	3b01      	subs	r3, #1
 80085bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085be:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <vPortSetupTimerInterrupt+0x34>)
 80085c0:	2207      	movs	r2, #7
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	e000e010 	.word	0xe000e010
 80085d4:	e000e018 	.word	0xe000e018
 80085d8:	20000000 	.word	0x20000000
 80085dc:	10624dd3 	.word	0x10624dd3
 80085e0:	e000e014 	.word	0xe000e014

080085e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085f4 <vPortEnableVFP+0x10>
 80085e8:	6801      	ldr	r1, [r0, #0]
 80085ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085ee:	6001      	str	r1, [r0, #0]
 80085f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085f2:	bf00      	nop
 80085f4:	e000ed88 	.word	0xe000ed88

080085f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085fe:	f3ef 8305 	mrs	r3, IPSR
 8008602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b0f      	cmp	r3, #15
 8008608:	d914      	bls.n	8008634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <vPortValidateInterruptPriority+0x70>)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008614:	4b15      	ldr	r3, [pc, #84]	; (800866c <vPortValidateInterruptPriority+0x74>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	7afa      	ldrb	r2, [r7, #11]
 800861a:	429a      	cmp	r2, r3
 800861c:	d20a      	bcs.n	8008634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	607b      	str	r3, [r7, #4]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <vPortValidateInterruptPriority+0x78>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <vPortValidateInterruptPriority+0x7c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d90a      	bls.n	800865a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	603b      	str	r3, [r7, #0]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <vPortValidateInterruptPriority+0x60>
	}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	e000e3f0 	.word	0xe000e3f0
 800866c:	200010c8 	.word	0x200010c8
 8008670:	e000ed0c 	.word	0xe000ed0c
 8008674:	200010cc 	.word	0x200010cc

08008678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008684:	f7fe fd72 	bl	800716c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008688:	4b5b      	ldr	r3, [pc, #364]	; (80087f8 <pvPortMalloc+0x180>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008690:	f000 f920 	bl	80088d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008694:	4b59      	ldr	r3, [pc, #356]	; (80087fc <pvPortMalloc+0x184>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 8093 	bne.w	80087c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01d      	beq.n	80086e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086a8:	2208      	movs	r2, #8
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d014      	beq.n	80086e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f023 0307 	bic.w	r3, r3, #7
 80086c0:	3308      	adds	r3, #8
 80086c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <pvPortMalloc+0x6c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	617b      	str	r3, [r7, #20]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d06e      	beq.n	80087c8 <pvPortMalloc+0x150>
 80086ea:	4b45      	ldr	r3, [pc, #276]	; (8008800 <pvPortMalloc+0x188>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d869      	bhi.n	80087c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086f4:	4b43      	ldr	r3, [pc, #268]	; (8008804 <pvPortMalloc+0x18c>)
 80086f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086f8:	4b42      	ldr	r3, [pc, #264]	; (8008804 <pvPortMalloc+0x18c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086fe:	e004      	b.n	800870a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <pvPortMalloc+0xa4>
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1f1      	bne.n	8008700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800871c:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <pvPortMalloc+0x180>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008722:	429a      	cmp	r2, r3
 8008724:	d050      	beq.n	80087c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2208      	movs	r2, #8
 800872c:	4413      	add	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	2308      	movs	r3, #8
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	429a      	cmp	r2, r3
 8008746:	d91f      	bls.n	8008788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <pvPortMalloc+0xf8>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	613b      	str	r3, [r7, #16]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008782:	69b8      	ldr	r0, [r7, #24]
 8008784:	f000 f908 	bl	8008998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <pvPortMalloc+0x188>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	4a1b      	ldr	r2, [pc, #108]	; (8008800 <pvPortMalloc+0x188>)
 8008794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008796:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <pvPortMalloc+0x188>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <pvPortMalloc+0x190>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d203      	bcs.n	80087aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087a2:	4b17      	ldr	r3, [pc, #92]	; (8008800 <pvPortMalloc+0x188>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a18      	ldr	r2, [pc, #96]	; (8008808 <pvPortMalloc+0x190>)
 80087a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <pvPortMalloc+0x184>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087be:	4b13      	ldr	r3, [pc, #76]	; (800880c <pvPortMalloc+0x194>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <pvPortMalloc+0x194>)
 80087c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087c8:	f7fe fcde 	bl	8007188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <pvPortMalloc+0x174>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	60fb      	str	r3, [r7, #12]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <pvPortMalloc+0x172>
	return pvReturn;
 80087ec:	69fb      	ldr	r3, [r7, #28]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3728      	adds	r7, #40	; 0x28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20001c90 	.word	0x20001c90
 80087fc:	20001ca4 	.word	0x20001ca4
 8008800:	20001c94 	.word	0x20001c94
 8008804:	20001c88 	.word	0x20001c88
 8008808:	20001c98 	.word	0x20001c98
 800880c:	20001c9c 	.word	0x20001c9c

08008810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d04d      	beq.n	80088be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008822:	2308      	movs	r3, #8
 8008824:	425b      	negs	r3, r3
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <vPortFree+0xb8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <vPortFree+0x44>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60fb      	str	r3, [r7, #12]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <vPortFree+0x62>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	60bb      	str	r3, [r7, #8]
}
 800886e:	bf00      	nop
 8008870:	e7fe      	b.n	8008870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <vPortFree+0xb8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4013      	ands	r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01e      	beq.n	80088be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d11a      	bne.n	80088be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <vPortFree+0xb8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	43db      	mvns	r3, r3
 8008892:	401a      	ands	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008898:	f7fe fc68 	bl	800716c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <vPortFree+0xbc>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4413      	add	r3, r2
 80088a6:	4a09      	ldr	r2, [pc, #36]	; (80088cc <vPortFree+0xbc>)
 80088a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088aa:	6938      	ldr	r0, [r7, #16]
 80088ac:	f000 f874 	bl	8008998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <vPortFree+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3301      	adds	r3, #1
 80088b6:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <vPortFree+0xc0>)
 80088b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088ba:	f7fe fc65 	bl	8007188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088be:	bf00      	nop
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20001ca4 	.word	0x20001ca4
 80088cc:	20001c94 	.word	0x20001c94
 80088d0:	20001ca0 	.word	0x20001ca0

080088d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80088de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088e0:	4b27      	ldr	r3, [pc, #156]	; (8008980 <prvHeapInit+0xac>)
 80088e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00c      	beq.n	8008908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0307 	bic.w	r3, r3, #7
 80088fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <prvHeapInit+0xac>)
 8008904:	4413      	add	r3, r2
 8008906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800890c:	4a1d      	ldr	r2, [pc, #116]	; (8008984 <prvHeapInit+0xb0>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008912:	4b1c      	ldr	r3, [pc, #112]	; (8008984 <prvHeapInit+0xb0>)
 8008914:	2200      	movs	r2, #0
 8008916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008920:	2208      	movs	r2, #8
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0307 	bic.w	r3, r3, #7
 800892e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a15      	ldr	r2, [pc, #84]	; (8008988 <prvHeapInit+0xb4>)
 8008934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <prvHeapInit+0xb4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800893e:	4b12      	ldr	r3, [pc, #72]	; (8008988 <prvHeapInit+0xb4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <prvHeapInit+0xb4>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <prvHeapInit+0xb8>)
 8008962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	4a09      	ldr	r2, [pc, #36]	; (8008990 <prvHeapInit+0xbc>)
 800896a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <prvHeapInit+0xc0>)
 800896e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008972:	601a      	str	r2, [r3, #0]
}
 8008974:	bf00      	nop
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	200010d0 	.word	0x200010d0
 8008984:	20001c88 	.word	0x20001c88
 8008988:	20001c90 	.word	0x20001c90
 800898c:	20001c98 	.word	0x20001c98
 8008990:	20001c94 	.word	0x20001c94
 8008994:	20001ca4 	.word	0x20001ca4

08008998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089a0:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <prvInsertBlockIntoFreeList+0xac>)
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e002      	b.n	80089ac <prvInsertBlockIntoFreeList+0x14>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d8f7      	bhi.n	80089a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d108      	bne.n	80089da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	441a      	add	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d118      	bne.n	8008a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <prvInsertBlockIntoFreeList+0xb0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d00d      	beq.n	8008a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	e008      	b.n	8008a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <prvInsertBlockIntoFreeList+0xb0>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	e003      	b.n	8008a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d002      	beq.n	8008a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20001c88 	.word	0x20001c88
 8008a48:	20001c90 	.word	0x20001c90

08008a4c <__libc_init_array>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4d0d      	ldr	r5, [pc, #52]	; (8008a84 <__libc_init_array+0x38>)
 8008a50:	4c0d      	ldr	r4, [pc, #52]	; (8008a88 <__libc_init_array+0x3c>)
 8008a52:	1b64      	subs	r4, r4, r5
 8008a54:	10a4      	asrs	r4, r4, #2
 8008a56:	2600      	movs	r6, #0
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d109      	bne.n	8008a70 <__libc_init_array+0x24>
 8008a5c:	4d0b      	ldr	r5, [pc, #44]	; (8008a8c <__libc_init_array+0x40>)
 8008a5e:	4c0c      	ldr	r4, [pc, #48]	; (8008a90 <__libc_init_array+0x44>)
 8008a60:	f000 f8f2 	bl	8008c48 <_init>
 8008a64:	1b64      	subs	r4, r4, r5
 8008a66:	10a4      	asrs	r4, r4, #2
 8008a68:	2600      	movs	r6, #0
 8008a6a:	42a6      	cmp	r6, r4
 8008a6c:	d105      	bne.n	8008a7a <__libc_init_array+0x2e>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a74:	4798      	blx	r3
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7ee      	b.n	8008a58 <__libc_init_array+0xc>
 8008a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7e:	4798      	blx	r3
 8008a80:	3601      	adds	r6, #1
 8008a82:	e7f2      	b.n	8008a6a <__libc_init_array+0x1e>
 8008a84:	08008db4 	.word	0x08008db4
 8008a88:	08008db4 	.word	0x08008db4
 8008a8c:	08008db4 	.word	0x08008db4
 8008a90:	08008db8 	.word	0x08008db8

08008a94 <__retarget_lock_acquire_recursive>:
 8008a94:	4770      	bx	lr

08008a96 <__retarget_lock_release_recursive>:
 8008a96:	4770      	bx	lr

08008a98 <memcpy>:
 8008a98:	440a      	add	r2, r1
 8008a9a:	4291      	cmp	r1, r2
 8008a9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008aa0:	d100      	bne.n	8008aa4 <memcpy+0xc>
 8008aa2:	4770      	bx	lr
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aae:	4291      	cmp	r1, r2
 8008ab0:	d1f9      	bne.n	8008aa6 <memcpy+0xe>
 8008ab2:	bd10      	pop	{r4, pc}

08008ab4 <memset>:
 8008ab4:	4402      	add	r2, r0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d100      	bne.n	8008abe <memset+0xa>
 8008abc:	4770      	bx	lr
 8008abe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac2:	e7f9      	b.n	8008ab8 <memset+0x4>

08008ac4 <cleanup_glue>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	6809      	ldr	r1, [r1, #0]
 8008aca:	4605      	mov	r5, r0
 8008acc:	b109      	cbz	r1, 8008ad2 <cleanup_glue+0xe>
 8008ace:	f7ff fff9 	bl	8008ac4 <cleanup_glue>
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ada:	f000 b869 	b.w	8008bb0 <_free_r>
	...

08008ae0 <_reclaim_reent>:
 8008ae0:	4b2c      	ldr	r3, [pc, #176]	; (8008b94 <_reclaim_reent+0xb4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4283      	cmp	r3, r0
 8008ae6:	b570      	push	{r4, r5, r6, lr}
 8008ae8:	4604      	mov	r4, r0
 8008aea:	d051      	beq.n	8008b90 <_reclaim_reent+0xb0>
 8008aec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008aee:	b143      	cbz	r3, 8008b02 <_reclaim_reent+0x22>
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14a      	bne.n	8008b8c <_reclaim_reent+0xac>
 8008af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af8:	6819      	ldr	r1, [r3, #0]
 8008afa:	b111      	cbz	r1, 8008b02 <_reclaim_reent+0x22>
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 f857 	bl	8008bb0 <_free_r>
 8008b02:	6961      	ldr	r1, [r4, #20]
 8008b04:	b111      	cbz	r1, 8008b0c <_reclaim_reent+0x2c>
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f852 	bl	8008bb0 <_free_r>
 8008b0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b0e:	b111      	cbz	r1, 8008b16 <_reclaim_reent+0x36>
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 f84d 	bl	8008bb0 <_free_r>
 8008b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b18:	b111      	cbz	r1, 8008b20 <_reclaim_reent+0x40>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f848 	bl	8008bb0 <_free_r>
 8008b20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008b22:	b111      	cbz	r1, 8008b2a <_reclaim_reent+0x4a>
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f843 	bl	8008bb0 <_free_r>
 8008b2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b2c:	b111      	cbz	r1, 8008b34 <_reclaim_reent+0x54>
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f83e 	bl	8008bb0 <_free_r>
 8008b34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b36:	b111      	cbz	r1, 8008b3e <_reclaim_reent+0x5e>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 f839 	bl	8008bb0 <_free_r>
 8008b3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b40:	b111      	cbz	r1, 8008b48 <_reclaim_reent+0x68>
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 f834 	bl	8008bb0 <_free_r>
 8008b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b4a:	b111      	cbz	r1, 8008b52 <_reclaim_reent+0x72>
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 f82f 	bl	8008bb0 <_free_r>
 8008b52:	69a3      	ldr	r3, [r4, #24]
 8008b54:	b1e3      	cbz	r3, 8008b90 <_reclaim_reent+0xb0>
 8008b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4798      	blx	r3
 8008b5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b5e:	b1b9      	cbz	r1, 8008b90 <_reclaim_reent+0xb0>
 8008b60:	4620      	mov	r0, r4
 8008b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b66:	f7ff bfad 	b.w	8008ac4 <cleanup_glue>
 8008b6a:	5949      	ldr	r1, [r1, r5]
 8008b6c:	b941      	cbnz	r1, 8008b80 <_reclaim_reent+0xa0>
 8008b6e:	3504      	adds	r5, #4
 8008b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b72:	2d80      	cmp	r5, #128	; 0x80
 8008b74:	68d9      	ldr	r1, [r3, #12]
 8008b76:	d1f8      	bne.n	8008b6a <_reclaim_reent+0x8a>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 f819 	bl	8008bb0 <_free_r>
 8008b7e:	e7ba      	b.n	8008af6 <_reclaim_reent+0x16>
 8008b80:	680e      	ldr	r6, [r1, #0]
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 f814 	bl	8008bb0 <_free_r>
 8008b88:	4631      	mov	r1, r6
 8008b8a:	e7ef      	b.n	8008b6c <_reclaim_reent+0x8c>
 8008b8c:	2500      	movs	r5, #0
 8008b8e:	e7ef      	b.n	8008b70 <_reclaim_reent+0x90>
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	bf00      	nop
 8008b94:	20000010 	.word	0x20000010

08008b98 <__malloc_lock>:
 8008b98:	4801      	ldr	r0, [pc, #4]	; (8008ba0 <__malloc_lock+0x8>)
 8008b9a:	f7ff bf7b 	b.w	8008a94 <__retarget_lock_acquire_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	20001ca8 	.word	0x20001ca8

08008ba4 <__malloc_unlock>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	; (8008bac <__malloc_unlock+0x8>)
 8008ba6:	f7ff bf76 	b.w	8008a96 <__retarget_lock_release_recursive>
 8008baa:	bf00      	nop
 8008bac:	20001ca8 	.word	0x20001ca8

08008bb0 <_free_r>:
 8008bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	d044      	beq.n	8008c40 <_free_r+0x90>
 8008bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bba:	9001      	str	r0, [sp, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8008bc2:	bfb8      	it	lt
 8008bc4:	18e4      	addlt	r4, r4, r3
 8008bc6:	f7ff ffe7 	bl	8008b98 <__malloc_lock>
 8008bca:	4a1e      	ldr	r2, [pc, #120]	; (8008c44 <_free_r+0x94>)
 8008bcc:	9801      	ldr	r0, [sp, #4]
 8008bce:	6813      	ldr	r3, [r2, #0]
 8008bd0:	b933      	cbnz	r3, 8008be0 <_free_r+0x30>
 8008bd2:	6063      	str	r3, [r4, #4]
 8008bd4:	6014      	str	r4, [r2, #0]
 8008bd6:	b003      	add	sp, #12
 8008bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bdc:	f7ff bfe2 	b.w	8008ba4 <__malloc_unlock>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d908      	bls.n	8008bf6 <_free_r+0x46>
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf01      	itttt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	1949      	addeq	r1, r1, r5
 8008bf2:	6021      	streq	r1, [r4, #0]
 8008bf4:	e7ed      	b.n	8008bd2 <_free_r+0x22>
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	b10b      	cbz	r3, 8008c00 <_free_r+0x50>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d9fa      	bls.n	8008bf6 <_free_r+0x46>
 8008c00:	6811      	ldr	r1, [r2, #0]
 8008c02:	1855      	adds	r5, r2, r1
 8008c04:	42a5      	cmp	r5, r4
 8008c06:	d10b      	bne.n	8008c20 <_free_r+0x70>
 8008c08:	6824      	ldr	r4, [r4, #0]
 8008c0a:	4421      	add	r1, r4
 8008c0c:	1854      	adds	r4, r2, r1
 8008c0e:	42a3      	cmp	r3, r4
 8008c10:	6011      	str	r1, [r2, #0]
 8008c12:	d1e0      	bne.n	8008bd6 <_free_r+0x26>
 8008c14:	681c      	ldr	r4, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	6053      	str	r3, [r2, #4]
 8008c1a:	4421      	add	r1, r4
 8008c1c:	6011      	str	r1, [r2, #0]
 8008c1e:	e7da      	b.n	8008bd6 <_free_r+0x26>
 8008c20:	d902      	bls.n	8008c28 <_free_r+0x78>
 8008c22:	230c      	movs	r3, #12
 8008c24:	6003      	str	r3, [r0, #0]
 8008c26:	e7d6      	b.n	8008bd6 <_free_r+0x26>
 8008c28:	6825      	ldr	r5, [r4, #0]
 8008c2a:	1961      	adds	r1, r4, r5
 8008c2c:	428b      	cmp	r3, r1
 8008c2e:	bf04      	itt	eq
 8008c30:	6819      	ldreq	r1, [r3, #0]
 8008c32:	685b      	ldreq	r3, [r3, #4]
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	bf04      	itt	eq
 8008c38:	1949      	addeq	r1, r1, r5
 8008c3a:	6021      	streq	r1, [r4, #0]
 8008c3c:	6054      	str	r4, [r2, #4]
 8008c3e:	e7ca      	b.n	8008bd6 <_free_r+0x26>
 8008c40:	b003      	add	sp, #12
 8008c42:	bd30      	pop	{r4, r5, pc}
 8008c44:	20001cac 	.word	0x20001cac

08008c48 <_init>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr

08008c54 <_fini>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr
