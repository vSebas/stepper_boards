
stepper_boards_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008abc  08008abc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac4  08008ac4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac4  08008ac4  00018ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ac8  08008ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  20000074  08008b40  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb0  08008b40  00021cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021248  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d0b  00000000  00000000  000412ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00044ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  00046a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000430f  00000000  00000000  00048340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc01  00000000  00000000  0004c64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee609  00000000  00000000  00069250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007350  00000000  00000000  001578ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008958 	.word	0x08008958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008958 	.word	0x08008958

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <configure_steppers>:

volatile stepper braking_stepper;
volatile stepper steering_stepper;

void configure_steppers()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	steering_stepper.MAX_ANGLE = 57;
 80004d8:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <configure_steppers+0x7c>)
 80004da:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <configure_steppers+0x80>)
 80004dc:	601a      	str	r2, [r3, #0]
	steering_stepper.STEP_ANGLE = 1.8;
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <configure_steppers+0x7c>)
 80004e0:	4a1d      	ldr	r2, [pc, #116]	; (8000558 <configure_steppers+0x84>)
 80004e2:	605a      	str	r2, [r3, #4]
	steering_stepper.STEPS_REV = 200;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <configure_steppers+0x7c>)
 80004e6:	22c8      	movs	r2, #200	; 0xc8
 80004e8:	811a      	strh	r2, [r3, #8]
	steering_stepper.current_step = 0;
 80004ea:	4b19      	ldr	r3, [pc, #100]	; (8000550 <configure_steppers+0x7c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	831a      	strh	r2, [r3, #24]

	braking_stepper.MAX_ANGLE = 1;			// TBD
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <configure_steppers+0x88>)
 80004f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80004f6:	601a      	str	r2, [r3, #0]
	braking_stepper.STEP_ANGLE = 1.8;		// TBD
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <configure_steppers+0x88>)
 80004fa:	4a17      	ldr	r2, [pc, #92]	; (8000558 <configure_steppers+0x84>)
 80004fc:	605a      	str	r2, [r3, #4]
	braking_stepper.STEPS_REV = 200;		// TBD
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <configure_steppers+0x88>)
 8000500:	22c8      	movs	r2, #200	; 0xc8
 8000502:	811a      	strh	r2, [r3, #8]
	braking_stepper.current_step = 0;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <configure_steppers+0x88>)
 8000506:	2200      	movs	r2, #0
 8000508:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(GPIOC, STPR_EN_1_Pin, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000510:	4813      	ldr	r0, [pc, #76]	; (8000560 <configure_steppers+0x8c>)
 8000512:	f002 fb57 	bl	8002bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051c:	4811      	ldr	r0, [pc, #68]	; (8000564 <configure_steppers+0x90>)
 800051e:	f002 fb51 	bl	8002bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2101      	movs	r1, #1
 8000526:	480f      	ldr	r0, [pc, #60]	; (8000564 <configure_steppers+0x90>)
 8000528:	f002 fb4c 	bl	8002bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2104      	movs	r1, #4
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <configure_steppers+0x94>)
 8000532:	f002 fb47 	bl	8002bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <configure_steppers+0x8c>)
 800053e:	f002 fb41 	bl	8002bc4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <configure_steppers+0x98>)
 8000546:	f003 fe39 	bl	80041bc <HAL_TIM_PWM_Start>

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000ac 	.word	0x200000ac
 8000554:	42640000 	.word	0x42640000
 8000558:	3fe66666 	.word	0x3fe66666
 800055c:	20000090 	.word	0x20000090
 8000560:	48000800 	.word	0x48000800
 8000564:	48000400 	.word	0x48000400
 8000568:	48000c00 	.word	0x48000c00
 800056c:	200001a0 	.word	0x200001a0

08000570 <steer>:
		steering_stepper.direction = direction;
	}
}

void steer()
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	steering_stepper.req_steps = 400;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <steer+0x1c>)
 8000576:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800057a:	82da      	strh	r2, [r3, #22]
	steering_stepper.direction = 1;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <steer+0x1c>)
 800057e:	2201      	movs	r2, #1
 8000580:	751a      	strb	r2, [r3, #20]
	/*
	if(steering_stepper.req_steps < steering_stepper.current_step)
	else
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
		*/
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	200000ac 	.word	0x200000ac

08000590 <HAL_TIM_PWM_PulseFinishedCallback>:
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
}


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	steering_stepper.current_step++;
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80005a4:	8b1b      	ldrh	r3, [r3, #24]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	3301      	adds	r3, #1
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80005ae:	831a      	strh	r2, [r3, #24]
  }
  if (htim->Instance == TIM2) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b8:	d106      	bne.n	80005c8 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
	braking_stepper.current_step++;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80005bc:	8b1b      	ldrh	r3, [r3, #24]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	3301      	adds	r3, #1
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80005c6:	831a      	strh	r2, [r3, #24]
  }
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40012c00 	.word	0x40012c00
 80005d8:	200000ac 	.word	0x200000ac
 80005dc:	20000090 	.word	0x20000090

080005e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fe61 	bl	80012ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f83e 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 fa82 	bl	8000b14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000610:	f000 fa50 	bl	8000ab4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000614:	f000 f9ce 	bl	80009b4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000618:	f000 f920 	bl	800085c <MX_TIM1_Init>
  MX_ADC1_Init();
 800061c:	f000 f884 	bl	8000728 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000620:	f000 f8e6 	bl	80007f0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  configure_steppers();
 8000624:	f7ff ff56 	bl	80004d4 <configure_steppers>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000628:	2201      	movs	r2, #1
 800062a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800062e:	480f      	ldr	r0, [pc, #60]	; (800066c <main+0x6c>)
 8000630:	f002 fac8 	bl	8002bc4 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2103      	movs	r1, #3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f002 fac2 	bl	8002bc4 <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000640:	f005 faf0 	bl	8005c24 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* creation of steeringTask */
  steeringTaskHandle = osThreadNew(steering_task, NULL, &steeringTask_attributes);
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <main+0x70>)
 8000646:	2100      	movs	r1, #0
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <main+0x74>)
 800064a:	f005 fb35 	bl	8005cb8 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <main+0x78>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of brakingTask */
  brakingTaskHandle = osThreadNew(braking_task, NULL, &brakingTask_attributes);
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <main+0x7c>)
 8000656:	2100      	movs	r1, #0
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <main+0x80>)
 800065a:	f005 fb2d 	bl	8005cb8 <osThreadNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a08      	ldr	r2, [pc, #32]	; (8000684 <main+0x84>)
 8000662:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000664:	f005 fb02 	bl	8005c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x68>
 800066a:	bf00      	nop
 800066c:	48000800 	.word	0x48000800
 8000670:	080089cc 	.word	0x080089cc
 8000674:	08000c95 	.word	0x08000c95
 8000678:	20000270 	.word	0x20000270
 800067c:	080089f0 	.word	0x080089f0
 8000680:	08000ca9 	.word	0x08000ca9
 8000684:	20000274 	.word	0x20000274

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	; 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2244      	movs	r2, #68	; 0x44
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f008 f894 	bl	80087c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ae:	f002 faaf 	bl	8002c10 <HAL_PWREx_ControlVoltageScaling>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b8:	f000 fb10 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	2303      	movs	r3, #3
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006d2:	2314      	movs	r3, #20
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d6:	2307      	movs	r3, #7
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006de:	2304      	movs	r3, #4
 80006e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fae8 	bl	8002cbc <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006f2:	f000 faf3 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2104      	movs	r1, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fee8 	bl	80034e4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800071a:	f000 fadf 	bl	8000cdc <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3758      	adds	r7, #88	; 0x58
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000740:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <MX_ADC1_Init+0xc0>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800075e:	2204      	movs	r2, #4
 8000760:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800076a:	2201      	movs	r2, #1
 800076c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000770:	2201      	movs	r2, #1
 8000772:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <MX_ADC1_Init+0xbc>)
 80007a0:	f000 ff58 	bl	8001654 <HAL_ADC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007aa:	f000 fa97 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_ADC1_Init+0xc4>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b2:	2306      	movs	r3, #6
 80007b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ba:	237f      	movs	r3, #127	; 0x7f
 80007bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007be:	2304      	movs	r3, #4
 80007c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_ADC1_Init+0xbc>)
 80007cc:	f001 f88a 	bl	80018e4 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007d6:	f000 fa81 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000c8 	.word	0x200000c8
 80007e8:	50040000 	.word	0x50040000
 80007ec:	c7520000 	.word	0xc7520000

080007f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_CAN1_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_CAN1_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_CAN1_Init+0x64>)
 80007fc:	2228      	movs	r2, #40	; 0x28
 80007fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_CAN1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_CAN1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_CAN1_Init+0x64>)
 800080e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000812:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_CAN1_Init+0x64>)
 8000816:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800081a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_CAN1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_CAN1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_CAN1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_CAN1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_CAN1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_CAN1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_CAN1_Init+0x64>)
 8000842:	f001 fc2f 	bl	80020a4 <HAL_CAN_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 fa46 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000012c 	.word	0x2000012c
 8000858:	40006400 	.word	0x40006400

0800085c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09a      	sub	sp, #104	; 0x68
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	222c      	movs	r2, #44	; 0x2c
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f007 ff94 	bl	80087c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_TIM1_Init+0x150>)
 800089e:	4a44      	ldr	r2, [pc, #272]	; (80009b0 <MX_TIM1_Init+0x154>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80008a2:	4b42      	ldr	r3, [pc, #264]	; (80009ac <MX_TIM1_Init+0x150>)
 80008a4:	224f      	movs	r2, #79	; 0x4f
 80008a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_TIM1_Init+0x150>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80008ae:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MX_TIM1_Init+0x150>)
 80008b0:	2263      	movs	r2, #99	; 0x63
 80008b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <MX_TIM1_Init+0x150>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ba:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MX_TIM1_Init+0x150>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <MX_TIM1_Init+0x150>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c6:	4839      	ldr	r0, [pc, #228]	; (80009ac <MX_TIM1_Init+0x150>)
 80008c8:	f003 fb6a 	bl	8003fa0 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008d2:	f000 fa03 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008e0:	4619      	mov	r1, r3
 80008e2:	4832      	ldr	r0, [pc, #200]	; (80009ac <MX_TIM1_Init+0x150>)
 80008e4:	f003 ff7c 	bl	80047e0 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008ee:	f000 f9f5 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f2:	482e      	ldr	r0, [pc, #184]	; (80009ac <MX_TIM1_Init+0x150>)
 80008f4:	f003 fc00 	bl	80040f8 <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008fe:	f000 f9ed 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000912:	4619      	mov	r1, r3
 8000914:	4825      	ldr	r0, [pc, #148]	; (80009ac <MX_TIM1_Init+0x150>)
 8000916:	f004 fbed 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000920:	f000 f9dc 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_TIM1_Init+0x150>)
 800094a:	f003 fe35 	bl	80045b8 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000954:	f000 f9c2 	bl	8000cdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800097a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <MX_TIM1_Init+0x150>)
 800098e:	f004 fc17 	bl	80051c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000998:	f000 f9a0 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_TIM1_Init+0x150>)
 800099e:	f000 fac5 	bl	8000f2c <HAL_TIM_MspPostInit>

}
 80009a2:	bf00      	nop
 80009a4:	3768      	adds	r7, #104	; 0x68
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000154 	.word	0x20000154
 80009b0:	40012c00 	.word	0x40012c00

080009b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e6:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 80009e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 80009f0:	224f      	movs	r2, #79	; 0x4f
 80009f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1 ;
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 80009fc:	2263      	movs	r2, #99	; 0x63
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4828      	ldr	r0, [pc, #160]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000a0e:	f003 fac7 	bl	8003fa0 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a18:	f000 f960 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4821      	ldr	r0, [pc, #132]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000a2a:	f003 fed9 	bl	80047e0 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a34:	f000 f952 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a38:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000a3a:	f003 fb5d 	bl	80040f8 <HAL_TIM_PWM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a44:	f000 f94a 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000a58:	f004 fb4c 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a62:	f000 f93b 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	; 0x60
 8000a68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000a7e:	f003 fd9b 	bl	80045b8 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a88:	f000 f928 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	220c      	movs	r2, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000a94:	f003 fd90 	bl	80045b8 <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a9e:	f000 f91d 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM2_Init+0xfc>)
 8000aa4:	f000 fa42 	bl	8000f2c <HAL_TIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3738      	adds	r7, #56	; 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200001a0 	.word	0x200001a0

08000ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_USART1_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af8:	f004 fbf8 	bl	80052ec <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f000 f8eb 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001ec 	.word	0x200001ec
 8000b10:	40013800 	.word	0x40013800

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	4b56      	ldr	r3, [pc, #344]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a55      	ldr	r2, [pc, #340]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	4b50      	ldr	r3, [pc, #320]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a4f      	ldr	r2, [pc, #316]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a49      	ldr	r2, [pc, #292]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a43      	ldr	r2, [pc, #268]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a3d      	ldr	r2, [pc, #244]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f640 410f 	movw	r1, #3087	; 0xc0f
 8000ba8:	4837      	ldr	r0, [pc, #220]	; (8000c88 <MX_GPIO_Init+0x174>)
 8000baa:	f002 f80b 	bl	8002bc4 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f002 f805 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f240 4105 	movw	r1, #1029	; 0x405
 8000bc0:	4832      	ldr	r0, [pc, #200]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000bc2:	f001 ffff 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4831      	ldr	r0, [pc, #196]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000bcc:	f001 fffa 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000bd0:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000bd4:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4827      	ldr	r0, [pc, #156]	; (8000c88 <MX_GPIO_Init+0x174>)
 8000bea:	f001 fe71 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f001 fe62 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin;
 8000c0c:	f240 4305 	movw	r3, #1029	; 0x405
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4819      	ldr	r0, [pc, #100]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000c26:	f001 fe53 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8000c2a:	f24f 2302 	movw	r3, #61954	; 0xf202
 8000c2e:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000c40:	f001 fe46 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 8000c44:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <MX_GPIO_Init+0x174>)
 8000c5a:	f001 fe39 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000c76:	f001 fe2b 	bl	80028d0 <HAL_GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	48000c00 	.word	0x48000c00

08000c94 <steering_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_steering_task */
void steering_task(void *argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN steering_task */
  /* Infinite loop */
  for(;;)
  {
	  steer();
 8000c9c:	f7ff fc68 	bl	8000570 <steer>
	  osDelay(1);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f005 f89b 	bl	8005ddc <osDelay>
	  steer();
 8000ca6:	e7f9      	b.n	8000c9c <steering_task+0x8>

08000ca8 <braking_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_braking_task */
void braking_task(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN braking_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f005 f893 	bl	8005ddc <osDelay>
 8000cb6:	e7fb      	b.n	8000cb0 <braking_task+0x8>

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cca:	f000 fb17 	bl	80012fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40001000 	.word	0x40001000

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210f      	movs	r1, #15
 8000d22:	f06f 0001 	mvn.w	r0, #1
 8000d26:	f001 fda9 	bl	800287c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0a0      	sub	sp, #128	; 0x80
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	225c      	movs	r2, #92	; 0x5c
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f007 fd33 	bl	80087c4 <memset>
  if(hadc->Instance==ADC1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <HAL_ADC_MspInit+0xc0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d142      	bne.n	8000dee <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d72:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d74:	2303      	movs	r3, #3
 8000d76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000d7c:	2314      	movs	r3, #20
 8000d7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d80:	2307      	movs	r3, #7
 8000d82:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fdf8 	bl	800398c <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000da2:	f7ff ff9b 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_ADC_MspInit+0xc4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <HAL_ADC_MspInit+0xc4>)
 8000dac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_ADC_MspInit+0xc4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_ADC_MspInit+0xc4>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_ADC_MspInit+0xc4>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_ADC_MspInit+0xc4>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_ADC_MspInit+0xc8>)
 8000dea:	f001 fd71 	bl	80028d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3780      	adds	r7, #128	; 0x80
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	50040000 	.word	0x50040000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000800 	.word	0x48000800

08000e04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <HAL_CAN_MspInit+0xa0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d139      	bne.n	8000e9a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_CAN_MspInit+0xa4>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <HAL_CAN_MspInit+0xa4>)
 8000e2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e30:	6593      	str	r3, [r2, #88]	; 0x58
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_CAN_MspInit+0xa4>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_CAN_MspInit+0xa4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_CAN_MspInit+0xa4>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_CAN_MspInit+0xa4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e68:	2309      	movs	r3, #9
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f001 fd2b 	bl	80028d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	2014      	movs	r0, #20
 8000e80:	f001 fcfc 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e84:	2014      	movs	r0, #20
 8000e86:	f001 fd15 	bl	80028b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	2015      	movs	r0, #21
 8000e90:	f001 fcf4 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e94:	2015      	movs	r0, #21
 8000e96:	f001 fd0d 	bl	80028b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40006400 	.word	0x40006400
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_TIM_Base_MspInit+0x78>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d114      	bne.n	8000ee8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_TIM_Base_MspInit+0x7c>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_TIM_Base_MspInit+0x7c>)
 8000ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_TIM_Base_MspInit+0x7c>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	201b      	movs	r0, #27
 8000edc:	f001 fcce 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ee0:	201b      	movs	r0, #27
 8000ee2:	f001 fce7 	bl	80028b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ee6:	e018      	b.n	8000f1a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef0:	d113      	bne.n	8000f1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_TIM_Base_MspInit+0x7c>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <HAL_TIM_Base_MspInit+0x7c>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_Base_MspInit+0x7c>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f001 fcb4 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f14:	201c      	movs	r0, #28
 8000f16:	f001 fccd 	bl	80028b4 <HAL_NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40012c00 	.word	0x40012c00
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a32      	ldr	r2, [pc, #200]	; (8001014 <HAL_TIM_MspPostInit+0xe8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d11e      	bne.n	8000f8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a31      	ldr	r2, [pc, #196]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 8000f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f001 fca3 	bl	80028d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f8a:	e03f      	b.n	800100c <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f94:	d13a      	bne.n	800100c <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_TIM_MspPostInit+0xec>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STPR_PWM_2_Pin;
 8000fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_2_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480e      	ldr	r0, [pc, #56]	; (800101c <HAL_TIM_MspPostInit+0xf0>)
 8000fe4:	f001 fc74 	bl	80028d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STPR_PWM_1_Pin;
 8000fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f001 fc62 	bl	80028d0 <HAL_GPIO_Init>
}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40012c00 	.word	0x40012c00
 8001018:	40021000 	.word	0x40021000
 800101c:	48000400 	.word	0x48000400

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0a0      	sub	sp, #128	; 0x80
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	225c      	movs	r2, #92	; 0x5c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f007 fbbf 	bl	80087c4 <memset>
  if(huart->Instance==USART1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <HAL_UART_MspInit+0xa8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d137      	bne.n	80010c0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fc95 	bl	800398c <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f7ff fe38 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_UART_MspInit+0xac>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001070:	4a16      	ldr	r2, [pc, #88]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6613      	str	r3, [r2, #96]	; 0x60
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_UART_MspInit+0xac>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_UART_MspInit+0xac>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800109c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ae:	2307      	movs	r3, #7
 80010b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010b6:	4619      	mov	r1, r3
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f001 fc08 	bl	80028d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010c0:	bf00      	nop
 80010c2:	3780      	adds	r7, #128	; 0x80
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_InitTick+0xe0>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a33      	ldr	r2, [pc, #204]	; (80011b0 <HAL_InitTick+0xe0>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_InitTick+0xe0>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010f6:	f107 0210 	add.w	r2, r7, #16
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fbb1 	bl	8003868 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001110:	f002 fb7e 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8001114:	6378      	str	r0, [r7, #52]	; 0x34
 8001116:	e004      	b.n	8001122 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001118:	f002 fb7a 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 800111c:	4603      	mov	r3, r0
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001124:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_InitTick+0xe4>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9b      	lsrs	r3, r3, #18
 800112c:	3b01      	subs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <HAL_InitTick+0xe8>)
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <HAL_InitTick+0xec>)
 8001134:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_InitTick+0xe8>)
 8001138:	f240 32e7 	movw	r2, #999	; 0x3e7
 800113c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <HAL_InitTick+0xe8>)
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <HAL_InitTick+0xe8>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_InitTick+0xe8>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_InitTick+0xe8>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001156:	4818      	ldr	r0, [pc, #96]	; (80011b8 <HAL_InitTick+0xe8>)
 8001158:	f002 ff22 	bl	8003fa0 <HAL_TIM_Base_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001162:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001166:	2b00      	cmp	r3, #0
 8001168:	d11b      	bne.n	80011a2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800116a:	4813      	ldr	r0, [pc, #76]	; (80011b8 <HAL_InitTick+0xe8>)
 800116c:	f002 ff70 	bl	8004050 <HAL_TIM_Base_Start_IT>
 8001170:	4603      	mov	r3, r0
 8001172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001176:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800117a:	2b00      	cmp	r3, #0
 800117c:	d111      	bne.n	80011a2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800117e:	2036      	movs	r0, #54	; 0x36
 8001180:	f001 fb98 	bl	80028b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	d808      	bhi.n	800119c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800118a:	2200      	movs	r2, #0
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	2036      	movs	r0, #54	; 0x36
 8001190:	f001 fb74 	bl	800287c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_InitTick+0xf0>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e002      	b.n	80011a2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3738      	adds	r7, #56	; 0x38
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	431bde83 	.word	0x431bde83
 80011b8:	20000278 	.word	0x20000278
 80011bc:	40001000 	.word	0x40001000
 80011c0:	20000004 	.word	0x20000004

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <CAN1_RX0_IRQHandler+0x10>)
 80011f6:	f001 f850 	bl	800229a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000012c 	.word	0x2000012c

08001204 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <CAN1_RX1_IRQHandler+0x10>)
 800120a:	f001 f846 	bl	800229a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000012c 	.word	0x2000012c

08001218 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <TIM1_CC_IRQHandler+0x10>)
 800121e:	f003 f8ab 	bl	8004378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000154 	.word	0x20000154

0800122c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <TIM2_IRQHandler+0x10>)
 8001232:	f003 f8a1 	bl	8004378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001a0 	.word	0x200001a0

08001240 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <TIM6_DAC_IRQHandler+0x10>)
 8001246:	f003 f897 	bl	8004378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000278 	.word	0x20000278

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff ffea 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f007 fa59 	bl	800875c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012aa:	f7ff f9a9 	bl	8000600 <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012bc:	08008acc 	.word	0x08008acc
  ldr r2, =_sbss
 80012c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012c4:	20001cb0 	.word	0x20001cb0

080012c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_IRQHandler>

080012ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f001 fac6 	bl	8002866 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012da:	200f      	movs	r0, #15
 80012dc:	f7ff fef8 	bl	80010d0 <HAL_InitTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	e001      	b.n	80012f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ec:	f7ff fcfc 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	200002c4 	.word	0x200002c4

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200002c4 	.word	0x200002c4

0800133c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	609a      	str	r2, [r3, #8]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3360      	adds	r3, #96	; 0x60
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <LL_ADC_SetOffset+0x44>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	4313      	orrs	r3, r2
 80013d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	03fff000 	.word	0x03fff000

080013ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3360      	adds	r3, #96	; 0x60
 80013fa:	461a      	mov	r2, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3360      	adds	r3, #96	; 0x60
 8001428:	461a      	mov	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	431a      	orrs	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001442:	bf00      	nop
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800144e:	b480      	push	{r7}
 8001450:	b087      	sub	sp, #28
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3330      	adds	r3, #48	; 0x30
 800145e:	461a      	mov	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	4413      	add	r3, r2
 800146c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	211f      	movs	r1, #31
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	401a      	ands	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0e9b      	lsrs	r3, r3, #26
 8001486:	f003 011f 	and.w	r1, r3, #31
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	431a      	orrs	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800149a:	bf00      	nop
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b087      	sub	sp, #28
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3314      	adds	r3, #20
 80014b6:	461a      	mov	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	0e5b      	lsrs	r3, r3, #25
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	0d1b      	lsrs	r3, r3, #20
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2107      	movs	r1, #7
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	0d1b      	lsrs	r3, r3, #20
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0318 	and.w	r3, r3, #24
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001520:	40d9      	lsrs	r1, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	400b      	ands	r3, r1
 8001526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	0007ffff 	.word	0x0007ffff

08001544 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6093      	str	r3, [r2, #8]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800157c:	d101      	bne.n	8001582 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015cc:	d101      	bne.n	80015d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <LL_ADC_IsEnabled+0x18>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <LL_ADC_IsEnabled+0x1a>
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b04      	cmp	r3, #4
 8001618:	d101      	bne.n	800161e <LL_ADC_REG_IsConversionOngoing+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b08      	cmp	r3, #8
 800163e:	d101      	bne.n	8001644 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e12c      	b.n	80018c8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fb5b 	bl	8000d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff67 	bl	8001568 <LL_ADC_IsDeepPowerDownEnabled>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff4d 	bl	8001544 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff82 	bl	80015b8 <LL_ADC_IsInternalRegulatorEnabled>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d115      	bne.n	80016e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff66 	bl	8001590 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016c4:	4b82      	ldr	r3, [pc, #520]	; (80018d0 <HAL_ADC_Init+0x27c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	4a82      	ldr	r2, [pc, #520]	; (80018d4 <HAL_ADC_Init+0x280>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	3301      	adds	r3, #1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff64 	bl	80015b8 <LL_ADC_IsInternalRegulatorEnabled>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10d      	bne.n	8001712 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	f043 0210 	orr.w	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff75 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 800171c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80c5 	bne.w	80018b6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80c1 	bne.w	80018b6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff49 	bl	80015e0 <LL_ADC_IsEnabled>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10b      	bne.n	800176c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001754:	4860      	ldr	r0, [pc, #384]	; (80018d8 <HAL_ADC_Init+0x284>)
 8001756:	f7ff ff43 	bl	80015e0 <LL_ADC_IsEnabled>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4619      	mov	r1, r3
 8001766:	485d      	ldr	r0, [pc, #372]	; (80018dc <HAL_ADC_Init+0x288>)
 8001768:	f7ff fde8 	bl	800133c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7e5b      	ldrb	r3, [r3, #25]
 8001770:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001776:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800177c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001782:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d106      	bne.n	80017a8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	3b01      	subs	r3, #1
 80017a0:	045b      	lsls	r3, r3, #17
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <HAL_ADC_Init+0x28c>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff12 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 80017e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff1f 	bl	800162c <LL_ADC_INJ_IsConversionOngoing>
 80017ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d13d      	bne.n	8001872 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d13a      	bne.n	8001872 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001800:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001808:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001818:	f023 0302 	bic.w	r3, r3, #2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	430b      	orrs	r3, r1
 8001824:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800182c:	2b01      	cmp	r3, #1
 800182e:	d118      	bne.n	8001862 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800184c:	4311      	orrs	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001852:	430a      	orrs	r2, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	e007      	b.n	8001872 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10c      	bne.n	8001894 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f023 010f 	bic.w	r1, r3, #15
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
 8001892:	e007      	b.n	80018a4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020f 	bic.w	r2, r2, #15
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a8:	f023 0303 	bic.w	r3, r3, #3
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
 80018b4:	e007      	b.n	80018c6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000000 	.word	0x20000000
 80018d4:	053e2d63 	.word	0x053e2d63
 80018d8:	50040000 	.word	0x50040000
 80018dc:	50040300 	.word	0x50040300
 80018e0:	fff0c007 	.word	0xfff0c007

080018e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0b6      	sub	sp, #216	; 0xd8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x22>
 8001902:	2302      	movs	r3, #2
 8001904:	e3b9      	b.n	800207a <HAL_ADC_ConfigChannel+0x796>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe77 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 839e 	bne.w	800205c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b05      	cmp	r3, #5
 8001926:	d824      	bhi.n	8001972 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	3b02      	subs	r3, #2
 800192e:	2b03      	cmp	r3, #3
 8001930:	d81b      	bhi.n	800196a <HAL_ADC_ConfigChannel+0x86>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <HAL_ADC_ConfigChannel+0x54>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001949 	.word	0x08001949
 800193c:	08001951 	.word	0x08001951
 8001940:	08001959 	.word	0x08001959
 8001944:	08001961 	.word	0x08001961
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	220c      	movs	r2, #12
 800194c:	605a      	str	r2, [r3, #4]
          break;
 800194e:	e011      	b.n	8001974 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2212      	movs	r2, #18
 8001954:	605a      	str	r2, [r3, #4]
          break;
 8001956:	e00d      	b.n	8001974 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2218      	movs	r2, #24
 800195c:	605a      	str	r2, [r3, #4]
          break;
 800195e:	e009      	b.n	8001974 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001966:	605a      	str	r2, [r3, #4]
          break;
 8001968:	e004      	b.n	8001974 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2206      	movs	r2, #6
 800196e:	605a      	str	r2, [r3, #4]
          break;
 8001970:	e000      	b.n	8001974 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001972:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	f7ff fd64 	bl	800144e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fe3b 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 8001990:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe47 	bl	800162c <LL_ADC_INJ_IsConversionOngoing>
 800199e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 81a6 	bne.w	8001cf8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 81a1 	bne.w	8001cf8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6819      	ldr	r1, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f7ff fd6f 	bl	80014a6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	08db      	lsrs	r3, r3, #3
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00a      	beq.n	8001a00 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6919      	ldr	r1, [r3, #16]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019fa:	f7ff fcd3 	bl	80013a4 <LL_ADC_SetOffset>
 80019fe:	e17b      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fcf0 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10a      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x148>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fce5 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	0e9b      	lsrs	r3, r3, #26
 8001a26:	f003 021f 	and.w	r2, r3, #31
 8001a2a:	e01e      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x186>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fcda 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e004      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x19e>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0e9b      	lsrs	r3, r3, #26
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	e018      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x1d0>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	e004      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d106      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fca9 	bl	8001418 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fc8d 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10a      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x20e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fc82 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	0e9b      	lsrs	r3, r3, #26
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	e01e      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x24c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2101      	movs	r1, #1
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fc77 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e004      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x264>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0e9b      	lsrs	r3, r3, #26
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	e018      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x296>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	e004      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d106      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	2101      	movs	r1, #1
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fc46 	bl	8001418 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2102      	movs	r1, #2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fc2a 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10a      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x2d4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fc1f 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	0e9b      	lsrs	r3, r3, #26
 8001bb2:	f003 021f 	and.w	r2, r3, #31
 8001bb6:	e01e      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x312>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc14 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e004      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d105      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x32a>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	e016      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x358>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e004      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	2102      	movs	r1, #2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fbe5 	bl	8001418 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2103      	movs	r1, #3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fbc9 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x396>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2103      	movs	r1, #3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fbbe 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	e017      	b.n	8001caa <HAL_ADC_ConfigChannel+0x3c6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2103      	movs	r1, #3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fbb3 	bl	80013ec <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c94:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x3de>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0e9b      	lsrs	r3, r3, #26
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	e011      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x402>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d106      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fb90 	bl	8001418 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fc6f 	bl	80015e0 <LL_ADC_IsEnabled>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 813f 	bne.w	8001f88 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f7ff fbf0 	bl	80014fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a8e      	ldr	r2, [pc, #568]	; (8001f5c <HAL_ADC_ConfigChannel+0x678>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	f040 8130 	bne.w	8001f88 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10b      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x46c>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	bf94      	ite	ls
 8001d48:	2301      	movls	r3, #1
 8001d4a:	2300      	movhi	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e019      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x4a0>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d60:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e003      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2b09      	cmp	r3, #9
 8001d7c:	bf94      	ite	ls
 8001d7e:	2301      	movls	r3, #1
 8001d80:	2300      	movhi	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d079      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x4c0>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	069b      	lsls	r3, r3, #26
 8001d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da2:	e015      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x4ec>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e003      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	069b      	lsls	r3, r3, #26
 8001dcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x50c>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	e017      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x53c>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e003      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	ea42 0103 	orr.w	r1, r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10a      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x562>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	3301      	adds	r3, #1
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	051b      	lsls	r3, r3, #20
 8001e44:	e018      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x594>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	e003      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	e080      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x5b4>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	3301      	adds	r3, #1
 8001e90:	069b      	lsls	r3, r3, #26
 8001e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e96:	e015      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x5e0>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e003      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	069b      	lsls	r3, r3, #26
 8001ec0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x600>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	e017      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x630>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	61fb      	str	r3, [r7, #28]
  return result;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	ea42 0103 	orr.w	r1, r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x65c>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	051b      	lsls	r3, r3, #20
 8001f3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	e01d      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x698>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	613b      	str	r3, [r7, #16]
  return result;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	e005      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x684>
 8001f5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 021f 	and.w	r2, r3, #31
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	3b1e      	subs	r3, #30
 8001f76:	051b      	lsls	r3, r3, #20
 8001f78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6892      	ldr	r2, [r2, #8]
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7ff fa8f 	bl	80014a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_ADC_ConfigChannel+0x7a0>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d06c      	beq.n	800206e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f94:	483c      	ldr	r0, [pc, #240]	; (8002088 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f96:	f7ff f9f7 	bl	8001388 <LL_ADC_GetCommonPathInternalCh>
 8001f9a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a3a      	ldr	r2, [pc, #232]	; (800208c <HAL_ADC_ConfigChannel+0x7a8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d127      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d121      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a35      	ldr	r2, [pc, #212]	; (8002090 <HAL_ADC_ConfigChannel+0x7ac>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d157      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	482f      	ldr	r0, [pc, #188]	; (8002088 <HAL_ADC_ConfigChannel+0x7a4>)
 8001fca:	f7ff f9ca 	bl	8001362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_ADC_ConfigChannel+0x7b0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	4a30      	ldr	r2, [pc, #192]	; (8002098 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	099b      	lsrs	r3, r3, #6
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fe8:	e002      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f9      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ff6:	e03a      	b.n	800206e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_ADC_ConfigChannel+0x7b8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d113      	bne.n	800202a <HAL_ADC_ConfigChannel+0x746>
 8002002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_ADC_ConfigChannel+0x7ac>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d12a      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800201c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002020:	4619      	mov	r1, r3
 8002022:	4819      	ldr	r0, [pc, #100]	; (8002088 <HAL_ADC_ConfigChannel+0x7a4>)
 8002024:	f7ff f99d 	bl	8001362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002028:	e021      	b.n	800206e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d11c      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d116      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_ADC_ConfigChannel+0x7ac>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800204a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800204e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002052:	4619      	mov	r1, r3
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <HAL_ADC_ConfigChannel+0x7a4>)
 8002056:	f7ff f984 	bl	8001362 <LL_ADC_SetCommonPathInternalCh>
 800205a:	e008      	b.n	800206e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002076:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800207a:	4618      	mov	r0, r3
 800207c:	37d8      	adds	r7, #216	; 0xd8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	80080000 	.word	0x80080000
 8002088:	50040300 	.word	0x50040300
 800208c:	c7520000 	.word	0xc7520000
 8002090:	50040000 	.word	0x50040000
 8002094:	20000000 	.word	0x20000000
 8002098:	053e2d63 	.word	0x053e2d63
 800209c:	cb840000 	.word	0xcb840000
 80020a0:	80000001 	.word	0x80000001

080020a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0ed      	b.n	8002292 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fe9e 	bl	8000e04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d8:	f7ff f924 	bl	8001324 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020de:	e012      	b.n	8002106 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020e0:	f7ff f920 	bl	8001324 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d90b      	bls.n	8002106 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2205      	movs	r2, #5
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0c5      	b.n	8002292 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0e5      	beq.n	80020e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0202 	bic.w	r2, r2, #2
 8002122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002124:	f7ff f8fe 	bl	8001324 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800212a:	e012      	b.n	8002152 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800212c:	f7ff f8fa 	bl	8001324 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d90b      	bls.n	8002152 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2205      	movs	r2, #5
 800214a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e09f      	b.n	8002292 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e5      	bne.n	800212c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e1b      	ldrb	r3, [r3, #24]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e007      	b.n	800218a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7e5b      	ldrb	r3, [r3, #25]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e007      	b.n	80021b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e9b      	ldrb	r3, [r3, #26]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d108      	bne.n	80021ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0220 	orr.w	r2, r2, #32
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e007      	b.n	80021de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0220 	bic.w	r2, r2, #32
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7edb      	ldrb	r3, [r3, #27]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0210 	bic.w	r2, r2, #16
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e007      	b.n	8002208 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0210 	orr.w	r2, r2, #16
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7f1b      	ldrb	r3, [r3, #28]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e007      	b.n	8002232 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0208 	bic.w	r2, r2, #8
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7f5b      	ldrb	r3, [r3, #29]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d108      	bne.n	800224c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0204 	orr.w	r2, r2, #4
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e007      	b.n	800225c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	ea42 0103 	orr.w	r1, r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b08a      	sub	sp, #40	; 0x28
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d07c      	beq.n	80023da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d023      	beq.n	8002332 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f983 	bl	8002608 <HAL_CAN_TxMailbox0CompleteCallback>
 8002302:	e016      	b.n	8002332 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e00c      	b.n	8002332 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e002      	b.n	8002332 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f989 	bl	8002644 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d024      	beq.n	8002386 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002344:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f963 	bl	800261c <HAL_CAN_TxMailbox1CompleteCallback>
 8002356:	e016      	b.n	8002386 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e00c      	b.n	8002386 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	e002      	b.n	8002386 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f969 	bl	8002658 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d024      	beq.n	80023da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002398:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f943 	bl	8002630 <HAL_CAN_TxMailbox2CompleteCallback>
 80023aa:	e016      	b.n	80023da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	e00c      	b.n	80023da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	e002      	b.n	80023da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f949 	bl	800266c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00c      	beq.n	80023fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2210      	movs	r2, #16
 80023fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2208      	movs	r2, #8
 8002418:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f93a 	bl	8002694 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f921 	bl	8002680 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00c      	beq.n	8002462 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002458:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2210      	movs	r2, #16
 8002460:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2208      	movs	r2, #8
 800247c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f91c 	bl	80026bc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f903 	bl	80026a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2210      	movs	r2, #16
 80024bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f906 	bl	80026d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2208      	movs	r2, #8
 80024de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8ff 	bl	80026e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d07b      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d072      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002554:	2b00      	cmp	r3, #0
 8002556:	d043      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03e      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002568:	2b60      	cmp	r3, #96	; 0x60
 800256a:	d02b      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x32a>
 800256c:	2b60      	cmp	r3, #96	; 0x60
 800256e:	d82e      	bhi.n	80025ce <HAL_CAN_IRQHandler+0x334>
 8002570:	2b50      	cmp	r3, #80	; 0x50
 8002572:	d022      	beq.n	80025ba <HAL_CAN_IRQHandler+0x320>
 8002574:	2b50      	cmp	r3, #80	; 0x50
 8002576:	d82a      	bhi.n	80025ce <HAL_CAN_IRQHandler+0x334>
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d019      	beq.n	80025b0 <HAL_CAN_IRQHandler+0x316>
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d826      	bhi.n	80025ce <HAL_CAN_IRQHandler+0x334>
 8002580:	2b30      	cmp	r3, #48	; 0x30
 8002582:	d010      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x30c>
 8002584:	2b30      	cmp	r3, #48	; 0x30
 8002586:	d822      	bhi.n	80025ce <HAL_CAN_IRQHandler+0x334>
 8002588:	2b10      	cmp	r3, #16
 800258a:	d002      	beq.n	8002592 <HAL_CAN_IRQHandler+0x2f8>
 800258c:	2b20      	cmp	r3, #32
 800258e:	d005      	beq.n	800259c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002590:	e01d      	b.n	80025ce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800259a:	e019      	b.n	80025d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025a4:	e014      	b.n	80025d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	f043 0320 	orr.w	r3, r3, #32
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ae:	e00f      	b.n	80025d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025b8:	e00a      	b.n	80025d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025c2:	e005      	b.n	80025d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025cc:	e000      	b.n	80025d0 <HAL_CAN_IRQHandler+0x336>
            break;
 80025ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2204      	movs	r2, #4
 80025e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f87c 	bl	80026f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002600:	bf00      	nop
 8002602:	3728      	adds	r7, #40	; 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff4c 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800288e:	f7ff ff61 	bl	8002754 <__NVIC_GetPriorityGrouping>
 8002892:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	6978      	ldr	r0, [r7, #20]
 800289a:	f7ff ffb1 	bl	8002800 <NVIC_EncodePriority>
 800289e:	4602      	mov	r2, r0
 80028a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff80 	bl	80027ac <__NVIC_SetPriority>
}
 80028ac:	bf00      	nop
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff54 	bl	8002770 <__NVIC_EnableIRQ>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028de:	e154      	b.n	8002b8a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8146 	beq.w	8002b84 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d005      	beq.n	8002910 <HAL_GPIO_Init+0x40>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d130      	bne.n	8002972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002946:	2201      	movs	r2, #1
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 0201 	and.w	r2, r3, #1
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b03      	cmp	r3, #3
 800297c:	d017      	beq.n	80029ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2203      	movs	r2, #3
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d123      	bne.n	8002a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	6939      	ldr	r1, [r7, #16]
 80029fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80a0 	beq.w	8002b84 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a44:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <HAL_GPIO_Init+0x2d8>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	4a57      	ldr	r2, [pc, #348]	; (8002ba8 <HAL_GPIO_Init+0x2d8>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a50:	4b55      	ldr	r3, [pc, #340]	; (8002ba8 <HAL_GPIO_Init+0x2d8>)
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a5c:	4a53      	ldr	r2, [pc, #332]	; (8002bac <HAL_GPIO_Init+0x2dc>)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a86:	d019      	beq.n	8002abc <HAL_GPIO_Init+0x1ec>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a49      	ldr	r2, [pc, #292]	; (8002bb0 <HAL_GPIO_Init+0x2e0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_GPIO_Init+0x1e8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a48      	ldr	r2, [pc, #288]	; (8002bb4 <HAL_GPIO_Init+0x2e4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00d      	beq.n	8002ab4 <HAL_GPIO_Init+0x1e4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a47      	ldr	r2, [pc, #284]	; (8002bb8 <HAL_GPIO_Init+0x2e8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d007      	beq.n	8002ab0 <HAL_GPIO_Init+0x1e0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a46      	ldr	r2, [pc, #280]	; (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_GPIO_Init+0x1dc>
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	e008      	b.n	8002abe <HAL_GPIO_Init+0x1ee>
 8002aac:	2307      	movs	r3, #7
 8002aae:	e006      	b.n	8002abe <HAL_GPIO_Init+0x1ee>
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e004      	b.n	8002abe <HAL_GPIO_Init+0x1ee>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e002      	b.n	8002abe <HAL_GPIO_Init+0x1ee>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_GPIO_Init+0x1ee>
 8002abc:	2300      	movs	r3, #0
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	f002 0203 	and.w	r2, r2, #3
 8002ac4:	0092      	lsls	r2, r2, #2
 8002ac6:	4093      	lsls	r3, r2
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ace:	4937      	ldr	r1, [pc, #220]	; (8002bac <HAL_GPIO_Init+0x2dc>)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002adc:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_GPIO_Init+0x2f0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b00:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <HAL_GPIO_Init+0x2f0>)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_GPIO_Init+0x2f0>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b2a:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <HAL_GPIO_Init+0x2f0>)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_GPIO_Init+0x2f0>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b54:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <HAL_GPIO_Init+0x2f0>)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_GPIO_Init+0x2f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b7e:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_GPIO_Init+0x2f0>)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f47f aea3 	bne.w	80028e0 <HAL_GPIO_Init+0x10>
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	48000400 	.word	0x48000400
 8002bb4:	48000800 	.word	0x48000800
 8002bb8:	48000c00 	.word	0x48000c00
 8002bbc:	48001000 	.word	0x48001000
 8002bc0:	40010400 	.word	0x40010400

08002bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002be0:	e002      	b.n	8002be8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be2:	887a      	ldrh	r2, [r7, #2]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007000 	.word	0x40007000

08002c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1e:	d130      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d038      	beq.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c36:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2232      	movs	r2, #50	; 0x32
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c54:	e002      	b.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d102      	bne.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f2      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d110      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e00f      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d007      	beq.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f000 bc02 	b.w	80034d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd0:	4b96      	ldr	r3, [pc, #600]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cda:	4b94      	ldr	r3, [pc, #592]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80e4 	beq.w	8002eba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4c>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	f040 808b 	bne.w	8002e16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	f040 8087 	bne.w	8002e16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d08:	4b88      	ldr	r3, [pc, #544]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x64>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e3d9      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_RCC_OscConfig+0x7e>
 8002d30:	4b7e      	ldr	r3, [pc, #504]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_OscConfig+0x8a>
 8002d3a:	4b7c      	ldr	r3, [pc, #496]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d223      	bcs.n	8002d92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fdbc 	bl	80038cc <RCC_SetFlashLatencyFromMSIRange>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e3ba      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5e:	4b73      	ldr	r3, [pc, #460]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a72      	ldr	r2, [pc, #456]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b70      	ldr	r3, [pc, #448]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	496d      	ldr	r1, [pc, #436]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7c:	4b6b      	ldr	r3, [pc, #428]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	4968      	ldr	r1, [pc, #416]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
 8002d90:	e025      	b.n	8002dde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4960      	ldr	r1, [pc, #384]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db0:	4b5e      	ldr	r3, [pc, #376]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	495b      	ldr	r1, [pc, #364]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fd7c 	bl	80038cc <RCC_SetFlashLatencyFromMSIRange>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e37a      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dde:	f000 fc81 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b51      	ldr	r3, [pc, #324]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	4950      	ldr	r1, [pc, #320]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a4e      	ldr	r2, [pc, #312]	; (8002f34 <HAL_RCC_OscConfig+0x278>)
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe f964 	bl	80010d0 <HAL_InitTick>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d052      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	e35e      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d032      	beq.n	8002e84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a42      	ldr	r2, [pc, #264]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fa7b 	bl	8001324 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e32:	f7fe fa77 	bl	8001324 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e347      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e44:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a35      	ldr	r2, [pc, #212]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4930      	ldr	r1, [pc, #192]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	492b      	ldr	r1, [pc, #172]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
 8002e82:	e01a      	b.n	8002eba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e84:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a28      	ldr	r2, [pc, #160]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fa48 	bl	8001324 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e98:	f7fe fa44 	bl	8001324 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e314      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x1dc>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d073      	beq.n	8002fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x21c>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d063      	beq.n	8002fac <HAL_RCC_OscConfig+0x2f0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15f      	bne.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e2f1      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x24c>
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e025      	b.n	8002f54 <HAL_RCC_OscConfig+0x298>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d114      	bne.n	8002f3c <HAL_RCC_OscConfig+0x280>
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a02      	ldr	r2, [pc, #8]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e013      	b.n	8002f54 <HAL_RCC_OscConfig+0x298>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08008a14 	.word	0x08008a14
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	4ba0      	ldr	r3, [pc, #640]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a9f      	ldr	r2, [pc, #636]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b9d      	ldr	r3, [pc, #628]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a9c      	ldr	r2, [pc, #624]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f9e2 	bl	8001324 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe f9de 	bl	8001324 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e2ae      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	4b92      	ldr	r3, [pc, #584]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2a8>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe f9ce 	bl	8001324 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe f9ca 	bl	8001324 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e29a      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	4b88      	ldr	r3, [pc, #544]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2d0>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d060      	beq.n	800307c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x310>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d116      	bne.n	8002ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	4b7c      	ldr	r3, [pc, #496]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x328>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e277      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b76      	ldr	r3, [pc, #472]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	4973      	ldr	r1, [pc, #460]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff8:	e040      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d023      	beq.n	800304a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003002:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6e      	ldr	r2, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe f989 	bl	8001324 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe f985 	bl	8001324 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e255      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	4b65      	ldr	r3, [pc, #404]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b62      	ldr	r3, [pc, #392]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	495f      	ldr	r1, [pc, #380]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e018      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5c      	ldr	r2, [pc, #368]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe f965 	bl	8001324 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305e:	f7fe f961 	bl	8001324 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e231      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03c      	beq.n	8003102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01c      	beq.n	80030ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003090:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003096:	4a4a      	ldr	r2, [pc, #296]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe f940 	bl	8001324 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fe f93c 	bl	8001324 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e20c      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCC_OscConfig+0x3ec>
 80030c8:	e01b      	b.n	8003102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d0:	4a3b      	ldr	r2, [pc, #236]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe f923 	bl	8001324 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe f91f 	bl	8001324 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e1ef      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f4:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ef      	bne.n	80030e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80a6 	beq.w	800325c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	; 0x58
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313c:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <HAL_RCC_OscConfig+0x508>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d118      	bne.n	800317a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003148:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_RCC_OscConfig+0x508>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_RCC_OscConfig+0x508>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003154:	f7fe f8e6 	bl	8001324 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fe f8e2 	bl	8001324 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e1b2      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_RCC_OscConfig+0x508>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x4d8>
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003192:	e029      	b.n	80031e8 <HAL_RCC_OscConfig+0x52c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d115      	bne.n	80031c8 <HAL_RCC_OscConfig+0x50c>
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a03      	ldr	r2, [pc, #12]	; (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x52c>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
 80031c8:	4b9a      	ldr	r3, [pc, #616]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	4a99      	ldr	r2, [pc, #612]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d8:	4b96      	ldr	r3, [pc, #600]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	4a95      	ldr	r2, [pc, #596]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d016      	beq.n	800321e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe f898 	bl	8001324 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe f894 	bl	8001324 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e162      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320e:	4b89      	ldr	r3, [pc, #548]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ed      	beq.n	80031f8 <HAL_RCC_OscConfig+0x53c>
 800321c:	e015      	b.n	800324a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe f881 	bl	8001324 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe f87d 	bl	8001324 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e14b      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800323c:	4b7d      	ldr	r3, [pc, #500]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ed      	bne.n	8003226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b78      	ldr	r3, [pc, #480]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	4a77      	ldr	r2, [pc, #476]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01c      	beq.n	80032aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003270:	4b70      	ldr	r3, [pc, #448]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 8003272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003276:	4a6f      	ldr	r2, [pc, #444]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe f850 	bl	8001324 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003288:	f7fe f84c 	bl	8001324 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e11c      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800329a:	4b66      	ldr	r3, [pc, #408]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 800329c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <HAL_RCC_OscConfig+0x5cc>
 80032a8:	e01b      	b.n	80032e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032aa:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80032ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b0:	4a60      	ldr	r2, [pc, #384]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe f833 	bl	8001324 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c2:	f7fe f82f 	bl	8001324 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0ff      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80032d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ef      	bne.n	80032c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80f3 	beq.w	80034d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f040 80c9 	bne.w	8003488 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032f6:	4b4f      	ldr	r3, [pc, #316]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	429a      	cmp	r2, r3
 8003308:	d12c      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	3b01      	subs	r3, #1
 8003316:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d123      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d11b      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d113      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	3b01      	subs	r3, #1
 800334a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d109      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d06b      	beq.n	800343c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d062      	beq.n	8003430 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800336a:	4b32      	ldr	r3, [pc, #200]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0ac      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800337a:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 8003380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003384:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003386:	f7fd ffcd 	bl	8001324 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fd ffc9 	bl	8001324 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e099      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_RCC_OscConfig+0x77c>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033bc:	3a01      	subs	r2, #1
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033c6:	0212      	lsls	r2, r2, #8
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0552      	lsls	r2, r2, #21
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	0652      	lsls	r2, r2, #25
 80033e0:	4311      	orrs	r1, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e6:	06d2      	lsls	r2, r2, #27
 80033e8:	430a      	orrs	r2, r1
 80033ea:	4912      	ldr	r1, [pc, #72]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0f      	ldr	r2, [pc, #60]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003406:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003408:	f7fd ff8c 	bl	8001324 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fd ff88 	bl	8001324 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e058      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <HAL_RCC_OscConfig+0x778>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800342e:	e050      	b.n	80034d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e04f      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
 8003434:	40021000 	.word	0x40021000
 8003438:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343c:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d144      	bne.n	80034d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003448:	4b24      	ldr	r3, [pc, #144]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a20      	ldr	r2, [pc, #128]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 800345a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003460:	f7fd ff60 	bl	8001324 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003468:	f7fd ff5c 	bl	8001324 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e02c      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	4b18      	ldr	r3, [pc, #96]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x7ac>
 8003486:	e024      	b.n	80034d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d01f      	beq.n	80034ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 8003494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fd ff43 	bl	8001324 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fd ff3f 	bl	8001324 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	4905      	ldr	r1, [pc, #20]	; (80034dc <HAL_RCC_OscConfig+0x820>)
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCC_OscConfig+0x824>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	60cb      	str	r3, [r1, #12]
 80034cc:	e001      	b.n	80034d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	feeefffc 	.word	0xfeeefffc

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0e7      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b75      	ldr	r3, [pc, #468]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d910      	bls.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	4970      	ldr	r1, [pc, #448]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b6e      	ldr	r3, [pc, #440]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0cf      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003540:	429a      	cmp	r2, r3
 8003542:	d908      	bls.n	8003556 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4960      	ldr	r1, [pc, #384]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d04c      	beq.n	80035fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b5a      	ldr	r3, [pc, #360]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d121      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0a6      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	4b54      	ldr	r3, [pc, #336]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d115      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e09a      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800359a:	4b4e      	ldr	r3, [pc, #312]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e08e      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035aa:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e086      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4943      	ldr	r1, [pc, #268]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fd feaa 	bl	8001324 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fd fea6 	bl	8001324 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e06e      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d010      	beq.n	800362a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003614:	429a      	cmp	r2, r3
 8003616:	d208      	bcs.n	800362a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	492b      	ldr	r1, [pc, #172]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d210      	bcs.n	800365a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 0207 	bic.w	r2, r3, #7
 8003640:	4923      	ldr	r1, [pc, #140]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003648:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d001      	beq.n	800365a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e036      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4918      	ldr	r1, [pc, #96]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4910      	ldr	r1, [pc, #64]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003698:	f000 f824 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	490b      	ldr	r1, [pc, #44]	; (80036d8 <HAL_RCC_ClockConfig+0x1f4>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1f8>)
 80036b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1fc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fd fd07 	bl	80010d0 <HAL_InitTick>
 80036c2:	4603      	mov	r3, r0
 80036c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036c6:	7afb      	ldrb	r3, [r7, #11]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40022000 	.word	0x40022000
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08008a14 	.word	0x08008a14
 80036dc:	20000000 	.word	0x20000000
 80036e0:	20000004 	.word	0x20000004

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f2:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036fc:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x34>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d121      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d11e      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003724:	4b31      	ldr	r3, [pc, #196]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	e005      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003740:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10d      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003754:	e00a      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d102      	bne.n	8003762 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e004      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d101      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003768:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800376a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d134      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0xa6>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d003      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0xac>
 8003788:	e005      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800378c:	617b      	str	r3, [r7, #20]
      break;
 800378e:	e005      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003792:	617b      	str	r3, [r7, #20]
      break;
 8003794:	e002      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	617b      	str	r3, [r7, #20]
      break;
 800379a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	3301      	adds	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	fb03 f202 	mul.w	r2, r3, r2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	0e5b      	lsrs	r3, r3, #25
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	3301      	adds	r3, #1
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037dc:	69bb      	ldr	r3, [r7, #24]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	08008a2c 	.word	0x08008a2c
 80037f4:	00f42400 	.word	0x00f42400

080037f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_RCC_GetHCLKFreq+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000000 	.word	0x20000000

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003814:	f7ff fff0 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4904      	ldr	r1, [pc, #16]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	08008a24 	.word	0x08008a24

0800383c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003840:	f7ff ffda 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0adb      	lsrs	r3, r3, #11
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4904      	ldr	r1, [pc, #16]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	08008a24 	.word	0x08008a24

08003868 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	220f      	movs	r2, #15
 8003876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_RCC_GetClockConfig+0x5c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0203 	and.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_GetClockConfig+0x5c>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <HAL_RCC_GetClockConfig+0x60>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0207 	and.w	r2, r3, #7
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40022000 	.word	0x40022000

080038cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038d8:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038e4:	f7ff f986 	bl	8002bf4 <HAL_PWREx_GetVoltageRange>
 80038e8:	6178      	str	r0, [r7, #20]
 80038ea:	e014      	b.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a24      	ldr	r2, [pc, #144]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
 80038f8:	4b22      	ldr	r3, [pc, #136]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003904:	f7ff f976 	bl	8002bf4 <HAL_PWREx_GetVoltageRange>
 8003908:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003914:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d10b      	bne.n	8003936 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b80      	cmp	r3, #128	; 0x80
 8003922:	d919      	bls.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2ba0      	cmp	r3, #160	; 0xa0
 8003928:	d902      	bls.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800392a:	2302      	movs	r3, #2
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e013      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003930:	2301      	movs	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e010      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d902      	bls.n	8003942 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800393c:	2303      	movs	r3, #3
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	e00a      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d102      	bne.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003948:	2302      	movs	r3, #2
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e004      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b70      	cmp	r3, #112	; 0x70
 8003952:	d101      	bne.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 0207 	bic.w	r2, r3, #7
 8003960:	4909      	ldr	r1, [pc, #36]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003968:	4b07      	ldr	r3, [pc, #28]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	40022000 	.word	0x40022000

0800398c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003994:	2300      	movs	r3, #0
 8003996:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003998:	2300      	movs	r3, #0
 800399a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d031      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039b0:	d01a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80039b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039b6:	d814      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039c0:	d10f      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80039c2:	4b5d      	ldr	r3, [pc, #372]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4a5c      	ldr	r2, [pc, #368]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ce:	e00c      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f9f0 	bl	8003dbc <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	74fb      	strb	r3, [r7, #19]
      break;
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80039e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f0:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	494e      	ldr	r1, [pc, #312]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a06:	e001      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 809e 	beq.w	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a1e:	4b46      	ldr	r3, [pc, #280]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a34:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	4a3f      	ldr	r2, [pc, #252]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a40:	4b3d      	ldr	r3, [pc, #244]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a50:	4b3a      	ldr	r3, [pc, #232]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a39      	ldr	r2, [pc, #228]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a5c:	f7fd fc62 	bl	8001324 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a62:	e009      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a64:	f7fd fc5e 	bl	8001324 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d902      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	74fb      	strb	r3, [r7, #19]
        break;
 8003a76:	e005      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a78:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ef      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d15a      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01e      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d019      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ad2:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d016      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fc1e 	bl	8001324 <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aea:	e00b      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fd fc1a 	bl	8001324 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d902      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	74fb      	strb	r3, [r7, #19]
            break;
 8003b02:	e006      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ec      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4904      	ldr	r1, [pc, #16]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b2e:	e009      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	74bb      	strb	r3, [r7, #18]
 8003b34:	e006      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b44:	7c7b      	ldrb	r3, [r7, #17]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4a:	4b9b      	ldr	r3, [pc, #620]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	4a9a      	ldr	r2, [pc, #616]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b62:	4b95      	ldr	r3, [pc, #596]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	f023 0203 	bic.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4991      	ldr	r1, [pc, #580]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b84:	4b8c      	ldr	r3, [pc, #560]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f023 020c 	bic.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	4989      	ldr	r1, [pc, #548]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ba6:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	4980      	ldr	r1, [pc, #512]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bc8:	4b7b      	ldr	r3, [pc, #492]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	4978      	ldr	r1, [pc, #480]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	496f      	ldr	r1, [pc, #444]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4967      	ldr	r1, [pc, #412]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2e:	4b62      	ldr	r3, [pc, #392]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	495e      	ldr	r1, [pc, #376]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	4956      	ldr	r1, [pc, #344]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	494d      	ldr	r1, [pc, #308]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d028      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c94:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca2:	4945      	ldr	r1, [pc, #276]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb4:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cbe:	60d3      	str	r3, [r2, #12]
 8003cc0:	e011      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f872 	bl	8003dbc <RCCEx_PLLSAI1_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cf2:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	492d      	ldr	r1, [pc, #180]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d10:	d106      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1c:	60d3      	str	r3, [r2, #12]
 8003d1e:	e011      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f843 	bl	8003dbc <RCCEx_PLLSAI1_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01c      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	4916      	ldr	r1, [pc, #88]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f820 	bl	8003dbc <RCCEx_PLLSAI1_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	4904      	ldr	r1, [pc, #16]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dac:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000

08003dbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dca:	4b74      	ldr	r3, [pc, #464]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d018      	beq.n	8003e08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003dd6:	4b71      	ldr	r3, [pc, #452]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0203 	and.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d10d      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dee:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d047      	beq.n	8003e92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
 8003e06:	e044      	b.n	8003e92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d018      	beq.n	8003e42 <RCCEx_PLLSAI1_Config+0x86>
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d825      	bhi.n	8003e60 <RCCEx_PLLSAI1_Config+0xa4>
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d002      	beq.n	8003e1e <RCCEx_PLLSAI1_Config+0x62>
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d009      	beq.n	8003e30 <RCCEx_PLLSAI1_Config+0x74>
 8003e1c:	e020      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11d      	bne.n	8003e66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2e:	e01a      	b.n	8003e66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e30:	4b5a      	ldr	r3, [pc, #360]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e40:	e013      	b.n	8003e6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e42:	4b56      	ldr	r3, [pc, #344]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e4e:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e5e:	e006      	b.n	8003e6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	e004      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	4943      	ldr	r1, [pc, #268]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d17c      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e98:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a3f      	ldr	r2, [pc, #252]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea4:	f7fd fa3e 	bl	8001324 <HAL_GetTick>
 8003ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eaa:	e009      	b.n	8003ec0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eac:	f7fd fa3a 	bl	8001324 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d902      	bls.n	8003ec0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ebe:	e005      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ef      	bne.n	8003eac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d15f      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d110      	bne.n	8003efa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ed8:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ee0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6892      	ldr	r2, [r2, #8]
 8003ee8:	0211      	lsls	r1, r2, #8
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68d2      	ldr	r2, [r2, #12]
 8003eee:	06d2      	lsls	r2, r2, #27
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	492a      	ldr	r1, [pc, #168]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	610b      	str	r3, [r1, #16]
 8003ef8:	e027      	b.n	8003f4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d112      	bne.n	8003f26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f00:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6892      	ldr	r2, [r2, #8]
 8003f10:	0211      	lsls	r1, r2, #8
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6912      	ldr	r2, [r2, #16]
 8003f16:	0852      	lsrs	r2, r2, #1
 8003f18:	3a01      	subs	r2, #1
 8003f1a:	0552      	lsls	r2, r2, #21
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	491f      	ldr	r1, [pc, #124]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	610b      	str	r3, [r1, #16]
 8003f24:	e011      	b.n	8003f4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6892      	ldr	r2, [r2, #8]
 8003f36:	0211      	lsls	r1, r2, #8
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6952      	ldr	r2, [r2, #20]
 8003f3c:	0852      	lsrs	r2, r2, #1
 8003f3e:	3a01      	subs	r2, #1
 8003f40:	0652      	lsls	r2, r2, #25
 8003f42:	430a      	orrs	r2, r1
 8003f44:	4915      	ldr	r1, [pc, #84]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fd f9e5 	bl	8001324 <HAL_GetTick>
 8003f5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f5c:	e009      	b.n	8003f72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f5e:	f7fd f9e1 	bl	8001324 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d902      	bls.n	8003f72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	73fb      	strb	r3, [r7, #15]
          break;
 8003f70:	e005      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ef      	beq.n	8003f5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e049      	b.n	8004046 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc ff70 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 fce6 	bl	80049b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e03b      	b.n	80040e0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <HAL_TIM_Base_Start_IT+0x9c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_TIM_Base_Start_IT+0x4e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004092:	d004      	beq.n	800409e <HAL_TIM_Base_Start_IT+0x4e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <HAL_TIM_Base_Start_IT+0xa0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d115      	bne.n	80040ca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_TIM_Base_Start_IT+0xa4>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b06      	cmp	r3, #6
 80040ae:	d015      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x8c>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b6:	d011      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	e008      	b.n	80040dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e000      	b.n	80040de <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40014000 	.word	0x40014000
 80040f4:	00010007 	.word	0x00010007

080040f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e049      	b.n	800419e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f841 	bl	80041a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fc3a 	bl	80049b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_TIM_PWM_Start+0x24>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e03c      	b.n	800425a <HAL_TIM_PWM_Start+0x9e>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d109      	bne.n	80041fa <HAL_TIM_PWM_Start+0x3e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	bf14      	ite	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	2300      	moveq	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	e02f      	b.n	800425a <HAL_TIM_PWM_Start+0x9e>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d109      	bne.n	8004214 <HAL_TIM_PWM_Start+0x58>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e022      	b.n	800425a <HAL_TIM_PWM_Start+0x9e>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b0c      	cmp	r3, #12
 8004218:	d109      	bne.n	800422e <HAL_TIM_PWM_Start+0x72>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	e015      	b.n	800425a <HAL_TIM_PWM_Start+0x9e>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b10      	cmp	r3, #16
 8004232:	d109      	bne.n	8004248 <HAL_TIM_PWM_Start+0x8c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e008      	b.n	800425a <HAL_TIM_PWM_Start+0x9e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07e      	b.n	8004360 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Start+0xb6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	e023      	b.n	80042ba <HAL_TIM_PWM_Start+0xfe>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d104      	bne.n	8004282 <HAL_TIM_PWM_Start+0xc6>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004280:	e01b      	b.n	80042ba <HAL_TIM_PWM_Start+0xfe>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d104      	bne.n	8004292 <HAL_TIM_PWM_Start+0xd6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004290:	e013      	b.n	80042ba <HAL_TIM_PWM_Start+0xfe>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b0c      	cmp	r3, #12
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_PWM_Start+0xe6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a0:	e00b      	b.n	80042ba <HAL_TIM_PWM_Start+0xfe>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_PWM_Start+0xf6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b0:	e003      	b.n	80042ba <HAL_TIM_PWM_Start+0xfe>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	6839      	ldr	r1, [r7, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fef0 	bl	80050a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a26      	ldr	r2, [pc, #152]	; (8004368 <HAL_TIM_PWM_Start+0x1ac>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x12a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <HAL_TIM_PWM_Start+0x1b0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x12a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_TIM_PWM_Start+0x1b4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_PWM_Start+0x12e>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_TIM_PWM_Start+0x130>
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a18      	ldr	r2, [pc, #96]	; (8004368 <HAL_TIM_PWM_Start+0x1ac>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_TIM_PWM_Start+0x162>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d004      	beq.n	800431e <HAL_TIM_PWM_Start+0x162>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_TIM_PWM_Start+0x1b0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d115      	bne.n	800434a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <HAL_TIM_PWM_Start+0x1b8>)
 8004326:	4013      	ands	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d015      	beq.n	800435c <HAL_TIM_PWM_Start+0x1a0>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004336:	d011      	beq.n	800435c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	e008      	b.n	800435c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e000      	b.n	800435e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40014000 	.word	0x40014000
 8004370:	40014400 	.word	0x40014400
 8004374:	00010007 	.word	0x00010007

08004378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b02      	cmp	r3, #2
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b02      	cmp	r3, #2
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0202 	mvn.w	r2, #2
 80043a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fae3 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fad5 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fc f8e1 	bl	8000590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0204 	mvn.w	r2, #4
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fab9 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 faab 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc f8b7 	bl	8000590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b08      	cmp	r3, #8
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b08      	cmp	r3, #8
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0208 	mvn.w	r2, #8
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2204      	movs	r2, #4
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa8f 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa81 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7fc f88d 	bl	8000590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b10      	cmp	r3, #16
 8004488:	d122      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b10      	cmp	r3, #16
 8004496:	d11b      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0210 	mvn.w	r2, #16
 80044a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2208      	movs	r2, #8
 80044a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa65 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fa57 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fc f863 	bl	8000590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d10e      	bne.n	80044fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0201 	mvn.w	r2, #1
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fc fbde 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b80      	cmp	r3, #128	; 0x80
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d107      	bne.n	8004528 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fece 	bl	80052c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004536:	d10e      	bne.n	8004556 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	2b80      	cmp	r3, #128	; 0x80
 8004544:	d107      	bne.n	8004556 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800454e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fec1 	bl	80052d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d10e      	bne.n	8004582 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d107      	bne.n	8004582 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800457a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fa0c 	bl	800499a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b20      	cmp	r3, #32
 800458e:	d10e      	bne.n	80045ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b20      	cmp	r3, #32
 800459c:	d107      	bne.n	80045ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0220 	mvn.w	r2, #32
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fe81 	bl	80052b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e0ff      	b.n	80047d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b14      	cmp	r3, #20
 80045e2:	f200 80f0 	bhi.w	80047c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	08004641 	.word	0x08004641
 80045f0:	080047c7 	.word	0x080047c7
 80045f4:	080047c7 	.word	0x080047c7
 80045f8:	080047c7 	.word	0x080047c7
 80045fc:	08004681 	.word	0x08004681
 8004600:	080047c7 	.word	0x080047c7
 8004604:	080047c7 	.word	0x080047c7
 8004608:	080047c7 	.word	0x080047c7
 800460c:	080046c3 	.word	0x080046c3
 8004610:	080047c7 	.word	0x080047c7
 8004614:	080047c7 	.word	0x080047c7
 8004618:	080047c7 	.word	0x080047c7
 800461c:	08004703 	.word	0x08004703
 8004620:	080047c7 	.word	0x080047c7
 8004624:	080047c7 	.word	0x080047c7
 8004628:	080047c7 	.word	0x080047c7
 800462c:	08004745 	.word	0x08004745
 8004630:	080047c7 	.word	0x080047c7
 8004634:	080047c7 	.word	0x080047c7
 8004638:	080047c7 	.word	0x080047c7
 800463c:	08004785 	.word	0x08004785
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fa16 	bl	8004a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0208 	orr.w	r2, r2, #8
 800465a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0204 	bic.w	r2, r2, #4
 800466a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6999      	ldr	r1, [r3, #24]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	619a      	str	r2, [r3, #24]
      break;
 800467e:	e0a5      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fa72 	bl	8004b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800469a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6999      	ldr	r1, [r3, #24]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	021a      	lsls	r2, r3, #8
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	619a      	str	r2, [r3, #24]
      break;
 80046c0:	e084      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 facb 	bl	8004c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0208 	orr.w	r2, r2, #8
 80046dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69da      	ldr	r2, [r3, #28]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0204 	bic.w	r2, r2, #4
 80046ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69d9      	ldr	r1, [r3, #28]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	61da      	str	r2, [r3, #28]
      break;
 8004700:	e064      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fb23 	bl	8004d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69d9      	ldr	r1, [r3, #28]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	021a      	lsls	r2, r3, #8
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	61da      	str	r2, [r3, #28]
      break;
 8004742:	e043      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fb60 	bl	8004e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0208 	orr.w	r2, r2, #8
 800475e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0204 	bic.w	r2, r2, #4
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004782:	e023      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fb98 	bl	8004ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	021a      	lsls	r2, r3, #8
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047c4:	e002      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop

080047e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_ConfigClockSource+0x1c>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0b6      	b.n	800496a <HAL_TIM_ConfigClockSource+0x18a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800481e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004838:	d03e      	beq.n	80048b8 <HAL_TIM_ConfigClockSource+0xd8>
 800483a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483e:	f200 8087 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	f000 8086 	beq.w	8004956 <HAL_TIM_ConfigClockSource+0x176>
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	d87f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004850:	2b70      	cmp	r3, #112	; 0x70
 8004852:	d01a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0xaa>
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d87b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004858:	2b60      	cmp	r3, #96	; 0x60
 800485a:	d050      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x11e>
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d877      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004860:	2b50      	cmp	r3, #80	; 0x50
 8004862:	d03c      	beq.n	80048de <HAL_TIM_ConfigClockSource+0xfe>
 8004864:	2b50      	cmp	r3, #80	; 0x50
 8004866:	d873      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d058      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x13e>
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d86f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004870:	2b30      	cmp	r3, #48	; 0x30
 8004872:	d064      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15e>
 8004874:	2b30      	cmp	r3, #48	; 0x30
 8004876:	d86b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d060      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15e>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d867      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05c      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15e>
 8004884:	2b10      	cmp	r3, #16
 8004886:	d05a      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15e>
 8004888:	e062      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6899      	ldr	r1, [r3, #8]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f000 fbe5 	bl	8005068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	609a      	str	r2, [r3, #8]
      break;
 80048b6:	e04f      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f000 fbce 	bl	8005068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048da:	609a      	str	r2, [r3, #8]
      break;
 80048dc:	e03c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 fb42 	bl	8004f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2150      	movs	r1, #80	; 0x50
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fb9b 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 80048fc:	e02c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	461a      	mov	r2, r3
 800490c:	f000 fb61 	bl	8004fd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2160      	movs	r1, #96	; 0x60
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fb8b 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 800491c:	e01c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	461a      	mov	r2, r3
 800492c:	f000 fb22 	bl	8004f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2140      	movs	r1, #64	; 0x40
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fb7b 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 800493c:	e00c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 fb72 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 800494e:	e003      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e000      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a2a      	ldr	r2, [pc, #168]	; (8004a6c <TIM_Base_SetConfig+0xbc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_Base_SetConfig+0x20>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d108      	bne.n	80049e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <TIM_Base_SetConfig+0xbc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <TIM_Base_SetConfig+0x52>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d007      	beq.n	8004a02 <TIM_Base_SetConfig+0x52>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <TIM_Base_SetConfig+0xc0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_Base_SetConfig+0x52>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <TIM_Base_SetConfig+0xc4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d108      	bne.n	8004a14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <TIM_Base_SetConfig+0xbc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_Base_SetConfig+0xa0>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0b      	ldr	r2, [pc, #44]	; (8004a70 <TIM_Base_SetConfig+0xc0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0xa0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	; (8004a74 <TIM_Base_SetConfig+0xc4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d103      	bne.n	8004a58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	615a      	str	r2, [r3, #20]
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400

08004a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f023 0302 	bic.w	r3, r3, #2
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <TIM_OC1_SetConfig+0xec>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d007      	beq.n	8004ae8 <TIM_OC1_SetConfig+0x70>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <TIM_OC1_SetConfig+0xf0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_OC1_SetConfig+0x70>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <TIM_OC1_SetConfig+0xf4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d10c      	bne.n	8004b02 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0308 	bic.w	r3, r3, #8
 8004aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f023 0304 	bic.w	r3, r3, #4
 8004b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a17      	ldr	r2, [pc, #92]	; (8004b64 <TIM_OC1_SetConfig+0xec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <TIM_OC1_SetConfig+0xa2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <TIM_OC1_SetConfig+0xf0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_OC1_SetConfig+0xa2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <TIM_OC1_SetConfig+0xf4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d111      	bne.n	8004b3e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400

08004b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0210 	bic.w	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0320 	bic.w	r3, r3, #32
 8004bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a22      	ldr	r2, [pc, #136]	; (8004c58 <TIM_OC2_SetConfig+0xe8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10d      	bne.n	8004bf0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <TIM_OC2_SetConfig+0xe8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_OC2_SetConfig+0x98>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <TIM_OC2_SetConfig+0xec>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_OC2_SetConfig+0x98>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <TIM_OC2_SetConfig+0xf0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d113      	bne.n	8004c30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400

08004c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <TIM_OC3_SetConfig+0xe4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d10d      	bne.n	8004ce2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <TIM_OC3_SetConfig+0xe4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_OC3_SetConfig+0x96>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <TIM_OC3_SetConfig+0xe8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC3_SetConfig+0x96>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <TIM_OC3_SetConfig+0xec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40014000 	.word	0x40014000
 8004d50:	40014400 	.word	0x40014400

08004d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <TIM_OC4_SetConfig+0xb0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d007      	beq.n	8004dc8 <TIM_OC4_SetConfig+0x74>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <TIM_OC4_SetConfig+0xb4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_OC4_SetConfig+0x74>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <TIM_OC4_SetConfig+0xb8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d109      	bne.n	8004ddc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	019b      	lsls	r3, r3, #6
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400

08004e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <TIM_OC5_SetConfig+0xa4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d007      	beq.n	8004e7a <TIM_OC5_SetConfig+0x6a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <TIM_OC5_SetConfig+0xa8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d003      	beq.n	8004e7a <TIM_OC5_SetConfig+0x6a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <TIM_OC5_SetConfig+0xac>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d109      	bne.n	8004e8e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400

08004ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	051b      	lsls	r3, r3, #20
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <TIM_OC6_SetConfig+0xa8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <TIM_OC6_SetConfig+0x6c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <TIM_OC6_SetConfig+0xac>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC6_SetConfig+0x6c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <TIM_OC6_SetConfig+0xb0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d109      	bne.n	8004f40 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400

08004f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 030a 	bic.w	r3, r3, #10
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b087      	sub	sp, #28
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0210 	bic.w	r2, r3, #16
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	031b      	lsls	r3, r3, #12
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800500e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	f043 0307 	orr.w	r3, r3, #7
 8005054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	021a      	lsls	r2, r3, #8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	431a      	orrs	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4313      	orrs	r3, r2
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2201      	movs	r2, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e04f      	b.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800513c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005174:	d004      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10c      	bne.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40014000 	.word	0x40014000

080051c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051d8:	2302      	movs	r3, #2
 80051da:	e060      	b.n	800529e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a14      	ldr	r2, [pc, #80]	; (80052ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d115      	bne.n	800528c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	051b      	lsls	r3, r3, #20
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40012c00 	.word	0x40012c00

080052b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e040      	b.n	8005380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fb fe86 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2224      	movs	r2, #36	; 0x24
 8005318:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f82c 	bl	8005388 <UART_SetConfig>
 8005330:	4603      	mov	r3, r0
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e022      	b.n	8005380 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fa7a 	bl	800583c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fb01 	bl	8005980 <UART_CheckIdleState>
 800537e:	4603      	mov	r3, r0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800538c:	b08a      	sub	sp, #40	; 0x28
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b9e      	ldr	r3, [pc, #632]	; (8005630 <UART_SetConfig+0x2a8>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053c0:	430b      	orrs	r3, r1
 80053c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a93      	ldr	r2, [pc, #588]	; (8005634 <UART_SetConfig+0x2ac>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	4313      	orrs	r3, r2
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a8a      	ldr	r2, [pc, #552]	; (8005638 <UART_SetConfig+0x2b0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d126      	bne.n	8005460 <UART_SetConfig+0xd8>
 8005412:	4b8a      	ldr	r3, [pc, #552]	; (800563c <UART_SetConfig+0x2b4>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	2b03      	cmp	r3, #3
 800541e:	d81b      	bhi.n	8005458 <UART_SetConfig+0xd0>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <UART_SetConfig+0xa0>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	08005439 	.word	0x08005439
 800542c:	08005449 	.word	0x08005449
 8005430:	08005441 	.word	0x08005441
 8005434:	08005451 	.word	0x08005451
 8005438:	2301      	movs	r3, #1
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543e:	e0ab      	b.n	8005598 <UART_SetConfig+0x210>
 8005440:	2302      	movs	r3, #2
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005446:	e0a7      	b.n	8005598 <UART_SetConfig+0x210>
 8005448:	2304      	movs	r3, #4
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544e:	e0a3      	b.n	8005598 <UART_SetConfig+0x210>
 8005450:	2308      	movs	r3, #8
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005456:	e09f      	b.n	8005598 <UART_SetConfig+0x210>
 8005458:	2310      	movs	r3, #16
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545e:	e09b      	b.n	8005598 <UART_SetConfig+0x210>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a76      	ldr	r2, [pc, #472]	; (8005640 <UART_SetConfig+0x2b8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d138      	bne.n	80054dc <UART_SetConfig+0x154>
 800546a:	4b74      	ldr	r3, [pc, #464]	; (800563c <UART_SetConfig+0x2b4>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d82d      	bhi.n	80054d4 <UART_SetConfig+0x14c>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0xf8>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	080054b5 	.word	0x080054b5
 8005484:	080054d5 	.word	0x080054d5
 8005488:	080054d5 	.word	0x080054d5
 800548c:	080054d5 	.word	0x080054d5
 8005490:	080054c5 	.word	0x080054c5
 8005494:	080054d5 	.word	0x080054d5
 8005498:	080054d5 	.word	0x080054d5
 800549c:	080054d5 	.word	0x080054d5
 80054a0:	080054bd 	.word	0x080054bd
 80054a4:	080054d5 	.word	0x080054d5
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054cd 	.word	0x080054cd
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ba:	e06d      	b.n	8005598 <UART_SetConfig+0x210>
 80054bc:	2302      	movs	r3, #2
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e069      	b.n	8005598 <UART_SetConfig+0x210>
 80054c4:	2304      	movs	r3, #4
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e065      	b.n	8005598 <UART_SetConfig+0x210>
 80054cc:	2308      	movs	r3, #8
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e061      	b.n	8005598 <UART_SetConfig+0x210>
 80054d4:	2310      	movs	r3, #16
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e05d      	b.n	8005598 <UART_SetConfig+0x210>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a58      	ldr	r2, [pc, #352]	; (8005644 <UART_SetConfig+0x2bc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d125      	bne.n	8005532 <UART_SetConfig+0x1aa>
 80054e6:	4b55      	ldr	r3, [pc, #340]	; (800563c <UART_SetConfig+0x2b4>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054f0:	2b30      	cmp	r3, #48	; 0x30
 80054f2:	d016      	beq.n	8005522 <UART_SetConfig+0x19a>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d818      	bhi.n	800552a <UART_SetConfig+0x1a2>
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d00a      	beq.n	8005512 <UART_SetConfig+0x18a>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d814      	bhi.n	800552a <UART_SetConfig+0x1a2>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <UART_SetConfig+0x182>
 8005504:	2b10      	cmp	r3, #16
 8005506:	d008      	beq.n	800551a <UART_SetConfig+0x192>
 8005508:	e00f      	b.n	800552a <UART_SetConfig+0x1a2>
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005510:	e042      	b.n	8005598 <UART_SetConfig+0x210>
 8005512:	2302      	movs	r3, #2
 8005514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005518:	e03e      	b.n	8005598 <UART_SetConfig+0x210>
 800551a:	2304      	movs	r3, #4
 800551c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005520:	e03a      	b.n	8005598 <UART_SetConfig+0x210>
 8005522:	2308      	movs	r3, #8
 8005524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005528:	e036      	b.n	8005598 <UART_SetConfig+0x210>
 800552a:	2310      	movs	r3, #16
 800552c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005530:	e032      	b.n	8005598 <UART_SetConfig+0x210>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a3f      	ldr	r2, [pc, #252]	; (8005634 <UART_SetConfig+0x2ac>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d12a      	bne.n	8005592 <UART_SetConfig+0x20a>
 800553c:	4b3f      	ldr	r3, [pc, #252]	; (800563c <UART_SetConfig+0x2b4>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800554a:	d01a      	beq.n	8005582 <UART_SetConfig+0x1fa>
 800554c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005550:	d81b      	bhi.n	800558a <UART_SetConfig+0x202>
 8005552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005556:	d00c      	beq.n	8005572 <UART_SetConfig+0x1ea>
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555c:	d815      	bhi.n	800558a <UART_SetConfig+0x202>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <UART_SetConfig+0x1e2>
 8005562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005566:	d008      	beq.n	800557a <UART_SetConfig+0x1f2>
 8005568:	e00f      	b.n	800558a <UART_SetConfig+0x202>
 800556a:	2300      	movs	r3, #0
 800556c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005570:	e012      	b.n	8005598 <UART_SetConfig+0x210>
 8005572:	2302      	movs	r3, #2
 8005574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005578:	e00e      	b.n	8005598 <UART_SetConfig+0x210>
 800557a:	2304      	movs	r3, #4
 800557c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005580:	e00a      	b.n	8005598 <UART_SetConfig+0x210>
 8005582:	2308      	movs	r3, #8
 8005584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005588:	e006      	b.n	8005598 <UART_SetConfig+0x210>
 800558a:	2310      	movs	r3, #16
 800558c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005590:	e002      	b.n	8005598 <UART_SetConfig+0x210>
 8005592:	2310      	movs	r3, #16
 8005594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a25      	ldr	r2, [pc, #148]	; (8005634 <UART_SetConfig+0x2ac>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f040 808a 	bne.w	80056b8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d824      	bhi.n	80055f6 <UART_SetConfig+0x26e>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x22c>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055f7 	.word	0x080055f7
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055f7 	.word	0x080055f7
 80055c4:	080055e7 	.word	0x080055e7
 80055c8:	080055f7 	.word	0x080055f7
 80055cc:	080055f7 	.word	0x080055f7
 80055d0:	080055f7 	.word	0x080055f7
 80055d4:	080055ef 	.word	0x080055ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d8:	f7fe f91a 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 80055dc:	61f8      	str	r0, [r7, #28]
        break;
 80055de:	e010      	b.n	8005602 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e0:	4b19      	ldr	r3, [pc, #100]	; (8005648 <UART_SetConfig+0x2c0>)
 80055e2:	61fb      	str	r3, [r7, #28]
        break;
 80055e4:	e00d      	b.n	8005602 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055e6:	f7fe f87d 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80055ea:	61f8      	str	r0, [r7, #28]
        break;
 80055ec:	e009      	b.n	8005602 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f2:	61fb      	str	r3, [r7, #28]
        break;
 80055f4:	e005      	b.n	8005602 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8109 	beq.w	800581c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	429a      	cmp	r2, r3
 8005618:	d305      	bcc.n	8005626 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	429a      	cmp	r2, r3
 8005624:	d912      	bls.n	800564c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800562c:	e0f6      	b.n	800581c <UART_SetConfig+0x494>
 800562e:	bf00      	nop
 8005630:	efff69f3 	.word	0xefff69f3
 8005634:	40008000 	.word	0x40008000
 8005638:	40013800 	.word	0x40013800
 800563c:	40021000 	.word	0x40021000
 8005640:	40004400 	.word	0x40004400
 8005644:	40004800 	.word	0x40004800
 8005648:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	2200      	movs	r2, #0
 8005650:	461c      	mov	r4, r3
 8005652:	4615      	mov	r5, r2
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	022b      	lsls	r3, r5, #8
 800565e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005662:	0222      	lsls	r2, r4, #8
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	6849      	ldr	r1, [r1, #4]
 8005668:	0849      	lsrs	r1, r1, #1
 800566a:	2000      	movs	r0, #0
 800566c:	4688      	mov	r8, r1
 800566e:	4681      	mov	r9, r0
 8005670:	eb12 0a08 	adds.w	sl, r2, r8
 8005674:	eb43 0b09 	adc.w	fp, r3, r9
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005686:	4650      	mov	r0, sl
 8005688:	4659      	mov	r1, fp
 800568a:	f7fa fda1 	bl	80001d0 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4613      	mov	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800569c:	d308      	bcc.n	80056b0 <UART_SetConfig+0x328>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a4:	d204      	bcs.n	80056b0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	e0b5      	b.n	800581c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056b6:	e0b1      	b.n	800581c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	d15d      	bne.n	800577e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80056c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d827      	bhi.n	800571a <UART_SetConfig+0x392>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <UART_SetConfig+0x348>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	08005705 	.word	0x08005705
 80056dc:	0800571b 	.word	0x0800571b
 80056e0:	0800570b 	.word	0x0800570b
 80056e4:	0800571b 	.word	0x0800571b
 80056e8:	0800571b 	.word	0x0800571b
 80056ec:	0800571b 	.word	0x0800571b
 80056f0:	08005713 	.word	0x08005713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f4:	f7fe f88c 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 80056f8:	61f8      	str	r0, [r7, #28]
        break;
 80056fa:	e014      	b.n	8005726 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056fc:	f7fe f89e 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8005700:	61f8      	str	r0, [r7, #28]
        break;
 8005702:	e010      	b.n	8005726 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005704:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <UART_SetConfig+0x4b0>)
 8005706:	61fb      	str	r3, [r7, #28]
        break;
 8005708:	e00d      	b.n	8005726 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570a:	f7fd ffeb 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800570e:	61f8      	str	r0, [r7, #28]
        break;
 8005710:	e009      	b.n	8005726 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005716:	61fb      	str	r3, [r7, #28]
        break;
 8005718:	e005      	b.n	8005726 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005724:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d077      	beq.n	800581c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	005a      	lsls	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b0f      	cmp	r3, #15
 8005746:	d916      	bls.n	8005776 <UART_SetConfig+0x3ee>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574e:	d212      	bcs.n	8005776 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f023 030f 	bic.w	r3, r3, #15
 8005758:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	b29b      	uxth	r3, r3
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	b29a      	uxth	r2, r3
 8005766:	8afb      	ldrh	r3, [r7, #22]
 8005768:	4313      	orrs	r3, r2
 800576a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	8afa      	ldrh	r2, [r7, #22]
 8005772:	60da      	str	r2, [r3, #12]
 8005774:	e052      	b.n	800581c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800577c:	e04e      	b.n	800581c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800577e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005782:	2b08      	cmp	r3, #8
 8005784:	d827      	bhi.n	80057d6 <UART_SetConfig+0x44e>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <UART_SetConfig+0x404>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057b1 	.word	0x080057b1
 8005790:	080057b9 	.word	0x080057b9
 8005794:	080057c1 	.word	0x080057c1
 8005798:	080057d7 	.word	0x080057d7
 800579c:	080057c7 	.word	0x080057c7
 80057a0:	080057d7 	.word	0x080057d7
 80057a4:	080057d7 	.word	0x080057d7
 80057a8:	080057d7 	.word	0x080057d7
 80057ac:	080057cf 	.word	0x080057cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b0:	f7fe f82e 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 80057b4:	61f8      	str	r0, [r7, #28]
        break;
 80057b6:	e014      	b.n	80057e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057b8:	f7fe f840 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 80057bc:	61f8      	str	r0, [r7, #28]
        break;
 80057be:	e010      	b.n	80057e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c0:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <UART_SetConfig+0x4b0>)
 80057c2:	61fb      	str	r3, [r7, #28]
        break;
 80057c4:	e00d      	b.n	80057e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c6:	f7fd ff8d 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80057ca:	61f8      	str	r0, [r7, #28]
        break;
 80057cc:	e009      	b.n	80057e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057d2:	61fb      	str	r3, [r7, #28]
        break;
 80057d4:	e005      	b.n	80057e2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057e0:	bf00      	nop
    }

    if (pclk != 0U)
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d019      	beq.n	800581c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	085a      	lsrs	r2, r3, #1
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	441a      	add	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b0f      	cmp	r3, #15
 8005800:	d909      	bls.n	8005816 <UART_SetConfig+0x48e>
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005808:	d205      	bcs.n	8005816 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	e002      	b.n	800581c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005828:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800582c:	4618      	mov	r0, r3
 800582e:	3728      	adds	r7, #40	; 0x28
 8005830:	46bd      	mov	sp, r7
 8005832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005836:	bf00      	nop
 8005838:	00f42400 	.word	0x00f42400

0800583c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01a      	beq.n	8005952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593a:	d10a      	bne.n	8005952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	605a      	str	r2, [r3, #4]
  }
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af02      	add	r7, sp, #8
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005990:	f7fb fcc8 	bl	8001324 <HAL_GetTick>
 8005994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d10e      	bne.n	80059c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f82d 	bl	8005a12 <UART_WaitOnFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e023      	b.n	8005a0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d10e      	bne.n	80059ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f817 	bl	8005a12 <UART_WaitOnFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e00d      	b.n	8005a0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b09c      	sub	sp, #112	; 0x70
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a22:	e0a5      	b.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a2a:	f000 80a1 	beq.w	8005b70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2e:	f7fb fc79 	bl	8001324 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d13e      	bne.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a58:	667b      	str	r3, [r7, #100]	; 0x64
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e6      	bne.n	8005a44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3308      	adds	r3, #8
 8005a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a96:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e5      	bne.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e067      	b.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d04f      	beq.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ade:	d147      	bne.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e6      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b3c:	623a      	str	r2, [r7, #32]
 8005b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	69f9      	ldr	r1, [r7, #28]
 8005b42:	6a3a      	ldr	r2, [r7, #32]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e010      	b.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	bf0c      	ite	eq
 8005b80:	2301      	moveq	r3, #1
 8005b82:	2300      	movne	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	f43f af4a 	beq.w	8005a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3770      	adds	r7, #112	; 0x70
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <__NVIC_SetPriority>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	6039      	str	r1, [r7, #0]
 8005ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	db0a      	blt.n	8005bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	490c      	ldr	r1, [pc, #48]	; (8005be8 <__NVIC_SetPriority+0x4c>)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	0112      	lsls	r2, r2, #4
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005bc4:	e00a      	b.n	8005bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4908      	ldr	r1, [pc, #32]	; (8005bec <__NVIC_SetPriority+0x50>)
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	0112      	lsls	r2, r2, #4
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	440b      	add	r3, r1
 8005bda:	761a      	strb	r2, [r3, #24]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	e000e100 	.word	0xe000e100
 8005bec:	e000ed00 	.word	0xe000ed00

08005bf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <SysTick_Handler+0x1c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005bf8:	f001 fd4c 	bl	8007694 <xTaskGetSchedulerState>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d001      	beq.n	8005c06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c02:	f002 fb31 	bl	8008268 <xPortSysTickHandler>
  }
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	e000e010 	.word	0xe000e010

08005c10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c14:	2100      	movs	r1, #0
 8005c16:	f06f 0004 	mvn.w	r0, #4
 8005c1a:	f7ff ffbf 	bl	8005b9c <__NVIC_SetPriority>
#endif
}
 8005c1e:	bf00      	nop
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c2a:	f3ef 8305 	mrs	r3, IPSR
 8005c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c36:	f06f 0305 	mvn.w	r3, #5
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	e00c      	b.n	8005c58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <osKernelInitialize+0x44>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d105      	bne.n	8005c52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <osKernelInitialize+0x44>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	e002      	b.n	8005c58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c58:	687b      	ldr	r3, [r7, #4]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	200002c8 	.word	0x200002c8

08005c6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c72:	f3ef 8305 	mrs	r3, IPSR
 8005c76:	603b      	str	r3, [r7, #0]
  return(result);
 8005c78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c7e:	f06f 0305 	mvn.w	r3, #5
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	e010      	b.n	8005ca8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <osKernelStart+0x48>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d109      	bne.n	8005ca2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c8e:	f7ff ffbf 	bl	8005c10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <osKernelStart+0x48>)
 8005c94:	2202      	movs	r2, #2
 8005c96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c98:	f001 f882 	bl	8006da0 <vTaskStartScheduler>
      stat = osOK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	e002      	b.n	8005ca8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ca8:	687b      	ldr	r3, [r7, #4]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200002c8 	.word	0x200002c8

08005cb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08e      	sub	sp, #56	; 0x38
 8005cbc:	af04      	add	r7, sp, #16
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc8:	f3ef 8305 	mrs	r3, IPSR
 8005ccc:	617b      	str	r3, [r7, #20]
  return(result);
 8005cce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d17e      	bne.n	8005dd2 <osThreadNew+0x11a>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d07b      	beq.n	8005dd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005cde:	2318      	movs	r3, #24
 8005ce0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d045      	beq.n	8005d7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <osThreadNew+0x48>
        name = attr->name;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <osThreadNew+0x6e>
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b38      	cmp	r3, #56	; 0x38
 8005d18:	d805      	bhi.n	8005d26 <osThreadNew+0x6e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <osThreadNew+0x72>
        return (NULL);
 8005d26:	2300      	movs	r3, #0
 8005d28:	e054      	b.n	8005dd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	089b      	lsrs	r3, r3, #2
 8005d38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00e      	beq.n	8005d60 <osThreadNew+0xa8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2bc3      	cmp	r3, #195	; 0xc3
 8005d48:	d90a      	bls.n	8005d60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d006      	beq.n	8005d60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <osThreadNew+0xa8>
        mem = 1;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e010      	b.n	8005d82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10c      	bne.n	8005d82 <osThreadNew+0xca>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d108      	bne.n	8005d82 <osThreadNew+0xca>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <osThreadNew+0xca>
          mem = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e001      	b.n	8005d82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d110      	bne.n	8005daa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d90:	9202      	str	r2, [sp, #8]
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6a3a      	ldr	r2, [r7, #32]
 8005d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fe0c 	bl	80069bc <xTaskCreateStatic>
 8005da4:	4603      	mov	r3, r0
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	e013      	b.n	8005dd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d110      	bne.n	8005dd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	f107 0310 	add.w	r3, r7, #16
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fe57 	bl	8006a76 <xTaskCreate>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d001      	beq.n	8005dd2 <osThreadNew+0x11a>
            hTask = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dd2:	693b      	ldr	r3, [r7, #16]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3728      	adds	r7, #40	; 0x28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de4:	f3ef 8305 	mrs	r3, IPSR
 8005de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <osDelay+0x1c>
    stat = osErrorISR;
 8005df0:	f06f 0305 	mvn.w	r3, #5
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e007      	b.n	8005e08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 ff98 	bl	8006d38 <vTaskDelay>
    }
  }

  return (stat);
 8005e08:	68fb      	ldr	r3, [r7, #12]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4a07      	ldr	r2, [pc, #28]	; (8005e40 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4a06      	ldr	r2, [pc, #24]	; (8005e44 <vApplicationGetIdleTaskMemory+0x30>)
 8005e2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	601a      	str	r2, [r3, #0]
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	200002cc 	.word	0x200002cc
 8005e44:	20000390 	.word	0x20000390

08005e48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a07      	ldr	r2, [pc, #28]	; (8005e74 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4a06      	ldr	r2, [pc, #24]	; (8005e78 <vApplicationGetTimerTaskMemory+0x30>)
 8005e5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e66:	601a      	str	r2, [r3, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	20000590 	.word	0x20000590
 8005e78:	20000654 	.word	0x20000654

08005e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f103 0208 	add.w	r2, r3, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f103 0208 	add.w	r2, r3, #8
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f103 0208 	add.w	r2, r3, #8
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f34:	d103      	bne.n	8005f3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e00c      	b.n	8005f58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3308      	adds	r3, #8
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e002      	b.n	8005f4c <vListInsert+0x2e>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d2f6      	bcs.n	8005f46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6892      	ldr	r2, [r2, #8]
 8005fa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6852      	ldr	r2, [r2, #4]
 8005fb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d103      	bne.n	8005fc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	1e5a      	subs	r2, r3, #1
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800600e:	f002 f899 	bl	8008144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	3b01      	subs	r3, #1
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	441a      	add	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	22ff      	movs	r2, #255	; 0xff
 8006052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	22ff      	movs	r2, #255	; 0xff
 800605a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d114      	bne.n	800608e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01a      	beq.n	80060a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3310      	adds	r3, #16
 8006070:	4618      	mov	r0, r3
 8006072:	f001 f94d 	bl	8007310 <xTaskRemoveFromEventList>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <xQueueGenericReset+0xcc>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	e009      	b.n	80060a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3310      	adds	r3, #16
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fef2 	bl	8005e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3324      	adds	r3, #36	; 0x24
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff feed 	bl	8005e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060a2:	f002 f87f 	bl	80081a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060a6:	2301      	movs	r3, #1
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	e000ed04 	.word	0xe000ed04

080060b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08e      	sub	sp, #56	; 0x38
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <xQueueGenericCreateStatic+0x52>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <xQueueGenericCreateStatic+0x56>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <xQueueGenericCreateStatic+0x58>
 800610a:	2300      	movs	r3, #0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	623b      	str	r3, [r7, #32]
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <xQueueGenericCreateStatic+0x7e>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <xQueueGenericCreateStatic+0x82>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <xQueueGenericCreateStatic+0x84>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	61fb      	str	r3, [r7, #28]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006152:	2350      	movs	r3, #80	; 0x50
 8006154:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b50      	cmp	r3, #80	; 0x50
 800615a:	d00a      	beq.n	8006172 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	61bb      	str	r3, [r7, #24]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006172:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006186:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	4613      	mov	r3, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f805 	bl	80061a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800619c:	4618      	mov	r0, r3
 800619e:	3730      	adds	r7, #48	; 0x30
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e002      	b.n	80061c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061d2:	2101      	movs	r1, #1
 80061d4:	69b8      	ldr	r0, [r7, #24]
 80061d6:	f7ff ff05 	bl	8005fe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08e      	sub	sp, #56	; 0x38
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061fa:	2300      	movs	r3, #0
 80061fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <xQueueGenericSend+0x32>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <xQueueGenericSend+0x40>
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <xQueueGenericSend+0x44>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <xQueueGenericSend+0x46>
 8006230:	2300      	movs	r3, #0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <xQueueGenericSend+0x60>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d103      	bne.n	800625a <xQueueGenericSend+0x6e>
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <xQueueGenericSend+0x72>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <xQueueGenericSend+0x74>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xQueueGenericSend+0x8e>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	623b      	str	r3, [r7, #32]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800627a:	f001 fa0b 	bl	8007694 <xTaskGetSchedulerState>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <xQueueGenericSend+0x9e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <xQueueGenericSend+0xa2>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <xQueueGenericSend+0xa4>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericSend+0xbe>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	61fb      	str	r3, [r7, #28]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062aa:	f001 ff4b 	bl	8008144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d302      	bcc.n	80062c0 <xQueueGenericSend+0xd4>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d129      	bne.n	8006314 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062c6:	f000 fa0b 	bl	80066e0 <prvCopyDataToQueue>
 80062ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d010      	beq.n	80062f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	3324      	adds	r3, #36	; 0x24
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 f819 	bl	8007310 <xTaskRemoveFromEventList>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d013      	beq.n	800630c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062e4:	4b3f      	ldr	r3, [pc, #252]	; (80063e4 <xQueueGenericSend+0x1f8>)
 80062e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	e00a      	b.n	800630c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062fc:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <xQueueGenericSend+0x1f8>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800630c:	f001 ff4a 	bl	80081a4 <vPortExitCritical>
				return pdPASS;
 8006310:	2301      	movs	r3, #1
 8006312:	e063      	b.n	80063dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d103      	bne.n	8006322 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800631a:	f001 ff43 	bl	80081a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800631e:	2300      	movs	r3, #0
 8006320:	e05c      	b.n	80063dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006328:	f107 0314 	add.w	r3, r7, #20
 800632c:	4618      	mov	r0, r3
 800632e:	f001 f853 	bl	80073d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006332:	2301      	movs	r3, #1
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006336:	f001 ff35 	bl	80081a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800633a:	f000 fda3 	bl	8006e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800633e:	f001 ff01 	bl	8008144 <vPortEnterCritical>
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006348:	b25b      	sxtb	r3, r3
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800634e:	d103      	bne.n	8006358 <xQueueGenericSend+0x16c>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800635e:	b25b      	sxtb	r3, r3
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006364:	d103      	bne.n	800636e <xQueueGenericSend+0x182>
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800636e:	f001 ff19 	bl	80081a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006372:	1d3a      	adds	r2, r7, #4
 8006374:	f107 0314 	add.w	r3, r7, #20
 8006378:	4611      	mov	r1, r2
 800637a:	4618      	mov	r0, r3
 800637c:	f001 f842 	bl	8007404 <xTaskCheckForTimeOut>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d124      	bne.n	80063d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006388:	f000 faa2 	bl	80068d0 <prvIsQueueFull>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d018      	beq.n	80063c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	3310      	adds	r3, #16
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f000 ff68 	bl	8007270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063a2:	f000 fa2d 	bl	8006800 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063a6:	f000 fd7b 	bl	8006ea0 <xTaskResumeAll>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f47f af7c 	bne.w	80062aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80063b2:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <xQueueGenericSend+0x1f8>)
 80063b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	e772      	b.n	80062aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063c6:	f000 fa1b 	bl	8006800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ca:	f000 fd69 	bl	8006ea0 <xTaskResumeAll>
 80063ce:	e76c      	b.n	80062aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063d2:	f000 fa15 	bl	8006800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063d6:	f000 fd63 	bl	8006ea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3738      	adds	r7, #56	; 0x38
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	e000ed04 	.word	0xe000ed04

080063e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b090      	sub	sp, #64	; 0x40
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10a      	bne.n	8006416 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d103      	bne.n	8006424 <xQueueGenericSendFromISR+0x3c>
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <xQueueGenericSendFromISR+0x40>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <xQueueGenericSendFromISR+0x42>
 8006428:	2300      	movs	r3, #0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d103      	bne.n	8006452 <xQueueGenericSendFromISR+0x6a>
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <xQueueGenericSendFromISR+0x6e>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <xQueueGenericSendFromISR+0x70>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	623b      	str	r3, [r7, #32]
}
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006472:	f001 ff49 	bl	8008308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006476:	f3ef 8211 	mrs	r2, BASEPRI
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	61fa      	str	r2, [r7, #28]
 800648c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800648e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	429a      	cmp	r2, r3
 800649c:	d302      	bcc.n	80064a4 <xQueueGenericSendFromISR+0xbc>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d12f      	bne.n	8006504 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064ba:	f000 f911 	bl	80066e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c6:	d112      	bne.n	80064ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d016      	beq.n	80064fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	3324      	adds	r3, #36	; 0x24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 ff1b 	bl	8007310 <xTaskRemoveFromEventList>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00e      	beq.n	80064fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00b      	beq.n	80064fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e007      	b.n	80064fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064f2:	3301      	adds	r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	b25a      	sxtb	r2, r3
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064fe:	2301      	movs	r3, #1
 8006500:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006502:	e001      	b.n	8006508 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006504:	2300      	movs	r3, #0
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006512:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006516:	4618      	mov	r0, r3
 8006518:	3740      	adds	r7, #64	; 0x40
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800652c:	2300      	movs	r3, #0
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <xQueueReceive+0x30>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	623b      	str	r3, [r7, #32]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d103      	bne.n	800655e <xQueueReceive+0x3e>
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <xQueueReceive+0x42>
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <xQueueReceive+0x44>
 8006562:	2300      	movs	r3, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueReceive+0x5e>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	61fb      	str	r3, [r7, #28]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800657e:	f001 f889 	bl	8007694 <xTaskGetSchedulerState>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <xQueueReceive+0x6e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <xQueueReceive+0x72>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <xQueueReceive+0x74>
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <xQueueReceive+0x8e>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	61bb      	str	r3, [r7, #24]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ae:	f001 fdc9 	bl	8008144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01f      	beq.n	80065fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c2:	f000 f8f7 	bl	80067b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1e5a      	subs	r2, r3, #1
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00f      	beq.n	80065f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	3310      	adds	r3, #16
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fe98 	bl	8007310 <xTaskRemoveFromEventList>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065e6:	4b3d      	ldr	r3, [pc, #244]	; (80066dc <xQueueReceive+0x1bc>)
 80065e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065f6:	f001 fdd5 	bl	80081a4 <vPortExitCritical>
				return pdPASS;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e069      	b.n	80066d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006604:	f001 fdce 	bl	80081a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006608:	2300      	movs	r3, #0
 800660a:	e062      	b.n	80066d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006612:	f107 0310 	add.w	r3, r7, #16
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fede 	bl	80073d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006620:	f001 fdc0 	bl	80081a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006624:	f000 fc2e 	bl	8006e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006628:	f001 fd8c 	bl	8008144 <vPortEnterCritical>
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006632:	b25b      	sxtb	r3, r3
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006638:	d103      	bne.n	8006642 <xQueueReceive+0x122>
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006648:	b25b      	sxtb	r3, r3
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800664e:	d103      	bne.n	8006658 <xQueueReceive+0x138>
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006658:	f001 fda4 	bl	80081a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800665c:	1d3a      	adds	r2, r7, #4
 800665e:	f107 0310 	add.w	r3, r7, #16
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fecd 	bl	8007404 <xTaskCheckForTimeOut>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d123      	bne.n	80066b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006672:	f000 f917 	bl	80068a4 <prvIsQueueEmpty>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d017      	beq.n	80066ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	3324      	adds	r3, #36	; 0x24
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4611      	mov	r1, r2
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fdf3 	bl	8007270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800668a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668c:	f000 f8b8 	bl	8006800 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006690:	f000 fc06 	bl	8006ea0 <xTaskResumeAll>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d189      	bne.n	80065ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800669a:	4b10      	ldr	r3, [pc, #64]	; (80066dc <xQueueReceive+0x1bc>)
 800669c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	e780      	b.n	80065ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ae:	f000 f8a7 	bl	8006800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066b2:	f000 fbf5 	bl	8006ea0 <xTaskResumeAll>
 80066b6:	e77a      	b.n	80065ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ba:	f000 f8a1 	bl	8006800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066be:	f000 fbef 	bl	8006ea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c4:	f000 f8ee 	bl	80068a4 <prvIsQueueEmpty>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f43f af6f 	beq.w	80065ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3730      	adds	r7, #48	; 0x30
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d14d      	bne.n	80067a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 ffe0 	bl	80076d0 <xTaskPriorityDisinherit>
 8006710:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	609a      	str	r2, [r3, #8]
 8006718:	e043      	b.n	80067a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d119      	bne.n	8006754 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6858      	ldr	r0, [r3, #4]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	461a      	mov	r2, r3
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	f002 f83c 	bl	80087a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	441a      	add	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	d32b      	bcc.n	80067a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	605a      	str	r2, [r3, #4]
 8006752:	e026      	b.n	80067a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68d8      	ldr	r0, [r3, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	461a      	mov	r2, r3
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	f002 f822 	bl	80087a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	425b      	negs	r3, r3
 800676e:	441a      	add	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d207      	bcs.n	8006790 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	425b      	negs	r3, r3
 800678a:	441a      	add	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d105      	bne.n	80067a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	3b01      	subs	r3, #1
 80067a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067aa:	697b      	ldr	r3, [r7, #20]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d018      	beq.n	80067f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	441a      	add	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d303      	bcc.n	80067e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68d9      	ldr	r1, [r3, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	461a      	mov	r2, r3
 80067f2:	6838      	ldr	r0, [r7, #0]
 80067f4:	f001 ffd8 	bl	80087a8 <memcpy>
	}
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006808:	f001 fc9c 	bl	8008144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006812:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006814:	e011      	b.n	800683a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d012      	beq.n	8006844 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3324      	adds	r3, #36	; 0x24
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fd74 	bl	8007310 <xTaskRemoveFromEventList>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800682e:	f000 fe4b 	bl	80074c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	3b01      	subs	r3, #1
 8006836:	b2db      	uxtb	r3, r3
 8006838:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800683a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dce9      	bgt.n	8006816 <prvUnlockQueue+0x16>
 8006842:	e000      	b.n	8006846 <prvUnlockQueue+0x46>
					break;
 8006844:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	22ff      	movs	r2, #255	; 0xff
 800684a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800684e:	f001 fca9 	bl	80081a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006852:	f001 fc77 	bl	8008144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800685c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800685e:	e011      	b.n	8006884 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d012      	beq.n	800688e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3310      	adds	r3, #16
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fd4f 	bl	8007310 <xTaskRemoveFromEventList>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006878:	f000 fe26 	bl	80074c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	3b01      	subs	r3, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006888:	2b00      	cmp	r3, #0
 800688a:	dce9      	bgt.n	8006860 <prvUnlockQueue+0x60>
 800688c:	e000      	b.n	8006890 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800688e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	22ff      	movs	r2, #255	; 0xff
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006898:	f001 fc84 	bl	80081a4 <vPortExitCritical>
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068ac:	f001 fc4a 	bl	8008144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e001      	b.n	80068c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068c2:	f001 fc6f 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 80068c6:	68fb      	ldr	r3, [r7, #12]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068d8:	f001 fc34 	bl	8008144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d102      	bne.n	80068ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068e8:	2301      	movs	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	e001      	b.n	80068f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068f2:	f001 fc57 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	e014      	b.n	800693a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006910:	4a0f      	ldr	r2, [pc, #60]	; (8006950 <vQueueAddToRegistry+0x50>)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10b      	bne.n	8006934 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800691c:	490c      	ldr	r1, [pc, #48]	; (8006950 <vQueueAddToRegistry+0x50>)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006926:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <vQueueAddToRegistry+0x50>)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006932:	e006      	b.n	8006942 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b07      	cmp	r3, #7
 800693e:	d9e7      	bls.n	8006910 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000a54 	.word	0x20000a54

08006954 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006964:	f001 fbee 	bl	8008144 <vPortEnterCritical>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800696e:	b25b      	sxtb	r3, r3
 8006970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006974:	d103      	bne.n	800697e <vQueueWaitForMessageRestricted+0x2a>
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006984:	b25b      	sxtb	r3, r3
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698a:	d103      	bne.n	8006994 <vQueueWaitForMessageRestricted+0x40>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006994:	f001 fc06 	bl	80081a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	3324      	adds	r3, #36	; 0x24
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fc85 	bl	80072b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069ae:	6978      	ldr	r0, [r7, #20]
 80069b0:	f7ff ff26 	bl	8006800 <prvUnlockQueue>
	}
 80069b4:	bf00      	nop
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	; 0x38
 80069c0:	af04      	add	r7, sp, #16
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	623b      	str	r3, [r7, #32]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <xTaskCreateStatic+0x46>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	61fb      	str	r3, [r7, #28]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a02:	23c4      	movs	r3, #196	; 0xc4
 8006a04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2bc4      	cmp	r3, #196	; 0xc4
 8006a0a:	d00a      	beq.n	8006a22 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	61bb      	str	r3, [r7, #24]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01e      	beq.n	8006a68 <xTaskCreateStatic+0xac>
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a42:	2300      	movs	r3, #0
 8006a44:	9303      	str	r3, [sp, #12]
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	9302      	str	r3, [sp, #8]
 8006a4a:	f107 0314 	add.w	r3, r7, #20
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f850 	bl	8006b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a62:	f000 f8f9 	bl	8006c58 <prvAddNewTaskToReadyList>
 8006a66:	e001      	b.n	8006a6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a6c:	697b      	ldr	r3, [r7, #20]
	}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3728      	adds	r7, #40	; 0x28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b08c      	sub	sp, #48	; 0x30
 8006a7a:	af04      	add	r7, sp, #16
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a86:	88fb      	ldrh	r3, [r7, #6]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 fc7c 	bl	8008388 <pvPortMalloc>
 8006a90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a98:	20c4      	movs	r0, #196	; 0xc4
 8006a9a:	f001 fc75 	bl	8008388 <pvPortMalloc>
 8006a9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8006aac:	e005      	b.n	8006aba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006aae:	6978      	ldr	r0, [r7, #20]
 8006ab0:	f001 fd36 	bl	8008520 <vPortFree>
 8006ab4:	e001      	b.n	8006aba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d017      	beq.n	8006af0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ac8:	88fa      	ldrh	r2, [r7, #6]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9303      	str	r3, [sp, #12]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	9302      	str	r3, [sp, #8]
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f80e 	bl	8006b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ae4:	69f8      	ldr	r0, [r7, #28]
 8006ae6:	f000 f8b7 	bl	8006c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006aea:	2301      	movs	r3, #1
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	e002      	b.n	8006af6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006af4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006af6:	69bb      	ldr	r3, [r7, #24]
	}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	461a      	mov	r2, r3
 8006b18:	21a5      	movs	r1, #165	; 0xa5
 8006b1a:	f001 fe53 	bl	80087c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f023 0307 	bic.w	r3, r3, #7
 8006b36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	617b      	str	r3, [r7, #20]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01f      	beq.n	8006ba4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	e012      	b.n	8006b90 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	4413      	add	r3, r2
 8006b70:	7819      	ldrb	r1, [r3, #0]
 8006b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	3334      	adds	r3, #52	; 0x34
 8006b7a:	460a      	mov	r2, r1
 8006b7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b0f      	cmp	r3, #15
 8006b94:	d9e9      	bls.n	8006b6a <prvInitialiseNewTask+0x6a>
 8006b96:	e000      	b.n	8006b9a <prvInitialiseNewTask+0x9a>
			{
				break;
 8006b98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba2:	e003      	b.n	8006bac <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b37      	cmp	r3, #55	; 0x37
 8006bb0:	d901      	bls.n	8006bb6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bb2:	2337      	movs	r3, #55	; 0x37
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff f975 	bl	8005ebc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff f970 	bl	8005ebc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	335c      	adds	r3, #92	; 0x5c
 8006c0c:	2260      	movs	r2, #96	; 0x60
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 fdd7 	bl	80087c4 <memset>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	4a0c      	ldr	r2, [pc, #48]	; (8006c4c <prvInitialiseNewTask+0x14c>)
 8006c1a:	661a      	str	r2, [r3, #96]	; 0x60
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	4a0c      	ldr	r2, [pc, #48]	; (8006c50 <prvInitialiseNewTask+0x150>)
 8006c20:	665a      	str	r2, [r3, #100]	; 0x64
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	4a0b      	ldr	r2, [pc, #44]	; (8006c54 <prvInitialiseNewTask+0x154>)
 8006c26:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	69b8      	ldr	r0, [r7, #24]
 8006c2e:	f001 f95f 	bl	8007ef0 <pxPortInitialiseStack>
 8006c32:	4602      	mov	r2, r0
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c44:	bf00      	nop
 8006c46:	3720      	adds	r7, #32
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	08008a7c 	.word	0x08008a7c
 8006c50:	08008a9c 	.word	0x08008a9c
 8006c54:	08008a5c 	.word	0x08008a5c

08006c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c60:	f001 fa70 	bl	8008144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c64:	4b2d      	ldr	r3, [pc, #180]	; (8006d1c <prvAddNewTaskToReadyList+0xc4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	4a2c      	ldr	r2, [pc, #176]	; (8006d1c <prvAddNewTaskToReadyList+0xc4>)
 8006c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c6e:	4b2c      	ldr	r3, [pc, #176]	; (8006d20 <prvAddNewTaskToReadyList+0xc8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c76:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <prvAddNewTaskToReadyList+0xc8>)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c7c:	4b27      	ldr	r3, [pc, #156]	; (8006d1c <prvAddNewTaskToReadyList+0xc4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d110      	bne.n	8006ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c84:	f000 fc44 	bl	8007510 <prvInitialiseTaskLists>
 8006c88:	e00d      	b.n	8006ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c8a:	4b26      	ldr	r3, [pc, #152]	; (8006d24 <prvAddNewTaskToReadyList+0xcc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c92:	4b23      	ldr	r3, [pc, #140]	; (8006d20 <prvAddNewTaskToReadyList+0xc8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d802      	bhi.n	8006ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	; (8006d20 <prvAddNewTaskToReadyList+0xc8>)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ca6:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <prvAddNewTaskToReadyList+0xd0>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3301      	adds	r3, #1
 8006cac:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <prvAddNewTaskToReadyList+0xd0>)
 8006cae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cb0:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <prvAddNewTaskToReadyList+0xd0>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	4b1b      	ldr	r3, [pc, #108]	; (8006d2c <prvAddNewTaskToReadyList+0xd4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d903      	bls.n	8006ccc <prvAddNewTaskToReadyList+0x74>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	4a18      	ldr	r2, [pc, #96]	; (8006d2c <prvAddNewTaskToReadyList+0xd4>)
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <prvAddNewTaskToReadyList+0xd8>)
 8006cda:	441a      	add	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f7ff f8f7 	bl	8005ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ce8:	f001 fa5c 	bl	80081a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cec:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <prvAddNewTaskToReadyList+0xcc>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00e      	beq.n	8006d12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <prvAddNewTaskToReadyList+0xc8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d207      	bcs.n	8006d12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d02:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <prvAddNewTaskToReadyList+0xdc>)
 8006d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000f68 	.word	0x20000f68
 8006d20:	20000a94 	.word	0x20000a94
 8006d24:	20000f74 	.word	0x20000f74
 8006d28:	20000f84 	.word	0x20000f84
 8006d2c:	20000f70 	.word	0x20000f70
 8006d30:	20000a98 	.word	0x20000a98
 8006d34:	e000ed04 	.word	0xe000ed04

08006d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d017      	beq.n	8006d7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d4a:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <vTaskDelay+0x60>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <vTaskDelay+0x30>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60bb      	str	r3, [r7, #8]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d68:	f000 f88c 	bl	8006e84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fd1c 	bl	80077ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d74:	f000 f894 	bl	8006ea0 <xTaskResumeAll>
 8006d78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d107      	bne.n	8006d90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <vTaskDelay+0x64>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000f90 	.word	0x20000f90
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	; 0x28
 8006da4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dae:	463a      	mov	r2, r7
 8006db0:	1d39      	adds	r1, r7, #4
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7ff f82c 	bl	8005e14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	9202      	str	r2, [sp, #8]
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	460a      	mov	r2, r1
 8006dce:	4925      	ldr	r1, [pc, #148]	; (8006e64 <vTaskStartScheduler+0xc4>)
 8006dd0:	4825      	ldr	r0, [pc, #148]	; (8006e68 <vTaskStartScheduler+0xc8>)
 8006dd2:	f7ff fdf3 	bl	80069bc <xTaskCreateStatic>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <vTaskStartScheduler+0xcc>)
 8006dda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ddc:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <vTaskStartScheduler+0xcc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e001      	b.n	8006dee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d102      	bne.n	8006dfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006df4:	f000 fd2e 	bl	8007854 <xTimerCreateTimerTask>
 8006df8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d11d      	bne.n	8006e3c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	613b      	str	r3, [r7, #16]
}
 8006e12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e14:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <vTaskStartScheduler+0xd0>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	335c      	adds	r3, #92	; 0x5c
 8006e1a:	4a16      	ldr	r2, [pc, #88]	; (8006e74 <vTaskStartScheduler+0xd4>)
 8006e1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e1e:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <vTaskStartScheduler+0xd8>)
 8006e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e26:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <vTaskStartScheduler+0xdc>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e2c:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <vTaskStartScheduler+0xe0>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006e32:	f7f9 fbd5 	bl	80005e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e36:	f001 f8e3 	bl	8008000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e3a:	e00e      	b.n	8006e5a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e42:	d10a      	bne.n	8006e5a <vTaskStartScheduler+0xba>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	60fb      	str	r3, [r7, #12]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <vTaskStartScheduler+0xb8>
}
 8006e5a:	bf00      	nop
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	0800898c 	.word	0x0800898c
 8006e68:	080074e1 	.word	0x080074e1
 8006e6c:	20000f8c 	.word	0x20000f8c
 8006e70:	20000a94 	.word	0x20000a94
 8006e74:	20000010 	.word	0x20000010
 8006e78:	20000f88 	.word	0x20000f88
 8006e7c:	20000f74 	.word	0x20000f74
 8006e80:	20000f6c 	.word	0x20000f6c

08006e84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <vTaskSuspendAll+0x18>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	4a03      	ldr	r2, [pc, #12]	; (8006e9c <vTaskSuspendAll+0x18>)
 8006e90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e92:	bf00      	nop
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	20000f90 	.word	0x20000f90

08006ea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eae:	4b42      	ldr	r3, [pc, #264]	; (8006fb8 <xTaskResumeAll+0x118>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <xTaskResumeAll+0x2c>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	603b      	str	r3, [r7, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ecc:	f001 f93a 	bl	8008144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ed0:	4b39      	ldr	r3, [pc, #228]	; (8006fb8 <xTaskResumeAll+0x118>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4a38      	ldr	r2, [pc, #224]	; (8006fb8 <xTaskResumeAll+0x118>)
 8006ed8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eda:	4b37      	ldr	r3, [pc, #220]	; (8006fb8 <xTaskResumeAll+0x118>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d162      	bne.n	8006fa8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ee2:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <xTaskResumeAll+0x11c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d05e      	beq.n	8006fa8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eea:	e02f      	b.n	8006f4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eec:	4b34      	ldr	r3, [pc, #208]	; (8006fc0 <xTaskResumeAll+0x120>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3318      	adds	r3, #24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff f849 	bl	8005f90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff f844 	bl	8005f90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	4b2d      	ldr	r3, [pc, #180]	; (8006fc4 <xTaskResumeAll+0x124>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d903      	bls.n	8006f1c <xTaskResumeAll+0x7c>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4a2a      	ldr	r2, [pc, #168]	; (8006fc4 <xTaskResumeAll+0x124>)
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4a27      	ldr	r2, [pc, #156]	; (8006fc8 <xTaskResumeAll+0x128>)
 8006f2a:	441a      	add	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fe ffcf 	bl	8005ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3c:	4b23      	ldr	r3, [pc, #140]	; (8006fcc <xTaskResumeAll+0x12c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d302      	bcc.n	8006f4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f46:	4b22      	ldr	r3, [pc, #136]	; (8006fd0 <xTaskResumeAll+0x130>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f4c:	4b1c      	ldr	r3, [pc, #112]	; (8006fc0 <xTaskResumeAll+0x120>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1cb      	bne.n	8006eec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f5a:	f000 fb7b 	bl	8007654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f5e:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <xTaskResumeAll+0x134>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d010      	beq.n	8006f8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f6a:	f000 f847 	bl	8006ffc <xTaskIncrementTick>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f74:	4b16      	ldr	r3, [pc, #88]	; (8006fd0 <xTaskResumeAll+0x130>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f1      	bne.n	8006f6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f86:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <xTaskResumeAll+0x134>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f8c:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <xTaskResumeAll+0x130>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f98:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <xTaskResumeAll+0x138>)
 8006f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fa8:	f001 f8fc 	bl	80081a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006fac:	68bb      	ldr	r3, [r7, #8]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000f90 	.word	0x20000f90
 8006fbc:	20000f68 	.word	0x20000f68
 8006fc0:	20000f28 	.word	0x20000f28
 8006fc4:	20000f70 	.word	0x20000f70
 8006fc8:	20000a98 	.word	0x20000a98
 8006fcc:	20000a94 	.word	0x20000a94
 8006fd0:	20000f7c 	.word	0x20000f7c
 8006fd4:	20000f78 	.word	0x20000f78
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fe2:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <xTaskGetTickCount+0x1c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fe8:	687b      	ldr	r3, [r7, #4]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20000f6c 	.word	0x20000f6c

08006ffc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007006:	4b4f      	ldr	r3, [pc, #316]	; (8007144 <xTaskIncrementTick+0x148>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 808f 	bne.w	800712e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007010:	4b4d      	ldr	r3, [pc, #308]	; (8007148 <xTaskIncrementTick+0x14c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3301      	adds	r3, #1
 8007016:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007018:	4a4b      	ldr	r2, [pc, #300]	; (8007148 <xTaskIncrementTick+0x14c>)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d120      	bne.n	8007066 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007024:	4b49      	ldr	r3, [pc, #292]	; (800714c <xTaskIncrementTick+0x150>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <xTaskIncrementTick+0x48>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	603b      	str	r3, [r7, #0]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <xTaskIncrementTick+0x46>
 8007044:	4b41      	ldr	r3, [pc, #260]	; (800714c <xTaskIncrementTick+0x150>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	4b41      	ldr	r3, [pc, #260]	; (8007150 <xTaskIncrementTick+0x154>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a3f      	ldr	r2, [pc, #252]	; (800714c <xTaskIncrementTick+0x150>)
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	4a3f      	ldr	r2, [pc, #252]	; (8007150 <xTaskIncrementTick+0x154>)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	4b3e      	ldr	r3, [pc, #248]	; (8007154 <xTaskIncrementTick+0x158>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3301      	adds	r3, #1
 800705e:	4a3d      	ldr	r2, [pc, #244]	; (8007154 <xTaskIncrementTick+0x158>)
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	f000 faf7 	bl	8007654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007066:	4b3c      	ldr	r3, [pc, #240]	; (8007158 <xTaskIncrementTick+0x15c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	429a      	cmp	r2, r3
 800706e:	d349      	bcc.n	8007104 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007070:	4b36      	ldr	r3, [pc, #216]	; (800714c <xTaskIncrementTick+0x150>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800707a:	4b37      	ldr	r3, [pc, #220]	; (8007158 <xTaskIncrementTick+0x15c>)
 800707c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007080:	601a      	str	r2, [r3, #0]
					break;
 8007082:	e03f      	b.n	8007104 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007084:	4b31      	ldr	r3, [pc, #196]	; (800714c <xTaskIncrementTick+0x150>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d203      	bcs.n	80070a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800709c:	4a2e      	ldr	r2, [pc, #184]	; (8007158 <xTaskIncrementTick+0x15c>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070a2:	e02f      	b.n	8007104 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3304      	adds	r3, #4
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe ff71 	bl	8005f90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	3318      	adds	r3, #24
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe ff68 	bl	8005f90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	4b25      	ldr	r3, [pc, #148]	; (800715c <xTaskIncrementTick+0x160>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d903      	bls.n	80070d4 <xTaskIncrementTick+0xd8>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	4a22      	ldr	r2, [pc, #136]	; (800715c <xTaskIncrementTick+0x160>)
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4a1f      	ldr	r2, [pc, #124]	; (8007160 <xTaskIncrementTick+0x164>)
 80070e2:	441a      	add	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4619      	mov	r1, r3
 80070ea:	4610      	mov	r0, r2
 80070ec:	f7fe fef3 	bl	8005ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f4:	4b1b      	ldr	r3, [pc, #108]	; (8007164 <xTaskIncrementTick+0x168>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d3b8      	bcc.n	8007070 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070fe:	2301      	movs	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007102:	e7b5      	b.n	8007070 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007104:	4b17      	ldr	r3, [pc, #92]	; (8007164 <xTaskIncrementTick+0x168>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710a:	4915      	ldr	r1, [pc, #84]	; (8007160 <xTaskIncrementTick+0x164>)
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d901      	bls.n	8007120 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007120:	4b11      	ldr	r3, [pc, #68]	; (8007168 <xTaskIncrementTick+0x16c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	617b      	str	r3, [r7, #20]
 800712c:	e004      	b.n	8007138 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <xTaskIncrementTick+0x170>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a0d      	ldr	r2, [pc, #52]	; (800716c <xTaskIncrementTick+0x170>)
 8007136:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007138:	697b      	ldr	r3, [r7, #20]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000f90 	.word	0x20000f90
 8007148:	20000f6c 	.word	0x20000f6c
 800714c:	20000f20 	.word	0x20000f20
 8007150:	20000f24 	.word	0x20000f24
 8007154:	20000f80 	.word	0x20000f80
 8007158:	20000f88 	.word	0x20000f88
 800715c:	20000f70 	.word	0x20000f70
 8007160:	20000a98 	.word	0x20000a98
 8007164:	20000a94 	.word	0x20000a94
 8007168:	20000f7c 	.word	0x20000f7c
 800716c:	20000f78 	.word	0x20000f78

08007170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007176:	4b36      	ldr	r3, [pc, #216]	; (8007250 <vTaskSwitchContext+0xe0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800717e:	4b35      	ldr	r3, [pc, #212]	; (8007254 <vTaskSwitchContext+0xe4>)
 8007180:	2201      	movs	r2, #1
 8007182:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007184:	e05f      	b.n	8007246 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8007186:	4b33      	ldr	r3, [pc, #204]	; (8007254 <vTaskSwitchContext+0xe4>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800718c:	f7f9 fa2f 	bl	80005ee <getRunTimeCounterValue>
 8007190:	4603      	mov	r3, r0
 8007192:	4a31      	ldr	r2, [pc, #196]	; (8007258 <vTaskSwitchContext+0xe8>)
 8007194:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007196:	4b30      	ldr	r3, [pc, #192]	; (8007258 <vTaskSwitchContext+0xe8>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b30      	ldr	r3, [pc, #192]	; (800725c <vTaskSwitchContext+0xec>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d909      	bls.n	80071b6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80071a2:	4b2f      	ldr	r3, [pc, #188]	; (8007260 <vTaskSwitchContext+0xf0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80071a8:	4a2b      	ldr	r2, [pc, #172]	; (8007258 <vTaskSwitchContext+0xe8>)
 80071aa:	6810      	ldr	r0, [r2, #0]
 80071ac:	4a2b      	ldr	r2, [pc, #172]	; (800725c <vTaskSwitchContext+0xec>)
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	1a82      	subs	r2, r0, r2
 80071b2:	440a      	add	r2, r1
 80071b4:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80071b6:	4b28      	ldr	r3, [pc, #160]	; (8007258 <vTaskSwitchContext+0xe8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a28      	ldr	r2, [pc, #160]	; (800725c <vTaskSwitchContext+0xec>)
 80071bc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071be:	4b29      	ldr	r3, [pc, #164]	; (8007264 <vTaskSwitchContext+0xf4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e010      	b.n	80071e8 <vTaskSwitchContext+0x78>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <vTaskSwitchContext+0x72>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	607b      	str	r3, [r7, #4]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <vTaskSwitchContext+0x70>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	491f      	ldr	r1, [pc, #124]	; (8007268 <vTaskSwitchContext+0xf8>)
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0e4      	beq.n	80071c6 <vTaskSwitchContext+0x56>
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4a18      	ldr	r2, [pc, #96]	; (8007268 <vTaskSwitchContext+0xf8>)
 8007208:	4413      	add	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	3308      	adds	r3, #8
 800721e:	429a      	cmp	r2, r3
 8007220:	d104      	bne.n	800722c <vTaskSwitchContext+0xbc>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	605a      	str	r2, [r3, #4]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	4a0b      	ldr	r2, [pc, #44]	; (8007260 <vTaskSwitchContext+0xf0>)
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <vTaskSwitchContext+0xf4>)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800723c:	4b08      	ldr	r3, [pc, #32]	; (8007260 <vTaskSwitchContext+0xf0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	335c      	adds	r3, #92	; 0x5c
 8007242:	4a0a      	ldr	r2, [pc, #40]	; (800726c <vTaskSwitchContext+0xfc>)
 8007244:	6013      	str	r3, [r2, #0]
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000f90 	.word	0x20000f90
 8007254:	20000f7c 	.word	0x20000f7c
 8007258:	20000f98 	.word	0x20000f98
 800725c:	20000f94 	.word	0x20000f94
 8007260:	20000a94 	.word	0x20000a94
 8007264:	20000f70 	.word	0x20000f70
 8007268:	20000a98 	.word	0x20000a98
 800726c:	20000010 	.word	0x20000010

08007270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007296:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <vTaskPlaceOnEventList+0x44>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3318      	adds	r3, #24
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fe fe3d 	bl	8005f1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072a4:	2101      	movs	r1, #1
 80072a6:	6838      	ldr	r0, [r7, #0]
 80072a8:	f000 fa80 	bl	80077ac <prvAddCurrentTaskToDelayedList>
}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000a94 	.word	0x20000a94

080072b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	617b      	str	r3, [r7, #20]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <vTaskPlaceOnEventListRestricted+0x54>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3318      	adds	r3, #24
 80072e6:	4619      	mov	r1, r3
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7fe fdf4 	bl	8005ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	68b8      	ldr	r0, [r7, #8]
 80072fe:	f000 fa55 	bl	80077ac <prvAddCurrentTaskToDelayedList>
	}
 8007302:	bf00      	nop
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000a94 	.word	0x20000a94

08007310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60fb      	str	r3, [r7, #12]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3318      	adds	r3, #24
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fe25 	bl	8005f90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007346:	4b1e      	ldr	r3, [pc, #120]	; (80073c0 <xTaskRemoveFromEventList+0xb0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11d      	bne.n	800738a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3304      	adds	r3, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fe1c 	bl	8005f90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735c:	4b19      	ldr	r3, [pc, #100]	; (80073c4 <xTaskRemoveFromEventList+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d903      	bls.n	800736c <xTaskRemoveFromEventList+0x5c>
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	4a16      	ldr	r2, [pc, #88]	; (80073c4 <xTaskRemoveFromEventList+0xb4>)
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <xTaskRemoveFromEventList+0xb8>)
 800737a:	441a      	add	r2, r3
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7fe fda7 	bl	8005ed6 <vListInsertEnd>
 8007388:	e005      	b.n	8007396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3318      	adds	r3, #24
 800738e:	4619      	mov	r1, r3
 8007390:	480e      	ldr	r0, [pc, #56]	; (80073cc <xTaskRemoveFromEventList+0xbc>)
 8007392:	f7fe fda0 	bl	8005ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739a:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <xTaskRemoveFromEventList+0xc0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d905      	bls.n	80073b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <xTaskRemoveFromEventList+0xc4>)
 80073aa:	2201      	movs	r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e001      	b.n	80073b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073b4:	697b      	ldr	r3, [r7, #20]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000f90 	.word	0x20000f90
 80073c4:	20000f70 	.word	0x20000f70
 80073c8:	20000a98 	.word	0x20000a98
 80073cc:	20000f28 	.word	0x20000f28
 80073d0:	20000a94 	.word	0x20000a94
 80073d4:	20000f7c 	.word	0x20000f7c

080073d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <vTaskInternalSetTimeOutState+0x24>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <vTaskInternalSetTimeOutState+0x28>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	20000f80 	.word	0x20000f80
 8007400:	20000f6c 	.word	0x20000f6c

08007404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	613b      	str	r3, [r7, #16]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007446:	f000 fe7d 	bl	8008144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800744a:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <xTaskCheckForTimeOut+0xbc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007462:	d102      	bne.n	800746a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007464:	2300      	movs	r3, #0
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	e023      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <xTaskCheckForTimeOut+0xc0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d007      	beq.n	8007486 <xTaskCheckForTimeOut+0x82>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	429a      	cmp	r2, r3
 800747e:	d302      	bcc.n	8007486 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e015      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	429a      	cmp	r2, r3
 800748e:	d20b      	bcs.n	80074a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff ff9b 	bl	80073d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	e004      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074b2:	f000 fe77 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 80074b6:	69fb      	ldr	r3, [r7, #28]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000f6c 	.word	0x20000f6c
 80074c4:	20000f80 	.word	0x20000f80

080074c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <vTaskMissedYield+0x14>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
}
 80074d2:	bf00      	nop
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000f7c 	.word	0x20000f7c

080074e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074e8:	f000 f852 	bl	8007590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <prvIdleTask+0x28>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d9f9      	bls.n	80074e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <prvIdleTask+0x2c>)
 80074f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007504:	e7f0      	b.n	80074e8 <prvIdleTask+0x8>
 8007506:	bf00      	nop
 8007508:	20000a98 	.word	0x20000a98
 800750c:	e000ed04 	.word	0xe000ed04

08007510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007516:	2300      	movs	r3, #0
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	e00c      	b.n	8007536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4a12      	ldr	r2, [pc, #72]	; (8007570 <prvInitialiseTaskLists+0x60>)
 8007528:	4413      	add	r3, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fca6 	bl	8005e7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3301      	adds	r3, #1
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b37      	cmp	r3, #55	; 0x37
 800753a:	d9ef      	bls.n	800751c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800753c:	480d      	ldr	r0, [pc, #52]	; (8007574 <prvInitialiseTaskLists+0x64>)
 800753e:	f7fe fc9d 	bl	8005e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007542:	480d      	ldr	r0, [pc, #52]	; (8007578 <prvInitialiseTaskLists+0x68>)
 8007544:	f7fe fc9a 	bl	8005e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007548:	480c      	ldr	r0, [pc, #48]	; (800757c <prvInitialiseTaskLists+0x6c>)
 800754a:	f7fe fc97 	bl	8005e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800754e:	480c      	ldr	r0, [pc, #48]	; (8007580 <prvInitialiseTaskLists+0x70>)
 8007550:	f7fe fc94 	bl	8005e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007554:	480b      	ldr	r0, [pc, #44]	; (8007584 <prvInitialiseTaskLists+0x74>)
 8007556:	f7fe fc91 	bl	8005e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <prvInitialiseTaskLists+0x78>)
 800755c:	4a05      	ldr	r2, [pc, #20]	; (8007574 <prvInitialiseTaskLists+0x64>)
 800755e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <prvInitialiseTaskLists+0x7c>)
 8007562:	4a05      	ldr	r2, [pc, #20]	; (8007578 <prvInitialiseTaskLists+0x68>)
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000a98 	.word	0x20000a98
 8007574:	20000ef8 	.word	0x20000ef8
 8007578:	20000f0c 	.word	0x20000f0c
 800757c:	20000f28 	.word	0x20000f28
 8007580:	20000f3c 	.word	0x20000f3c
 8007584:	20000f54 	.word	0x20000f54
 8007588:	20000f20 	.word	0x20000f20
 800758c:	20000f24 	.word	0x20000f24

08007590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007596:	e019      	b.n	80075cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007598:	f000 fdd4 	bl	8008144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759c:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <prvCheckTasksWaitingTermination+0x50>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fcf1 	bl	8005f90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <prvCheckTasksWaitingTermination+0x54>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4a0b      	ldr	r2, [pc, #44]	; (80075e4 <prvCheckTasksWaitingTermination+0x54>)
 80075b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3b01      	subs	r3, #1
 80075be:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075c2:	f000 fdef 	bl	80081a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f810 	bl	80075ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e1      	bne.n	8007598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000f3c 	.word	0x20000f3c
 80075e4:	20000f68 	.word	0x20000f68
 80075e8:	20000f50 	.word	0x20000f50

080075ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	335c      	adds	r3, #92	; 0x5c
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 f8f9 	bl	80087f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d108      	bne.n	800761a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	4618      	mov	r0, r3
 800760e:	f000 ff87 	bl	8008520 <vPortFree>
				vPortFree( pxTCB );
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 ff84 	bl	8008520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007618:	e018      	b.n	800764c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007620:	2b01      	cmp	r3, #1
 8007622:	d103      	bne.n	800762c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 ff7b 	bl	8008520 <vPortFree>
	}
 800762a:	e00f      	b.n	800764c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007632:	2b02      	cmp	r3, #2
 8007634:	d00a      	beq.n	800764c <prvDeleteTCB+0x60>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60fb      	str	r3, [r7, #12]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <prvDeleteTCB+0x5e>
	}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <prvResetNextTaskUnblockTime+0x38>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d104      	bne.n	800766e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <prvResetNextTaskUnblockTime+0x3c>)
 8007666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800766a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800766c:	e008      	b.n	8007680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766e:	4b07      	ldr	r3, [pc, #28]	; (800768c <prvResetNextTaskUnblockTime+0x38>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <prvResetNextTaskUnblockTime+0x3c>)
 800767e:	6013      	str	r3, [r2, #0]
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	20000f20 	.word	0x20000f20
 8007690:	20000f88 	.word	0x20000f88

08007694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <xTaskGetSchedulerState+0x34>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076a2:	2301      	movs	r3, #1
 80076a4:	607b      	str	r3, [r7, #4]
 80076a6:	e008      	b.n	80076ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a8:	4b08      	ldr	r3, [pc, #32]	; (80076cc <xTaskGetSchedulerState+0x38>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076b0:	2302      	movs	r3, #2
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e001      	b.n	80076ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076ba:	687b      	ldr	r3, [r7, #4]
	}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20000f74 	.word	0x20000f74
 80076cc:	20000f90 	.word	0x20000f90

080076d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d056      	beq.n	8007794 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076e6:	4b2e      	ldr	r3, [pc, #184]	; (80077a0 <xTaskPriorityDisinherit+0xd0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d00a      	beq.n	8007706 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60bb      	str	r3, [r7, #8]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	1e5a      	subs	r2, r3, #1
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007736:	429a      	cmp	r2, r3
 8007738:	d02c      	beq.n	8007794 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	2b00      	cmp	r3, #0
 8007740:	d128      	bne.n	8007794 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fc22 	bl	8005f90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <xTaskPriorityDisinherit+0xd4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d903      	bls.n	8007774 <xTaskPriorityDisinherit+0xa4>
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a0c      	ldr	r2, [pc, #48]	; (80077a4 <xTaskPriorityDisinherit+0xd4>)
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4a09      	ldr	r2, [pc, #36]	; (80077a8 <xTaskPriorityDisinherit+0xd8>)
 8007782:	441a      	add	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f7fe fba3 	bl	8005ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007790:	2301      	movs	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007794:	697b      	ldr	r3, [r7, #20]
	}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000a94 	.word	0x20000a94
 80077a4:	20000f70 	.word	0x20000f70
 80077a8:	20000a98 	.word	0x20000a98

080077ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077b6:	4b21      	ldr	r3, [pc, #132]	; (800783c <prvAddCurrentTaskToDelayedList+0x90>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077bc:	4b20      	ldr	r3, [pc, #128]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3304      	adds	r3, #4
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fbe4 	bl	8005f90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ce:	d10a      	bne.n	80077e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4819      	ldr	r0, [pc, #100]	; (8007844 <prvAddCurrentTaskToDelayedList+0x98>)
 80077e0:	f7fe fb79 	bl	8005ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077e4:	e026      	b.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4413      	add	r3, r2
 80077ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d209      	bcs.n	8007812 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7fe fb87 	bl	8005f1e <vListInsert>
}
 8007810:	e010      	b.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007812:	4b0e      	ldr	r3, [pc, #56]	; (800784c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7fe fb7d 	bl	8005f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	d202      	bcs.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800782e:	4a08      	ldr	r2, [pc, #32]	; (8007850 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6013      	str	r3, [r2, #0]
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20000f6c 	.word	0x20000f6c
 8007840:	20000a94 	.word	0x20000a94
 8007844:	20000f54 	.word	0x20000f54
 8007848:	20000f24 	.word	0x20000f24
 800784c:	20000f20 	.word	0x20000f20
 8007850:	20000f88 	.word	0x20000f88

08007854 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08a      	sub	sp, #40	; 0x28
 8007858:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800785e:	f000 fb07 	bl	8007e70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <xTimerCreateTimerTask+0x80>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d021      	beq.n	80078ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007872:	1d3a      	adds	r2, r7, #4
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	f107 030c 	add.w	r3, r7, #12
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fae3 	bl	8005e48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	9202      	str	r2, [sp, #8]
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	2306      	movs	r3, #6
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	2300      	movs	r3, #0
 8007892:	460a      	mov	r2, r1
 8007894:	4910      	ldr	r1, [pc, #64]	; (80078d8 <xTimerCreateTimerTask+0x84>)
 8007896:	4811      	ldr	r0, [pc, #68]	; (80078dc <xTimerCreateTimerTask+0x88>)
 8007898:	f7ff f890 	bl	80069bc <xTaskCreateStatic>
 800789c:	4603      	mov	r3, r0
 800789e:	4a10      	ldr	r2, [pc, #64]	; (80078e0 <xTimerCreateTimerTask+0x8c>)
 80078a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <xTimerCreateTimerTask+0x8c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078aa:	2301      	movs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	613b      	str	r3, [r7, #16]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078ca:	697b      	ldr	r3, [r7, #20]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000fcc 	.word	0x20000fcc
 80078d8:	080089bc 	.word	0x080089bc
 80078dc:	08007a19 	.word	0x08007a19
 80078e0:	20000fd0 	.word	0x20000fd0

080078e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <xTimerGenericCommand+0x2e>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	623b      	str	r3, [r7, #32]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007912:	4b1a      	ldr	r3, [pc, #104]	; (800797c <xTimerGenericCommand+0x98>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d02a      	beq.n	8007970 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b05      	cmp	r3, #5
 800792a:	dc18      	bgt.n	800795e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800792c:	f7ff feb2 	bl	8007694 <xTaskGetSchedulerState>
 8007930:	4603      	mov	r3, r0
 8007932:	2b02      	cmp	r3, #2
 8007934:	d109      	bne.n	800794a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007936:	4b11      	ldr	r3, [pc, #68]	; (800797c <xTimerGenericCommand+0x98>)
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f107 0110 	add.w	r1, r7, #16
 800793e:	2300      	movs	r3, #0
 8007940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007942:	f7fe fc53 	bl	80061ec <xQueueGenericSend>
 8007946:	6278      	str	r0, [r7, #36]	; 0x24
 8007948:	e012      	b.n	8007970 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <xTimerGenericCommand+0x98>)
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	f107 0110 	add.w	r1, r7, #16
 8007952:	2300      	movs	r3, #0
 8007954:	2200      	movs	r2, #0
 8007956:	f7fe fc49 	bl	80061ec <xQueueGenericSend>
 800795a:	6278      	str	r0, [r7, #36]	; 0x24
 800795c:	e008      	b.n	8007970 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800795e:	4b07      	ldr	r3, [pc, #28]	; (800797c <xTimerGenericCommand+0x98>)
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	f107 0110 	add.w	r1, r7, #16
 8007966:	2300      	movs	r3, #0
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	f7fe fd3d 	bl	80063e8 <xQueueGenericSendFromISR>
 800796e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007972:	4618      	mov	r0, r3
 8007974:	3728      	adds	r7, #40	; 0x28
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000fcc 	.word	0x20000fcc

08007980 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af02      	add	r7, sp, #8
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798a:	4b22      	ldr	r3, [pc, #136]	; (8007a14 <prvProcessExpiredTimer+0x94>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	3304      	adds	r3, #4
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe faf9 	bl	8005f90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d022      	beq.n	80079f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	18d1      	adds	r1, r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	6978      	ldr	r0, [r7, #20]
 80079ba:	f000 f8d1 	bl	8007b60 <prvInsertTimerInActiveList>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01f      	beq.n	8007a04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079c4:	2300      	movs	r3, #0
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	2300      	movs	r3, #0
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	2100      	movs	r1, #0
 80079ce:	6978      	ldr	r0, [r7, #20]
 80079d0:	f7ff ff88 	bl	80078e4 <xTimerGenericCommand>
 80079d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d113      	bne.n	8007a04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	60fb      	str	r3, [r7, #12]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	4798      	blx	r3
}
 8007a0c:	bf00      	nop
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000fc4 	.word	0x20000fc4

08007a18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a20:	f107 0308 	add.w	r3, r7, #8
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 f857 	bl	8007ad8 <prvGetNextExpireTime>
 8007a2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f803 	bl	8007a3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a36:	f000 f8d5 	bl	8007be4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a3a:	e7f1      	b.n	8007a20 <prvTimerTask+0x8>

08007a3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a46:	f7ff fa1d 	bl	8006e84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a4a:	f107 0308 	add.w	r3, r7, #8
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f866 	bl	8007b20 <prvSampleTimeNow>
 8007a54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d130      	bne.n	8007abe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <prvProcessTimerOrBlockTask+0x3c>
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d806      	bhi.n	8007a78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a6a:	f7ff fa19 	bl	8006ea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff ff85 	bl	8007980 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a76:	e024      	b.n	8007ac2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d008      	beq.n	8007a90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a7e:	4b13      	ldr	r3, [pc, #76]	; (8007acc <prvProcessTimerOrBlockTask+0x90>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <prvProcessTimerOrBlockTask+0x50>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e000      	b.n	8007a8e <prvProcessTimerOrBlockTask+0x52>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a90:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <prvProcessTimerOrBlockTask+0x94>)
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f7fe ff59 	bl	8006954 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007aa2:	f7ff f9fd 	bl	8006ea0 <xTaskResumeAll>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <prvProcessTimerOrBlockTask+0x98>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	f3bf 8f6f 	isb	sy
}
 8007abc:	e001      	b.n	8007ac2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007abe:	f7ff f9ef 	bl	8006ea0 <xTaskResumeAll>
}
 8007ac2:	bf00      	nop
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000fc8 	.word	0x20000fc8
 8007ad0:	20000fcc 	.word	0x20000fcc
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <prvGetNextExpireTime+0x44>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <prvGetNextExpireTime+0x16>
 8007aea:	2201      	movs	r2, #1
 8007aec:	e000      	b.n	8007af0 <prvGetNextExpireTime+0x18>
 8007aee:	2200      	movs	r2, #0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d105      	bne.n	8007b08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007afc:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <prvGetNextExpireTime+0x44>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	e001      	b.n	8007b0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20000fc4 	.word	0x20000fc4

08007b20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b28:	f7ff fa58 	bl	8006fdc <xTaskGetTickCount>
 8007b2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <prvSampleTimeNow+0x3c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d205      	bcs.n	8007b44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b38:	f000 f936 	bl	8007da8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b4a:	4a04      	ldr	r2, [pc, #16]	; (8007b5c <prvSampleTimeNow+0x3c>)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b50:	68fb      	ldr	r3, [r7, #12]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000fd4 	.word	0x20000fd4

08007b60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d812      	bhi.n	8007bac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	1ad2      	subs	r2, r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d302      	bcc.n	8007b9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b94:	2301      	movs	r3, #1
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	e01b      	b.n	8007bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <prvInsertTimerInActiveList+0x7c>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	f7fe f9ba 	bl	8005f1e <vListInsert>
 8007baa:	e012      	b.n	8007bd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d206      	bcs.n	8007bc2 <prvInsertTimerInActiveList+0x62>
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d302      	bcc.n	8007bc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e007      	b.n	8007bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bc2:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <prvInsertTimerInActiveList+0x80>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4610      	mov	r0, r2
 8007bce:	f7fe f9a6 	bl	8005f1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bd2:	697b      	ldr	r3, [r7, #20]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20000fc8 	.word	0x20000fc8
 8007be0:	20000fc4 	.word	0x20000fc4

08007be4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08e      	sub	sp, #56	; 0x38
 8007be8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bea:	e0ca      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da18      	bge.n	8007c24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bf2:	1d3b      	adds	r3, r7, #4
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	61fb      	str	r3, [r7, #28]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1a:	6850      	ldr	r0, [r2, #4]
 8007c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1e:	6892      	ldr	r2, [r2, #8]
 8007c20:	4611      	mov	r1, r2
 8007c22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f2c0 80aa 	blt.w	8007d80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe f9a7 	bl	8005f90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c42:	463b      	mov	r3, r7
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff ff6b 	bl	8007b20 <prvSampleTimeNow>
 8007c4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	f200 8097 	bhi.w	8007d82 <prvProcessReceivedCommands+0x19e>
 8007c54:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <prvProcessReceivedCommands+0x78>)
 8007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5a:	bf00      	nop
 8007c5c:	08007c85 	.word	0x08007c85
 8007c60:	08007c85 	.word	0x08007c85
 8007c64:	08007c85 	.word	0x08007c85
 8007c68:	08007cf9 	.word	0x08007cf9
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d57 	.word	0x08007d57
 8007c74:	08007c85 	.word	0x08007c85
 8007c78:	08007c85 	.word	0x08007c85
 8007c7c:	08007cf9 	.word	0x08007cf9
 8007c80:	08007d0d 	.word	0x08007d0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	18d1      	adds	r1, r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca4:	f7ff ff5c 	bl	8007b60 <prvInsertTimerInActiveList>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d069      	beq.n	8007d82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d05e      	beq.n	8007d82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	441a      	add	r2, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f7ff fe05 	bl	80078e4 <xTimerGenericCommand>
 8007cda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d14f      	bne.n	8007d82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	61bb      	str	r3, [r7, #24]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d0a:	e03a      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	617b      	str	r3, [r7, #20]
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	18d1      	adds	r1, r2, r3
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d50:	f7ff ff06 	bl	8007b60 <prvInsertTimerInActiveList>
					break;
 8007d54:	e015      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d66:	f000 fbdb 	bl	8008520 <vPortFree>
 8007d6a:	e00a      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d72:	f023 0301 	bic.w	r3, r3, #1
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d7e:	e000      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d82:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <prvProcessReceivedCommands+0x1c0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	1d39      	adds	r1, r7, #4
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fbc8 	bl	8006520 <xQueueReceive>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f47f af2a 	bne.w	8007bec <prvProcessReceivedCommands+0x8>
	}
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	3730      	adds	r7, #48	; 0x30
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20000fcc 	.word	0x20000fcc

08007da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dae:	e048      	b.n	8007e42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007db0:	4b2d      	ldr	r3, [pc, #180]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dba:	4b2b      	ldr	r3, [pc, #172]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe f8e1 	bl	8005f90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d02e      	beq.n	8007e42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4413      	add	r3, r2
 8007dec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d90e      	bls.n	8007e14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e02:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f7fe f886 	bl	8005f1e <vListInsert>
 8007e12:	e016      	b.n	8007e42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e14:	2300      	movs	r3, #0
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff fd60 	bl	80078e4 <xTimerGenericCommand>
 8007e24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	603b      	str	r3, [r7, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e42:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1b1      	bne.n	8007db0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e52:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <prvSwitchTimerLists+0xc4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a04      	ldr	r2, [pc, #16]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007e58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e5a:	4a04      	ldr	r2, [pc, #16]	; (8007e6c <prvSwitchTimerLists+0xc4>)
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	6013      	str	r3, [r2, #0]
}
 8007e60:	bf00      	nop
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20000fc4 	.word	0x20000fc4
 8007e6c:	20000fc8 	.word	0x20000fc8

08007e70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e76:	f000 f965 	bl	8008144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e7a:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d120      	bne.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e82:	4814      	ldr	r0, [pc, #80]	; (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e84:	f7fd fffa 	bl	8005e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e88:	4813      	ldr	r0, [pc, #76]	; (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e8a:	f7fd fff7 	bl	8005e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <prvCheckForValidListAndQueue+0x6c>)
 8007e90:	4a10      	ldr	r2, [pc, #64]	; (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e94:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <prvCheckForValidListAndQueue+0x70>)
 8007e96:	4a10      	ldr	r2, [pc, #64]	; (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <prvCheckForValidListAndQueue+0x74>)
 8007ea0:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <prvCheckForValidListAndQueue+0x78>)
 8007ea2:	2110      	movs	r1, #16
 8007ea4:	200a      	movs	r0, #10
 8007ea6:	f7fe f905 	bl	80060b4 <xQueueGenericCreateStatic>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	490b      	ldr	r1, [pc, #44]	; (8007eec <prvCheckForValidListAndQueue+0x7c>)
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fd1e 	bl	8006900 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ec4:	f000 f96e 	bl	80081a4 <vPortExitCritical>
}
 8007ec8:	bf00      	nop
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000fcc 	.word	0x20000fcc
 8007ed4:	20000f9c 	.word	0x20000f9c
 8007ed8:	20000fb0 	.word	0x20000fb0
 8007edc:	20000fc4 	.word	0x20000fc4
 8007ee0:	20000fc8 	.word	0x20000fc8
 8007ee4:	20001078 	.word	0x20001078
 8007ee8:	20000fd8 	.word	0x20000fd8
 8007eec:	080089c4 	.word	0x080089c4

08007ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b04      	subs	r3, #4
 8007f00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3b04      	subs	r3, #4
 8007f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f023 0201 	bic.w	r2, r3, #1
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3b04      	subs	r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f20:	4a0c      	ldr	r2, [pc, #48]	; (8007f54 <pxPortInitialiseStack+0x64>)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b14      	subs	r3, #20
 8007f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b04      	subs	r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f06f 0202 	mvn.w	r2, #2
 8007f3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3b20      	subs	r3, #32
 8007f44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f46:	68fb      	ldr	r3, [r7, #12]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	08007f59 	.word	0x08007f59

08007f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <prvTaskExitError+0x54>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f6a:	d00a      	beq.n	8007f82 <prvTaskExitError+0x2a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60fb      	str	r3, [r7, #12]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <prvTaskExitError+0x28>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60bb      	str	r3, [r7, #8]
}
 8007f94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f96:	bf00      	nop
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0fc      	beq.n	8007f98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f9e:	bf00      	nop
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	2000000c 	.word	0x2000000c

08007fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <pxCurrentTCBConst2>)
 8007fb2:	6819      	ldr	r1, [r3, #0]
 8007fb4:	6808      	ldr	r0, [r1, #0]
 8007fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fba:	f380 8809 	msr	PSP, r0
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f04f 0000 	mov.w	r0, #0
 8007fc6:	f380 8811 	msr	BASEPRI, r0
 8007fca:	4770      	bx	lr
 8007fcc:	f3af 8000 	nop.w

08007fd0 <pxCurrentTCBConst2>:
 8007fd0:	20000a94 	.word	0x20000a94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop

08007fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fd8:	4808      	ldr	r0, [pc, #32]	; (8007ffc <prvPortStartFirstTask+0x24>)
 8007fda:	6800      	ldr	r0, [r0, #0]
 8007fdc:	6800      	ldr	r0, [r0, #0]
 8007fde:	f380 8808 	msr	MSP, r0
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8814 	msr	CONTROL, r0
 8007fea:	b662      	cpsie	i
 8007fec:	b661      	cpsie	f
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	df00      	svc	0
 8007ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ffa:	bf00      	nop
 8007ffc:	e000ed08 	.word	0xe000ed08

08008000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008006:	4b46      	ldr	r3, [pc, #280]	; (8008120 <xPortStartScheduler+0x120>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a46      	ldr	r2, [pc, #280]	; (8008124 <xPortStartScheduler+0x124>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d10a      	bne.n	8008026 <xPortStartScheduler+0x26>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	613b      	str	r3, [r7, #16]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008026:	4b3e      	ldr	r3, [pc, #248]	; (8008120 <xPortStartScheduler+0x120>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a3f      	ldr	r2, [pc, #252]	; (8008128 <xPortStartScheduler+0x128>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10a      	bne.n	8008046 <xPortStartScheduler+0x46>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	60fb      	str	r3, [r7, #12]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008046:	4b39      	ldr	r3, [pc, #228]	; (800812c <xPortStartScheduler+0x12c>)
 8008048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b2db      	uxtb	r3, r3
 8008050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	22ff      	movs	r2, #255	; 0xff
 8008056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008068:	b2da      	uxtb	r2, r3
 800806a:	4b31      	ldr	r3, [pc, #196]	; (8008130 <xPortStartScheduler+0x130>)
 800806c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800806e:	4b31      	ldr	r3, [pc, #196]	; (8008134 <xPortStartScheduler+0x134>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008074:	e009      	b.n	800808a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008076:	4b2f      	ldr	r3, [pc, #188]	; (8008134 <xPortStartScheduler+0x134>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3b01      	subs	r3, #1
 800807c:	4a2d      	ldr	r2, [pc, #180]	; (8008134 <xPortStartScheduler+0x134>)
 800807e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d0ef      	beq.n	8008076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008096:	4b27      	ldr	r3, [pc, #156]	; (8008134 <xPortStartScheduler+0x134>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1c3 0307 	rsb	r3, r3, #7
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d00a      	beq.n	80080b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	60bb      	str	r3, [r7, #8]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <xPortStartScheduler+0x134>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	021b      	lsls	r3, r3, #8
 80080be:	4a1d      	ldr	r2, [pc, #116]	; (8008134 <xPortStartScheduler+0x134>)
 80080c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080c2:	4b1c      	ldr	r3, [pc, #112]	; (8008134 <xPortStartScheduler+0x134>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ca:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <xPortStartScheduler+0x134>)
 80080cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080d6:	4b18      	ldr	r3, [pc, #96]	; (8008138 <xPortStartScheduler+0x138>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a17      	ldr	r2, [pc, #92]	; (8008138 <xPortStartScheduler+0x138>)
 80080dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <xPortStartScheduler+0x138>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a14      	ldr	r2, [pc, #80]	; (8008138 <xPortStartScheduler+0x138>)
 80080e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080ee:	f000 f8dd 	bl	80082ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <xPortStartScheduler+0x13c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080f8:	f000 f8fc 	bl	80082f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080fc:	4b10      	ldr	r3, [pc, #64]	; (8008140 <xPortStartScheduler+0x140>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a0f      	ldr	r2, [pc, #60]	; (8008140 <xPortStartScheduler+0x140>)
 8008102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008108:	f7ff ff66 	bl	8007fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800810c:	f7ff f830 	bl	8007170 <vTaskSwitchContext>
	prvTaskExitError();
 8008110:	f7ff ff22 	bl	8007f58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	e000ed00 	.word	0xe000ed00
 8008124:	410fc271 	.word	0x410fc271
 8008128:	410fc270 	.word	0x410fc270
 800812c:	e000e400 	.word	0xe000e400
 8008130:	200010c8 	.word	0x200010c8
 8008134:	200010cc 	.word	0x200010cc
 8008138:	e000ed20 	.word	0xe000ed20
 800813c:	2000000c 	.word	0x2000000c
 8008140:	e000ef34 	.word	0xe000ef34

08008144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	607b      	str	r3, [r7, #4]
}
 800815c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800815e:	4b0f      	ldr	r3, [pc, #60]	; (800819c <vPortEnterCritical+0x58>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3301      	adds	r3, #1
 8008164:	4a0d      	ldr	r2, [pc, #52]	; (800819c <vPortEnterCritical+0x58>)
 8008166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <vPortEnterCritical+0x58>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d10f      	bne.n	8008190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008170:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <vPortEnterCritical+0x5c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <vPortEnterCritical+0x4c>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	603b      	str	r3, [r7, #0]
}
 800818c:	bf00      	nop
 800818e:	e7fe      	b.n	800818e <vPortEnterCritical+0x4a>
	}
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	2000000c 	.word	0x2000000c
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081aa:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <vPortExitCritical+0x50>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <vPortExitCritical+0x24>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	607b      	str	r3, [r7, #4]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <vPortExitCritical+0x50>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <vPortExitCritical+0x50>)
 80081d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081d2:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <vPortExitCritical+0x50>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <vPortExitCritical+0x42>
 80081da:	2300      	movs	r3, #0
 80081dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f383 8811 	msr	BASEPRI, r3
}
 80081e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	2000000c 	.word	0x2000000c
	...

08008200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008200:	f3ef 8009 	mrs	r0, PSP
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <pxCurrentTCBConst>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f01e 0f10 	tst.w	lr, #16
 8008210:	bf08      	it	eq
 8008212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	6010      	str	r0, [r2, #0]
 800821c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008224:	f380 8811 	msr	BASEPRI, r0
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f7fe ff9e 	bl	8007170 <vTaskSwitchContext>
 8008234:	f04f 0000 	mov.w	r0, #0
 8008238:	f380 8811 	msr	BASEPRI, r0
 800823c:	bc09      	pop	{r0, r3}
 800823e:	6819      	ldr	r1, [r3, #0]
 8008240:	6808      	ldr	r0, [r1, #0]
 8008242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008246:	f01e 0f10 	tst.w	lr, #16
 800824a:	bf08      	it	eq
 800824c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008250:	f380 8809 	msr	PSP, r0
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	f3af 8000 	nop.w

08008260 <pxCurrentTCBConst>:
 8008260:	20000a94 	.word	0x20000a94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop

08008268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	607b      	str	r3, [r7, #4]
}
 8008280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008282:	f7fe febb 	bl	8006ffc <xTaskIncrementTick>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <xPortSysTickHandler+0x40>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	2300      	movs	r3, #0
 8008296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f383 8811 	msr	BASEPRI, r3
}
 800829e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082b0:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <vPortSetupTimerInterrupt+0x34>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082b6:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <vPortSetupTimerInterrupt+0x38>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <vPortSetupTimerInterrupt+0x3c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <vPortSetupTimerInterrupt+0x40>)
 80082c2:	fba2 2303 	umull	r2, r3, r2, r3
 80082c6:	099b      	lsrs	r3, r3, #6
 80082c8:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <vPortSetupTimerInterrupt+0x44>)
 80082ca:	3b01      	subs	r3, #1
 80082cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <vPortSetupTimerInterrupt+0x34>)
 80082d0:	2207      	movs	r2, #7
 80082d2:	601a      	str	r2, [r3, #0]
}
 80082d4:	bf00      	nop
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	e000e010 	.word	0xe000e010
 80082e4:	e000e018 	.word	0xe000e018
 80082e8:	20000000 	.word	0x20000000
 80082ec:	10624dd3 	.word	0x10624dd3
 80082f0:	e000e014 	.word	0xe000e014

080082f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008304 <vPortEnableVFP+0x10>
 80082f8:	6801      	ldr	r1, [r0, #0]
 80082fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082fe:	6001      	str	r1, [r0, #0]
 8008300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008302:	bf00      	nop
 8008304:	e000ed88 	.word	0xe000ed88

08008308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800830e:	f3ef 8305 	mrs	r3, IPSR
 8008312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b0f      	cmp	r3, #15
 8008318:	d914      	bls.n	8008344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <vPortValidateInterruptPriority+0x70>)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008324:	4b15      	ldr	r3, [pc, #84]	; (800837c <vPortValidateInterruptPriority+0x74>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	7afa      	ldrb	r2, [r7, #11]
 800832a:	429a      	cmp	r2, r3
 800832c:	d20a      	bcs.n	8008344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008344:	4b0e      	ldr	r3, [pc, #56]	; (8008380 <vPortValidateInterruptPriority+0x78>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <vPortValidateInterruptPriority+0x7c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d90a      	bls.n	800836a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	603b      	str	r3, [r7, #0]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <vPortValidateInterruptPriority+0x60>
	}
 800836a:	bf00      	nop
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	e000e3f0 	.word	0xe000e3f0
 800837c:	200010c8 	.word	0x200010c8
 8008380:	e000ed0c 	.word	0xe000ed0c
 8008384:	200010cc 	.word	0x200010cc

08008388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008394:	f7fe fd76 	bl	8006e84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008398:	4b5b      	ldr	r3, [pc, #364]	; (8008508 <pvPortMalloc+0x180>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083a0:	f000 f920 	bl	80085e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083a4:	4b59      	ldr	r3, [pc, #356]	; (800850c <pvPortMalloc+0x184>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f040 8093 	bne.w	80084d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01d      	beq.n	80083f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80083b8:	2208      	movs	r2, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d014      	beq.n	80083f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f023 0307 	bic.w	r3, r3, #7
 80083d0:	3308      	adds	r3, #8
 80083d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <pvPortMalloc+0x6c>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	617b      	str	r3, [r7, #20]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d06e      	beq.n	80084d8 <pvPortMalloc+0x150>
 80083fa:	4b45      	ldr	r3, [pc, #276]	; (8008510 <pvPortMalloc+0x188>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	429a      	cmp	r2, r3
 8008402:	d869      	bhi.n	80084d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008404:	4b43      	ldr	r3, [pc, #268]	; (8008514 <pvPortMalloc+0x18c>)
 8008406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008408:	4b42      	ldr	r3, [pc, #264]	; (8008514 <pvPortMalloc+0x18c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800840e:	e004      	b.n	800841a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	429a      	cmp	r2, r3
 8008422:	d903      	bls.n	800842c <pvPortMalloc+0xa4>
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1f1      	bne.n	8008410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800842c:	4b36      	ldr	r3, [pc, #216]	; (8008508 <pvPortMalloc+0x180>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008432:	429a      	cmp	r2, r3
 8008434:	d050      	beq.n	80084d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2208      	movs	r2, #8
 800843c:	4413      	add	r3, r2
 800843e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	2308      	movs	r3, #8
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	429a      	cmp	r2, r3
 8008456:	d91f      	bls.n	8008498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4413      	add	r3, r2
 800845e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <pvPortMalloc+0xf8>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	613b      	str	r3, [r7, #16]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	1ad2      	subs	r2, r2, r3
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008492:	69b8      	ldr	r0, [r7, #24]
 8008494:	f000 f908 	bl	80086a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008498:	4b1d      	ldr	r3, [pc, #116]	; (8008510 <pvPortMalloc+0x188>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	4a1b      	ldr	r2, [pc, #108]	; (8008510 <pvPortMalloc+0x188>)
 80084a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <pvPortMalloc+0x188>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <pvPortMalloc+0x190>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d203      	bcs.n	80084ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084b2:	4b17      	ldr	r3, [pc, #92]	; (8008510 <pvPortMalloc+0x188>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a18      	ldr	r2, [pc, #96]	; (8008518 <pvPortMalloc+0x190>)
 80084b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	4b13      	ldr	r3, [pc, #76]	; (800850c <pvPortMalloc+0x184>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084ce:	4b13      	ldr	r3, [pc, #76]	; (800851c <pvPortMalloc+0x194>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	4a11      	ldr	r2, [pc, #68]	; (800851c <pvPortMalloc+0x194>)
 80084d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084d8:	f7fe fce2 	bl	8006ea0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <pvPortMalloc+0x174>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <pvPortMalloc+0x172>
	return pvReturn;
 80084fc:	69fb      	ldr	r3, [r7, #28]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3728      	adds	r7, #40	; 0x28
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20001c90 	.word	0x20001c90
 800850c:	20001ca4 	.word	0x20001ca4
 8008510:	20001c94 	.word	0x20001c94
 8008514:	20001c88 	.word	0x20001c88
 8008518:	20001c98 	.word	0x20001c98
 800851c:	20001c9c 	.word	0x20001c9c

08008520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d04d      	beq.n	80085ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008532:	2308      	movs	r3, #8
 8008534:	425b      	negs	r3, r3
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4413      	add	r3, r2
 800853a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <vPortFree+0xb8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4013      	ands	r3, r2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <vPortFree+0x44>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60fb      	str	r3, [r7, #12]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <vPortFree+0x62>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60bb      	str	r3, [r7, #8]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <vPortFree+0xb8>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01e      	beq.n	80085ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11a      	bne.n	80085ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <vPortFree+0xb8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	43db      	mvns	r3, r3
 80085a2:	401a      	ands	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085a8:	f7fe fc6c 	bl	8006e84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <vPortFree+0xbc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	4a09      	ldr	r2, [pc, #36]	; (80085dc <vPortFree+0xbc>)
 80085b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ba:	6938      	ldr	r0, [r7, #16]
 80085bc:	f000 f874 	bl	80086a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <vPortFree+0xc0>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a06      	ldr	r2, [pc, #24]	; (80085e0 <vPortFree+0xc0>)
 80085c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085ca:	f7fe fc69 	bl	8006ea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ce:	bf00      	nop
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20001ca4 	.word	0x20001ca4
 80085dc:	20001c94 	.word	0x20001c94
 80085e0:	20001ca0 	.word	0x20001ca0

080085e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085f0:	4b27      	ldr	r3, [pc, #156]	; (8008690 <prvHeapInit+0xac>)
 80085f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00c      	beq.n	8008618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3307      	adds	r3, #7
 8008602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <prvHeapInit+0xac>)
 8008614:	4413      	add	r3, r2
 8008616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800861c:	4a1d      	ldr	r2, [pc, #116]	; (8008694 <prvHeapInit+0xb0>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008622:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <prvHeapInit+0xb0>)
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	4413      	add	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008630:	2208      	movs	r2, #8
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	1a9b      	subs	r3, r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0307 	bic.w	r3, r3, #7
 800863e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a15      	ldr	r2, [pc, #84]	; (8008698 <prvHeapInit+0xb4>)
 8008644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008646:	4b14      	ldr	r3, [pc, #80]	; (8008698 <prvHeapInit+0xb4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <prvHeapInit+0xb4>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008664:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <prvHeapInit+0xb4>)
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	4a0a      	ldr	r2, [pc, #40]	; (800869c <prvHeapInit+0xb8>)
 8008672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4a09      	ldr	r2, [pc, #36]	; (80086a0 <prvHeapInit+0xbc>)
 800867a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <prvHeapInit+0xc0>)
 800867e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008682:	601a      	str	r2, [r3, #0]
}
 8008684:	bf00      	nop
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	200010d0 	.word	0x200010d0
 8008694:	20001c88 	.word	0x20001c88
 8008698:	20001c90 	.word	0x20001c90
 800869c:	20001c98 	.word	0x20001c98
 80086a0:	20001c94 	.word	0x20001c94
 80086a4:	20001ca4 	.word	0x20001ca4

080086a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086b0:	4b28      	ldr	r3, [pc, #160]	; (8008754 <prvInsertBlockIntoFreeList+0xac>)
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e002      	b.n	80086bc <prvInsertBlockIntoFreeList+0x14>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d8f7      	bhi.n	80086b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d108      	bne.n	80086ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	441a      	add	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	441a      	add	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d118      	bne.n	8008730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b15      	ldr	r3, [pc, #84]	; (8008758 <prvInsertBlockIntoFreeList+0xb0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d00d      	beq.n	8008726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	441a      	add	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	e008      	b.n	8008738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <prvInsertBlockIntoFreeList+0xb0>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e003      	b.n	8008738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d002      	beq.n	8008746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20001c88 	.word	0x20001c88
 8008758:	20001c90 	.word	0x20001c90

0800875c <__libc_init_array>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	4d0d      	ldr	r5, [pc, #52]	; (8008794 <__libc_init_array+0x38>)
 8008760:	4c0d      	ldr	r4, [pc, #52]	; (8008798 <__libc_init_array+0x3c>)
 8008762:	1b64      	subs	r4, r4, r5
 8008764:	10a4      	asrs	r4, r4, #2
 8008766:	2600      	movs	r6, #0
 8008768:	42a6      	cmp	r6, r4
 800876a:	d109      	bne.n	8008780 <__libc_init_array+0x24>
 800876c:	4d0b      	ldr	r5, [pc, #44]	; (800879c <__libc_init_array+0x40>)
 800876e:	4c0c      	ldr	r4, [pc, #48]	; (80087a0 <__libc_init_array+0x44>)
 8008770:	f000 f8f2 	bl	8008958 <_init>
 8008774:	1b64      	subs	r4, r4, r5
 8008776:	10a4      	asrs	r4, r4, #2
 8008778:	2600      	movs	r6, #0
 800877a:	42a6      	cmp	r6, r4
 800877c:	d105      	bne.n	800878a <__libc_init_array+0x2e>
 800877e:	bd70      	pop	{r4, r5, r6, pc}
 8008780:	f855 3b04 	ldr.w	r3, [r5], #4
 8008784:	4798      	blx	r3
 8008786:	3601      	adds	r6, #1
 8008788:	e7ee      	b.n	8008768 <__libc_init_array+0xc>
 800878a:	f855 3b04 	ldr.w	r3, [r5], #4
 800878e:	4798      	blx	r3
 8008790:	3601      	adds	r6, #1
 8008792:	e7f2      	b.n	800877a <__libc_init_array+0x1e>
 8008794:	08008ac4 	.word	0x08008ac4
 8008798:	08008ac4 	.word	0x08008ac4
 800879c:	08008ac4 	.word	0x08008ac4
 80087a0:	08008ac8 	.word	0x08008ac8

080087a4 <__retarget_lock_acquire_recursive>:
 80087a4:	4770      	bx	lr

080087a6 <__retarget_lock_release_recursive>:
 80087a6:	4770      	bx	lr

080087a8 <memcpy>:
 80087a8:	440a      	add	r2, r1
 80087aa:	4291      	cmp	r1, r2
 80087ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80087b0:	d100      	bne.n	80087b4 <memcpy+0xc>
 80087b2:	4770      	bx	lr
 80087b4:	b510      	push	{r4, lr}
 80087b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087be:	4291      	cmp	r1, r2
 80087c0:	d1f9      	bne.n	80087b6 <memcpy+0xe>
 80087c2:	bd10      	pop	{r4, pc}

080087c4 <memset>:
 80087c4:	4402      	add	r2, r0
 80087c6:	4603      	mov	r3, r0
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d100      	bne.n	80087ce <memset+0xa>
 80087cc:	4770      	bx	lr
 80087ce:	f803 1b01 	strb.w	r1, [r3], #1
 80087d2:	e7f9      	b.n	80087c8 <memset+0x4>

080087d4 <cleanup_glue>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	460c      	mov	r4, r1
 80087d8:	6809      	ldr	r1, [r1, #0]
 80087da:	4605      	mov	r5, r0
 80087dc:	b109      	cbz	r1, 80087e2 <cleanup_glue+0xe>
 80087de:	f7ff fff9 	bl	80087d4 <cleanup_glue>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ea:	f000 b869 	b.w	80088c0 <_free_r>
	...

080087f0 <_reclaim_reent>:
 80087f0:	4b2c      	ldr	r3, [pc, #176]	; (80088a4 <_reclaim_reent+0xb4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4283      	cmp	r3, r0
 80087f6:	b570      	push	{r4, r5, r6, lr}
 80087f8:	4604      	mov	r4, r0
 80087fa:	d051      	beq.n	80088a0 <_reclaim_reent+0xb0>
 80087fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80087fe:	b143      	cbz	r3, 8008812 <_reclaim_reent+0x22>
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d14a      	bne.n	800889c <_reclaim_reent+0xac>
 8008806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008808:	6819      	ldr	r1, [r3, #0]
 800880a:	b111      	cbz	r1, 8008812 <_reclaim_reent+0x22>
 800880c:	4620      	mov	r0, r4
 800880e:	f000 f857 	bl	80088c0 <_free_r>
 8008812:	6961      	ldr	r1, [r4, #20]
 8008814:	b111      	cbz	r1, 800881c <_reclaim_reent+0x2c>
 8008816:	4620      	mov	r0, r4
 8008818:	f000 f852 	bl	80088c0 <_free_r>
 800881c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800881e:	b111      	cbz	r1, 8008826 <_reclaim_reent+0x36>
 8008820:	4620      	mov	r0, r4
 8008822:	f000 f84d 	bl	80088c0 <_free_r>
 8008826:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008828:	b111      	cbz	r1, 8008830 <_reclaim_reent+0x40>
 800882a:	4620      	mov	r0, r4
 800882c:	f000 f848 	bl	80088c0 <_free_r>
 8008830:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008832:	b111      	cbz	r1, 800883a <_reclaim_reent+0x4a>
 8008834:	4620      	mov	r0, r4
 8008836:	f000 f843 	bl	80088c0 <_free_r>
 800883a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800883c:	b111      	cbz	r1, 8008844 <_reclaim_reent+0x54>
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f83e 	bl	80088c0 <_free_r>
 8008844:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008846:	b111      	cbz	r1, 800884e <_reclaim_reent+0x5e>
 8008848:	4620      	mov	r0, r4
 800884a:	f000 f839 	bl	80088c0 <_free_r>
 800884e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008850:	b111      	cbz	r1, 8008858 <_reclaim_reent+0x68>
 8008852:	4620      	mov	r0, r4
 8008854:	f000 f834 	bl	80088c0 <_free_r>
 8008858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800885a:	b111      	cbz	r1, 8008862 <_reclaim_reent+0x72>
 800885c:	4620      	mov	r0, r4
 800885e:	f000 f82f 	bl	80088c0 <_free_r>
 8008862:	69a3      	ldr	r3, [r4, #24]
 8008864:	b1e3      	cbz	r3, 80088a0 <_reclaim_reent+0xb0>
 8008866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008868:	4620      	mov	r0, r4
 800886a:	4798      	blx	r3
 800886c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800886e:	b1b9      	cbz	r1, 80088a0 <_reclaim_reent+0xb0>
 8008870:	4620      	mov	r0, r4
 8008872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008876:	f7ff bfad 	b.w	80087d4 <cleanup_glue>
 800887a:	5949      	ldr	r1, [r1, r5]
 800887c:	b941      	cbnz	r1, 8008890 <_reclaim_reent+0xa0>
 800887e:	3504      	adds	r5, #4
 8008880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008882:	2d80      	cmp	r5, #128	; 0x80
 8008884:	68d9      	ldr	r1, [r3, #12]
 8008886:	d1f8      	bne.n	800887a <_reclaim_reent+0x8a>
 8008888:	4620      	mov	r0, r4
 800888a:	f000 f819 	bl	80088c0 <_free_r>
 800888e:	e7ba      	b.n	8008806 <_reclaim_reent+0x16>
 8008890:	680e      	ldr	r6, [r1, #0]
 8008892:	4620      	mov	r0, r4
 8008894:	f000 f814 	bl	80088c0 <_free_r>
 8008898:	4631      	mov	r1, r6
 800889a:	e7ef      	b.n	800887c <_reclaim_reent+0x8c>
 800889c:	2500      	movs	r5, #0
 800889e:	e7ef      	b.n	8008880 <_reclaim_reent+0x90>
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	bf00      	nop
 80088a4:	20000010 	.word	0x20000010

080088a8 <__malloc_lock>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__malloc_lock+0x8>)
 80088aa:	f7ff bf7b 	b.w	80087a4 <__retarget_lock_acquire_recursive>
 80088ae:	bf00      	nop
 80088b0:	20001ca8 	.word	0x20001ca8

080088b4 <__malloc_unlock>:
 80088b4:	4801      	ldr	r0, [pc, #4]	; (80088bc <__malloc_unlock+0x8>)
 80088b6:	f7ff bf76 	b.w	80087a6 <__retarget_lock_release_recursive>
 80088ba:	bf00      	nop
 80088bc:	20001ca8 	.word	0x20001ca8

080088c0 <_free_r>:
 80088c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088c2:	2900      	cmp	r1, #0
 80088c4:	d044      	beq.n	8008950 <_free_r+0x90>
 80088c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ca:	9001      	str	r0, [sp, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f1a1 0404 	sub.w	r4, r1, #4
 80088d2:	bfb8      	it	lt
 80088d4:	18e4      	addlt	r4, r4, r3
 80088d6:	f7ff ffe7 	bl	80088a8 <__malloc_lock>
 80088da:	4a1e      	ldr	r2, [pc, #120]	; (8008954 <_free_r+0x94>)
 80088dc:	9801      	ldr	r0, [sp, #4]
 80088de:	6813      	ldr	r3, [r2, #0]
 80088e0:	b933      	cbnz	r3, 80088f0 <_free_r+0x30>
 80088e2:	6063      	str	r3, [r4, #4]
 80088e4:	6014      	str	r4, [r2, #0]
 80088e6:	b003      	add	sp, #12
 80088e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088ec:	f7ff bfe2 	b.w	80088b4 <__malloc_unlock>
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	d908      	bls.n	8008906 <_free_r+0x46>
 80088f4:	6825      	ldr	r5, [r4, #0]
 80088f6:	1961      	adds	r1, r4, r5
 80088f8:	428b      	cmp	r3, r1
 80088fa:	bf01      	itttt	eq
 80088fc:	6819      	ldreq	r1, [r3, #0]
 80088fe:	685b      	ldreq	r3, [r3, #4]
 8008900:	1949      	addeq	r1, r1, r5
 8008902:	6021      	streq	r1, [r4, #0]
 8008904:	e7ed      	b.n	80088e2 <_free_r+0x22>
 8008906:	461a      	mov	r2, r3
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b10b      	cbz	r3, 8008910 <_free_r+0x50>
 800890c:	42a3      	cmp	r3, r4
 800890e:	d9fa      	bls.n	8008906 <_free_r+0x46>
 8008910:	6811      	ldr	r1, [r2, #0]
 8008912:	1855      	adds	r5, r2, r1
 8008914:	42a5      	cmp	r5, r4
 8008916:	d10b      	bne.n	8008930 <_free_r+0x70>
 8008918:	6824      	ldr	r4, [r4, #0]
 800891a:	4421      	add	r1, r4
 800891c:	1854      	adds	r4, r2, r1
 800891e:	42a3      	cmp	r3, r4
 8008920:	6011      	str	r1, [r2, #0]
 8008922:	d1e0      	bne.n	80088e6 <_free_r+0x26>
 8008924:	681c      	ldr	r4, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	6053      	str	r3, [r2, #4]
 800892a:	4421      	add	r1, r4
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	e7da      	b.n	80088e6 <_free_r+0x26>
 8008930:	d902      	bls.n	8008938 <_free_r+0x78>
 8008932:	230c      	movs	r3, #12
 8008934:	6003      	str	r3, [r0, #0]
 8008936:	e7d6      	b.n	80088e6 <_free_r+0x26>
 8008938:	6825      	ldr	r5, [r4, #0]
 800893a:	1961      	adds	r1, r4, r5
 800893c:	428b      	cmp	r3, r1
 800893e:	bf04      	itt	eq
 8008940:	6819      	ldreq	r1, [r3, #0]
 8008942:	685b      	ldreq	r3, [r3, #4]
 8008944:	6063      	str	r3, [r4, #4]
 8008946:	bf04      	itt	eq
 8008948:	1949      	addeq	r1, r1, r5
 800894a:	6021      	streq	r1, [r4, #0]
 800894c:	6054      	str	r4, [r2, #4]
 800894e:	e7ca      	b.n	80088e6 <_free_r+0x26>
 8008950:	b003      	add	sp, #12
 8008952:	bd30      	pop	{r4, r5, pc}
 8008954:	20001cac 	.word	0x20001cac

08008958 <_init>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr

08008964 <_fini>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	bf00      	nop
 8008968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896a:	bc08      	pop	{r3}
 800896c:	469e      	mov	lr, r3
 800896e:	4770      	bx	lr
