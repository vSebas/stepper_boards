
stepper_boards_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a34  08009a34  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a3c  08009a3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a40  08009a40  00019a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fbc  20000074  08009ab8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003030  08009ab8  00023030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260d1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d4  00000000  00000000  00046175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  0004a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029017  00000000  00000000  0004c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000207ae  00000000  00000000  0007546f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f18fa  00000000  00000000  00095c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00187517  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001a20  00000000  00000000  00187568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078ec  00000000  00000000  00188f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800986c 	.word	0x0800986c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800986c 	.word	0x0800986c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <can_parse_msg>:

#include "CANLib/CANMessage.h"

extern volatile uint8_t g_sendPing;

void can_parse_msg(CAN_RxHeaderTypeDef *header, uint8_t *data){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	if(data == NULL) return;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	f000 8081 	beq.w	80005e8 <can_parse_msg+0x114>

	uint8_t id = can_parse_id(data, header->DLC);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	6838      	ldr	r0, [r7, #0]
 80004f0:	f008 ff50 	bl	8009394 <can_parse_id>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(id == STEPPERS_STATE){
 80004fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004fe:	2b15      	cmp	r3, #21
 8000500:	d112      	bne.n	8000528 <can_parse_msg+0x54>
		// Frame byte structure: ID X X X STATE
		uint32_t frame = can_parse_long(data, header->DLC);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4619      	mov	r1, r3
 800050a:	6838      	ldr	r0, [r7, #0]
 800050c:	f008 ff7a 	bl	8009404 <can_parse_long>
 8000510:	6138      	str	r0, [r7, #16]
		uint8_t state = frame & 0x000000FF;
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	73fb      	strb	r3, [r7, #15]
		if(state == 1) // Start
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d102      	bne.n	8000522 <can_parse_msg+0x4e>
			start();
 800051c:	f000 ffcc 	bl	80014b8 <start>
 8000520:	e063      	b.n	80005ea <can_parse_msg+0x116>
		else
			stop();
 8000522:	f000 fffb 	bl	800151c <stop>
 8000526:	e060      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == AUTONOMOUS_STEERING){
 8000528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800052c:	2b16      	cmp	r3, #22
 800052e:	d114      	bne.n	800055a <can_parse_msg+0x86>
		// Frame byte structure: ID #STEPS1 #STEPS2 X DIR
		uint32_t frame = can_parse_long(data, header->DLC);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	6838      	ldr	r0, [r7, #0]
 800053a:	f008 ff63 	bl	8009404 <can_parse_long>
 800053e:	61b8      	str	r0, [r7, #24]
		uint16_t steps = (frame & 0xFFFF0000) >> 16;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	82fb      	strh	r3, [r7, #22]
		uint8_t dir = frame & 0x000000FF;
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	757b      	strb	r3, [r7, #21]
		set_setpoint(STEERING, steps, dir);
 800054a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800054e:	8afb      	ldrh	r3, [r7, #22]
 8000550:	4619      	mov	r1, r3
 8000552:	2000      	movs	r0, #0
 8000554:	f001 f854 	bl	8001600 <set_setpoint>
 8000558:	e047      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == CONTROLLER_STEERING){
 800055a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800055e:	2b17      	cmp	r3, #23
 8000560:	d10f      	bne.n	8000582 <can_parse_msg+0xae>
		// Frame byte structure: ID X X X DIR
		uint32_t frame = can_parse_long(data, header->DLC);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	691b      	ldr	r3, [r3, #16]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	6838      	ldr	r0, [r7, #0]
 800056c:	f008 ff4a 	bl	8009404 <can_parse_long>
 8000570:	6238      	str	r0, [r7, #32]
		//uint16_t steps = (frame & 0xFFFF0000) >> 16;
		uint8_t dir = frame & 0x000000FF;
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	77fb      	strb	r3, [r7, #31]
		set_direction(STEERING, dir);
 8000576:	7ffb      	ldrb	r3, [r7, #31]
 8000578:	4619      	mov	r1, r3
 800057a:	2000      	movs	r0, #0
 800057c:	f001 f800 	bl	8001580 <set_direction>
 8000580:	e033      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == ENCODER_ID_IFM){
 8000582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000586:	2b18      	cmp	r3, #24
 8000588:	d02f      	beq.n	80005ea <can_parse_msg+0x116>
		//?
	} else if(id == ENCODER_ID_BRITTER) {
 800058a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800058e:	2b19      	cmp	r3, #25
 8000590:	d118      	bne.n	80005c4 <can_parse_msg+0xf0>
		float val = can_parse_float(data, header->DLC);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	6838      	ldr	r0, [r7, #0]
 800059c:	f008 ff10 	bl	80093c0 <can_parse_float>
 80005a0:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		float angle = val/4096*360;
 80005a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80005a8:	eddf 6a11 	vldr	s13, [pc, #68]	; 80005f0 <can_parse_msg+0x11c>
 80005ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80005f4 <can_parse_msg+0x120>
 80005b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		can_rx_data.encoderAngle[1] = angle;
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <can_parse_msg+0x124>)
 80005be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c0:	60d3      	str	r3, [r2, #12]
 80005c2:	e012      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == JETSON_HEARTBEAT_ID) {
 80005c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005c8:	2b1e      	cmp	r3, #30
 80005ca:	d105      	bne.n	80005d8 <can_parse_msg+0x104>
		//Jetson heartbeat
		can_rx_data.jetsonHBTick = HAL_GetTick();
 80005cc:	f001 f904 	bl	80017d8 <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <can_parse_msg+0x124>)
 80005d4:	6113      	str	r3, [r2, #16]
 80005d6:	e008      	b.n	80005ea <can_parse_msg+0x116>
	} else if(id == PING_ID){
 80005d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005dc:	2b1f      	cmp	r3, #31
 80005de:	d104      	bne.n	80005ea <can_parse_msg+0x116>
		g_sendPing = 1;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <can_parse_msg+0x128>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e000      	b.n	80005ea <can_parse_msg+0x116>
	if(data == NULL) return;
 80005e8:	bf00      	nop
	}
}
 80005ea:	3730      	adds	r7, #48	; 0x30
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	45800000 	.word	0x45800000
 80005f4:	43b40000 	.word	0x43b40000
 80005f8:	20000090 	.word	0x20000090
 80005fc:	200000ac 	.word	0x200000ac

08000600 <can_init>:
  .priority = (osPriority_t) osPriorityNormal,
};
*/


void can_init(){
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000606:	2301      	movs	r3, #1
 8000608:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;		// Specify filter bank to use
 800060a:	230a      	movs	r3, #10
 800060c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //Incoming data is saved here
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;//0x100<<5;//0x000<<5;
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh= 0; //0xF00<<5;//0x600<<5;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000626:	2301      	movs	r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;
 800062a:	230d      	movs	r3, #13
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
	filter.SlaveStartFilterBank = 0;
	*/

	if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) Error_Handler();
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <can_init+0xb8>)
 8000634:	f002 f88b 	bl	800274e <HAL_CAN_ConfigFilter>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <can_init+0x42>
 800063e:	f000 fc67 	bl	8000f10 <Error_Handler>
	if(HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <can_init+0xb8>)
 8000644:	f002 f94d 	bl	80028e2 <HAL_CAN_Start>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <can_init+0x52>
 800064e:	f000 fc5f 	bl	8000f10 <Error_Handler>
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) Error_Handler();
 8000652:	2102      	movs	r1, #2
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <can_init+0xb8>)
 8000656:	f002 fb92 	bl	8002d7e <HAL_CAN_ActivateNotification>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <can_init+0x64>
 8000660:	f000 fc56 	bl	8000f10 <Error_Handler>
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) Error_Handler();
 8000664:	2110      	movs	r1, #16
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <can_init+0xb8>)
 8000668:	f002 fb89 	bl	8002d7e <HAL_CAN_ActivateNotification>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <can_init+0x76>
 8000672:	f000 fc4d 	bl	8000f10 <Error_Handler>

	//Initialize queues

	//First char -> size
	debugMessageQueue = osMessageQueueNew(64, 8, NULL);
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	2040      	movs	r0, #64	; 0x40
 800067c:	f006 f84b 	bl	8006716 <osMessageQueueNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <can_init+0xbc>)
 8000684:	6013      	str	r3, [r2, #0]
	if(debugMessageQueue == NULL)
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <can_init+0xbc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <can_init+0x92>
		Error_Handler();
 800068e:	f000 fc3f 	bl	8000f10 <Error_Handler>

	txMessageQueue = osMessageQueueNew(64, sizeof(CAN_TX_QUEUE_OBJ), NULL);
 8000692:	2200      	movs	r2, #0
 8000694:	2109      	movs	r1, #9
 8000696:	2040      	movs	r0, #64	; 0x40
 8000698:	f006 f83d 	bl	8006716 <osMessageQueueNew>
 800069c:	4603      	mov	r3, r0
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <can_init+0xc0>)
 80006a0:	6013      	str	r3, [r2, #0]
	if(txMessageQueue == NULL)
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <can_init+0xc0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <can_init+0xae>
		Error_Handler();
 80006aa:	f000 fc31 	bl	8000f10 <Error_Handler>
}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000114 	.word	0x20000114
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	200000a8 	.word	0x200000a8

080006c4 <can_tx_task>:

void can_tx_task(void * params){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	for(;;){
		can_tx_update();
 80006cc:	f000 f806 	bl	80006dc <can_tx_update>

		osDelay(can_tx_task_delay);
 80006d0:	2305      	movs	r3, #5
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 f804 	bl	80066e0 <osDelay>
		can_tx_update();
 80006d8:	e7f8      	b.n	80006cc <can_tx_task+0x8>
	...

080006dc <can_tx_update>:
	}
}

void can_tx_update(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	txHeader.IDE = CAN_ID_STD;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
	txHeader.StdId = 0x111;
 80006e6:	f240 1311 	movw	r3, #273	; 0x111
 80006ea:	617b      	str	r3, [r7, #20]
	txHeader.RTR = CAN_RTR_DATA;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]

	CAN_TX_QUEUE_OBJ txOut;

	while(osMessageQueueGet(txMessageQueue, &txOut, NULL, 0) == osOK){
 80006f0:	e013      	b.n	800071a <can_tx_update+0x3e>
		txHeader.DLC = txOut.msg_size;
 80006f2:	7b3b      	ldrb	r3, [r7, #12]
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &txHeader, txOut.buf, &txMailbox);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	1d3a      	adds	r2, r7, #4
 80006fc:	f107 0114 	add.w	r1, r7, #20
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <can_tx_update+0x5c>)
 8000702:	f002 f932 	bl	800296a <HAL_CAN_AddTxMessage>
 8000706:	4603      	mov	r3, r0
 8000708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(ret != HAL_OK){
 800070c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <can_tx_update+0x3e>
			txHeader.DLC++;
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	3301      	adds	r3, #1
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
	while(osMessageQueueGet(txMessageQueue, &txOut, NULL, 0) == osOK){
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <can_tx_update+0x60>)
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	1d39      	adds	r1, r7, #4
 8000720:	2300      	movs	r3, #0
 8000722:	2200      	movs	r2, #0
 8000724:	f006 f86a 	bl	80067fc <osMessageQueueGet>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0e1      	beq.n	80006f2 <can_tx_update+0x16>
		}
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3730      	adds	r7, #48	; 0x30
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000114 	.word	0x20000114
 800073c:	200000a8 	.word	0x200000a8

08000740 <can_rx_task>:

void can_rx_task(void *params){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	for(;;){
		can_rx_update();
 8000748:	f000 f806 	bl	8000758 <can_rx_update>
		osDelay(can_rx_task_delay);
 800074c:	2305      	movs	r3, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f005 ffc6 	bl	80066e0 <osDelay>
		can_rx_update();
 8000754:	e7f8      	b.n	8000748 <can_rx_task+0x8>
	...

08000758 <can_rx_update>:
	}
}

void can_rx_update(){
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
	//TODO check both FIFO?
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t buf[8];
	uint32_t fill_level0 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800075e:	2100      	movs	r1, #0
 8000760:	4820      	ldr	r0, [pc, #128]	; (80007e4 <can_rx_update+0x8c>)
 8000762:	f002 fae4 	bl	8002d2e <HAL_CAN_GetRxFifoFillLevel>
 8000766:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t fill_level1 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1);
 8000768:	2101      	movs	r1, #1
 800076a:	481e      	ldr	r0, [pc, #120]	; (80007e4 <can_rx_update+0x8c>)
 800076c:	f002 fadf 	bl	8002d2e <HAL_CAN_GetRxFifoFillLevel>
 8000770:	62b8      	str	r0, [r7, #40]	; 0x28
	while(fill_level0 != 0){
 8000772:	e015      	b.n	80007a0 <can_rx_update+0x48>
		HAL_StatusTypeDef ret = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, buf);
 8000774:	463b      	mov	r3, r7
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	2100      	movs	r1, #0
 800077c:	4819      	ldr	r0, [pc, #100]	; (80007e4 <can_rx_update+0x8c>)
 800077e:	f002 f9c4 	bl	8002b0a <HAL_CAN_GetRxMessage>
 8000782:	4603      	mov	r3, r0
 8000784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(ret != HAL_OK) continue;
 8000788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800078c:	2b00      	cmp	r3, #0
 800078e:	d000      	beq.n	8000792 <can_rx_update+0x3a>
 8000790:	e006      	b.n	80007a0 <can_rx_update+0x48>
		//Parse can message
		can_parse_msg(&rxHeader, buf);
 8000792:	463a      	mov	r2, r7
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fe9a 	bl	80004d4 <can_parse_msg>
	while(fill_level0 != 0){
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1e6      	bne.n	8000774 <can_rx_update+0x1c>
	}
	while(fill_level1 != 0){
 80007a6:	e015      	b.n	80007d4 <can_rx_update+0x7c>
		HAL_StatusTypeDef ret = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeader, buf);
 80007a8:	463b      	mov	r3, r7
 80007aa:	f107 0208 	add.w	r2, r7, #8
 80007ae:	2101      	movs	r1, #1
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <can_rx_update+0x8c>)
 80007b2:	f002 f9aa 	bl	8002b0a <HAL_CAN_GetRxMessage>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(ret != HAL_OK) continue;
 80007bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d000      	beq.n	80007c6 <can_rx_update+0x6e>
 80007c4:	e006      	b.n	80007d4 <can_rx_update+0x7c>
		//Parse can message
		can_parse_msg(&rxHeader, buf);
 80007c6:	463a      	mov	r2, r7
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe80 	bl	80004d4 <can_parse_msg>
	while(fill_level1 != 0){
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1e6      	bne.n	80007a8 <can_rx_update+0x50>
	}
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3730      	adds	r7, #48	; 0x30
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000114 	.word	0x20000114

080007e8 <start_can_tasks>:
		osDelay(1000);
	}
}
*/

void start_can_tasks(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	osThreadNew(can_rx_task, NULL, &canRxTask_attributes);
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <start_can_tasks+0x1c>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <start_can_tasks+0x20>)
 80007f2:	f005 fee3 	bl	80065bc <osThreadNew>
	osThreadNew(can_tx_task, NULL, &canTxTask_attributes);
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <start_can_tasks+0x24>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <start_can_tasks+0x28>)
 80007fc:	f005 fede 	bl	80065bc <osThreadNew>
	//osThreadNew(can_sbus_tx_task, NULL, &sbusTask_attributes);
	//osThreadNew(can_debug_msg_tx_task, NULL, &debugMsgTask_attributes);
	//osThreadNew(can_send_ping_task, NULL, &pingTask_attributes);
	//osThreadNew(can_battery_monitor_task, NULL, &batteryTask_attributes);
	//osThreadNew(debug_vars_task, NULL, &debugVarsTask_attributes);
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	080098f8 	.word	0x080098f8
 8000808:	08000741 	.word	0x08000741
 800080c:	0800991c 	.word	0x0800991c
 8000810:	080006c5 	.word	0x080006c5

08000814 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
return 0;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 ffa1 	bl	800177e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f836 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 fa7e 	bl	8000d40 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000844:	f000 fa4c 	bl	8000ce0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000848:	f000 f9c8 	bl	8000bdc <MX_TIM2_Init>
  MX_TIM1_Init();
 800084c:	f000 f91a 	bl	8000a84 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000850:	f000 f87c 	bl	800094c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000854:	f000 f8de 	bl	8000a14 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	210f      	movs	r1, #15
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <main+0x5c>)
 800085e:	f002 fd11 	bl	8003284 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000862:	f005 fe61 	bl	8006528 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of steeringTask */
  steeringTaskHandle = osThreadNew(steering_task, NULL, &steeringTask_attributes);
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <main+0x60>)
 8000868:	2100      	movs	r1, #0
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <main+0x64>)
 800086c:	f005 fea6 	bl	80065bc <osThreadNew>
 8000870:	4603      	mov	r3, r0
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <main+0x68>)
 8000874:	6013      	str	r3, [r2, #0]

  /* creation of brakingTask */
  brakingTaskHandle = osThreadNew(braking_task, NULL, &brakingTask_attributes);
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <main+0x6c>)
 8000878:	2100      	movs	r1, #0
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <main+0x70>)
 800087c:	f005 fe9e 	bl	80065bc <osThreadNew>
 8000880:	4603      	mov	r3, r0
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <main+0x74>)
 8000884:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  start_can_tasks();
 8000886:	f7ff ffaf 	bl	80007e8 <start_can_tasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800088a:	f005 fe71 	bl	8006570 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088e:	e7fe      	b.n	800088e <main+0x5a>
 8000890:	48000800 	.word	0x48000800
 8000894:	08009944 	.word	0x08009944
 8000898:	08000ec1 	.word	0x08000ec1
 800089c:	20000258 	.word	0x20000258
 80008a0:	08009968 	.word	0x08009968
 80008a4:	08000edd 	.word	0x08000edd
 80008a8:	2000025c 	.word	0x2000025c

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b096      	sub	sp, #88	; 0x58
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2244      	movs	r2, #68	; 0x44
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f008 ff0c 	bl	80096d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d2:	f002 fcfd 	bl	80032d0 <HAL_PWREx_ControlVoltageScaling>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008dc:	f000 fb18 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	2303      	movs	r3, #3
 80008f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80008f6:	2314      	movs	r3, #20
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008fa:	2307      	movs	r3, #7
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000902:	2304      	movs	r3, #4
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fd36 	bl	800337c <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000916:	f000 fafb 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2303      	movs	r3, #3
 8000920:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	2104      	movs	r1, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f003 f936 	bl	8003ba4 <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800093e:	f000 fae7 	bl	8000f10 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3758      	adds	r7, #88	; 0x58
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000964:	4a29      	ldr	r2, [pc, #164]	; (8000a0c <MX_ADC1_Init+0xc0>)
 8000966:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_ADC1_Init+0xbc>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_ADC1_Init+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000982:	2204      	movs	r2, #4
 8000984:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000988:	2200      	movs	r2, #0
 800098a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_ADC1_Init+0xbc>)
 800098e:	2201      	movs	r2, #1
 8000990:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_ADC1_Init+0xbc>)
 8000994:	2201      	movs	r2, #1
 8000996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_ADC1_Init+0xbc>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009c4:	f001 f8a0 	bl	8001b08 <HAL_ADC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80009ce:	f000 fa9f 	bl	8000f10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_ADC1_Init+0xc4>)
 80009d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d6:	2306      	movs	r3, #6
 80009d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009de:	237f      	movs	r3, #127	; 0x7f
 80009e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009e2:	2304      	movs	r3, #4
 80009e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_ADC1_Init+0xbc>)
 80009f0:	f001 f9d2 	bl	8001d98 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009fa:	f000 fa89 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000b0 	.word	0x200000b0
 8000a0c:	50040000 	.word	0x50040000
 8000a10:	c7520000 	.word	0xc7520000

08000a14 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <MX_CAN1_Init+0x6c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a20:	2228      	movs	r2, #40	; 0x28
 8000a22:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a32:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_CAN1_Init+0x68>)
 8000a66:	f001 fd77 	bl	8002558 <HAL_CAN_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a70:	f000 fa4e 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  can_init();
 8000a74:	f7ff fdc4 	bl	8000600 <can_init>
  /* USER CODE END CAN1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000114 	.word	0x20000114
 8000a80:	40006400 	.word	0x40006400

08000a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09a      	sub	sp, #104	; 0x68
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	222c      	movs	r2, #44	; 0x2c
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fe0a 	bl	80096d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ac6:	4a44      	ldr	r2, [pc, #272]	; (8000bd8 <MX_TIM1_Init+0x154>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000acc:	224f      	movs	r2, #79	; 0x4f
 8000ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ad8:	2263      	movs	r2, #99	; 0x63
 8000ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aee:	4839      	ldr	r0, [pc, #228]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000af0:	f003 fdb6 	bl	8004660 <HAL_TIM_Base_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000afa:	f000 fa09 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4832      	ldr	r0, [pc, #200]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000b0c:	f004 faea 	bl	80050e4 <HAL_TIM_ConfigClockSource>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b16:	f000 f9fb 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b1a:	482e      	ldr	r0, [pc, #184]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000b1c:	f003 fe4c 	bl	80047b8 <HAL_TIM_PWM_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b26:	f000 f9f3 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000b3e:	f004 ff5b 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000b48:	f000 f9e2 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4c:	2360      	movs	r3, #96	; 0x60
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000b72:	f004 f9a3 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000b7c:	f000 f9c8 	bl	8000f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000bb6:	f004 ff85 	bl	8005ac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000bc0:	f000 f9a6 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <MX_TIM1_Init+0x150>)
 8000bc6:	f000 fabb 	bl	8001140 <HAL_TIM_MspPostInit>

}
 8000bca:	bf00      	nop
 8000bcc:	3768      	adds	r7, #104	; 0x68
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000013c 	.word	0x2000013c
 8000bd8:	40012c00 	.word	0x40012c00

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c14:	601a      	str	r2, [r3, #0]
  //htim2.Init.Prescaler = 8000-1;
  htim2.Init.Prescaler = 80-1;
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c18:	224f      	movs	r2, #79	; 0x4f
 8000c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  //htim2.Init.Period = 10000-1 ;
  htim2.Init.Period = 1000-1;
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c36:	4829      	ldr	r0, [pc, #164]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c38:	f003 fd12 	bl	8004660 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c42:	f000 f965 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4822      	ldr	r0, [pc, #136]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c54:	f004 fa46 	bl	80050e4 <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c5e:	f000 f957 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c64:	f003 fda8 	bl	80047b8 <HAL_TIM_PWM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c6e:	f000 f94f 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4816      	ldr	r0, [pc, #88]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000c82:	f004 feb9 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c8c:	f000 f940 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000ca8:	f004 f908 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000cb2:	f000 f92d 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	220c      	movs	r2, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000cbe:	f004 f8fd 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000cc8:	f000 f922 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM2_Init+0x100>)
 8000cce:	f000 fa37 	bl	8001140 <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000188 	.word	0x20000188

08000ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <MX_USART1_UART_Init+0x5c>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART1_UART_Init+0x58>)
 8000d24:	f004 ff64 	bl	8005bf0 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d2e:	f000 f8ef 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001d4 	.word	0x200001d4
 8000d3c:	40013800 	.word	0x40013800

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a55      	ldr	r2, [pc, #340]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b53      	ldr	r3, [pc, #332]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b47      	ldr	r3, [pc, #284]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a43      	ldr	r2, [pc, #268]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <MX_GPIO_Init+0x170>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f640 410f 	movw	r1, #3087	; 0xc0f
 8000dd4:	4837      	ldr	r0, [pc, #220]	; (8000eb4 <MX_GPIO_Init+0x174>)
 8000dd6:	f002 fa55 	bl	8003284 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2103      	movs	r1, #3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f002 fa4f 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f240 4105 	movw	r1, #1029	; 0x405
 8000dec:	4832      	ldr	r0, [pc, #200]	; (8000eb8 <MX_GPIO_Init+0x178>)
 8000dee:	f002 fa49 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2104      	movs	r1, #4
 8000df6:	4831      	ldr	r0, [pc, #196]	; (8000ebc <MX_GPIO_Init+0x17c>)
 8000df8:	f002 fa44 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000dfc:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000e00:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4827      	ldr	r0, [pc, #156]	; (8000eb4 <MX_GPIO_Init+0x174>)
 8000e16:	f002 f8bb 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f002 f8ac 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin;
 8000e38:	f240 4305 	movw	r3, #1029	; 0x405
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <MX_GPIO_Init+0x178>)
 8000e52:	f002 f89d 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8000e56:	f24f 2302 	movw	r3, #61954	; 0xf202
 8000e5a:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_GPIO_Init+0x178>)
 8000e6c:	f002 f890 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 8000e70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <MX_GPIO_Init+0x174>)
 8000e86:	f002 f883 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <MX_GPIO_Init+0x17c>)
 8000ea2:	f002 f875 	bl	8002f90 <HAL_GPIO_Init>

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48000c00 	.word	0x48000c00

08000ec0 <steering_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_steering_task */
void steering_task(void *argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN steering_task */
  configure_steppers();
 8000ec8:	f000 facc 	bl	8001464 <configure_steppers>
  start();
 8000ecc:	f000 faf4 	bl	80014b8 <start>
  //set_setpoint(STEERING, 400, CCW);
  /* Infinite loop */
  for(;;)
  {
	  steer();
 8000ed0:	f000 fbf6 	bl	80016c0 <steer>
	  osDelay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f005 fc03 	bl	80066e0 <osDelay>
	  steer();
 8000eda:	e7f9      	b.n	8000ed0 <steering_task+0x10>

08000edc <braking_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_braking_task */
void braking_task(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN braking_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f005 fbfb 	bl	80066e0 <osDelay>
 8000eea:	e7fb      	b.n	8000ee4 <braking_task+0x8>

08000eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efe:	f000 fc57 	bl	80017b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40001000 	.word	0x40001000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	210f      	movs	r1, #15
 8000f56:	f06f 0001 	mvn.w	r0, #1
 8000f5a:	f001 ffef 	bl	8002f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0a0      	sub	sp, #128	; 0x80
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	225c      	movs	r2, #92	; 0x5c
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f008 fba3 	bl	80096d8 <memset>
  if(hadc->Instance==ADC1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a25      	ldr	r2, [pc, #148]	; (800102c <HAL_ADC_MspInit+0xc0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d142      	bne.n	8001022 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000fb0:	2314      	movs	r3, #20
 8000fb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 f83e 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000fd6:	f7ff ff9b 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_ADC_MspInit+0xc4>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 800100a:	2310      	movs	r3, #16
 800100c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_ADC_MspInit+0xc8>)
 800101e:	f001 ffb7 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3780      	adds	r7, #128	; 0x80
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	50040000 	.word	0x50040000
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800

08001038 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <HAL_CAN_MspInit+0x80>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d129      	bne.n	80010ae <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_CAN_MspInit+0x84>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a11      	ldr	r2, [pc, #68]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_CAN_MspInit+0x84>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800108a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800109c:	2309      	movs	r3, #9
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f001 ff71 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40006400 	.word	0x40006400
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <HAL_TIM_Base_MspInit+0x78>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d114      	bne.n	80010fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	201b      	movs	r0, #27
 80010f0:	f001 ff24 	bl	8002f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010f4:	201b      	movs	r0, #27
 80010f6:	f001 ff3d 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010fa:	e018      	b.n	800112e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d113      	bne.n	800112e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6593      	str	r3, [r2, #88]	; 0x58
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2105      	movs	r1, #5
 8001122:	201c      	movs	r0, #28
 8001124:	f001 ff0a 	bl	8002f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001128:	201c      	movs	r0, #28
 800112a:	f001 ff23 	bl	8002f74 <HAL_NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40012c00 	.word	0x40012c00
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a32      	ldr	r2, [pc, #200]	; (8001228 <HAL_TIM_MspPostInit+0xe8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11e      	bne.n	80011a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 800117a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f001 fef9 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800119e:	e03f      	b.n	8001220 <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d13a      	bne.n	8001220 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_TIM_MspPostInit+0xec>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STPR_PWM_2_Pin;
 80011da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ec:	2301      	movs	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_2_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <HAL_TIM_MspPostInit+0xf0>)
 80011f8:	f001 feca 	bl	8002f90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STPR_PWM_1_Pin;
 80011fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800120e:	2301      	movs	r3, #1
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f001 feb8 	bl	8002f90 <HAL_GPIO_Init>
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40012c00 	.word	0x40012c00
 800122c:	40021000 	.word	0x40021000
 8001230:	48000400 	.word	0x48000400

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0a0      	sub	sp, #128	; 0x80
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	225c      	movs	r2, #92	; 0x5c
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f008 fa3f 	bl	80096d8 <memset>
  if(huart->Instance==USART1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_UART_MspInit+0xa8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d137      	bne.n	80012d4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001268:	2300      	movs	r3, #0
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4618      	mov	r0, r3
 8001272:	f002 feeb 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800127c:	f7ff fe48 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0xac>)
 8001282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <HAL_UART_MspInit+0xac>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6613      	str	r3, [r2, #96]	; 0x60
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0xac>)
 800128e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0xac>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0xac>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_UART_MspInit+0xac>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c2:	2307      	movs	r3, #7
 80012c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f001 fe5e 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3780      	adds	r7, #128	; 0x80
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_InitTick+0xe0>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <HAL_InitTick+0xe0>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <HAL_InitTick+0xe0>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800130a:	f107 0210 	add.w	r2, r7, #16
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fe07 	bl	8003f28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d103      	bne.n	800132c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001324:	f002 fdd4 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 8001328:	6378      	str	r0, [r7, #52]	; 0x34
 800132a:	e004      	b.n	8001336 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800132c:	f002 fdd0 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 8001330:	4603      	mov	r3, r0
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <HAL_InitTick+0xe4>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3b01      	subs	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_InitTick+0xe8>)
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_InitTick+0xec>)
 8001348:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_InitTick+0xe8>)
 800134c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001350:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_InitTick+0xe8>)
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_InitTick+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_InitTick+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_InitTick+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <HAL_InitTick+0xe8>)
 800136c:	f003 f978 	bl	8004660 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001376:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11b      	bne.n	80013b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800137e:	4813      	ldr	r0, [pc, #76]	; (80013cc <HAL_InitTick+0xe8>)
 8001380:	f003 f9c6 	bl	8004710 <HAL_TIM_Base_Start_IT>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800138a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800138e:	2b00      	cmp	r3, #0
 8001390:	d111      	bne.n	80013b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001392:	2036      	movs	r0, #54	; 0x36
 8001394:	f001 fdee 	bl	8002f74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	d808      	bhi.n	80013b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800139e:	2200      	movs	r2, #0
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	2036      	movs	r0, #54	; 0x36
 80013a4:	f001 fdca 	bl	8002f3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_InitTick+0xf0>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e002      	b.n	80013b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3738      	adds	r7, #56	; 0x38
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	431bde83 	.word	0x431bde83
 80013cc:	20000260 	.word	0x20000260
 80013d0:	40001000 	.word	0x40001000
 80013d4:	20000004 	.word	0x20000004

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <TIM1_CC_IRQHandler+0x10>)
 800140a:	f003 fc37 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000013c 	.word	0x2000013c

08001418 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <TIM2_IRQHandler+0x10>)
 800141e:	f003 fc2d 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000188 	.word	0x20000188

0800142c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <TIM6_DAC_IRQHandler+0x10>)
 8001432:	f003 fc23 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000260 	.word	0x20000260

08001440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <configure_steppers>:

volatile stepper braking_stepper;
volatile stepper steering_stepper;

void configure_steppers()
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	steering_stepper.MAX_ANGLE = 57;
	steering_stepper.STEP_ANGLE = 0.9;
	steering_stepper.MAX_STEPS = 63;		// Corresponding to the 57 deg
	steering_stepper.STEPS_REV = 400;
	*/
	steering_stepper.current_step = 0;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <configure_steppers+0x48>)
 800146a:	2200      	movs	r2, #0
 800146c:	80da      	strh	r2, [r3, #6]
	steering_stepper.active = 0;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <configure_steppers+0x48>)
 8001470:	2200      	movs	r2, #0
 8001472:	705a      	strb	r2, [r3, #1]
	steering_stepper.exec_started = 0;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <configure_steppers+0x48>)
 8001476:	2200      	movs	r2, #0
 8001478:	709a      	strb	r2, [r3, #2]
	braking_stepper.MAX_ANGLE = 1;			// TBD
	braking_stepper.STEP_ANGLE = 1.8;		// TBD
	steering_stepper.MAX_STEPS = 63;		// TBD
	braking_stepper.STEPS_REV = 200;		// TBD
	*/
	braking_stepper.current_step = 0;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <configure_steppers+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	80da      	strh	r2, [r3, #6]
	braking_stepper.active = 0;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <configure_steppers+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	705a      	strb	r2, [r3, #1]
	braking_stepper.exec_started = 0;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <configure_steppers+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	709a      	strb	r2, [r3, #2]

	//htim2.Instance->CCR1 = 5000;	// For duty cycle of 50%
	htim2.Instance->CCR1 = 500;	// For duty cycle of 50%
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <configure_steppers+0x50>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin, GPIO_PIN_SET);

	steering_stepper.direction = IDLE;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <configure_steppers+0x48>)
 8001498:	2202      	movs	r2, #2
 800149a:	70da      	strb	r2, [r3, #3]
	braking_stepper.direction = IDLE;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <configure_steppers+0x4c>)
 800149e:	2202      	movs	r2, #2
 80014a0:	70da      	strb	r2, [r3, #3]

}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	200002b4 	.word	0x200002b4
 80014b0:	200002ac 	.word	0x200002ac
 80014b4:	20000188 	.word	0x20000188

080014b8 <start>:

void start()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, STPR_EN_1_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c2:	4810      	ldr	r0, [pc, #64]	; (8001504 <start+0x4c>)
 80014c4:	f001 fede 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin | LVL_SFTR_OE_2_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f240 4101 	movw	r1, #1025	; 0x401
 80014ce:	480e      	ldr	r0, [pc, #56]	; (8001508 <start+0x50>)
 80014d0:	f001 fed8 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2104      	movs	r1, #4
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <start+0x54>)
 80014da:	f001 fed3 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80014de:	2100      	movs	r1, #0
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <start+0x58>)
 80014e2:	f003 f9cb 	bl	800487c <HAL_TIM_PWM_Start_IT>
	steering_stepper.active = 1;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <start+0x5c>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	705a      	strb	r2, [r3, #1]
	braking_stepper.active = 1;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <start+0x60>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	705a      	strb	r2, [r3, #1]
	steering_stepper.current_step = 0;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <start+0x5c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	80da      	strh	r2, [r3, #6]
	braking_stepper.current_step = 0;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <start+0x60>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	80da      	strh	r2, [r3, #6]
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	48000800 	.word	0x48000800
 8001508:	48000400 	.word	0x48000400
 800150c:	48000c00 	.word	0x48000c00
 8001510:	20000188 	.word	0x20000188
 8001514:	200002b4 	.word	0x200002b4
 8001518:	200002ac 	.word	0x200002ac

0800151c <stop>:

void stop()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, STPR_EN_1_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <stop+0x4c>)
 8001528:	f001 feac 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin | LVL_SFTR_OE_2_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f240 4101 	movw	r1, #1025	; 0x401
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <stop+0x50>)
 8001534:	f001 fea6 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <stop+0x54>)
 800153e:	f001 fea1 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001542:	2100      	movs	r1, #0
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <stop+0x58>)
 8001546:	f003 fac5 	bl	8004ad4 <HAL_TIM_PWM_Stop_IT>
	steering_stepper.active = 0;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <stop+0x5c>)
 800154c:	2200      	movs	r2, #0
 800154e:	705a      	strb	r2, [r3, #1]
	braking_stepper.active = 0;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <stop+0x60>)
 8001552:	2200      	movs	r2, #0
 8001554:	705a      	strb	r2, [r3, #1]
	steering_stepper.direction = IDLE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <stop+0x5c>)
 8001558:	2202      	movs	r2, #2
 800155a:	70da      	strb	r2, [r3, #3]
	braking_stepper.direction = IDLE;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <stop+0x60>)
 800155e:	2202      	movs	r2, #2
 8001560:	70da      	strb	r2, [r3, #3]
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	48000800 	.word	0x48000800
 800156c:	48000400 	.word	0x48000400
 8001570:	48000c00 	.word	0x48000c00
 8001574:	20000188 	.word	0x20000188
 8001578:	200002b4 	.word	0x200002b4
 800157c:	200002ac 	.word	0x200002ac

08001580 <set_direction>:

void set_direction(const stepper_id stepper, uint8_t direction){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	460a      	mov	r2, r1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	4613      	mov	r3, r2
 800158e:	71bb      	strb	r3, [r7, #6]
	switch(stepper)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <set_direction+0x1c>
 8001596:	2b01      	cmp	r3, #1
 8001598:	d014      	beq.n	80015c4 <set_direction+0x44>
			if(direction != braking_stepper.direction)
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
			braking_stepper.mode = CONTROLLER;
			break;
		default:
			break;
 800159a:	e026      	b.n	80015ea <set_direction+0x6a>
			if(direction != steering_stepper.direction)
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <set_direction+0x74>)
 800159e:	78db      	ldrb	r3, [r3, #3]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	79ba      	ldrb	r2, [r7, #6]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d009      	beq.n	80015bc <set_direction+0x3c>
				steering_stepper.direction = direction;
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <set_direction+0x74>)
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	70d3      	strb	r3, [r2, #3]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin, direction);
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	461a      	mov	r2, r3
 80015b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b6:	4810      	ldr	r0, [pc, #64]	; (80015f8 <set_direction+0x78>)
 80015b8:	f001 fe64 	bl	8003284 <HAL_GPIO_WritePin>
			steering_stepper.mode = CONTROLLER;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <set_direction+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
			break;
 80015c2:	e012      	b.n	80015ea <set_direction+0x6a>
			braking_stepper.direction = direction;
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <set_direction+0x7c>)
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	70d3      	strb	r3, [r2, #3]
			if(direction != braking_stepper.direction)
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <set_direction+0x7c>)
 80015cc:	78db      	ldrb	r3, [r3, #3]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	79ba      	ldrb	r2, [r7, #6]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d005      	beq.n	80015e2 <set_direction+0x62>
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	461a      	mov	r2, r3
 80015da:	2104      	movs	r1, #4
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <set_direction+0x78>)
 80015de:	f001 fe51 	bl	8003284 <HAL_GPIO_WritePin>
			braking_stepper.mode = CONTROLLER;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <set_direction+0x7c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
			break;
 80015e8:	bf00      	nop
	}
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002b4 	.word	0x200002b4
 80015f8:	48000800 	.word	0x48000800
 80015fc:	200002ac 	.word	0x200002ac

08001600 <set_setpoint>:

void set_setpoint(const stepper_id stepper, uint16_t setpoint, int8_t direction){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	460b      	mov	r3, r1
 800160c:	80bb      	strh	r3, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	71bb      	strb	r3, [r7, #6]
	switch(stepper)
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <set_setpoint+0x1e>
 8001618:	2b01      	cmp	r3, #1
 800161a:	d022      	beq.n	8001662 <set_setpoint+0x62>
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
				braking_stepper.current_step = 0;
			}
			break;
		default:
			break;
 800161c:	e045      	b.n	80016aa <set_setpoint+0xaa>
			if(steering_stepper.req_steps != setpoint)
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <set_setpoint+0xb4>)
 8001620:	889b      	ldrh	r3, [r3, #4]
 8001622:	b29b      	uxth	r3, r3
 8001624:	88ba      	ldrh	r2, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d005      	beq.n	8001636 <set_setpoint+0x36>
				steering_stepper.req_steps = setpoint;
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <set_setpoint+0xb4>)
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	8093      	strh	r3, [r2, #4]
				steering_stepper.current_step = 0;
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <set_setpoint+0xb4>)
 8001632:	2200      	movs	r2, #0
 8001634:	80da      	strh	r2, [r3, #6]
			if(steering_stepper.direction != direction)
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <set_setpoint+0xb4>)
 8001638:	78db      	ldrb	r3, [r3, #3]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001642:	429a      	cmp	r2, r3
 8001644:	d02e      	beq.n	80016a4 <set_setpoint+0xa4>
				steering_stepper.direction = direction;
 8001646:	79ba      	ldrb	r2, [r7, #6]
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <set_setpoint+0xb4>)
 800164a:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin, direction);
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	461a      	mov	r2, r3
 8001650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <set_setpoint+0xb8>)
 8001656:	f001 fe15 	bl	8003284 <HAL_GPIO_WritePin>
				steering_stepper.current_step = 0;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <set_setpoint+0xb4>)
 800165c:	2200      	movs	r2, #0
 800165e:	80da      	strh	r2, [r3, #6]
			break;
 8001660:	e020      	b.n	80016a4 <set_setpoint+0xa4>
			if(braking_stepper.req_steps != setpoint)
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <set_setpoint+0xbc>)
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	b29b      	uxth	r3, r3
 8001668:	88ba      	ldrh	r2, [r7, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	d005      	beq.n	800167a <set_setpoint+0x7a>
				braking_stepper.req_steps = setpoint;
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <set_setpoint+0xbc>)
 8001670:	88bb      	ldrh	r3, [r7, #4]
 8001672:	8093      	strh	r3, [r2, #4]
				braking_stepper.current_step = 0;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <set_setpoint+0xbc>)
 8001676:	2200      	movs	r2, #0
 8001678:	80da      	strh	r2, [r3, #6]
			if(braking_stepper.direction != direction)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <set_setpoint+0xbc>)
 800167c:	78db      	ldrb	r3, [r3, #3]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001686:	429a      	cmp	r2, r3
 8001688:	d00e      	beq.n	80016a8 <set_setpoint+0xa8>
				braking_stepper.direction = direction;
 800168a:	79ba      	ldrb	r2, [r7, #6]
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <set_setpoint+0xbc>)
 800168e:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	461a      	mov	r2, r3
 8001694:	2104      	movs	r1, #4
 8001696:	4808      	ldr	r0, [pc, #32]	; (80016b8 <set_setpoint+0xb8>)
 8001698:	f001 fdf4 	bl	8003284 <HAL_GPIO_WritePin>
				braking_stepper.current_step = 0;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <set_setpoint+0xbc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	80da      	strh	r2, [r3, #6]
			break;
 80016a2:	e001      	b.n	80016a8 <set_setpoint+0xa8>
			break;
 80016a4:	bf00      	nop
 80016a6:	e000      	b.n	80016aa <set_setpoint+0xaa>
			break;
 80016a8:	bf00      	nop
	}
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200002b4 	.word	0x200002b4
 80016b8:	48000800 	.word	0x48000800
 80016bc:	200002ac 	.word	0x200002ac

080016c0 <steer>:
		}
}
*/

void steer()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	if(steering_stepper.active == 1)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <steer+0x50>)
 80016c6:	785b      	ldrb	r3, [r3, #1]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d11d      	bne.n	800170a <steer+0x4a>
		if(steering_stepper.mode == CONTROLLER)			// XBOX CONTROLLER
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <steer+0x50>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d118      	bne.n	800170a <steer+0x4a>
		{
			if(steering_stepper.direction != IDLE)
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <steer+0x50>)
 80016da:	78db      	ldrb	r3, [r3, #3]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d00c      	beq.n	80016fc <steer+0x3c>
			{
				if(steering_stepper.exec_started == 0)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <steer+0x50>)
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10e      	bne.n	800170a <steer+0x4a>
				{
					HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80016ec:	2100      	movs	r1, #0
 80016ee:	4809      	ldr	r0, [pc, #36]	; (8001714 <steer+0x54>)
 80016f0:	f003 f8c4 	bl	800487c <HAL_TIM_PWM_Start_IT>
					steering_stepper.exec_started = 1;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <steer+0x50>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	709a      	strb	r2, [r3, #2]
		/*
		else										// AUTONOMOUS MODE
			if(steering_stepper.req_steps <= steering_stepper.current_step)
				HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
		*/
}
 80016fa:	e006      	b.n	800170a <steer+0x4a>
				HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <steer+0x54>)
 8001700:	f003 f9e8 	bl	8004ad4 <HAL_TIM_PWM_Stop_IT>
				steering_stepper.exec_started = 0;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <steer+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	709a      	strb	r2, [r3, #2]
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002b4 	.word	0x200002b4
 8001714:	20000188 	.word	0x20000188

08001718 <HAL_TIM_PWM_PulseFinishedCallback>:
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
}


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
	//steering_stepper.current_step++;
	//braking_stepper.current_step++;
	//HAL_GPIO_TogglePin(GPIOA, DEBUG_2_Pin);
  }
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff fe86 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <LoopForever+0x6>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <LoopForever+0xe>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <LoopForever+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f007 ff89 	bl	8009670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175e:	f7ff f869 	bl	8000834 <main>

08001762 <LoopForever>:

LoopForever:
    b LoopForever
 8001762:	e7fe      	b.n	8001762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001764:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001770:	08009a44 	.word	0x08009a44
  ldr r2, =_sbss
 8001774:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001778:	20003030 	.word	0x20003030

0800177c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_IRQHandler>

0800177e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001788:	2003      	movs	r0, #3
 800178a:	f001 fbcc 	bl	8002f26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800178e:	200f      	movs	r0, #15
 8001790:	f7ff fda8 	bl	80012e4 <HAL_InitTick>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	71fb      	strb	r3, [r7, #7]
 800179e:	e001      	b.n	80017a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017a0:	f7ff fbbc 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017a4:	79fb      	ldrb	r3, [r7, #7]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	200002bc 	.word	0x200002bc

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200002bc 	.word	0x200002bc

080017f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	609a      	str	r2, [r3, #8]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3360      	adds	r3, #96	; 0x60
 800186a:	461a      	mov	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <LL_ADC_SetOffset+0x44>)
 800187a:	4013      	ands	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	4313      	orrs	r3, r2
 8001888:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	03fff000 	.word	0x03fff000

080018a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3360      	adds	r3, #96	; 0x60
 80018ae:	461a      	mov	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3360      	adds	r3, #96	; 0x60
 80018dc:	461a      	mov	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001902:	b480      	push	{r7}
 8001904:	b087      	sub	sp, #28
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3330      	adds	r3, #48	; 0x30
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	4413      	add	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	211f      	movs	r1, #31
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	401a      	ands	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	f003 011f 	and.w	r1, r3, #31
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800195a:	b480      	push	{r7}
 800195c:	b087      	sub	sp, #28
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3314      	adds	r3, #20
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	0e5b      	lsrs	r3, r3, #25
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	0d1b      	lsrs	r3, r3, #20
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	2107      	movs	r1, #7
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	401a      	ands	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	0d1b      	lsrs	r3, r3, #20
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	431a      	orrs	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0318 	and.w	r3, r3, #24
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019d4:	40d9      	lsrs	r1, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	400b      	ands	r3, r1
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	431a      	orrs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	0007ffff 	.word	0x0007ffff

080019f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6093      	str	r3, [r2, #8]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a30:	d101      	bne.n	8001a36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a80:	d101      	bne.n	8001a86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_IsEnabled+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_IsEnabled+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d101      	bne.n	8001ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d101      	bne.n	8001af8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e12c      	b.n	8001d7c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fa1b 	bl	8000f6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff67 	bl	8001a1c <LL_ADC_IsDeepPowerDownEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff4d 	bl	80019f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff82 	bl	8001a6c <LL_ADC_IsInternalRegulatorEnabled>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff66 	bl	8001a44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b78:	4b82      	ldr	r3, [pc, #520]	; (8001d84 <HAL_ADC_Init+0x27c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	4a82      	ldr	r2, [pc, #520]	; (8001d88 <HAL_ADC_Init+0x280>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	3301      	adds	r3, #1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b8c:	e002      	b.n	8001b94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f9      	bne.n	8001b8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff64 	bl	8001a6c <LL_ADC_IsInternalRegulatorEnabled>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff75 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001bd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 80c5 	bne.w	8001d6a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 80c1 	bne.w	8001d6a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bf0:	f043 0202 	orr.w	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff49 	bl	8001a94 <LL_ADC_IsEnabled>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10b      	bne.n	8001c20 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c08:	4860      	ldr	r0, [pc, #384]	; (8001d8c <HAL_ADC_Init+0x284>)
 8001c0a:	f7ff ff43 	bl	8001a94 <LL_ADC_IsEnabled>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	485d      	ldr	r0, [pc, #372]	; (8001d90 <HAL_ADC_Init+0x288>)
 8001c1c:	f7ff fde8 	bl	80017f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7e5b      	ldrb	r3, [r3, #25]
 8001c24:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c2a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c30:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c36:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d106      	bne.n	8001c5c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	3b01      	subs	r3, #1
 8001c54:	045b      	lsls	r3, r3, #17
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4b45      	ldr	r3, [pc, #276]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff12 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001c96:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff1f 	bl	8001ae0 <LL_ADC_INJ_IsConversionOngoing>
 8001ca2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d13d      	bne.n	8001d26 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d13a      	bne.n	8001d26 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cbc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ccc:	f023 0302 	bic.w	r3, r3, #2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	69b9      	ldr	r1, [r7, #24]
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d118      	bne.n	8001d16 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cee:	f023 0304 	bic.w	r3, r3, #4
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d00:	4311      	orrs	r1, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d06:	430a      	orrs	r2, r1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	e007      	b.n	8001d26 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10c      	bne.n	8001d48 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f023 010f 	bic.w	r1, r3, #15
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
 8001d46:	e007      	b.n	8001d58 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020f 	bic.w	r2, r2, #15
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	f023 0303 	bic.w	r3, r3, #3
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
 8001d68:	e007      	b.n	8001d7a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000000 	.word	0x20000000
 8001d88:	053e2d63 	.word	0x053e2d63
 8001d8c:	50040000 	.word	0x50040000
 8001d90:	50040300 	.word	0x50040300
 8001d94:	fff0c007 	.word	0xfff0c007

08001d98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0b6      	sub	sp, #216	; 0xd8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x22>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e3b9      	b.n	800252e <HAL_ADC_ConfigChannel+0x796>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fe77 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 839e 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d824      	bhi.n	8001e26 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	3b02      	subs	r3, #2
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d81b      	bhi.n	8001e1e <HAL_ADC_ConfigChannel+0x86>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <HAL_ADC_ConfigChannel+0x54>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	08001e05 	.word	0x08001e05
 8001df4:	08001e0d 	.word	0x08001e0d
 8001df8:	08001e15 	.word	0x08001e15
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	220c      	movs	r2, #12
 8001e00:	605a      	str	r2, [r3, #4]
          break;
 8001e02:	e011      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2212      	movs	r2, #18
 8001e08:	605a      	str	r2, [r3, #4]
          break;
 8001e0a:	e00d      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2218      	movs	r2, #24
 8001e10:	605a      	str	r2, [r3, #4]
          break;
 8001e12:	e009      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1a:	605a      	str	r2, [r3, #4]
          break;
 8001e1c:	e004      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2206      	movs	r2, #6
 8001e22:	605a      	str	r2, [r3, #4]
          break;
 8001e24:	e000      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e26:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f7ff fd64 	bl	8001902 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fe3b 	bl	8001aba <LL_ADC_REG_IsConversionOngoing>
 8001e44:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fe47 	bl	8001ae0 <LL_ADC_INJ_IsConversionOngoing>
 8001e52:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 81a6 	bne.w	80021ac <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f040 81a1 	bne.w	80021ac <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f7ff fd6f 	bl	800195a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6919      	ldr	r1, [r3, #16]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eae:	f7ff fcd3 	bl	8001858 <LL_ADC_SetOffset>
 8001eb2:	e17b      	b.n	80021ac <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fcf0 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x148>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fce5 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	f003 021f 	and.w	r2, r3, #31
 8001ede:	e01e      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x186>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fcda 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	e004      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x19e>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	e018      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x1d0>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e004      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d106      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fca9 	bl	80018cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc8d 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x20e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fc82 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	0e9b      	lsrs	r3, r3, #26
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	e01e      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x24c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fc77 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001fc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e004      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x264>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	e018      	b.n	800202e <HAL_ADC_ConfigChannel+0x296>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002010:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e004      	b.n	800202e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800202e:	429a      	cmp	r2, r3
 8002030:	d106      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc46 	bl	80018cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2102      	movs	r1, #2
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fc2a 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10a      	bne.n	800206c <HAL_ADC_ConfigChannel+0x2d4>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2102      	movs	r1, #2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fc1f 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	f003 021f 	and.w	r2, r3, #31
 800206a:	e01e      	b.n	80020aa <HAL_ADC_ConfigChannel+0x312>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2102      	movs	r1, #2
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fc14 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800208a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800208e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e004      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800209e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x32a>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0e9b      	lsrs	r3, r3, #26
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	e016      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x358>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e004      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80020e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d106      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	2102      	movs	r1, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fbe5 	bl	80018cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2103      	movs	r1, #3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fbc9 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <HAL_ADC_ConfigChannel+0x396>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2103      	movs	r1, #3
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fbbe 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	0e9b      	lsrs	r3, r3, #26
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	e017      	b.n	800215e <HAL_ADC_ConfigChannel+0x3c6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2103      	movs	r1, #3
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fbb3 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002148:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800214a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e003      	b.n	800215c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x3de>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	e011      	b.n	800219a <HAL_ADC_ConfigChannel+0x402>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002186:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800218e:	2320      	movs	r3, #32
 8002190:	e003      	b.n	800219a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800219a:	429a      	cmp	r2, r3
 800219c:	d106      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2103      	movs	r1, #3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fb90 	bl	80018cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fc6f 	bl	8001a94 <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 813f 	bne.w	800243c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f7ff fbf0 	bl	80019b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a8e      	ldr	r2, [pc, #568]	; (8002410 <HAL_ADC_ConfigChannel+0x678>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	f040 8130 	bne.w	800243c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x46c>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e019      	b.n	8002238 <HAL_ADC_ConfigChannel+0x4a0>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002214:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2b09      	cmp	r3, #9
 8002230:	bf94      	ite	ls
 8002232:	2301      	movls	r3, #1
 8002234:	2300      	movhi	r3, #0
 8002236:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002238:	2b00      	cmp	r3, #0
 800223a:	d079      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x4c0>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	3301      	adds	r3, #1
 8002250:	069b      	lsls	r3, r3, #26
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002256:	e015      	b.n	8002284 <HAL_ADC_ConfigChannel+0x4ec>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002268:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800226a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	069b      	lsls	r3, r3, #26
 8002280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x50c>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	e017      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x53c>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80022c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	ea42 0103 	orr.w	r1, r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x562>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	051b      	lsls	r3, r3, #20
 80022f8:	e018      	b.n	800232c <HAL_ADC_ConfigChannel+0x594>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800230c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e003      	b.n	800231e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232c:	430b      	orrs	r3, r1
 800232e:	e080      	b.n	8002432 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x5b4>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234a:	e015      	b.n	8002378 <HAL_ADC_ConfigChannel+0x5e0>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x600>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	e017      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x630>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	61fb      	str	r3, [r7, #28]
  return result;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x65c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	3b1e      	subs	r3, #30
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f2:	e01d      	b.n	8002430 <HAL_ADC_ConfigChannel+0x698>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	613b      	str	r3, [r7, #16]
  return result;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e005      	b.n	800241c <HAL_ADC_ConfigChannel+0x684>
 8002410:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f003 021f 	and.w	r2, r3, #31
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	3b1e      	subs	r3, #30
 800242a:	051b      	lsls	r3, r3, #20
 800242c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002430:	430b      	orrs	r3, r1
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	6892      	ldr	r2, [r2, #8]
 8002436:	4619      	mov	r1, r3
 8002438:	f7ff fa8f 	bl	800195a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_ADC_ConfigChannel+0x7a0>)
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d06c      	beq.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002448:	483c      	ldr	r0, [pc, #240]	; (800253c <HAL_ADC_ConfigChannel+0x7a4>)
 800244a:	f7ff f9f7 	bl	800183c <LL_ADC_GetCommonPathInternalCh>
 800244e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a3a      	ldr	r2, [pc, #232]	; (8002540 <HAL_ADC_ConfigChannel+0x7a8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d127      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800245c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d121      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a35      	ldr	r2, [pc, #212]	; (8002544 <HAL_ADC_ConfigChannel+0x7ac>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d157      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800247a:	4619      	mov	r1, r3
 800247c:	482f      	ldr	r0, [pc, #188]	; (800253c <HAL_ADC_ConfigChannel+0x7a4>)
 800247e:	f7ff f9ca 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002482:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_ADC_ConfigChannel+0x7b0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	4a30      	ldr	r2, [pc, #192]	; (800254c <HAL_ADC_ConfigChannel+0x7b4>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024aa:	e03a      	b.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_ADC_ConfigChannel+0x7b8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d113      	bne.n	80024de <HAL_ADC_ConfigChannel+0x746>
 80024b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_ADC_ConfigChannel+0x7ac>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d12a      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d4:	4619      	mov	r1, r3
 80024d6:	4819      	ldr	r0, [pc, #100]	; (800253c <HAL_ADC_ConfigChannel+0x7a4>)
 80024d8:	f7ff f99d 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024dc:	e021      	b.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_ADC_ConfigChannel+0x7bc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d11c      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d116      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <HAL_ADC_ConfigChannel+0x7ac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d111      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <HAL_ADC_ConfigChannel+0x7a4>)
 800250a:	f7ff f984 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
 800250e:	e008      	b.n	8002522 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800252a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800252e:	4618      	mov	r0, r3
 8002530:	37d8      	adds	r7, #216	; 0xd8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	80080000 	.word	0x80080000
 800253c:	50040300 	.word	0x50040300
 8002540:	c7520000 	.word	0xc7520000
 8002544:	50040000 	.word	0x50040000
 8002548:	20000000 	.word	0x20000000
 800254c:	053e2d63 	.word	0x053e2d63
 8002550:	cb840000 	.word	0xcb840000
 8002554:	80000001 	.word	0x80000001

08002558 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0ed      	b.n	8002746 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe fd5e 	bl	8001038 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800258c:	f7ff f924 	bl	80017d8 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002592:	e012      	b.n	80025ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002594:	f7ff f920 	bl	80017d8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b0a      	cmp	r3, #10
 80025a0:	d90b      	bls.n	80025ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2205      	movs	r2, #5
 80025b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0c5      	b.n	8002746 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0e5      	beq.n	8002594 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0202 	bic.w	r2, r2, #2
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d8:	f7ff f8fe 	bl	80017d8 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025de:	e012      	b.n	8002606 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025e0:	f7ff f8fa 	bl	80017d8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b0a      	cmp	r3, #10
 80025ec:	d90b      	bls.n	8002606 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2205      	movs	r2, #5
 80025fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e09f      	b.n	8002746 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e5      	bne.n	80025e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7e1b      	ldrb	r3, [r3, #24]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d108      	bne.n	800262e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e007      	b.n	800263e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7e5b      	ldrb	r3, [r3, #25]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e007      	b.n	8002668 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7e9b      	ldrb	r3, [r3, #26]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d108      	bne.n	8002682 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0220 	orr.w	r2, r2, #32
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e007      	b.n	8002692 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0220 	bic.w	r2, r2, #32
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7edb      	ldrb	r3, [r3, #27]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d108      	bne.n	80026ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0210 	bic.w	r2, r2, #16
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e007      	b.n	80026bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0210 	orr.w	r2, r2, #16
 80026ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7f1b      	ldrb	r3, [r3, #28]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d108      	bne.n	80026d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e007      	b.n	80026e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0208 	bic.w	r2, r2, #8
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7f5b      	ldrb	r3, [r3, #29]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0204 	orr.w	r2, r2, #4
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e007      	b.n	8002710 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0204 	bic.w	r2, r2, #4
 800270e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	ea42 0103 	orr.w	r1, r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002764:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d003      	beq.n	8002774 <HAL_CAN_ConfigFilter+0x26>
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	2b02      	cmp	r3, #2
 8002770:	f040 80aa 	bne.w	80028c8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2201      	movs	r2, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d123      	bne.n	80027f6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	401a      	ands	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3248      	adds	r2, #72	; 0x48
 80027d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	3348      	adds	r3, #72	; 0x48
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d122      	bne.n	8002844 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	431a      	orrs	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800281e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3248      	adds	r2, #72	; 0x48
 8002824:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002838:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800283a:	6979      	ldr	r1, [r7, #20]
 800283c:	3348      	adds	r3, #72	; 0x48
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43db      	mvns	r3, r3
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800285e:	e007      	b.n	8002870 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	431a      	orrs	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800288a:	e007      	b.n	800289c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ba:	f023 0201 	bic.w	r2, r3, #1
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e006      	b.n	80028d6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d12e      	bne.n	8002954 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800290e:	f7fe ff63 	bl	80017d8 <HAL_GetTick>
 8002912:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002914:	e012      	b.n	800293c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002916:	f7fe ff5f 	bl	80017d8 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b0a      	cmp	r3, #10
 8002922:	d90b      	bls.n	800293c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2205      	movs	r2, #5
 8002934:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e012      	b.n	8002962 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e5      	bne.n	8002916 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e006      	b.n	8002962 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800296a:	b480      	push	{r7}
 800296c:	b089      	sub	sp, #36	; 0x24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800297e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002988:	7ffb      	ldrb	r3, [r7, #31]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d003      	beq.n	8002996 <HAL_CAN_AddTxMessage+0x2c>
 800298e:	7ffb      	ldrb	r3, [r7, #31]
 8002990:	2b02      	cmp	r3, #2
 8002992:	f040 80ad 	bne.w	8002af0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8095 	beq.w	8002ae0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	0e1b      	lsrs	r3, r3, #24
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029c0:	2201      	movs	r2, #1
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	409a      	lsls	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3318      	adds	r3, #24
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	440b      	add	r3, r1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e00f      	b.n	8002a0e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029fe:	68f9      	ldr	r1, [r7, #12]
 8002a00:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a02:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3318      	adds	r3, #24
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	440b      	add	r3, r1
 8002a0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3318      	adds	r3, #24
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3304      	adds	r3, #4
 8002a20:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	7d1b      	ldrb	r3, [r3, #20]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d111      	bne.n	8002a4e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3318      	adds	r3, #24
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	3304      	adds	r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	6811      	ldr	r1, [r2, #0]
 8002a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3318      	adds	r3, #24
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	440b      	add	r3, r1
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3307      	adds	r3, #7
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	061a      	lsls	r2, r3, #24
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3306      	adds	r3, #6
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3305      	adds	r3, #5
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	3204      	adds	r2, #4
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	4610      	mov	r0, r2
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	6811      	ldr	r1, [r2, #0]
 8002a76:	ea43 0200 	orr.w	r2, r3, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	440b      	add	r3, r1
 8002a80:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3303      	adds	r3, #3
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	061a      	lsls	r2, r3, #24
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3302      	adds	r3, #2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	7812      	ldrb	r2, [r2, #0]
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	6811      	ldr	r1, [r2, #0]
 8002aac:	ea43 0200 	orr.w	r2, r3, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002aba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3318      	adds	r3, #24
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	4413      	add	r3, r2
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	6811      	ldr	r1, [r2, #0]
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3318      	adds	r3, #24
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	440b      	add	r3, r1
 8002ada:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e00e      	b.n	8002afe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e006      	b.n	8002afe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d003      	beq.n	8002b2e <HAL_CAN_GetRxMessage+0x24>
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	f040 80f3 	bne.w	8002d14 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10e      	bne.n	8002b52 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d116      	bne.n	8002b70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0e7      	b.n	8002d22 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d8      	b.n	8002d22 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	331b      	adds	r3, #27
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	4413      	add	r3, r2
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0204 	and.w	r2, r3, #4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	331b      	adds	r3, #27
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0d5b      	lsrs	r3, r3, #21
 8002b9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	331b      	adds	r3, #27
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4413      	add	r3, r2
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	08db      	lsrs	r3, r3, #3
 8002bb8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	331b      	adds	r3, #27
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	4413      	add	r3, r2
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0202 	and.w	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	331b      	adds	r3, #27
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 020f 	and.w	r2, r3, #15
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	331b      	adds	r3, #27
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	331b      	adds	r3, #27
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4413      	add	r3, r2
 8002c12:	3304      	adds	r3, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0a1a      	lsrs	r2, r3, #8
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0c1a      	lsrs	r2, r3, #16
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3302      	adds	r3, #2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e1a      	lsrs	r2, r3, #24
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	3303      	adds	r3, #3
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	3304      	adds	r3, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0a1a      	lsrs	r2, r3, #8
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	3305      	adds	r3, #5
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0c1a      	lsrs	r2, r3, #16
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3306      	adds	r3, #6
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0e1a      	lsrs	r2, r3, #24
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3307      	adds	r3, #7
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d108      	bne.n	8002d00 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0220 	orr.w	r2, r2, #32
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	e007      	b.n	8002d10 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0220 	orr.w	r2, r2, #32
 8002d0e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e006      	b.n	8002d22 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d42:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d44:	7afb      	ldrb	r3, [r7, #11]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d002      	beq.n	8002d50 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d10f      	bne.n	8002d70 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	e005      	b.n	8002d70 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002d70:	68fb      	ldr	r3, [r7, #12]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d002      	beq.n	8002d9c <HAL_CAN_ActivateNotification+0x1e>
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d109      	bne.n	8002db0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6959      	ldr	r1, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e006      	b.n	8002dbe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <__NVIC_EnableIRQ+0x38>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff4c 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4e:	f7ff ff61 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	6978      	ldr	r0, [r7, #20]
 8002f5a:	f7ff ffb1 	bl	8002ec0 <NVIC_EncodePriority>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff80 	bl	8002e6c <__NVIC_SetPriority>
}
 8002f6c:	bf00      	nop
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ff54 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9e:	e154      	b.n	800324a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8146 	beq.w	8003244 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d005      	beq.n	8002fd0 <HAL_GPIO_Init+0x40>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d130      	bne.n	8003032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003006:	2201      	movs	r2, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 0201 	and.w	r2, r3, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b03      	cmp	r3, #3
 800303c:	d017      	beq.n	800306e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d123      	bne.n	80030c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	6939      	ldr	r1, [r7, #16]
 80030be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0203 	and.w	r2, r3, #3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80a0 	beq.w	8003244 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003104:	4b58      	ldr	r3, [pc, #352]	; (8003268 <HAL_GPIO_Init+0x2d8>)
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	4a57      	ldr	r2, [pc, #348]	; (8003268 <HAL_GPIO_Init+0x2d8>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6613      	str	r3, [r2, #96]	; 0x60
 8003110:	4b55      	ldr	r3, [pc, #340]	; (8003268 <HAL_GPIO_Init+0x2d8>)
 8003112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800311c:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_GPIO_Init+0x2dc>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003146:	d019      	beq.n	800317c <HAL_GPIO_Init+0x1ec>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a49      	ldr	r2, [pc, #292]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_GPIO_Init+0x1e8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a48      	ldr	r2, [pc, #288]	; (8003274 <HAL_GPIO_Init+0x2e4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00d      	beq.n	8003174 <HAL_GPIO_Init+0x1e4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a47      	ldr	r2, [pc, #284]	; (8003278 <HAL_GPIO_Init+0x2e8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <HAL_GPIO_Init+0x1e0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a46      	ldr	r2, [pc, #280]	; (800327c <HAL_GPIO_Init+0x2ec>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d101      	bne.n	800316c <HAL_GPIO_Init+0x1dc>
 8003168:	2304      	movs	r3, #4
 800316a:	e008      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 800316c:	2307      	movs	r3, #7
 800316e:	e006      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 8003170:	2303      	movs	r3, #3
 8003172:	e004      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 8003174:	2302      	movs	r3, #2
 8003176:	e002      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 800317c:	2300      	movs	r3, #0
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	f002 0203 	and.w	r2, r2, #3
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	4093      	lsls	r3, r2
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800318e:	4937      	ldr	r1, [pc, #220]	; (800326c <HAL_GPIO_Init+0x2dc>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800319c:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031c0:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031c6:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ea:	4a25      	ldr	r2, [pc, #148]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800323e:	4a10      	ldr	r2, [pc, #64]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f aea3 	bne.w	8002fa0 <HAL_GPIO_Init+0x10>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40021000 	.word	0x40021000
 800326c:	40010000 	.word	0x40010000
 8003270:	48000400 	.word	0x48000400
 8003274:	48000800 	.word	0x48000800
 8003278:	48000c00 	.word	0x48000c00
 800327c:	48001000 	.word	0x48001000
 8003280:	40010400 	.word	0x40010400

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032a0:	e002      	b.n	80032a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <HAL_PWREx_GetVoltageRange+0x18>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40007000 	.word	0x40007000

080032d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032de:	d130      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d038      	beq.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f6:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2232      	movs	r2, #50	; 0x32
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0c9b      	lsrs	r3, r3, #18
 8003310:	3301      	adds	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003314:	e002      	b.n	800331c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3b01      	subs	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003328:	d102      	bne.n	8003330 <HAL_PWREx_ControlVoltageScaling+0x60>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f2      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	d110      	bne.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e00f      	b.n	8003362 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d007      	beq.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003358:	4a05      	ldr	r2, [pc, #20]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800335e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40007000 	.word	0x40007000
 8003374:	20000000 	.word	0x20000000
 8003378:	431bde83 	.word	0x431bde83

0800337c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f000 bc02 	b.w	8003b94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003390:	4b96      	ldr	r3, [pc, #600]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339a:	4b94      	ldr	r3, [pc, #592]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80e4 	beq.w	800357a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4c>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	f040 808b 	bne.w	80034d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	f040 8087 	bne.w	80034d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033c8:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_OscConfig+0x64>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e3d9      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	4b81      	ldr	r3, [pc, #516]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <HAL_RCC_OscConfig+0x7e>
 80033f0:	4b7e      	ldr	r3, [pc, #504]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f8:	e005      	b.n	8003406 <HAL_RCC_OscConfig+0x8a>
 80033fa:	4b7c      	ldr	r3, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80033fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003406:	4293      	cmp	r3, r2
 8003408:	d223      	bcs.n	8003452 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fdbc 	bl	8003f8c <RCC_SetFlashLatencyFromMSIRange>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e3ba      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800341e:	4b73      	ldr	r3, [pc, #460]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a72      	ldr	r2, [pc, #456]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003424:	f043 0308 	orr.w	r3, r3, #8
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	496d      	ldr	r1, [pc, #436]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800343c:	4b6b      	ldr	r3, [pc, #428]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	4968      	ldr	r1, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
 8003450:	e025      	b.n	800349e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003452:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003458:	f043 0308 	orr.w	r3, r3, #8
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4960      	ldr	r1, [pc, #384]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003470:	4b5e      	ldr	r3, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	495b      	ldr	r1, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fd7c 	bl	8003f8c <RCC_SetFlashLatencyFromMSIRange>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e37a      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800349e:	f000 fc81 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	4950      	ldr	r1, [pc, #320]	; (80035f0 <HAL_RCC_OscConfig+0x274>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ba:	4a4e      	ldr	r2, [pc, #312]	; (80035f4 <HAL_RCC_OscConfig+0x278>)
 80034bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034be:	4b4e      	ldr	r3, [pc, #312]	; (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd ff0e 	bl	80012e4 <HAL_InitTick>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d052      	beq.n	8003578 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	e35e      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d032      	beq.n	8003544 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034de:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a42      	ldr	r2, [pc, #264]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ea:	f7fe f975 	bl	80017d8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f2:	f7fe f971 	bl	80017d8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e347      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a35      	ldr	r2, [pc, #212]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b33      	ldr	r3, [pc, #204]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4930      	ldr	r1, [pc, #192]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800352e:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	492b      	ldr	r1, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
 8003542:	e01a      	b.n	800357a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a28      	ldr	r2, [pc, #160]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003550:	f7fe f942 	bl	80017d8 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003558:	f7fe f93e 	bl	80017d8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e314      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x1dc>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d073      	beq.n	800366e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d005      	beq.n	8003598 <HAL_RCC_OscConfig+0x21c>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d10e      	bne.n	80035b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d10b      	bne.n	80035b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d063      	beq.n	800366c <HAL_RCC_OscConfig+0x2f0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d15f      	bne.n	800366c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e2f1      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d106      	bne.n	80035c8 <HAL_RCC_OscConfig+0x24c>
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e025      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d0:	d114      	bne.n	80035fc <HAL_RCC_OscConfig+0x280>
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a02      	ldr	r2, [pc, #8]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e013      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
 80035ec:	40021000 	.word	0x40021000
 80035f0:	0800998c 	.word	0x0800998c
 80035f4:	20000000 	.word	0x20000000
 80035f8:	20000004 	.word	0x20000004
 80035fc:	4ba0      	ldr	r3, [pc, #640]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a9f      	ldr	r2, [pc, #636]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b9d      	ldr	r3, [pc, #628]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a9c      	ldr	r2, [pc, #624]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800360e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe f8dc 	bl	80017d8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fe f8d8 	bl	80017d8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e2ae      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003636:	4b92      	ldr	r3, [pc, #584]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x2a8>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe f8c8 	bl	80017d8 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7fe f8c4 	bl	80017d8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e29a      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365e:	4b88      	ldr	r3, [pc, #544]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x2d0>
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d060      	beq.n	800373c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d005      	beq.n	800368c <HAL_RCC_OscConfig+0x310>
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d119      	bne.n	80036ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d116      	bne.n	80036ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368c:	4b7c      	ldr	r3, [pc, #496]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x328>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e277      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b76      	ldr	r3, [pc, #472]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	4973      	ldr	r1, [pc, #460]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b8:	e040      	b.n	800373c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d023      	beq.n	800370a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c2:	4b6f      	ldr	r3, [pc, #444]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6e      	ldr	r2, [pc, #440]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fe f883 	bl	80017d8 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fe f87f 	bl	80017d8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e255      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e8:	4b65      	ldr	r3, [pc, #404]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f4:	4b62      	ldr	r3, [pc, #392]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	495f      	ldr	r1, [pc, #380]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
 8003708:	e018      	b.n	800373c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370a:	4b5d      	ldr	r3, [pc, #372]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a5c      	ldr	r2, [pc, #368]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe f85f 	bl	80017d8 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371e:	f7fe f85b 	bl	80017d8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e231      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01c      	beq.n	800378a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003750:	4b4b      	ldr	r3, [pc, #300]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	4a4a      	ldr	r2, [pc, #296]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fe f83a 	bl	80017d8 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003768:	f7fe f836 	bl	80017d8 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e20c      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377a:	4b41      	ldr	r3, [pc, #260]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800377c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ef      	beq.n	8003768 <HAL_RCC_OscConfig+0x3ec>
 8003788:	e01b      	b.n	80037c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800378c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003790:	4a3b      	ldr	r2, [pc, #236]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fe f81d 	bl	80017d8 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fe f819 	bl	80017d8 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1ef      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b4:	4b32      	ldr	r3, [pc, #200]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ef      	bne.n	80037a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80a6 	beq.w	800391c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d0:	2300      	movs	r3, #0
 80037d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10d      	bne.n	80037fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	4a26      	ldr	r2, [pc, #152]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6593      	str	r3, [r2, #88]	; 0x58
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f8:	2301      	movs	r3, #1
 80037fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fc:	4b21      	ldr	r3, [pc, #132]	; (8003884 <HAL_RCC_OscConfig+0x508>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d118      	bne.n	800383a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_RCC_OscConfig+0x508>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <HAL_RCC_OscConfig+0x508>)
 800380e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003814:	f7fd ffe0 	bl	80017d8 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381c:	f7fd ffdc 	bl	80017d8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e1b2      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_RCC_OscConfig+0x508>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d108      	bne.n	8003854 <HAL_RCC_OscConfig+0x4d8>
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003852:	e029      	b.n	80038a8 <HAL_RCC_OscConfig+0x52c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d115      	bne.n	8003888 <HAL_RCC_OscConfig+0x50c>
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	4a07      	ldr	r2, [pc, #28]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	4a03      	ldr	r2, [pc, #12]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800387c:	e014      	b.n	80038a8 <HAL_RCC_OscConfig+0x52c>
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	40007000 	.word	0x40007000
 8003888:	4b9a      	ldr	r3, [pc, #616]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	4a99      	ldr	r2, [pc, #612]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003898:	4b96      	ldr	r3, [pc, #600]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a95      	ldr	r2, [pc, #596]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d016      	beq.n	80038de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd ff92 	bl	80017d8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fd ff8e 	bl	80017d8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e162      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ce:	4b89      	ldr	r3, [pc, #548]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ed      	beq.n	80038b8 <HAL_RCC_OscConfig+0x53c>
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fd ff7b 	bl	80017d8 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e4:	e00a      	b.n	80038fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7fd ff77 	bl	80017d8 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e14b      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038fc:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ed      	bne.n	80038e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390a:	7ffb      	ldrb	r3, [r7, #31]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003910:	4b78      	ldr	r3, [pc, #480]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a77      	ldr	r2, [pc, #476]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d03c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01c      	beq.n	800396a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003930:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003936:	4a6f      	ldr	r2, [pc, #444]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fd ff4a 	bl	80017d8 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003948:	f7fd ff46 	bl	80017d8 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e11c      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 800395c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ef      	beq.n	8003948 <HAL_RCC_OscConfig+0x5cc>
 8003968:	e01b      	b.n	80039a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800396a:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 800396c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003970:	4a60      	ldr	r2, [pc, #384]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd ff2d 	bl	80017d8 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003982:	f7fd ff29 	bl	80017d8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0ff      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003994:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ef      	bne.n	8003982 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80f3 	beq.w	8003b92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	f040 80c9 	bne.w	8003b48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039b6:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0203 	and.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d12c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	3b01      	subs	r3, #1
 80039d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d123      	bne.n	8003a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d11b      	bne.n	8003a24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d113      	bne.n	8003a24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d06b      	beq.n	8003afc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d062      	beq.n	8003af0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a2a:	4b32      	ldr	r3, [pc, #200]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0ac      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a3a:	4b2e      	ldr	r3, [pc, #184]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2d      	ldr	r2, [pc, #180]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a46:	f7fd fec7 	bl	80017d8 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fd fec3 	bl	80017d8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e099      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a6c:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_RCC_OscConfig+0x77c>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0112      	lsls	r2, r2, #4
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a86:	0212      	lsls	r2, r2, #8
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a8e:	0852      	lsrs	r2, r2, #1
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0552      	lsls	r2, r2, #21
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a9a:	0852      	lsrs	r2, r2, #1
 8003a9c:	3a01      	subs	r2, #1
 8003a9e:	0652      	lsls	r2, r2, #25
 8003aa0:	4311      	orrs	r1, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aa6:	06d2      	lsls	r2, r2, #27
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	4912      	ldr	r1, [pc, #72]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac8:	f7fd fe86 	bl	80017d8 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd fe82 	bl	80017d8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e058      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_RCC_OscConfig+0x778>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aee:	e050      	b.n	8003b92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e04f      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
 8003af4:	40021000 	.word	0x40021000
 8003af8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afc:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d144      	bne.n	8003b92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b08:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b14:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b20:	f7fd fe5a 	bl	80017d8 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fe56 	bl	80017d8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e02c      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x7ac>
 8003b46:	e024      	b.n	8003b92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d01f      	beq.n	8003b8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fe3d 	bl	80017d8 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd fe39 	bl	80017d8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e00f      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	4905      	ldr	r1, [pc, #20]	; (8003b9c <HAL_RCC_OscConfig+0x820>)
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_OscConfig+0x824>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60cb      	str	r3, [r1, #12]
 8003b8c:	e001      	b.n	8003b92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	feeefffc 	.word	0xfeeefffc

08003ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0e7      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b75      	ldr	r3, [pc, #468]	; (8003d90 <HAL_RCC_ClockConfig+0x1ec>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d910      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b72      	ldr	r3, [pc, #456]	; (8003d90 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	4970      	ldr	r1, [pc, #448]	; (8003d90 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b6e      	ldr	r3, [pc, #440]	; (8003d90 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0cf      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d908      	bls.n	8003c16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b63      	ldr	r3, [pc, #396]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4960      	ldr	r1, [pc, #384]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d04c      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2a:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d121      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0a6      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c42:	4b54      	ldr	r3, [pc, #336]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d115      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e09a      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c5a:	4b4e      	ldr	r3, [pc, #312]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e08e      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e086      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c7a:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f023 0203 	bic.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4943      	ldr	r1, [pc, #268]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8c:	f7fd fda4 	bl	80017d8 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c94:	f7fd fda0 	bl	80017d8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e06e      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 020c 	and.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d1eb      	bne.n	8003c94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d010      	beq.n	8003cea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d208      	bcs.n	8003cea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	492b      	ldr	r1, [pc, #172]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCC_ClockConfig+0x1ec>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d210      	bcs.n	8003d1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 0207 	bic.w	r2, r3, #7
 8003d00:	4923      	ldr	r1, [pc, #140]	; (8003d90 <HAL_RCC_ClockConfig+0x1ec>)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCC_ClockConfig+0x1ec>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e036      	b.n	8003d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	4918      	ldr	r1, [pc, #96]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4910      	ldr	r1, [pc, #64]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d58:	f000 f824 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	490b      	ldr	r1, [pc, #44]	; (8003d98 <HAL_RCC_ClockConfig+0x1f4>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
 8003d74:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003d76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_ClockConfig+0x1fc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fd fab1 	bl	80012e4 <HAL_InitTick>
 8003d82:	4603      	mov	r3, r0
 8003d84:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d86:	7afb      	ldrb	r3, [r7, #11]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40022000 	.word	0x40022000
 8003d94:	40021000 	.word	0x40021000
 8003d98:	0800998c 	.word	0x0800998c
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	20000004 	.word	0x20000004

08003da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db2:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d121      	bne.n	8003e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d11e      	bne.n	8003e16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dd8:	4b34      	ldr	r3, [pc, #208]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003de4:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	e005      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003df4:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e00:	4a2b      	ldr	r2, [pc, #172]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d102      	bne.n	8003e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	e004      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d134      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d003      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d003      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0xac>
 8003e48:	e005      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e4a:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e4c:	617b      	str	r3, [r7, #20]
      break;
 8003e4e:	e005      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e50:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e52:	617b      	str	r3, [r7, #20]
      break;
 8003e54:	e002      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	617b      	str	r3, [r7, #20]
      break;
 8003e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	3301      	adds	r3, #1
 8003e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	fb03 f202 	mul.w	r2, r3, r2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <HAL_RCC_GetSysClockFreq+0x108>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	0e5b      	lsrs	r3, r3, #25
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	080099a4 	.word	0x080099a4
 8003eb4:	00f42400 	.word	0x00f42400

08003eb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000000 	.word	0x20000000

08003ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ed4:	f7ff fff0 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	0800999c 	.word	0x0800999c

08003efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f00:	f7ff ffda 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0adb      	lsrs	r3, r3, #11
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4904      	ldr	r1, [pc, #16]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	0800999c 	.word	0x0800999c

08003f28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	220f      	movs	r2, #15
 8003f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <HAL_RCC_GetClockConfig+0x5c>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0203 	and.w	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <HAL_RCC_GetClockConfig+0x5c>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <HAL_RCC_GetClockConfig+0x5c>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_RCC_GetClockConfig+0x60>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0207 	and.w	r2, r3, #7
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40022000 	.word	0x40022000

08003f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fa4:	f7ff f986 	bl	80032b4 <HAL_PWREx_GetVoltageRange>
 8003fa8:	6178      	str	r0, [r7, #20]
 8003faa:	e014      	b.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fc4:	f7ff f976 	bl	80032b4 <HAL_PWREx_GetVoltageRange>
 8003fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fdc:	d10b      	bne.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b80      	cmp	r3, #128	; 0x80
 8003fe2:	d919      	bls.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fe8:	d902      	bls.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fea:	2302      	movs	r3, #2
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	e013      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e010      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d902      	bls.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e00a      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d102      	bne.n	800400e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004008:	2302      	movs	r3, #2
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e004      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b70      	cmp	r3, #112	; 0x70
 8004012:	d101      	bne.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 0207 	bic.w	r2, r3, #7
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	40022000 	.word	0x40022000

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004054:	2300      	movs	r3, #0
 8004056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004058:	2300      	movs	r3, #0
 800405a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004064:	2b00      	cmp	r3, #0
 8004066:	d031      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004070:	d01a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004072:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004076:	d814      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800407c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004080:	d10f      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4a5c      	ldr	r2, [pc, #368]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408e:	e00c      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f9f0 	bl	800447c <RCCEx_PLLSAI1_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	74fb      	strb	r3, [r7, #19]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b0:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	494e      	ldr	r1, [pc, #312]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040c6:	e001      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 809e 	beq.w	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040de:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	4b40      	ldr	r3, [pc, #256]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a3f      	ldr	r2, [pc, #252]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004100:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410c:	2301      	movs	r3, #1
 800410e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004110:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a39      	ldr	r2, [pc, #228]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800411c:	f7fd fb5c 	bl	80017d8 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fd fb58 	bl	80017d8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d902      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	74fb      	strb	r3, [r7, #19]
        break;
 8004136:	e005      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ef      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d15a      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800414a:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004154:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	429a      	cmp	r2, r3
 8004164:	d019      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004170:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004172:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004192:	4a19      	ldr	r2, [pc, #100]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d016      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd fb18 	bl	80017d8 <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041aa:	e00b      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fd fb14 	bl	80017d8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d902      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	74fb      	strb	r3, [r7, #19]
            break;
 80041c2:	e006      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0ec      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d8:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	4904      	ldr	r1, [pc, #16]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041ee:	e009      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	74bb      	strb	r3, [r7, #18]
 80041f4:	e006      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004204:	7c7b      	ldrb	r3, [r7, #17]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420a:	4b9b      	ldr	r3, [pc, #620]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	4a9a      	ldr	r2, [pc, #616]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004222:	4b95      	ldr	r3, [pc, #596]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f023 0203 	bic.w	r2, r3, #3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	4991      	ldr	r1, [pc, #580]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004244:	4b8c      	ldr	r3, [pc, #560]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f023 020c 	bic.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	4989      	ldr	r1, [pc, #548]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004266:	4b84      	ldr	r3, [pc, #528]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	4980      	ldr	r1, [pc, #512]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004288:	4b7b      	ldr	r3, [pc, #492]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4978      	ldr	r1, [pc, #480]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042aa:	4b73      	ldr	r3, [pc, #460]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	496f      	ldr	r1, [pc, #444]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042cc:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4967      	ldr	r1, [pc, #412]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ee:	4b62      	ldr	r3, [pc, #392]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	495e      	ldr	r1, [pc, #376]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	4956      	ldr	r1, [pc, #344]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004332:	4b51      	ldr	r3, [pc, #324]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	494d      	ldr	r1, [pc, #308]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d028      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004354:	4b48      	ldr	r3, [pc, #288]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	4945      	ldr	r1, [pc, #276]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004372:	d106      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004374:	4b40      	ldr	r3, [pc, #256]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a3f      	ldr	r2, [pc, #252]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800437a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437e:	60d3      	str	r3, [r2, #12]
 8004380:	e011      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438a:	d10c      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f872 	bl	800447c <RCCEx_PLLSAI1_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d028      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b2:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	492d      	ldr	r1, [pc, #180]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d0:	d106      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a28      	ldr	r2, [pc, #160]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043dc:	60d3      	str	r3, [r2, #12]
 80043de:	e011      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f843 	bl	800447c <RCCEx_PLLSAI1_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01c      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441e:	4916      	ldr	r1, [pc, #88]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442e:	d10c      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f820 	bl	800447c <RCCEx_PLLSAI1_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	4904      	ldr	r1, [pc, #16]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800446c:	7cbb      	ldrb	r3, [r7, #18]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000

0800447c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800448a:	4b74      	ldr	r3, [pc, #464]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004496:	4b71      	ldr	r3, [pc, #452]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0203 	and.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d10d      	bne.n	80044c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
       ||
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044ae:	4b6b      	ldr	r3, [pc, #428]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
       ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d047      	beq.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e044      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d018      	beq.n	8004502 <RCCEx_PLLSAI1_Config+0x86>
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d825      	bhi.n	8004520 <RCCEx_PLLSAI1_Config+0xa4>
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d002      	beq.n	80044de <RCCEx_PLLSAI1_Config+0x62>
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d009      	beq.n	80044f0 <RCCEx_PLLSAI1_Config+0x74>
 80044dc:	e020      	b.n	8004520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044de:	4b5f      	ldr	r3, [pc, #380]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d11d      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ee:	e01a      	b.n	8004526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044f0:	4b5a      	ldr	r3, [pc, #360]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d116      	bne.n	800452a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004500:	e013      	b.n	800452a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004502:	4b56      	ldr	r3, [pc, #344]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800450e:	4b53      	ldr	r3, [pc, #332]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800451e:	e006      	b.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      break;
 8004524:	e004      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004526:	bf00      	nop
 8004528:	e002      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10d      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004536:	4b49      	ldr	r3, [pc, #292]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6819      	ldr	r1, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	430b      	orrs	r3, r1
 800454c:	4943      	ldr	r1, [pc, #268]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d17c      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004558:	4b40      	ldr	r3, [pc, #256]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a3f      	ldr	r2, [pc, #252]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800455e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004564:	f7fd f938 	bl	80017d8 <HAL_GetTick>
 8004568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456a:	e009      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800456c:	f7fd f934 	bl	80017d8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d902      	bls.n	8004580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	73fb      	strb	r3, [r7, #15]
        break;
 800457e:	e005      	b.n	800458c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004580:	4b36      	ldr	r3, [pc, #216]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ef      	bne.n	800456c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d15f      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d110      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004598:	4b30      	ldr	r3, [pc, #192]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80045a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6892      	ldr	r2, [r2, #8]
 80045a8:	0211      	lsls	r1, r2, #8
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	06d2      	lsls	r2, r2, #27
 80045b0:	430a      	orrs	r2, r1
 80045b2:	492a      	ldr	r1, [pc, #168]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
 80045b8:	e027      	b.n	800460a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d112      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c0:	4b26      	ldr	r3, [pc, #152]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6892      	ldr	r2, [r2, #8]
 80045d0:	0211      	lsls	r1, r2, #8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6912      	ldr	r2, [r2, #16]
 80045d6:	0852      	lsrs	r2, r2, #1
 80045d8:	3a01      	subs	r2, #1
 80045da:	0552      	lsls	r2, r2, #21
 80045dc:	430a      	orrs	r2, r1
 80045de:	491f      	ldr	r1, [pc, #124]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	610b      	str	r3, [r1, #16]
 80045e4:	e011      	b.n	800460a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6892      	ldr	r2, [r2, #8]
 80045f6:	0211      	lsls	r1, r2, #8
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6952      	ldr	r2, [r2, #20]
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	3a01      	subs	r2, #1
 8004600:	0652      	lsls	r2, r2, #25
 8004602:	430a      	orrs	r2, r1
 8004604:	4915      	ldr	r1, [pc, #84]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a13      	ldr	r2, [pc, #76]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004614:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fd f8df 	bl	80017d8 <HAL_GetTick>
 800461a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800461c:	e009      	b.n	8004632 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800461e:	f7fd f8db 	bl	80017d8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d902      	bls.n	8004632 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	73fb      	strb	r3, [r7, #15]
          break;
 8004630:	e005      	b.n	800463e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ef      	beq.n	800461e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40021000 	.word	0x40021000

08004660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e049      	b.n	8004706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fd1a 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f000 fe08 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d001      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e03b      	b.n	80047a0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a19      	ldr	r2, [pc, #100]	; (80047ac <HAL_TIM_Base_Start_IT+0x9c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_TIM_Base_Start_IT+0x4e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d004      	beq.n	800475e <HAL_TIM_Base_Start_IT+0x4e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_TIM_Base_Start_IT+0xa0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d115      	bne.n	800478a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004766:	4013      	ands	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b06      	cmp	r3, #6
 800476e:	d015      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x8c>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004776:	d011      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	e008      	b.n	800479c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e000      	b.n	800479e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40014000 	.word	0x40014000
 80047b4:	00010007 	.word	0x00010007

080047b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e049      	b.n	800485e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f841 	bl	8004866 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 fd5c 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_TIM_PWM_Start_IT+0x28>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e03c      	b.n	800491e <HAL_TIM_PWM_Start_IT+0xa2>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d109      	bne.n	80048be <HAL_TIM_PWM_Start_IT+0x42>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	bf14      	ite	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	2300      	moveq	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	e02f      	b.n	800491e <HAL_TIM_PWM_Start_IT+0xa2>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d109      	bne.n	80048d8 <HAL_TIM_PWM_Start_IT+0x5c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	bf14      	ite	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	2300      	moveq	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e022      	b.n	800491e <HAL_TIM_PWM_Start_IT+0xa2>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d109      	bne.n	80048f2 <HAL_TIM_PWM_Start_IT+0x76>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e015      	b.n	800491e <HAL_TIM_PWM_Start_IT+0xa2>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d109      	bne.n	800490c <HAL_TIM_PWM_Start_IT+0x90>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e008      	b.n	800491e <HAL_TIM_PWM_Start_IT+0xa2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0c9      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x23e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start_IT+0xba>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004934:	e023      	b.n	800497e <HAL_TIM_PWM_Start_IT+0x102>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b04      	cmp	r3, #4
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start_IT+0xca>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004944:	e01b      	b.n	800497e <HAL_TIM_PWM_Start_IT+0x102>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d104      	bne.n	8004956 <HAL_TIM_PWM_Start_IT+0xda>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004954:	e013      	b.n	800497e <HAL_TIM_PWM_Start_IT+0x102>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b0c      	cmp	r3, #12
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start_IT+0xea>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004964:	e00b      	b.n	800497e <HAL_TIM_PWM_Start_IT+0x102>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b10      	cmp	r3, #16
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start_IT+0xfa>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004974:	e003      	b.n	800497e <HAL_TIM_PWM_Start_IT+0x102>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d841      	bhi.n	8004a08 <HAL_TIM_PWM_Start_IT+0x18c>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <HAL_TIM_PWM_Start_IT+0x110>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049c1 	.word	0x080049c1
 8004990:	08004a09 	.word	0x08004a09
 8004994:	08004a09 	.word	0x08004a09
 8004998:	08004a09 	.word	0x08004a09
 800499c:	080049d3 	.word	0x080049d3
 80049a0:	08004a09 	.word	0x08004a09
 80049a4:	08004a09 	.word	0x08004a09
 80049a8:	08004a09 	.word	0x08004a09
 80049ac:	080049e5 	.word	0x080049e5
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004a09 	.word	0x08004a09
 80049bc:	080049f7 	.word	0x080049f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0202 	orr.w	r2, r2, #2
 80049ce:	60da      	str	r2, [r3, #12]
      break;
 80049d0:	e01d      	b.n	8004a0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0204 	orr.w	r2, r2, #4
 80049e0:	60da      	str	r2, [r3, #12]
      break;
 80049e2:	e014      	b.n	8004a0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0208 	orr.w	r2, r2, #8
 80049f2:	60da      	str	r2, [r3, #12]
      break;
 80049f4:	e00b      	b.n	8004a0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0210 	orr.w	r2, r2, #16
 8004a04:	60da      	str	r2, [r3, #12]
      break;
 8004a06:	e002      	b.n	8004a0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d151      	bne.n	8004ab8 <HAL_TIM_PWM_Start_IT+0x23c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 ffc5 	bl	80059ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <HAL_TIM_PWM_Start_IT+0x248>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_TIM_PWM_Start_IT+0x1c4>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <HAL_TIM_PWM_Start_IT+0x24c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIM_PWM_Start_IT+0x1c4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a24      	ldr	r2, [pc, #144]	; (8004acc <HAL_TIM_PWM_Start_IT+0x250>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIM_PWM_Start_IT+0x1c8>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_TIM_PWM_Start_IT+0x1ca>
 8004a44:	2300      	movs	r3, #0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <HAL_TIM_PWM_Start_IT+0x248>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_TIM_PWM_Start_IT+0x1fc>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6c:	d004      	beq.n	8004a78 <HAL_TIM_PWM_Start_IT+0x1fc>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_TIM_PWM_Start_IT+0x24c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d115      	bne.n	8004aa4 <HAL_TIM_PWM_Start_IT+0x228>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_TIM_PWM_Start_IT+0x254>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d015      	beq.n	8004ab6 <HAL_TIM_PWM_Start_IT+0x23a>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d011      	beq.n	8004ab6 <HAL_TIM_PWM_Start_IT+0x23a>
      {
        __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	e008      	b.n	8004ab6 <HAL_TIM_PWM_Start_IT+0x23a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e000      	b.n	8004ab8 <HAL_TIM_PWM_Start_IT+0x23c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	00010007 	.word	0x00010007

08004ad4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	d841      	bhi.n	8004b6c <HAL_TIM_PWM_Stop_IT+0x98>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b25 	.word	0x08004b25
 8004af4:	08004b6d 	.word	0x08004b6d
 8004af8:	08004b6d 	.word	0x08004b6d
 8004afc:	08004b6d 	.word	0x08004b6d
 8004b00:	08004b37 	.word	0x08004b37
 8004b04:	08004b6d 	.word	0x08004b6d
 8004b08:	08004b6d 	.word	0x08004b6d
 8004b0c:	08004b6d 	.word	0x08004b6d
 8004b10:	08004b49 	.word	0x08004b49
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b5b 	.word	0x08004b5b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0202 	bic.w	r2, r2, #2
 8004b32:	60da      	str	r2, [r3, #12]
      break;
 8004b34:	e01d      	b.n	8004b72 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0204 	bic.w	r2, r2, #4
 8004b44:	60da      	str	r2, [r3, #12]
      break;
 8004b46:	e014      	b.n	8004b72 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0208 	bic.w	r2, r2, #8
 8004b56:	60da      	str	r2, [r3, #12]
      break;
 8004b58:	e00b      	b.n	8004b72 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0210 	bic.w	r2, r2, #16
 8004b68:	60da      	str	r2, [r3, #12]
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b70:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d176      	bne.n	8004c66 <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 ff13 	bl	80059ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a39      	ldr	r2, [pc, #228]	; (8004c70 <HAL_TIM_PWM_Stop_IT+0x19c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIM_PWM_Stop_IT+0xd0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a37      	ldr	r2, [pc, #220]	; (8004c74 <HAL_TIM_PWM_Stop_IT+0x1a0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_PWM_Stop_IT+0xd0>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a36      	ldr	r2, [pc, #216]	; (8004c78 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_PWM_Stop_IT+0xd4>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_PWM_Stop_IT+0xd6>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d017      	beq.n	8004bde <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <HAL_TIM_PWM_Stop_IT+0x10a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a1a      	ldr	r2, [r3, #32]
 8004bc4:	f240 4344 	movw	r3, #1092	; 0x444
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_PWM_Stop_IT+0x10a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a1a      	ldr	r2, [r3, #32]
 8004be4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10f      	bne.n	8004c0e <HAL_TIM_PWM_Stop_IT+0x13a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a1a      	ldr	r2, [r3, #32]
 8004bf4:	f240 4344 	movw	r3, #1092	; 0x444
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_PWM_Stop_IT+0x13a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Stop_IT+0x14a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1c:	e023      	b.n	8004c66 <HAL_TIM_PWM_Stop_IT+0x192>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Stop_IT+0x15a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2c:	e01b      	b.n	8004c66 <HAL_TIM_PWM_Stop_IT+0x192>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PWM_Stop_IT+0x16a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3c:	e013      	b.n	8004c66 <HAL_TIM_PWM_Stop_IT+0x192>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b0c      	cmp	r3, #12
 8004c42:	d104      	bne.n	8004c4e <HAL_TIM_PWM_Stop_IT+0x17a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c4c:	e00b      	b.n	8004c66 <HAL_TIM_PWM_Stop_IT+0x192>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d104      	bne.n	8004c5e <HAL_TIM_PWM_Stop_IT+0x18a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5c:	e003      	b.n	8004c66 <HAL_TIM_PWM_Stop_IT+0x192>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400

08004c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d122      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0202 	mvn.w	r2, #2
 8004ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fae3 	bl	800528a <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fad5 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fc fd23 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d122      	bne.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d11b      	bne.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0204 	mvn.w	r2, #4
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fab9 	bl	800528a <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 faab 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc fcf9 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d122      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d11b      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0208 	mvn.w	r2, #8
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2204      	movs	r2, #4
 8004d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa8f 	bl	800528a <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa81 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fc fccf 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b10      	cmp	r3, #16
 8004d8c:	d122      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d11b      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0210 	mvn.w	r2, #16
 8004da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2208      	movs	r2, #8
 8004daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fa65 	bl	800528a <HAL_TIM_IC_CaptureCallback>
 8004dc0:	e005      	b.n	8004dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa57 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fc fca5 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0201 	mvn.w	r2, #1
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fc f876 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d10e      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e18:	2b80      	cmp	r3, #128	; 0x80
 8004e1a:	d107      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fece 	bl	8005bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d10e      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	d107      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fec1 	bl	8005bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d10e      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fa0c 	bl	800529e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d10e      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d107      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f06f 0220 	mvn.w	r2, #32
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fe81 	bl	8005bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e0ff      	b.n	80050da <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b14      	cmp	r3, #20
 8004ee6:	f200 80f0 	bhi.w	80050ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f45 	.word	0x08004f45
 8004ef4:	080050cb 	.word	0x080050cb
 8004ef8:	080050cb 	.word	0x080050cb
 8004efc:	080050cb 	.word	0x080050cb
 8004f00:	08004f85 	.word	0x08004f85
 8004f04:	080050cb 	.word	0x080050cb
 8004f08:	080050cb 	.word	0x080050cb
 8004f0c:	080050cb 	.word	0x080050cb
 8004f10:	08004fc7 	.word	0x08004fc7
 8004f14:	080050cb 	.word	0x080050cb
 8004f18:	080050cb 	.word	0x080050cb
 8004f1c:	080050cb 	.word	0x080050cb
 8004f20:	08005007 	.word	0x08005007
 8004f24:	080050cb 	.word	0x080050cb
 8004f28:	080050cb 	.word	0x080050cb
 8004f2c:	080050cb 	.word	0x080050cb
 8004f30:	08005049 	.word	0x08005049
 8004f34:	080050cb 	.word	0x080050cb
 8004f38:	080050cb 	.word	0x080050cb
 8004f3c:	080050cb 	.word	0x080050cb
 8004f40:	08005089 	.word	0x08005089
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fa16 	bl	800537c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	619a      	str	r2, [r3, #24]
      break;
 8004f82:	e0a5      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fa72 	bl	8005474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6999      	ldr	r1, [r3, #24]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	021a      	lsls	r2, r3, #8
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	619a      	str	r2, [r3, #24]
      break;
 8004fc4:	e084      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 facb 	bl	8005568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0208 	orr.w	r2, r2, #8
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0204 	bic.w	r2, r2, #4
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	61da      	str	r2, [r3, #28]
      break;
 8005004:	e064      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fb23 	bl	8005658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	021a      	lsls	r2, r3, #8
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	61da      	str	r2, [r3, #28]
      break;
 8005046:	e043      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fb60 	bl	8005714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0208 	orr.w	r2, r2, #8
 8005062:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0204 	bic.w	r2, r2, #4
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005086:	e023      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fb98 	bl	80057c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	021a      	lsls	r2, r3, #8
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050c8:	e002      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	75fb      	strb	r3, [r7, #23]
      break;
 80050ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop

080050e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIM_ConfigClockSource+0x1c>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e0b6      	b.n	800526e <HAL_TIM_ConfigClockSource+0x18a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513c:	d03e      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0xd8>
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005142:	f200 8087 	bhi.w	8005254 <HAL_TIM_ConfigClockSource+0x170>
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514a:	f000 8086 	beq.w	800525a <HAL_TIM_ConfigClockSource+0x176>
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005152:	d87f      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x170>
 8005154:	2b70      	cmp	r3, #112	; 0x70
 8005156:	d01a      	beq.n	800518e <HAL_TIM_ConfigClockSource+0xaa>
 8005158:	2b70      	cmp	r3, #112	; 0x70
 800515a:	d87b      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x170>
 800515c:	2b60      	cmp	r3, #96	; 0x60
 800515e:	d050      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x11e>
 8005160:	2b60      	cmp	r3, #96	; 0x60
 8005162:	d877      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x170>
 8005164:	2b50      	cmp	r3, #80	; 0x50
 8005166:	d03c      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005168:	2b50      	cmp	r3, #80	; 0x50
 800516a:	d873      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x170>
 800516c:	2b40      	cmp	r3, #64	; 0x40
 800516e:	d058      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x13e>
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d86f      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x170>
 8005174:	2b30      	cmp	r3, #48	; 0x30
 8005176:	d064      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15e>
 8005178:	2b30      	cmp	r3, #48	; 0x30
 800517a:	d86b      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x170>
 800517c:	2b20      	cmp	r3, #32
 800517e:	d060      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15e>
 8005180:	2b20      	cmp	r3, #32
 8005182:	d867      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x170>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d05c      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15e>
 8005188:	2b10      	cmp	r3, #16
 800518a:	d05a      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15e>
 800518c:	e062      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6899      	ldr	r1, [r3, #8]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f000 fbe5 	bl	800596c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	609a      	str	r2, [r3, #8]
      break;
 80051ba:	e04f      	b.n	800525c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6899      	ldr	r1, [r3, #8]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f000 fbce 	bl	800596c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051de:	609a      	str	r2, [r3, #8]
      break;
 80051e0:	e03c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f000 fb42 	bl	8005878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2150      	movs	r1, #80	; 0x50
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fb9b 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005200:	e02c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	461a      	mov	r2, r3
 8005210:	f000 fb61 	bl	80058d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2160      	movs	r1, #96	; 0x60
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fb8b 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005220:	e01c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6859      	ldr	r1, [r3, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	461a      	mov	r2, r3
 8005230:	f000 fb22 	bl	8005878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2140      	movs	r1, #64	; 0x40
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fb7b 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005240:	e00c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f000 fb72 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005252:	e003      	b.n	800525c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e000      	b.n	800525c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800525a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <TIM_Base_SetConfig+0xbc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_Base_SetConfig+0x20>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d108      	bne.n	80052e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a21      	ldr	r2, [pc, #132]	; (8005370 <TIM_Base_SetConfig+0xbc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00b      	beq.n	8005306 <TIM_Base_SetConfig+0x52>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f4:	d007      	beq.n	8005306 <TIM_Base_SetConfig+0x52>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <TIM_Base_SetConfig+0xc0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_Base_SetConfig+0x52>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <TIM_Base_SetConfig+0xc4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d108      	bne.n	8005318 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <TIM_Base_SetConfig+0xbc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0xa0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a0b      	ldr	r2, [pc, #44]	; (8005374 <TIM_Base_SetConfig+0xc0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0xa0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <TIM_Base_SetConfig+0xc4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d103      	bne.n	800535c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	615a      	str	r2, [r3, #20]
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400

0800537c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f023 0201 	bic.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 0302 	bic.w	r3, r3, #2
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a24      	ldr	r2, [pc, #144]	; (8005468 <TIM_OC1_SetConfig+0xec>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_OC1_SetConfig+0x70>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a23      	ldr	r2, [pc, #140]	; (800546c <TIM_OC1_SetConfig+0xf0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC1_SetConfig+0x70>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a22      	ldr	r2, [pc, #136]	; (8005470 <TIM_OC1_SetConfig+0xf4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10c      	bne.n	8005406 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0308 	bic.w	r3, r3, #8
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0304 	bic.w	r3, r3, #4
 8005404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a17      	ldr	r2, [pc, #92]	; (8005468 <TIM_OC1_SetConfig+0xec>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_OC1_SetConfig+0xa2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a16      	ldr	r2, [pc, #88]	; (800546c <TIM_OC1_SetConfig+0xf0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_OC1_SetConfig+0xa2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a15      	ldr	r2, [pc, #84]	; (8005470 <TIM_OC1_SetConfig+0xf4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d111      	bne.n	8005442 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400

08005474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0210 	bic.w	r2, r3, #16
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0320 	bic.w	r3, r3, #32
 80054c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a22      	ldr	r2, [pc, #136]	; (800555c <TIM_OC2_SetConfig+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10d      	bne.n	80054f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a19      	ldr	r2, [pc, #100]	; (800555c <TIM_OC2_SetConfig+0xe8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d007      	beq.n	800550c <TIM_OC2_SetConfig+0x98>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a18      	ldr	r2, [pc, #96]	; (8005560 <TIM_OC2_SetConfig+0xec>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_OC2_SetConfig+0x98>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a17      	ldr	r2, [pc, #92]	; (8005564 <TIM_OC2_SetConfig+0xf0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d113      	bne.n	8005534 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400

08005568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a21      	ldr	r2, [pc, #132]	; (800564c <TIM_OC3_SetConfig+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10d      	bne.n	80055e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a18      	ldr	r2, [pc, #96]	; (800564c <TIM_OC3_SetConfig+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_OC3_SetConfig+0x96>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a17      	ldr	r2, [pc, #92]	; (8005650 <TIM_OC3_SetConfig+0xe8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_OC3_SetConfig+0x96>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a16      	ldr	r2, [pc, #88]	; (8005654 <TIM_OC3_SetConfig+0xec>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d113      	bne.n	8005626 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400

08005658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	031b      	lsls	r3, r3, #12
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a14      	ldr	r2, [pc, #80]	; (8005708 <TIM_OC4_SetConfig+0xb0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_OC4_SetConfig+0x74>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a13      	ldr	r2, [pc, #76]	; (800570c <TIM_OC4_SetConfig+0xb4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC4_SetConfig+0x74>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a12      	ldr	r2, [pc, #72]	; (8005710 <TIM_OC4_SetConfig+0xb8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400

08005714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <TIM_OC5_SetConfig+0xa4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <TIM_OC5_SetConfig+0x6a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a12      	ldr	r2, [pc, #72]	; (80057bc <TIM_OC5_SetConfig+0xa8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_OC5_SetConfig+0x6a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <TIM_OC5_SetConfig+0xac>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d109      	bne.n	8005792 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40014400 	.word	0x40014400

080057c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800580a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	051b      	lsls	r3, r3, #20
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a14      	ldr	r2, [pc, #80]	; (800586c <TIM_OC6_SetConfig+0xa8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_OC6_SetConfig+0x6c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a13      	ldr	r2, [pc, #76]	; (8005870 <TIM_OC6_SetConfig+0xac>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC6_SetConfig+0x6c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <TIM_OC6_SetConfig+0xb0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d109      	bne.n	8005844 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005836:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400

08005878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 030a 	bic.w	r3, r3, #10
 80058b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b087      	sub	sp, #28
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0210 	bic.w	r2, r3, #16
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	031b      	lsls	r3, r3, #12
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	f043 0307 	orr.w	r3, r3, #7
 8005958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	609a      	str	r2, [r3, #8]
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	021a      	lsls	r2, r3, #8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	431a      	orrs	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	609a      	str	r2, [r3, #8]
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	2201      	movs	r2, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1a      	ldr	r2, [r3, #32]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	401a      	ands	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a1a      	ldr	r2, [r3, #32]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	fa01 f303 	lsl.w	r3, r1, r3
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e04f      	b.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a21      	ldr	r2, [pc, #132]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d108      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a14      	ldr	r2, [pc, #80]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a78:	d004      	beq.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d10c      	bne.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40014000 	.word	0x40014000

08005ac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e060      	b.n	8005ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d115      	bne.n	8005b90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	051b      	lsls	r3, r3, #20
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40012c00 	.word	0x40012c00

08005bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e040      	b.n	8005c84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fb fb0e 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	; 0x24
 8005c1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f82c 	bl	8005c8c <UART_SetConfig>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e022      	b.n	8005c84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fa7a 	bl	8006140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fb01 	bl	8006284 <UART_CheckIdleState>
 8005c82:	4603      	mov	r3, r0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c90:	b08a      	sub	sp, #40	; 0x28
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b9e      	ldr	r3, [pc, #632]	; (8005f34 <UART_SetConfig+0x2a8>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a93      	ldr	r2, [pc, #588]	; (8005f38 <UART_SetConfig+0x2ac>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a8a      	ldr	r2, [pc, #552]	; (8005f3c <UART_SetConfig+0x2b0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d126      	bne.n	8005d64 <UART_SetConfig+0xd8>
 8005d16:	4b8a      	ldr	r3, [pc, #552]	; (8005f40 <UART_SetConfig+0x2b4>)
 8005d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d81b      	bhi.n	8005d5c <UART_SetConfig+0xd0>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <UART_SetConfig+0xa0>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d3d 	.word	0x08005d3d
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005d55 	.word	0x08005d55
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d42:	e0ab      	b.n	8005e9c <UART_SetConfig+0x210>
 8005d44:	2302      	movs	r3, #2
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4a:	e0a7      	b.n	8005e9c <UART_SetConfig+0x210>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d52:	e0a3      	b.n	8005e9c <UART_SetConfig+0x210>
 8005d54:	2308      	movs	r3, #8
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5a:	e09f      	b.n	8005e9c <UART_SetConfig+0x210>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d62:	e09b      	b.n	8005e9c <UART_SetConfig+0x210>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a76      	ldr	r2, [pc, #472]	; (8005f44 <UART_SetConfig+0x2b8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d138      	bne.n	8005de0 <UART_SetConfig+0x154>
 8005d6e:	4b74      	ldr	r3, [pc, #464]	; (8005f40 <UART_SetConfig+0x2b4>)
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	f003 030c 	and.w	r3, r3, #12
 8005d78:	2b0c      	cmp	r3, #12
 8005d7a:	d82d      	bhi.n	8005dd8 <UART_SetConfig+0x14c>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <UART_SetConfig+0xf8>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005db9 	.word	0x08005db9
 8005d88:	08005dd9 	.word	0x08005dd9
 8005d8c:	08005dd9 	.word	0x08005dd9
 8005d90:	08005dd9 	.word	0x08005dd9
 8005d94:	08005dc9 	.word	0x08005dc9
 8005d98:	08005dd9 	.word	0x08005dd9
 8005d9c:	08005dd9 	.word	0x08005dd9
 8005da0:	08005dd9 	.word	0x08005dd9
 8005da4:	08005dc1 	.word	0x08005dc1
 8005da8:	08005dd9 	.word	0x08005dd9
 8005dac:	08005dd9 	.word	0x08005dd9
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005dd1 	.word	0x08005dd1
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dbe:	e06d      	b.n	8005e9c <UART_SetConfig+0x210>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc6:	e069      	b.n	8005e9c <UART_SetConfig+0x210>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dce:	e065      	b.n	8005e9c <UART_SetConfig+0x210>
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd6:	e061      	b.n	8005e9c <UART_SetConfig+0x210>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dde:	e05d      	b.n	8005e9c <UART_SetConfig+0x210>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a58      	ldr	r2, [pc, #352]	; (8005f48 <UART_SetConfig+0x2bc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d125      	bne.n	8005e36 <UART_SetConfig+0x1aa>
 8005dea:	4b55      	ldr	r3, [pc, #340]	; (8005f40 <UART_SetConfig+0x2b4>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005df4:	2b30      	cmp	r3, #48	; 0x30
 8005df6:	d016      	beq.n	8005e26 <UART_SetConfig+0x19a>
 8005df8:	2b30      	cmp	r3, #48	; 0x30
 8005dfa:	d818      	bhi.n	8005e2e <UART_SetConfig+0x1a2>
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d00a      	beq.n	8005e16 <UART_SetConfig+0x18a>
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d814      	bhi.n	8005e2e <UART_SetConfig+0x1a2>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <UART_SetConfig+0x182>
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d008      	beq.n	8005e1e <UART_SetConfig+0x192>
 8005e0c:	e00f      	b.n	8005e2e <UART_SetConfig+0x1a2>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e14:	e042      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e16:	2302      	movs	r3, #2
 8005e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1c:	e03e      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e1e:	2304      	movs	r3, #4
 8005e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e24:	e03a      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e26:	2308      	movs	r3, #8
 8005e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2c:	e036      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e2e:	2310      	movs	r3, #16
 8005e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e34:	e032      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3f      	ldr	r2, [pc, #252]	; (8005f38 <UART_SetConfig+0x2ac>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d12a      	bne.n	8005e96 <UART_SetConfig+0x20a>
 8005e40:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <UART_SetConfig+0x2b4>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e4e:	d01a      	beq.n	8005e86 <UART_SetConfig+0x1fa>
 8005e50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e54:	d81b      	bhi.n	8005e8e <UART_SetConfig+0x202>
 8005e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5a:	d00c      	beq.n	8005e76 <UART_SetConfig+0x1ea>
 8005e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e60:	d815      	bhi.n	8005e8e <UART_SetConfig+0x202>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <UART_SetConfig+0x1e2>
 8005e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6a:	d008      	beq.n	8005e7e <UART_SetConfig+0x1f2>
 8005e6c:	e00f      	b.n	8005e8e <UART_SetConfig+0x202>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e74:	e012      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e76:	2302      	movs	r3, #2
 8005e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7c:	e00e      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e7e:	2304      	movs	r3, #4
 8005e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e84:	e00a      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e86:	2308      	movs	r3, #8
 8005e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8c:	e006      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e8e:	2310      	movs	r3, #16
 8005e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e94:	e002      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e96:	2310      	movs	r3, #16
 8005e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a25      	ldr	r2, [pc, #148]	; (8005f38 <UART_SetConfig+0x2ac>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	f040 808a 	bne.w	8005fbc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d824      	bhi.n	8005efa <UART_SetConfig+0x26e>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0x22c>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005edd 	.word	0x08005edd
 8005ebc:	08005efb 	.word	0x08005efb
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08005efb 	.word	0x08005efb
 8005ec8:	08005eeb 	.word	0x08005eeb
 8005ecc:	08005efb 	.word	0x08005efb
 8005ed0:	08005efb 	.word	0x08005efb
 8005ed4:	08005efb 	.word	0x08005efb
 8005ed8:	08005ef3 	.word	0x08005ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005edc:	f7fd fff8 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 8005ee0:	61f8      	str	r0, [r7, #28]
        break;
 8005ee2:	e010      	b.n	8005f06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <UART_SetConfig+0x2c0>)
 8005ee6:	61fb      	str	r3, [r7, #28]
        break;
 8005ee8:	e00d      	b.n	8005f06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7fd ff5b 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8005eee:	61f8      	str	r0, [r7, #28]
        break;
 8005ef0:	e009      	b.n	8005f06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef6:	61fb      	str	r3, [r7, #28]
        break;
 8005ef8:	e005      	b.n	8005f06 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8109 	beq.w	8006120 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	4413      	add	r3, r2
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d305      	bcc.n	8005f2a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d912      	bls.n	8005f50 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f30:	e0f6      	b.n	8006120 <UART_SetConfig+0x494>
 8005f32:	bf00      	nop
 8005f34:	efff69f3 	.word	0xefff69f3
 8005f38:	40008000 	.word	0x40008000
 8005f3c:	40013800 	.word	0x40013800
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40004400 	.word	0x40004400
 8005f48:	40004800 	.word	0x40004800
 8005f4c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2200      	movs	r2, #0
 8005f54:	461c      	mov	r4, r3
 8005f56:	4615      	mov	r5, r2
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	022b      	lsls	r3, r5, #8
 8005f62:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f66:	0222      	lsls	r2, r4, #8
 8005f68:	68f9      	ldr	r1, [r7, #12]
 8005f6a:	6849      	ldr	r1, [r1, #4]
 8005f6c:	0849      	lsrs	r1, r1, #1
 8005f6e:	2000      	movs	r0, #0
 8005f70:	4688      	mov	r8, r1
 8005f72:	4681      	mov	r9, r0
 8005f74:	eb12 0a08 	adds.w	sl, r2, r8
 8005f78:	eb43 0b09 	adc.w	fp, r3, r9
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	f7fa f91f 	bl	80001d0 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4613      	mov	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa0:	d308      	bcc.n	8005fb4 <UART_SetConfig+0x328>
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa8:	d204      	bcs.n	8005fb4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	60da      	str	r2, [r3, #12]
 8005fb2:	e0b5      	b.n	8006120 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fba:	e0b1      	b.n	8006120 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc4:	d15d      	bne.n	8006082 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d827      	bhi.n	800601e <UART_SetConfig+0x392>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <UART_SetConfig+0x348>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005ff9 	.word	0x08005ff9
 8005fd8:	08006001 	.word	0x08006001
 8005fdc:	08006009 	.word	0x08006009
 8005fe0:	0800601f 	.word	0x0800601f
 8005fe4:	0800600f 	.word	0x0800600f
 8005fe8:	0800601f 	.word	0x0800601f
 8005fec:	0800601f 	.word	0x0800601f
 8005ff0:	0800601f 	.word	0x0800601f
 8005ff4:	08006017 	.word	0x08006017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff8:	f7fd ff6a 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 8005ffc:	61f8      	str	r0, [r7, #28]
        break;
 8005ffe:	e014      	b.n	800602a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006000:	f7fd ff7c 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 8006004:	61f8      	str	r0, [r7, #28]
        break;
 8006006:	e010      	b.n	800602a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006008:	4b4c      	ldr	r3, [pc, #304]	; (800613c <UART_SetConfig+0x4b0>)
 800600a:	61fb      	str	r3, [r7, #28]
        break;
 800600c:	e00d      	b.n	800602a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600e:	f7fd fec9 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8006012:	61f8      	str	r0, [r7, #28]
        break;
 8006014:	e009      	b.n	800602a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601a:	61fb      	str	r3, [r7, #28]
        break;
 800601c:	e005      	b.n	800602a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d077      	beq.n	8006120 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	005a      	lsls	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	441a      	add	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d916      	bls.n	800607a <UART_SetConfig+0x3ee>
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006052:	d212      	bcs.n	800607a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f023 030f 	bic.w	r3, r3, #15
 800605c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	b29a      	uxth	r2, r3
 800606a:	8afb      	ldrh	r3, [r7, #22]
 800606c:	4313      	orrs	r3, r2
 800606e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	8afa      	ldrh	r2, [r7, #22]
 8006076:	60da      	str	r2, [r3, #12]
 8006078:	e052      	b.n	8006120 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006080:	e04e      	b.n	8006120 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006086:	2b08      	cmp	r3, #8
 8006088:	d827      	bhi.n	80060da <UART_SetConfig+0x44e>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0x404>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060c5 	.word	0x080060c5
 800609c:	080060db 	.word	0x080060db
 80060a0:	080060cb 	.word	0x080060cb
 80060a4:	080060db 	.word	0x080060db
 80060a8:	080060db 	.word	0x080060db
 80060ac:	080060db 	.word	0x080060db
 80060b0:	080060d3 	.word	0x080060d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b4:	f7fd ff0c 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 80060b8:	61f8      	str	r0, [r7, #28]
        break;
 80060ba:	e014      	b.n	80060e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fd ff1e 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 80060c0:	61f8      	str	r0, [r7, #28]
        break;
 80060c2:	e010      	b.n	80060e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c4:	4b1d      	ldr	r3, [pc, #116]	; (800613c <UART_SetConfig+0x4b0>)
 80060c6:	61fb      	str	r3, [r7, #28]
        break;
 80060c8:	e00d      	b.n	80060e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fd fe6b 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 80060ce:	61f8      	str	r0, [r7, #28]
        break;
 80060d0:	e009      	b.n	80060e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d6:	61fb      	str	r3, [r7, #28]
        break;
 80060d8:	e005      	b.n	80060e6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060e4:	bf00      	nop
    }

    if (pclk != 0U)
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d019      	beq.n	8006120 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	085a      	lsrs	r2, r3, #1
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	441a      	add	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b0f      	cmp	r3, #15
 8006104:	d909      	bls.n	800611a <UART_SetConfig+0x48e>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610c:	d205      	bcs.n	800611a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	e002      	b.n	8006120 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800612c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006130:	4618      	mov	r0, r3
 8006132:	3728      	adds	r7, #40	; 0x28
 8006134:	46bd      	mov	sp, r7
 8006136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800613a:	bf00      	nop
 800613c:	00f42400 	.word	0x00f42400

08006140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01a      	beq.n	8006256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800623e:	d10a      	bne.n	8006256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
  }
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006294:	f7fb faa0 	bl	80017d8 <HAL_GetTick>
 8006298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d10e      	bne.n	80062c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f82d 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e023      	b.n	800630e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d10e      	bne.n	80062f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f817 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e00d      	b.n	800630e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b09c      	sub	sp, #112	; 0x70
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006326:	e0a5      	b.n	8006474 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632e:	f000 80a1 	beq.w	8006474 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006332:	f7fb fa51 	bl	80017d8 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800633e:	429a      	cmp	r2, r3
 8006340:	d302      	bcc.n	8006348 <UART_WaitOnFlagUntilTimeout+0x32>
 8006342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006344:	2b00      	cmp	r3, #0
 8006346:	d13e      	bne.n	80063c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800635c:	667b      	str	r3, [r7, #100]	; 0x64
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006368:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800636c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e6      	bne.n	8006348 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	663b      	str	r3, [r7, #96]	; 0x60
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800639a:	64ba      	str	r2, [r7, #72]	; 0x48
 800639c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e5      	bne.n	800637a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e067      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d04f      	beq.n	8006474 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e2:	d147      	bne.n	8006474 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006402:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
 800640e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e6      	bne.n	80063ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	613b      	str	r3, [r7, #16]
   return(result);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	66bb      	str	r3, [r7, #104]	; 0x68
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006440:	623a      	str	r2, [r7, #32]
 8006442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	61bb      	str	r3, [r7, #24]
   return(result);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e010      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4013      	ands	r3, r2
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	429a      	cmp	r2, r3
 8006490:	f43f af4a 	beq.w	8006328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3770      	adds	r7, #112	; 0x70
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <__NVIC_SetPriority>:
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	6039      	str	r1, [r7, #0]
 80064aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	db0a      	blt.n	80064ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	490c      	ldr	r1, [pc, #48]	; (80064ec <__NVIC_SetPriority+0x4c>)
 80064ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064be:	0112      	lsls	r2, r2, #4
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	440b      	add	r3, r1
 80064c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064c8:	e00a      	b.n	80064e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	4908      	ldr	r1, [pc, #32]	; (80064f0 <__NVIC_SetPriority+0x50>)
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	3b04      	subs	r3, #4
 80064d8:	0112      	lsls	r2, r2, #4
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	440b      	add	r3, r1
 80064de:	761a      	strb	r2, [r3, #24]
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	e000e100 	.word	0xe000e100
 80064f0:	e000ed00 	.word	0xe000ed00

080064f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <SysTick_Handler+0x1c>)
 80064fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80064fc:	f001 fed6 	bl	80082ac <xTaskGetSchedulerState>
 8006500:	4603      	mov	r3, r0
 8006502:	2b01      	cmp	r3, #1
 8006504:	d001      	beq.n	800650a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006506:	f002 fcbf 	bl	8008e88 <xPortSysTickHandler>
  }
}
 800650a:	bf00      	nop
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	e000e010 	.word	0xe000e010

08006514 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006518:	2100      	movs	r1, #0
 800651a:	f06f 0004 	mvn.w	r0, #4
 800651e:	f7ff ffbf 	bl	80064a0 <__NVIC_SetPriority>
#endif
}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800652e:	f3ef 8305 	mrs	r3, IPSR
 8006532:	603b      	str	r3, [r7, #0]
  return(result);
 8006534:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800653a:	f06f 0305 	mvn.w	r3, #5
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	e00c      	b.n	800655c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <osKernelInitialize+0x44>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d105      	bne.n	8006556 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <osKernelInitialize+0x44>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006550:	2300      	movs	r3, #0
 8006552:	607b      	str	r3, [r7, #4]
 8006554:	e002      	b.n	800655c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800655a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800655c:	687b      	ldr	r3, [r7, #4]
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	200002c0 	.word	0x200002c0

08006570 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006576:	f3ef 8305 	mrs	r3, IPSR
 800657a:	603b      	str	r3, [r7, #0]
  return(result);
 800657c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006582:	f06f 0305 	mvn.w	r3, #5
 8006586:	607b      	str	r3, [r7, #4]
 8006588:	e010      	b.n	80065ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <osKernelStart+0x48>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d109      	bne.n	80065a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006592:	f7ff ffbf 	bl	8006514 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006596:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <osKernelStart+0x48>)
 8006598:	2202      	movs	r2, #2
 800659a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800659c:	f001 fa0c 	bl	80079b8 <vTaskStartScheduler>
      stat = osOK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	e002      	b.n	80065ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065ac:	687b      	ldr	r3, [r7, #4]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	200002c0 	.word	0x200002c0

080065bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	; 0x38
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065cc:	f3ef 8305 	mrs	r3, IPSR
 80065d0:	617b      	str	r3, [r7, #20]
  return(result);
 80065d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d17e      	bne.n	80066d6 <osThreadNew+0x11a>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d07b      	beq.n	80066d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065de:	2380      	movs	r3, #128	; 0x80
 80065e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065e2:	2318      	movs	r3, #24
 80065e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d045      	beq.n	8006682 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <osThreadNew+0x48>
        name = attr->name;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <osThreadNew+0x6e>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b38      	cmp	r3, #56	; 0x38
 800661c:	d805      	bhi.n	800662a <osThreadNew+0x6e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <osThreadNew+0x72>
        return (NULL);
 800662a:	2300      	movs	r3, #0
 800662c:	e054      	b.n	80066d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	089b      	lsrs	r3, r3, #2
 800663c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00e      	beq.n	8006664 <osThreadNew+0xa8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2bc3      	cmp	r3, #195	; 0xc3
 800664c:	d90a      	bls.n	8006664 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006652:	2b00      	cmp	r3, #0
 8006654:	d006      	beq.n	8006664 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <osThreadNew+0xa8>
        mem = 1;
 800665e:	2301      	movs	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e010      	b.n	8006686 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10c      	bne.n	8006686 <osThreadNew+0xca>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d108      	bne.n	8006686 <osThreadNew+0xca>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <osThreadNew+0xca>
          mem = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e001      	b.n	8006686 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d110      	bne.n	80066ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006694:	9202      	str	r2, [sp, #8]
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 ff96 	bl	80075d4 <xTaskCreateStatic>
 80066a8:	4603      	mov	r3, r0
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	e013      	b.n	80066d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d110      	bne.n	80066d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	f107 0310 	add.w	r3, r7, #16
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 ffe1 	bl	800768e <xTaskCreate>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <osThreadNew+0x11a>
            hTask = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066d6:	693b      	ldr	r3, [r7, #16]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3728      	adds	r7, #40	; 0x28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e8:	f3ef 8305 	mrs	r3, IPSR
 80066ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <osDelay+0x1c>
    stat = osErrorISR;
 80066f4:	f06f 0305 	mvn.w	r3, #5
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e007      	b.n	800670c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 f922 	bl	8007950 <vTaskDelay>
    }
  }

  return (stat);
 800670c:	68fb      	ldr	r3, [r7, #12]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006716:	b580      	push	{r7, lr}
 8006718:	b08a      	sub	sp, #40	; 0x28
 800671a:	af02      	add	r7, sp, #8
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006726:	f3ef 8305 	mrs	r3, IPSR
 800672a:	613b      	str	r3, [r7, #16]
  return(result);
 800672c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800672e:	2b00      	cmp	r3, #0
 8006730:	d15f      	bne.n	80067f2 <osMessageQueueNew+0xdc>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d05c      	beq.n	80067f2 <osMessageQueueNew+0xdc>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d059      	beq.n	80067f2 <osMessageQueueNew+0xdc>
    mem = -1;
 800673e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006742:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d029      	beq.n	800679e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d012      	beq.n	8006778 <osMessageQueueNew+0x62>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2b4f      	cmp	r3, #79	; 0x4f
 8006758:	d90e      	bls.n	8006778 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695a      	ldr	r2, [r3, #20]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	429a      	cmp	r2, r3
 8006770:	d302      	bcc.n	8006778 <osMessageQueueNew+0x62>
        mem = 1;
 8006772:	2301      	movs	r3, #1
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	e014      	b.n	80067a2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d110      	bne.n	80067a2 <osMessageQueueNew+0x8c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10c      	bne.n	80067a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800678c:	2b00      	cmp	r3, #0
 800678e:	d108      	bne.n	80067a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <osMessageQueueNew+0x8c>
          mem = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	e001      	b.n	80067a2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d10b      	bne.n	80067c0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2100      	movs	r1, #0
 80067b2:	9100      	str	r1, [sp, #0]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f9ce 	bl	8006b58 <xQueueGenericCreateStatic>
 80067bc:	61f8      	str	r0, [r7, #28]
 80067be:	e008      	b.n	80067d2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d105      	bne.n	80067d2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80067c6:	2200      	movs	r2, #0
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fa3c 	bl	8006c48 <xQueueGenericCreate>
 80067d0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00c      	beq.n	80067f2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	e001      	b.n	80067ea <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80067ea:	6979      	ldr	r1, [r7, #20]
 80067ec:	69f8      	ldr	r0, [r7, #28]
 80067ee:	f000 fe93 	bl	8007518 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80067f2:	69fb      	ldr	r3, [r7, #28]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006812:	f3ef 8305 	mrs	r3, IPSR
 8006816:	617b      	str	r3, [r7, #20]
  return(result);
 8006818:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800681a:	2b00      	cmp	r3, #0
 800681c:	d028      	beq.n	8006870 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <osMessageQueueGet+0x34>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <osMessageQueueGet+0x34>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006830:	f06f 0303 	mvn.w	r3, #3
 8006834:	61fb      	str	r3, [r7, #28]
 8006836:	e037      	b.n	80068a8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800683c:	f107 0310 	add.w	r3, r7, #16
 8006840:	461a      	mov	r2, r3
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	69b8      	ldr	r0, [r7, #24]
 8006846:	f000 fcd7 	bl	80071f8 <xQueueReceiveFromISR>
 800684a:	4603      	mov	r3, r0
 800684c:	2b01      	cmp	r3, #1
 800684e:	d003      	beq.n	8006858 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006850:	f06f 0302 	mvn.w	r3, #2
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	e027      	b.n	80068a8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d024      	beq.n	80068a8 <osMessageQueueGet+0xac>
 800685e:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <osMessageQueueGet+0xb8>)
 8006860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	e01b      	b.n	80068a8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <osMessageQueueGet+0x80>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d103      	bne.n	8006884 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800687c:	f06f 0303 	mvn.w	r3, #3
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	e011      	b.n	80068a8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	69b8      	ldr	r0, [r7, #24]
 800688a:	f000 fbd5 	bl	8007038 <xQueueReceive>
 800688e:	4603      	mov	r3, r0
 8006890:	2b01      	cmp	r3, #1
 8006892:	d009      	beq.n	80068a8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800689a:	f06f 0301 	mvn.w	r3, #1
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	e002      	b.n	80068a8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80068a2:	f06f 0302 	mvn.w	r3, #2
 80068a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80068a8:	69fb      	ldr	r3, [r7, #28]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a07      	ldr	r2, [pc, #28]	; (80068e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80068c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4a06      	ldr	r2, [pc, #24]	; (80068e8 <vApplicationGetIdleTaskMemory+0x30>)
 80068ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2280      	movs	r2, #128	; 0x80
 80068d4:	601a      	str	r2, [r3, #0]
}
 80068d6:	bf00      	nop
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	200002c4 	.word	0x200002c4
 80068e8:	20000388 	.word	0x20000388

080068ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a07      	ldr	r2, [pc, #28]	; (8006918 <vApplicationGetTimerTaskMemory+0x2c>)
 80068fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4a06      	ldr	r2, [pc, #24]	; (800691c <vApplicationGetTimerTaskMemory+0x30>)
 8006902:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800690a:	601a      	str	r2, [r3, #0]
}
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	20000588 	.word	0x20000588
 800691c:	2000064c 	.word	0x2000064c

08006920 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f103 0208 	add.w	r2, r3, #8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006938:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f103 0208 	add.w	r2, r3, #8
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f103 0208 	add.w	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d8:	d103      	bne.n	80069e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	e00c      	b.n	80069fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3308      	adds	r3, #8
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e002      	b.n	80069f0 <vListInsert+0x2e>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d2f6      	bcs.n	80069ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	601a      	str	r2, [r3, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6892      	ldr	r2, [r2, #8]
 8006a4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6852      	ldr	r2, [r2, #4]
 8006a54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d103      	bne.n	8006a68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	1e5a      	subs	r2, r3, #1
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ab2:	f002 f957 	bl	8008d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	441a      	add	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	68f9      	ldr	r1, [r7, #12]
 8006ae6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ae8:	fb01 f303 	mul.w	r3, r1, r3
 8006aec:	441a      	add	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	22ff      	movs	r2, #255	; 0xff
 8006af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	22ff      	movs	r2, #255	; 0xff
 8006afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d114      	bne.n	8006b32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01a      	beq.n	8006b46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3310      	adds	r3, #16
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fa07 	bl	8007f28 <xTaskRemoveFromEventList>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d012      	beq.n	8006b46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <xQueueGenericReset+0xcc>)
 8006b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	e009      	b.n	8006b46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3310      	adds	r3, #16
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fef2 	bl	8006920 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3324      	adds	r3, #36	; 0x24
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff feed 	bl	8006920 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b46:	f002 f93d 	bl	8008dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b4a:	2301      	movs	r3, #1
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08e      	sub	sp, #56	; 0x38
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <xQueueGenericCreateStatic+0x52>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <xQueueGenericCreateStatic+0x56>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <xQueueGenericCreateStatic+0x58>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	623b      	str	r3, [r7, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d102      	bne.n	8006bd6 <xQueueGenericCreateStatic+0x7e>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <xQueueGenericCreateStatic+0x82>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <xQueueGenericCreateStatic+0x84>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	61fb      	str	r3, [r7, #28]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bf6:	2350      	movs	r3, #80	; 0x50
 8006bf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b50      	cmp	r3, #80	; 0x50
 8006bfe:	d00a      	beq.n	8006c16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	61bb      	str	r3, [r7, #24]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00d      	beq.n	8006c3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	4613      	mov	r3, r2
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f83f 	bl	8006cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3730      	adds	r7, #48	; 0x30
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	4613      	mov	r3, r2
 8006c54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	613b      	str	r3, [r7, #16]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3350      	adds	r3, #80	; 0x50
 8006c80:	4618      	mov	r0, r3
 8006c82:	f002 f991 	bl	8008fa8 <pvPortMalloc>
 8006c86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d011      	beq.n	8006cb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	3350      	adds	r3, #80	; 0x50
 8006c96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ca0:	79fa      	ldrb	r2, [r7, #7]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f805 	bl	8006cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3720      	adds	r7, #32
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	e002      	b.n	8006cde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cea:	2101      	movs	r1, #1
 8006cec:	69b8      	ldr	r0, [r7, #24]
 8006cee:	f7ff fecb 	bl	8006a88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	; 0x38
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d12:	2300      	movs	r3, #0
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <xQueueGenericSend+0x32>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <xQueueGenericSend+0x40>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <xQueueGenericSend+0x44>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <xQueueGenericSend+0x46>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <xQueueGenericSend+0x60>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d103      	bne.n	8006d72 <xQueueGenericSend+0x6e>
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <xQueueGenericSend+0x72>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <xQueueGenericSend+0x74>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <xQueueGenericSend+0x8e>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	623b      	str	r3, [r7, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d92:	f001 fa8b 	bl	80082ac <xTaskGetSchedulerState>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <xQueueGenericSend+0x9e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericSend+0xa2>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericSend+0xa4>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	61fb      	str	r3, [r7, #28]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dc2:	f001 ffcf 	bl	8008d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <xQueueGenericSend+0xd4>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d129      	bne.n	8006e2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dde:	f000 fa8b 	bl	80072f8 <prvCopyDataToQueue>
 8006de2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d010      	beq.n	8006e0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 f899 	bl	8007f28 <xTaskRemoveFromEventList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d013      	beq.n	8006e24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dfc:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <xQueueGenericSend+0x1f8>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	e00a      	b.n	8006e24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e14:	4b39      	ldr	r3, [pc, #228]	; (8006efc <xQueueGenericSend+0x1f8>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e24:	f001 ffce 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e063      	b.n	8006ef4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e32:	f001 ffc7 	bl	8008dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e05c      	b.n	8006ef4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d106      	bne.n	8006e4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f8d3 	bl	8007ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e4e:	f001 ffb9 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e52:	f000 fe23 	bl	8007a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e56:	f001 ff85 	bl	8008d64 <vPortEnterCritical>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e66:	d103      	bne.n	8006e70 <xQueueGenericSend+0x16c>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSend+0x182>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e86:	f001 ff9d 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e8a:	1d3a      	adds	r2, r7, #4
 8006e8c:	f107 0314 	add.w	r3, r7, #20
 8006e90:	4611      	mov	r1, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f8c2 	bl	800801c <xTaskCheckForTimeOut>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d124      	bne.n	8006ee8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ea0:	f000 fb22 	bl	80074e8 <prvIsQueueFull>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d018      	beq.n	8006edc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	3310      	adds	r3, #16
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 ffe8 	bl	8007e88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eba:	f000 faad 	bl	8007418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ebe:	f000 fdfb 	bl	8007ab8 <xTaskResumeAll>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f47f af7c 	bne.w	8006dc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <xQueueGenericSend+0x1f8>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	e772      	b.n	8006dc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ede:	f000 fa9b 	bl	8007418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee2:	f000 fde9 	bl	8007ab8 <xTaskResumeAll>
 8006ee6:	e76c      	b.n	8006dc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eea:	f000 fa95 	bl	8007418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eee:	f000 fde3 	bl	8007ab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ef2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3738      	adds	r7, #56	; 0x38
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b090      	sub	sp, #64	; 0x40
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <xQueueGenericSendFromISR+0x3c>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <xQueueGenericSendFromISR+0x40>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <xQueueGenericSendFromISR+0x42>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d103      	bne.n	8006f6a <xQueueGenericSendFromISR+0x6a>
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <xQueueGenericSendFromISR+0x6e>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <xQueueGenericSendFromISR+0x70>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	623b      	str	r3, [r7, #32]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f8a:	f001 ffcd 	bl	8008f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	61fa      	str	r2, [r7, #28]
 8006fa4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d302      	bcc.n	8006fbc <xQueueGenericSendFromISR+0xbc>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d12f      	bne.n	800701c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fd2:	f000 f991 	bl	80072f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fde:	d112      	bne.n	8007006 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d016      	beq.n	8007016 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	3324      	adds	r3, #36	; 0x24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 ff9b 	bl	8007f28 <xTaskRemoveFromEventList>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00e      	beq.n	8007016 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e007      	b.n	8007016 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800700a:	3301      	adds	r3, #1
 800700c:	b2db      	uxtb	r3, r3
 800700e:	b25a      	sxtb	r2, r3
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007016:	2301      	movs	r3, #1
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800701a:	e001      	b.n	8007020 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800701c:	2300      	movs	r3, #0
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800702a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800702c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800702e:	4618      	mov	r0, r3
 8007030:	3740      	adds	r7, #64	; 0x40
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08c      	sub	sp, #48	; 0x30
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007044:	2300      	movs	r3, #0
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <xQueueReceive+0x30>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	623b      	str	r3, [r7, #32]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <xQueueReceive+0x3e>
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <xQueueReceive+0x42>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <xQueueReceive+0x44>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xQueueReceive+0x5e>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	61fb      	str	r3, [r7, #28]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007096:	f001 f909 	bl	80082ac <xTaskGetSchedulerState>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <xQueueReceive+0x6e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <xQueueReceive+0x72>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <xQueueReceive+0x74>
 80070aa:	2300      	movs	r3, #0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <xQueueReceive+0x8e>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	61bb      	str	r3, [r7, #24]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070c6:	f001 fe4d 	bl	8008d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01f      	beq.n	8007116 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070da:	f000 f977 	bl	80073cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	1e5a      	subs	r2, r3, #1
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00f      	beq.n	800710e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	3310      	adds	r3, #16
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 ff18 	bl	8007f28 <xTaskRemoveFromEventList>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070fe:	4b3d      	ldr	r3, [pc, #244]	; (80071f4 <xQueueReceive+0x1bc>)
 8007100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800710e:	f001 fe59 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 8007112:	2301      	movs	r3, #1
 8007114:	e069      	b.n	80071ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d103      	bne.n	8007124 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800711c:	f001 fe52 	bl	8008dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007120:	2300      	movs	r3, #0
 8007122:	e062      	b.n	80071ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	4618      	mov	r0, r3
 8007130:	f000 ff5e 	bl	8007ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007134:	2301      	movs	r3, #1
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007138:	f001 fe44 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800713c:	f000 fcae 	bl	8007a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007140:	f001 fe10 	bl	8008d64 <vPortEnterCritical>
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800714a:	b25b      	sxtb	r3, r3
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007150:	d103      	bne.n	800715a <xQueueReceive+0x122>
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007160:	b25b      	sxtb	r3, r3
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007166:	d103      	bne.n	8007170 <xQueueReceive+0x138>
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007170:	f001 fe28 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007174:	1d3a      	adds	r2, r7, #4
 8007176:	f107 0310 	add.w	r3, r7, #16
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f000 ff4d 	bl	800801c <xTaskCheckForTimeOut>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d123      	bne.n	80071d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718a:	f000 f997 	bl	80074bc <prvIsQueueEmpty>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d017      	beq.n	80071c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	3324      	adds	r3, #36	; 0x24
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fe73 	bl	8007e88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a4:	f000 f938 	bl	8007418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071a8:	f000 fc86 	bl	8007ab8 <xTaskResumeAll>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d189      	bne.n	80070c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071b2:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <xQueueReceive+0x1bc>)
 80071b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	e780      	b.n	80070c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c6:	f000 f927 	bl	8007418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ca:	f000 fc75 	bl	8007ab8 <xTaskResumeAll>
 80071ce:	e77a      	b.n	80070c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d2:	f000 f921 	bl	8007418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071d6:	f000 fc6f 	bl	8007ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071dc:	f000 f96e 	bl	80074bc <prvIsQueueEmpty>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f43f af6f 	beq.w	80070c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3730      	adds	r7, #48	; 0x30
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	e000ed04 	.word	0xe000ed04

080071f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08e      	sub	sp, #56	; 0x38
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	623b      	str	r3, [r7, #32]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <xQueueReceiveFromISR+0x3a>
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <xQueueReceiveFromISR+0x3e>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <xQueueReceiveFromISR+0x40>
 8007236:	2300      	movs	r3, #0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	61fb      	str	r3, [r7, #28]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007252:	f001 fe69 	bl	8008f28 <vPortValidateInterruptPriority>
	__asm volatile
 8007256:	f3ef 8211 	mrs	r2, BASEPRI
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	61ba      	str	r2, [r7, #24]
 800726c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800726e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d02f      	beq.n	80072de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728c:	f000 f89e 	bl	80073cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	1e5a      	subs	r2, r3, #1
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007298:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072a0:	d112      	bne.n	80072c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d016      	beq.n	80072d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	3310      	adds	r3, #16
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fe3a 	bl	8007f28 <xTaskRemoveFromEventList>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00e      	beq.n	80072d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e007      	b.n	80072d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80072c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072cc:	3301      	adds	r3, #1
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	b25a      	sxtb	r2, r3
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80072d8:	2301      	movs	r3, #1
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
 80072dc:	e001      	b.n	80072e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80072de:	2300      	movs	r3, #0
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f383 8811 	msr	BASEPRI, r3
}
 80072ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3738      	adds	r7, #56	; 0x38
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10d      	bne.n	8007332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d14d      	bne.n	80073ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 ffe0 	bl	80082e8 <xTaskPriorityDisinherit>
 8007328:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	609a      	str	r2, [r3, #8]
 8007330:	e043      	b.n	80073ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d119      	bne.n	800736c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6858      	ldr	r0, [r3, #4]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	461a      	mov	r2, r3
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	f002 f9ba 	bl	80096bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007350:	441a      	add	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	429a      	cmp	r2, r3
 8007360:	d32b      	bcc.n	80073ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]
 800736a:	e026      	b.n	80073ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68d8      	ldr	r0, [r3, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	461a      	mov	r2, r3
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	f002 f9a0 	bl	80096bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	425b      	negs	r3, r3
 8007386:	441a      	add	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d207      	bcs.n	80073a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	425b      	negs	r3, r3
 80073a2:	441a      	add	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d105      	bne.n	80073ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073c2:	697b      	ldr	r3, [r7, #20]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d018      	beq.n	8007410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	441a      	add	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d303      	bcc.n	8007400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68d9      	ldr	r1, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007408:	461a      	mov	r2, r3
 800740a:	6838      	ldr	r0, [r7, #0]
 800740c:	f002 f956 	bl	80096bc <memcpy>
	}
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007420:	f001 fca0 	bl	8008d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800742a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800742c:	e011      	b.n	8007452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d012      	beq.n	800745c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3324      	adds	r3, #36	; 0x24
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fd74 	bl	8007f28 <xTaskRemoveFromEventList>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007446:	f000 fe4b 	bl	80080e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	3b01      	subs	r3, #1
 800744e:	b2db      	uxtb	r3, r3
 8007450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	dce9      	bgt.n	800742e <prvUnlockQueue+0x16>
 800745a:	e000      	b.n	800745e <prvUnlockQueue+0x46>
					break;
 800745c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	22ff      	movs	r2, #255	; 0xff
 8007462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007466:	f001 fcad 	bl	8008dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800746a:	f001 fc7b 	bl	8008d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007476:	e011      	b.n	800749c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d012      	beq.n	80074a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3310      	adds	r3, #16
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fd4f 	bl	8007f28 <xTaskRemoveFromEventList>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007490:	f000 fe26 	bl	80080e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	3b01      	subs	r3, #1
 8007498:	b2db      	uxtb	r3, r3
 800749a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800749c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dce9      	bgt.n	8007478 <prvUnlockQueue+0x60>
 80074a4:	e000      	b.n	80074a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	22ff      	movs	r2, #255	; 0xff
 80074ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074b0:	f001 fc88 	bl	8008dc4 <vPortExitCritical>
}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074c4:	f001 fc4e 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e001      	b.n	80074da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074da:	f001 fc73 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074f0:	f001 fc38 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d102      	bne.n	8007506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007500:	2301      	movs	r3, #1
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e001      	b.n	800750a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007506:	2300      	movs	r3, #0
 8007508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800750a:	f001 fc5b 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 800750e:	68fb      	ldr	r3, [r7, #12]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	e014      	b.n	8007552 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007528:	4a0f      	ldr	r2, [pc, #60]	; (8007568 <vQueueAddToRegistry+0x50>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007534:	490c      	ldr	r1, [pc, #48]	; (8007568 <vQueueAddToRegistry+0x50>)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <vQueueAddToRegistry+0x50>)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	4413      	add	r3, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800754a:	e006      	b.n	800755a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b07      	cmp	r3, #7
 8007556:	d9e7      	bls.n	8007528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000a4c 	.word	0x20000a4c

0800756c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800757c:	f001 fbf2 	bl	8008d64 <vPortEnterCritical>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007586:	b25b      	sxtb	r3, r3
 8007588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800758c:	d103      	bne.n	8007596 <vQueueWaitForMessageRestricted+0x2a>
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759c:	b25b      	sxtb	r3, r3
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a2:	d103      	bne.n	80075ac <vQueueWaitForMessageRestricted+0x40>
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ac:	f001 fc0a 	bl	8008dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3324      	adds	r3, #36	; 0x24
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fc85 	bl	8007ed0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075c6:	6978      	ldr	r0, [r7, #20]
 80075c8:	f7ff ff26 	bl	8007418 <prvUnlockQueue>
	}
 80075cc:	bf00      	nop
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08e      	sub	sp, #56	; 0x38
 80075d8:	af04      	add	r7, sp, #16
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	623b      	str	r3, [r7, #32]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xTaskCreateStatic+0x46>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	61fb      	str	r3, [r7, #28]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800761a:	23c4      	movs	r3, #196	; 0xc4
 800761c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2bc4      	cmp	r3, #196	; 0xc4
 8007622:	d00a      	beq.n	800763a <xTaskCreateStatic+0x66>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	61bb      	str	r3, [r7, #24]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800763a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01e      	beq.n	8007680 <xTaskCreateStatic+0xac>
 8007642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007650:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	2202      	movs	r2, #2
 8007656:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800765a:	2300      	movs	r3, #0
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	f107 0314 	add.w	r3, r7, #20
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 f850 	bl	8007718 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800767a:	f000 f8f9 	bl	8007870 <prvAddNewTaskToReadyList>
 800767e:	e001      	b.n	8007684 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007684:	697b      	ldr	r3, [r7, #20]
	}
 8007686:	4618      	mov	r0, r3
 8007688:	3728      	adds	r7, #40	; 0x28
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800768e:	b580      	push	{r7, lr}
 8007690:	b08c      	sub	sp, #48	; 0x30
 8007692:	af04      	add	r7, sp, #16
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	603b      	str	r3, [r7, #0]
 800769a:	4613      	mov	r3, r2
 800769c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 fc80 	bl	8008fa8 <pvPortMalloc>
 80076a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00e      	beq.n	80076ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076b0:	20c4      	movs	r0, #196	; 0xc4
 80076b2:	f001 fc79 	bl	8008fa8 <pvPortMalloc>
 80076b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
 80076c4:	e005      	b.n	80076d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076c6:	6978      	ldr	r0, [r7, #20]
 80076c8:	f001 fd3a 	bl	8009140 <vPortFree>
 80076cc:	e001      	b.n	80076d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d017      	beq.n	8007708 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076e0:	88fa      	ldrh	r2, [r7, #6]
 80076e2:	2300      	movs	r3, #0
 80076e4:	9303      	str	r3, [sp, #12]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	9302      	str	r3, [sp, #8]
 80076ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f80e 	bl	8007718 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076fc:	69f8      	ldr	r0, [r7, #28]
 80076fe:	f000 f8b7 	bl	8007870 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007702:	2301      	movs	r3, #1
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e002      	b.n	800770e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800770c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800770e:	69bb      	ldr	r3, [r7, #24]
	}
 8007710:	4618      	mov	r0, r3
 8007712:	3720      	adds	r7, #32
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	461a      	mov	r2, r3
 8007730:	21a5      	movs	r1, #165	; 0xa5
 8007732:	f001 ffd1 	bl	80096d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007740:	3b01      	subs	r3, #1
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f023 0307 	bic.w	r3, r3, #7
 800774e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <prvInitialiseNewTask+0x58>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	617b      	str	r3, [r7, #20]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01f      	beq.n	80077bc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	e012      	b.n	80077a8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	4413      	add	r3, r2
 8007788:	7819      	ldrb	r1, [r3, #0]
 800778a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	3334      	adds	r3, #52	; 0x34
 8007792:	460a      	mov	r2, r1
 8007794:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	4413      	add	r3, r2
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d006      	beq.n	80077b0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	3301      	adds	r3, #1
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	d9e9      	bls.n	8007782 <prvInitialiseNewTask+0x6a>
 80077ae:	e000      	b.n	80077b2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80077b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077ba:	e003      	b.n	80077c4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	2b37      	cmp	r3, #55	; 0x37
 80077c8:	d901      	bls.n	80077ce <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077ca:	2337      	movs	r3, #55	; 0x37
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077d8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	2200      	movs	r2, #0
 80077de:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	3304      	adds	r3, #4
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff f8bb 	bl	8006960 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	3318      	adds	r3, #24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff f8b6 	bl	8006960 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007808:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	2200      	movs	r2, #0
 800780e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	2200      	movs	r2, #0
 800781c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	335c      	adds	r3, #92	; 0x5c
 8007824:	2260      	movs	r2, #96	; 0x60
 8007826:	2100      	movs	r1, #0
 8007828:	4618      	mov	r0, r3
 800782a:	f001 ff55 	bl	80096d8 <memset>
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <prvInitialiseNewTask+0x14c>)
 8007832:	661a      	str	r2, [r3, #96]	; 0x60
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	4a0c      	ldr	r2, [pc, #48]	; (8007868 <prvInitialiseNewTask+0x150>)
 8007838:	665a      	str	r2, [r3, #100]	; 0x64
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	4a0b      	ldr	r2, [pc, #44]	; (800786c <prvInitialiseNewTask+0x154>)
 800783e:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	69b8      	ldr	r0, [r7, #24]
 8007846:	f001 f95f 	bl	8008b08 <pxPortInitialiseStack>
 800784a:	4602      	mov	r2, r0
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800785c:	bf00      	nop
 800785e:	3720      	adds	r7, #32
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	080099f4 	.word	0x080099f4
 8007868:	08009a14 	.word	0x08009a14
 800786c:	080099d4 	.word	0x080099d4

08007870 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007878:	f001 fa74 	bl	8008d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800787c:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <prvAddNewTaskToReadyList+0xc4>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	4a2c      	ldr	r2, [pc, #176]	; (8007934 <prvAddNewTaskToReadyList+0xc4>)
 8007884:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007886:	4b2c      	ldr	r3, [pc, #176]	; (8007938 <prvAddNewTaskToReadyList+0xc8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800788e:	4a2a      	ldr	r2, [pc, #168]	; (8007938 <prvAddNewTaskToReadyList+0xc8>)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007894:	4b27      	ldr	r3, [pc, #156]	; (8007934 <prvAddNewTaskToReadyList+0xc4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d110      	bne.n	80078be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800789c:	f000 fc44 	bl	8008128 <prvInitialiseTaskLists>
 80078a0:	e00d      	b.n	80078be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078a2:	4b26      	ldr	r3, [pc, #152]	; (800793c <prvAddNewTaskToReadyList+0xcc>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078aa:	4b23      	ldr	r3, [pc, #140]	; (8007938 <prvAddNewTaskToReadyList+0xc8>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d802      	bhi.n	80078be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078b8:	4a1f      	ldr	r2, [pc, #124]	; (8007938 <prvAddNewTaskToReadyList+0xc8>)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078be:	4b20      	ldr	r3, [pc, #128]	; (8007940 <prvAddNewTaskToReadyList+0xd0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <prvAddNewTaskToReadyList+0xd0>)
 80078c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078c8:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <prvAddNewTaskToReadyList+0xd0>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d4:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <prvAddNewTaskToReadyList+0xd4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d903      	bls.n	80078e4 <prvAddNewTaskToReadyList+0x74>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	4a18      	ldr	r2, [pc, #96]	; (8007944 <prvAddNewTaskToReadyList+0xd4>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4a15      	ldr	r2, [pc, #84]	; (8007948 <prvAddNewTaskToReadyList+0xd8>)
 80078f2:	441a      	add	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7ff f83d 	bl	800697a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007900:	f001 fa60 	bl	8008dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007904:	4b0d      	ldr	r3, [pc, #52]	; (800793c <prvAddNewTaskToReadyList+0xcc>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00e      	beq.n	800792a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800790c:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <prvAddNewTaskToReadyList+0xc8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	429a      	cmp	r2, r3
 8007918:	d207      	bcs.n	800792a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <prvAddNewTaskToReadyList+0xdc>)
 800791c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000f60 	.word	0x20000f60
 8007938:	20000a8c 	.word	0x20000a8c
 800793c:	20000f6c 	.word	0x20000f6c
 8007940:	20000f7c 	.word	0x20000f7c
 8007944:	20000f68 	.word	0x20000f68
 8007948:	20000a90 	.word	0x20000a90
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d017      	beq.n	8007992 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007962:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <vTaskDelay+0x60>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <vTaskDelay+0x30>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	60bb      	str	r3, [r7, #8]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007980:	f000 f88c 	bl	8007a9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007984:	2100      	movs	r1, #0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fd1c 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800798c:	f000 f894 	bl	8007ab8 <xTaskResumeAll>
 8007990:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <vTaskDelay+0x64>)
 800799a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079a8:	bf00      	nop
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20000f88 	.word	0x20000f88
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079c6:	463a      	mov	r2, r7
 80079c8:	1d39      	adds	r1, r7, #4
 80079ca:	f107 0308 	add.w	r3, r7, #8
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe ff72 	bl	80068b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	9202      	str	r2, [sp, #8]
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	2300      	movs	r3, #0
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	2300      	movs	r3, #0
 80079e4:	460a      	mov	r2, r1
 80079e6:	4925      	ldr	r1, [pc, #148]	; (8007a7c <vTaskStartScheduler+0xc4>)
 80079e8:	4825      	ldr	r0, [pc, #148]	; (8007a80 <vTaskStartScheduler+0xc8>)
 80079ea:	f7ff fdf3 	bl	80075d4 <xTaskCreateStatic>
 80079ee:	4603      	mov	r3, r0
 80079f0:	4a24      	ldr	r2, [pc, #144]	; (8007a84 <vTaskStartScheduler+0xcc>)
 80079f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079f4:	4b23      	ldr	r3, [pc, #140]	; (8007a84 <vTaskStartScheduler+0xcc>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079fc:	2301      	movs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e001      	b.n	8007a06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d102      	bne.n	8007a12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a0c:	f000 fd2e 	bl	800846c <xTimerCreateTimerTask>
 8007a10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d11d      	bne.n	8007a54 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	613b      	str	r3, [r7, #16]
}
 8007a2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a2c:	4b16      	ldr	r3, [pc, #88]	; (8007a88 <vTaskStartScheduler+0xd0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	335c      	adds	r3, #92	; 0x5c
 8007a32:	4a16      	ldr	r2, [pc, #88]	; (8007a8c <vTaskStartScheduler+0xd4>)
 8007a34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a36:	4b16      	ldr	r3, [pc, #88]	; (8007a90 <vTaskStartScheduler+0xd8>)
 8007a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a3e:	4b15      	ldr	r3, [pc, #84]	; (8007a94 <vTaskStartScheduler+0xdc>)
 8007a40:	2201      	movs	r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a44:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <vTaskStartScheduler+0xe0>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007a4a:	f7f8 fee3 	bl	8000814 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a4e:	f001 f8e7 	bl	8008c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a52:	e00e      	b.n	8007a72 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a5a:	d10a      	bne.n	8007a72 <vTaskStartScheduler+0xba>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60fb      	str	r3, [r7, #12]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <vTaskStartScheduler+0xb8>
}
 8007a72:	bf00      	nop
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	080098b8 	.word	0x080098b8
 8007a80:	080080f9 	.word	0x080080f9
 8007a84:	20000f84 	.word	0x20000f84
 8007a88:	20000a8c 	.word	0x20000a8c
 8007a8c:	20000010 	.word	0x20000010
 8007a90:	20000f80 	.word	0x20000f80
 8007a94:	20000f6c 	.word	0x20000f6c
 8007a98:	20000f64 	.word	0x20000f64

08007a9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <vTaskSuspendAll+0x18>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	4a03      	ldr	r2, [pc, #12]	; (8007ab4 <vTaskSuspendAll+0x18>)
 8007aa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007aaa:	bf00      	nop
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	20000f88 	.word	0x20000f88

08007ab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ac6:	4b42      	ldr	r3, [pc, #264]	; (8007bd0 <xTaskResumeAll+0x118>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	603b      	str	r3, [r7, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ae4:	f001 f93e 	bl	8008d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ae8:	4b39      	ldr	r3, [pc, #228]	; (8007bd0 <xTaskResumeAll+0x118>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4a38      	ldr	r2, [pc, #224]	; (8007bd0 <xTaskResumeAll+0x118>)
 8007af0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007af2:	4b37      	ldr	r3, [pc, #220]	; (8007bd0 <xTaskResumeAll+0x118>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d162      	bne.n	8007bc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007afa:	4b36      	ldr	r3, [pc, #216]	; (8007bd4 <xTaskResumeAll+0x11c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d05e      	beq.n	8007bc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b02:	e02f      	b.n	8007b64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b04:	4b34      	ldr	r3, [pc, #208]	; (8007bd8 <xTaskResumeAll+0x120>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3318      	adds	r3, #24
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe ff8f 	bl	8006a34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe ff8a 	bl	8006a34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b24:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <xTaskResumeAll+0x124>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d903      	bls.n	8007b34 <xTaskResumeAll+0x7c>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a2a      	ldr	r2, [pc, #168]	; (8007bdc <xTaskResumeAll+0x124>)
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4a27      	ldr	r2, [pc, #156]	; (8007be0 <xTaskResumeAll+0x128>)
 8007b42:	441a      	add	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	f7fe ff15 	bl	800697a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	4b23      	ldr	r3, [pc, #140]	; (8007be4 <xTaskResumeAll+0x12c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d302      	bcc.n	8007b64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b5e:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <xTaskResumeAll+0x130>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b64:	4b1c      	ldr	r3, [pc, #112]	; (8007bd8 <xTaskResumeAll+0x120>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1cb      	bne.n	8007b04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b72:	f000 fb7b 	bl	800826c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b76:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <xTaskResumeAll+0x134>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d010      	beq.n	8007ba4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b82:	f000 f847 	bl	8007c14 <xTaskIncrementTick>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b8c:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <xTaskResumeAll+0x130>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1f1      	bne.n	8007b82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b9e:	4b13      	ldr	r3, [pc, #76]	; (8007bec <xTaskResumeAll+0x134>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ba4:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <xTaskResumeAll+0x130>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d009      	beq.n	8007bc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bac:	2301      	movs	r3, #1
 8007bae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <xTaskResumeAll+0x138>)
 8007bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bc0:	f001 f900 	bl	8008dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000f88 	.word	0x20000f88
 8007bd4:	20000f60 	.word	0x20000f60
 8007bd8:	20000f20 	.word	0x20000f20
 8007bdc:	20000f68 	.word	0x20000f68
 8007be0:	20000a90 	.word	0x20000a90
 8007be4:	20000a8c 	.word	0x20000a8c
 8007be8:	20000f74 	.word	0x20000f74
 8007bec:	20000f70 	.word	0x20000f70
 8007bf0:	e000ed04 	.word	0xe000ed04

08007bf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007bfa:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <xTaskGetTickCount+0x1c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c00:	687b      	ldr	r3, [r7, #4]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20000f64 	.word	0x20000f64

08007c14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c1e:	4b4f      	ldr	r3, [pc, #316]	; (8007d5c <xTaskIncrementTick+0x148>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 808f 	bne.w	8007d46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c28:	4b4d      	ldr	r3, [pc, #308]	; (8007d60 <xTaskIncrementTick+0x14c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c30:	4a4b      	ldr	r2, [pc, #300]	; (8007d60 <xTaskIncrementTick+0x14c>)
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d120      	bne.n	8007c7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c3c:	4b49      	ldr	r3, [pc, #292]	; (8007d64 <xTaskIncrementTick+0x150>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <xTaskIncrementTick+0x48>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	603b      	str	r3, [r7, #0]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <xTaskIncrementTick+0x46>
 8007c5c:	4b41      	ldr	r3, [pc, #260]	; (8007d64 <xTaskIncrementTick+0x150>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	4b41      	ldr	r3, [pc, #260]	; (8007d68 <xTaskIncrementTick+0x154>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a3f      	ldr	r2, [pc, #252]	; (8007d64 <xTaskIncrementTick+0x150>)
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	4a3f      	ldr	r2, [pc, #252]	; (8007d68 <xTaskIncrementTick+0x154>)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	4b3e      	ldr	r3, [pc, #248]	; (8007d6c <xTaskIncrementTick+0x158>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	4a3d      	ldr	r2, [pc, #244]	; (8007d6c <xTaskIncrementTick+0x158>)
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	f000 faf7 	bl	800826c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c7e:	4b3c      	ldr	r3, [pc, #240]	; (8007d70 <xTaskIncrementTick+0x15c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d349      	bcc.n	8007d1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c88:	4b36      	ldr	r3, [pc, #216]	; (8007d64 <xTaskIncrementTick+0x150>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c92:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <xTaskIncrementTick+0x15c>)
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c98:	601a      	str	r2, [r3, #0]
					break;
 8007c9a:	e03f      	b.n	8007d1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9c:	4b31      	ldr	r3, [pc, #196]	; (8007d64 <xTaskIncrementTick+0x150>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d203      	bcs.n	8007cbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cb4:	4a2e      	ldr	r2, [pc, #184]	; (8007d70 <xTaskIncrementTick+0x15c>)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cba:	e02f      	b.n	8007d1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe feb7 	bl	8006a34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3318      	adds	r3, #24
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe feae 	bl	8006a34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cdc:	4b25      	ldr	r3, [pc, #148]	; (8007d74 <xTaskIncrementTick+0x160>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d903      	bls.n	8007cec <xTaskIncrementTick+0xd8>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4a22      	ldr	r2, [pc, #136]	; (8007d74 <xTaskIncrementTick+0x160>)
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4a1f      	ldr	r2, [pc, #124]	; (8007d78 <xTaskIncrementTick+0x164>)
 8007cfa:	441a      	add	r2, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f7fe fe39 	bl	800697a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0c:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <xTaskIncrementTick+0x168>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d3b8      	bcc.n	8007c88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d16:	2301      	movs	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d1a:	e7b5      	b.n	8007c88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d1c:	4b17      	ldr	r3, [pc, #92]	; (8007d7c <xTaskIncrementTick+0x168>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d22:	4915      	ldr	r1, [pc, #84]	; (8007d78 <xTaskIncrementTick+0x164>)
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d901      	bls.n	8007d38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d34:	2301      	movs	r3, #1
 8007d36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d38:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <xTaskIncrementTick+0x16c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007d40:	2301      	movs	r3, #1
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e004      	b.n	8007d50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d46:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <xTaskIncrementTick+0x170>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	4a0d      	ldr	r2, [pc, #52]	; (8007d84 <xTaskIncrementTick+0x170>)
 8007d4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d50:	697b      	ldr	r3, [r7, #20]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000f88 	.word	0x20000f88
 8007d60:	20000f64 	.word	0x20000f64
 8007d64:	20000f18 	.word	0x20000f18
 8007d68:	20000f1c 	.word	0x20000f1c
 8007d6c:	20000f78 	.word	0x20000f78
 8007d70:	20000f80 	.word	0x20000f80
 8007d74:	20000f68 	.word	0x20000f68
 8007d78:	20000a90 	.word	0x20000a90
 8007d7c:	20000a8c 	.word	0x20000a8c
 8007d80:	20000f74 	.word	0x20000f74
 8007d84:	20000f70 	.word	0x20000f70

08007d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d8e:	4b36      	ldr	r3, [pc, #216]	; (8007e68 <vTaskSwitchContext+0xe0>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d96:	4b35      	ldr	r3, [pc, #212]	; (8007e6c <vTaskSwitchContext+0xe4>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d9c:	e05f      	b.n	8007e5e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8007d9e:	4b33      	ldr	r3, [pc, #204]	; (8007e6c <vTaskSwitchContext+0xe4>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007da4:	f7f8 fd3d 	bl	8000822 <getRunTimeCounterValue>
 8007da8:	4603      	mov	r3, r0
 8007daa:	4a31      	ldr	r2, [pc, #196]	; (8007e70 <vTaskSwitchContext+0xe8>)
 8007dac:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007dae:	4b30      	ldr	r3, [pc, #192]	; (8007e70 <vTaskSwitchContext+0xe8>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b30      	ldr	r3, [pc, #192]	; (8007e74 <vTaskSwitchContext+0xec>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d909      	bls.n	8007dce <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007dba:	4b2f      	ldr	r3, [pc, #188]	; (8007e78 <vTaskSwitchContext+0xf0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007dc0:	4a2b      	ldr	r2, [pc, #172]	; (8007e70 <vTaskSwitchContext+0xe8>)
 8007dc2:	6810      	ldr	r0, [r2, #0]
 8007dc4:	4a2b      	ldr	r2, [pc, #172]	; (8007e74 <vTaskSwitchContext+0xec>)
 8007dc6:	6812      	ldr	r2, [r2, #0]
 8007dc8:	1a82      	subs	r2, r0, r2
 8007dca:	440a      	add	r2, r1
 8007dcc:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007dce:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <vTaskSwitchContext+0xe8>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a28      	ldr	r2, [pc, #160]	; (8007e74 <vTaskSwitchContext+0xec>)
 8007dd4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd6:	4b29      	ldr	r3, [pc, #164]	; (8007e7c <vTaskSwitchContext+0xf4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e010      	b.n	8007e00 <vTaskSwitchContext+0x78>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <vTaskSwitchContext+0x72>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	607b      	str	r3, [r7, #4]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <vTaskSwitchContext+0x70>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	491f      	ldr	r1, [pc, #124]	; (8007e80 <vTaskSwitchContext+0xf8>)
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0e4      	beq.n	8007dde <vTaskSwitchContext+0x56>
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4a18      	ldr	r2, [pc, #96]	; (8007e80 <vTaskSwitchContext+0xf8>)
 8007e20:	4413      	add	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	605a      	str	r2, [r3, #4]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	3308      	adds	r3, #8
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d104      	bne.n	8007e44 <vTaskSwitchContext+0xbc>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	605a      	str	r2, [r3, #4]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	4a0b      	ldr	r2, [pc, #44]	; (8007e78 <vTaskSwitchContext+0xf0>)
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	4a0b      	ldr	r2, [pc, #44]	; (8007e7c <vTaskSwitchContext+0xf4>)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e54:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <vTaskSwitchContext+0xf0>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	335c      	adds	r3, #92	; 0x5c
 8007e5a:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <vTaskSwitchContext+0xfc>)
 8007e5c:	6013      	str	r3, [r2, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000f88 	.word	0x20000f88
 8007e6c:	20000f74 	.word	0x20000f74
 8007e70:	20000f90 	.word	0x20000f90
 8007e74:	20000f8c 	.word	0x20000f8c
 8007e78:	20000a8c 	.word	0x20000a8c
 8007e7c:	20000f68 	.word	0x20000f68
 8007e80:	20000a90 	.word	0x20000a90
 8007e84:	20000010 	.word	0x20000010

08007e88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	60fb      	str	r3, [r7, #12]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eae:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <vTaskPlaceOnEventList+0x44>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3318      	adds	r3, #24
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fe fd83 	bl	80069c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	6838      	ldr	r0, [r7, #0]
 8007ec0:	f000 fa80 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20000a8c 	.word	0x20000a8c

08007ed0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	617b      	str	r3, [r7, #20]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <vTaskPlaceOnEventListRestricted+0x54>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3318      	adds	r3, #24
 8007efe:	4619      	mov	r1, r3
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7fe fd3a 	bl	800697a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	68b8      	ldr	r0, [r7, #8]
 8007f16:	f000 fa55 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
	}
 8007f1a:	bf00      	nop
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000a8c 	.word	0x20000a8c

08007f28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	60fb      	str	r3, [r7, #12]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	3318      	adds	r3, #24
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe fd6b 	bl	8006a34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f5e:	4b1e      	ldr	r3, [pc, #120]	; (8007fd8 <xTaskRemoveFromEventList+0xb0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d11d      	bne.n	8007fa2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fd62 	bl	8006a34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f74:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <xTaskRemoveFromEventList+0xb4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d903      	bls.n	8007f84 <xTaskRemoveFromEventList+0x5c>
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	4a16      	ldr	r2, [pc, #88]	; (8007fdc <xTaskRemoveFromEventList+0xb4>)
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <xTaskRemoveFromEventList+0xb8>)
 8007f92:	441a      	add	r2, r3
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7fe fced 	bl	800697a <vListInsertEnd>
 8007fa0:	e005      	b.n	8007fae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	3318      	adds	r3, #24
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	480e      	ldr	r0, [pc, #56]	; (8007fe4 <xTaskRemoveFromEventList+0xbc>)
 8007faa:	f7fe fce6 	bl	800697a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <xTaskRemoveFromEventList+0xc0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d905      	bls.n	8007fc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fc0:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <xTaskRemoveFromEventList+0xc4>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e001      	b.n	8007fcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fcc:	697b      	ldr	r3, [r7, #20]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000f88 	.word	0x20000f88
 8007fdc:	20000f68 	.word	0x20000f68
 8007fe0:	20000a90 	.word	0x20000a90
 8007fe4:	20000f20 	.word	0x20000f20
 8007fe8:	20000a8c 	.word	0x20000a8c
 8007fec:	20000f74 	.word	0x20000f74

08007ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ff8:	4b06      	ldr	r3, [pc, #24]	; (8008014 <vTaskInternalSetTimeOutState+0x24>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008000:	4b05      	ldr	r3, [pc, #20]	; (8008018 <vTaskInternalSetTimeOutState+0x28>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	605a      	str	r2, [r3, #4]
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	20000f78 	.word	0x20000f78
 8008018:	20000f64 	.word	0x20000f64

0800801c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	613b      	str	r3, [r7, #16]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	60fb      	str	r3, [r7, #12]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800805e:	f000 fe81 	bl	8008d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008062:	4b1d      	ldr	r3, [pc, #116]	; (80080d8 <xTaskCheckForTimeOut+0xbc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800807a:	d102      	bne.n	8008082 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	e023      	b.n	80080ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <xTaskCheckForTimeOut+0xc0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d007      	beq.n	800809e <xTaskCheckForTimeOut+0x82>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	e015      	b.n	80080ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d20b      	bcs.n	80080c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff ff9b 	bl	8007ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	e004      	b.n	80080ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ca:	f000 fe7b 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 80080ce:	69fb      	ldr	r3, [r7, #28]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000f64 	.word	0x20000f64
 80080dc:	20000f78 	.word	0x20000f78

080080e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080e4:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <vTaskMissedYield+0x14>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
}
 80080ea:	bf00      	nop
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	20000f74 	.word	0x20000f74

080080f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008100:	f000 f852 	bl	80081a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <prvIdleTask+0x28>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d9f9      	bls.n	8008100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <prvIdleTask+0x2c>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800811c:	e7f0      	b.n	8008100 <prvIdleTask+0x8>
 800811e:	bf00      	nop
 8008120:	20000a90 	.word	0x20000a90
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800812e:	2300      	movs	r3, #0
 8008130:	607b      	str	r3, [r7, #4]
 8008132:	e00c      	b.n	800814e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4a12      	ldr	r2, [pc, #72]	; (8008188 <prvInitialiseTaskLists+0x60>)
 8008140:	4413      	add	r3, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fbec 	bl	8006920 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3301      	adds	r3, #1
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b37      	cmp	r3, #55	; 0x37
 8008152:	d9ef      	bls.n	8008134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008154:	480d      	ldr	r0, [pc, #52]	; (800818c <prvInitialiseTaskLists+0x64>)
 8008156:	f7fe fbe3 	bl	8006920 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800815a:	480d      	ldr	r0, [pc, #52]	; (8008190 <prvInitialiseTaskLists+0x68>)
 800815c:	f7fe fbe0 	bl	8006920 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008160:	480c      	ldr	r0, [pc, #48]	; (8008194 <prvInitialiseTaskLists+0x6c>)
 8008162:	f7fe fbdd 	bl	8006920 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008166:	480c      	ldr	r0, [pc, #48]	; (8008198 <prvInitialiseTaskLists+0x70>)
 8008168:	f7fe fbda 	bl	8006920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800816c:	480b      	ldr	r0, [pc, #44]	; (800819c <prvInitialiseTaskLists+0x74>)
 800816e:	f7fe fbd7 	bl	8006920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008172:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <prvInitialiseTaskLists+0x78>)
 8008174:	4a05      	ldr	r2, [pc, #20]	; (800818c <prvInitialiseTaskLists+0x64>)
 8008176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008178:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <prvInitialiseTaskLists+0x7c>)
 800817a:	4a05      	ldr	r2, [pc, #20]	; (8008190 <prvInitialiseTaskLists+0x68>)
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000a90 	.word	0x20000a90
 800818c:	20000ef0 	.word	0x20000ef0
 8008190:	20000f04 	.word	0x20000f04
 8008194:	20000f20 	.word	0x20000f20
 8008198:	20000f34 	.word	0x20000f34
 800819c:	20000f4c 	.word	0x20000f4c
 80081a0:	20000f18 	.word	0x20000f18
 80081a4:	20000f1c 	.word	0x20000f1c

080081a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081ae:	e019      	b.n	80081e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081b0:	f000 fdd8 	bl	8008d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b4:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <prvCheckTasksWaitingTermination+0x50>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fc37 	bl	8006a34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081c6:	4b0d      	ldr	r3, [pc, #52]	; (80081fc <prvCheckTasksWaitingTermination+0x54>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	4a0b      	ldr	r2, [pc, #44]	; (80081fc <prvCheckTasksWaitingTermination+0x54>)
 80081ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <prvCheckTasksWaitingTermination+0x58>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	4a0a      	ldr	r2, [pc, #40]	; (8008200 <prvCheckTasksWaitingTermination+0x58>)
 80081d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081da:	f000 fdf3 	bl	8008dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f810 	bl	8008204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e4:	4b06      	ldr	r3, [pc, #24]	; (8008200 <prvCheckTasksWaitingTermination+0x58>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e1      	bne.n	80081b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000f34 	.word	0x20000f34
 80081fc:	20000f60 	.word	0x20000f60
 8008200:	20000f48 	.word	0x20000f48

08008204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	335c      	adds	r3, #92	; 0x5c
 8008210:	4618      	mov	r0, r3
 8008212:	f001 fa77 	bl	8009704 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d108      	bne.n	8008232 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008224:	4618      	mov	r0, r3
 8008226:	f000 ff8b 	bl	8009140 <vPortFree>
				vPortFree( pxTCB );
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 ff88 	bl	8009140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008230:	e018      	b.n	8008264 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008238:	2b01      	cmp	r3, #1
 800823a:	d103      	bne.n	8008244 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 ff7f 	bl	8009140 <vPortFree>
	}
 8008242:	e00f      	b.n	8008264 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800824a:	2b02      	cmp	r3, #2
 800824c:	d00a      	beq.n	8008264 <prvDeleteTCB+0x60>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	60fb      	str	r3, [r7, #12]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <prvDeleteTCB+0x5e>
	}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008272:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <prvResetNextTaskUnblockTime+0x38>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d104      	bne.n	8008286 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <prvResetNextTaskUnblockTime+0x3c>)
 800827e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008282:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008284:	e008      	b.n	8008298 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008286:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <prvResetNextTaskUnblockTime+0x38>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	4a04      	ldr	r2, [pc, #16]	; (80082a8 <prvResetNextTaskUnblockTime+0x3c>)
 8008296:	6013      	str	r3, [r2, #0]
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	20000f18 	.word	0x20000f18
 80082a8:	20000f80 	.word	0x20000f80

080082ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <xTaskGetSchedulerState+0x34>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082ba:	2301      	movs	r3, #1
 80082bc:	607b      	str	r3, [r7, #4]
 80082be:	e008      	b.n	80082d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c0:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <xTaskGetSchedulerState+0x38>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082c8:	2302      	movs	r3, #2
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	e001      	b.n	80082d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082ce:	2300      	movs	r3, #0
 80082d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082d2:	687b      	ldr	r3, [r7, #4]
	}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	20000f6c 	.word	0x20000f6c
 80082e4:	20000f88 	.word	0x20000f88

080082e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d056      	beq.n	80083ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082fe:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <xTaskPriorityDisinherit+0xd0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	429a      	cmp	r2, r3
 8008306:	d00a      	beq.n	800831e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	60fb      	str	r3, [r7, #12]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10a      	bne.n	800833c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	60bb      	str	r3, [r7, #8]
}
 8008338:	bf00      	nop
 800833a:	e7fe      	b.n	800833a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008340:	1e5a      	subs	r2, r3, #1
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800834e:	429a      	cmp	r2, r3
 8008350:	d02c      	beq.n	80083ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	2b00      	cmp	r3, #0
 8008358:	d128      	bne.n	80083ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	3304      	adds	r3, #4
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fb68 	bl	8006a34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837c:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <xTaskPriorityDisinherit+0xd4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	429a      	cmp	r2, r3
 8008382:	d903      	bls.n	800838c <xTaskPriorityDisinherit+0xa4>
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	4a0c      	ldr	r2, [pc, #48]	; (80083bc <xTaskPriorityDisinherit+0xd4>)
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <xTaskPriorityDisinherit+0xd8>)
 800839a:	441a      	add	r2, r3
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	3304      	adds	r3, #4
 80083a0:	4619      	mov	r1, r3
 80083a2:	4610      	mov	r0, r2
 80083a4:	f7fe fae9 	bl	800697a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083ac:	697b      	ldr	r3, [r7, #20]
	}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20000a8c 	.word	0x20000a8c
 80083bc:	20000f68 	.word	0x20000f68
 80083c0:	20000a90 	.word	0x20000a90

080083c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ce:	4b21      	ldr	r3, [pc, #132]	; (8008454 <prvAddCurrentTaskToDelayedList+0x90>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d4:	4b20      	ldr	r3, [pc, #128]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3304      	adds	r3, #4
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fb2a 	bl	8006a34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083e6:	d10a      	bne.n	80083fe <prvAddCurrentTaskToDelayedList+0x3a>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ee:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4619      	mov	r1, r3
 80083f6:	4819      	ldr	r0, [pc, #100]	; (800845c <prvAddCurrentTaskToDelayedList+0x98>)
 80083f8:	f7fe fabf 	bl	800697a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083fc:	e026      	b.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4413      	add	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	429a      	cmp	r2, r3
 8008414:	d209      	bcs.n	800842a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fe facd 	bl	80069c2 <vListInsert>
}
 8008428:	e010      	b.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800842a:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3304      	adds	r3, #4
 8008434:	4619      	mov	r1, r3
 8008436:	4610      	mov	r0, r2
 8008438:	f7fe fac3 	bl	80069c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	d202      	bcs.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008446:	4a08      	ldr	r2, [pc, #32]	; (8008468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	6013      	str	r3, [r2, #0]
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20000f64 	.word	0x20000f64
 8008458:	20000a8c 	.word	0x20000a8c
 800845c:	20000f4c 	.word	0x20000f4c
 8008460:	20000f1c 	.word	0x20000f1c
 8008464:	20000f18 	.word	0x20000f18
 8008468:	20000f80 	.word	0x20000f80

0800846c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008476:	f000 fb07 	bl	8008a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800847a:	4b1c      	ldr	r3, [pc, #112]	; (80084ec <xTimerCreateTimerTask+0x80>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d021      	beq.n	80084c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800848a:	1d3a      	adds	r2, r7, #4
 800848c:	f107 0108 	add.w	r1, r7, #8
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe fa29 	bl	80068ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	9202      	str	r2, [sp, #8]
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	2306      	movs	r3, #6
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	2300      	movs	r3, #0
 80084aa:	460a      	mov	r2, r1
 80084ac:	4910      	ldr	r1, [pc, #64]	; (80084f0 <xTimerCreateTimerTask+0x84>)
 80084ae:	4811      	ldr	r0, [pc, #68]	; (80084f4 <xTimerCreateTimerTask+0x88>)
 80084b0:	f7ff f890 	bl	80075d4 <xTaskCreateStatic>
 80084b4:	4603      	mov	r3, r0
 80084b6:	4a10      	ldr	r2, [pc, #64]	; (80084f8 <xTimerCreateTimerTask+0x8c>)
 80084b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084ba:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <xTimerCreateTimerTask+0x8c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084c2:	2301      	movs	r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	613b      	str	r3, [r7, #16]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084e2:	697b      	ldr	r3, [r7, #20]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	20000fc4 	.word	0x20000fc4
 80084f0:	080098e8 	.word	0x080098e8
 80084f4:	08008631 	.word	0x08008631
 80084f8:	20000fc8 	.word	0x20000fc8

080084fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	; 0x28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800850a:	2300      	movs	r3, #0
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	623b      	str	r3, [r7, #32]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800852a:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <xTimerGenericCommand+0x98>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d02a      	beq.n	8008588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b05      	cmp	r3, #5
 8008542:	dc18      	bgt.n	8008576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008544:	f7ff feb2 	bl	80082ac <xTaskGetSchedulerState>
 8008548:	4603      	mov	r3, r0
 800854a:	2b02      	cmp	r3, #2
 800854c:	d109      	bne.n	8008562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800854e:	4b11      	ldr	r3, [pc, #68]	; (8008594 <xTimerGenericCommand+0x98>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	f107 0110 	add.w	r1, r7, #16
 8008556:	2300      	movs	r3, #0
 8008558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855a:	f7fe fbd3 	bl	8006d04 <xQueueGenericSend>
 800855e:	6278      	str	r0, [r7, #36]	; 0x24
 8008560:	e012      	b.n	8008588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008562:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <xTimerGenericCommand+0x98>)
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	f107 0110 	add.w	r1, r7, #16
 800856a:	2300      	movs	r3, #0
 800856c:	2200      	movs	r2, #0
 800856e:	f7fe fbc9 	bl	8006d04 <xQueueGenericSend>
 8008572:	6278      	str	r0, [r7, #36]	; 0x24
 8008574:	e008      	b.n	8008588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008576:	4b07      	ldr	r3, [pc, #28]	; (8008594 <xTimerGenericCommand+0x98>)
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	f107 0110 	add.w	r1, r7, #16
 800857e:	2300      	movs	r3, #0
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	f7fe fcbd 	bl	8006f00 <xQueueGenericSendFromISR>
 8008586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800858a:	4618      	mov	r0, r3
 800858c:	3728      	adds	r7, #40	; 0x28
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000fc4 	.word	0x20000fc4

08008598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af02      	add	r7, sp, #8
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a2:	4b22      	ldr	r3, [pc, #136]	; (800862c <prvProcessExpiredTimer+0x94>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe fa3f 	bl	8006a34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d022      	beq.n	800860a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	18d1      	adds	r1, r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	6978      	ldr	r0, [r7, #20]
 80085d2:	f000 f8d1 	bl	8008778 <prvInsertTimerInActiveList>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01f      	beq.n	800861c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085dc:	2300      	movs	r3, #0
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	2100      	movs	r1, #0
 80085e6:	6978      	ldr	r0, [r7, #20]
 80085e8:	f7ff ff88 	bl	80084fc <xTimerGenericCommand>
 80085ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d113      	bne.n	800861c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60fb      	str	r3, [r7, #12]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	b2da      	uxtb	r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	6978      	ldr	r0, [r7, #20]
 8008622:	4798      	blx	r3
}
 8008624:	bf00      	nop
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20000fbc 	.word	0x20000fbc

08008630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f857 	bl	80086f0 <prvGetNextExpireTime>
 8008642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f803 	bl	8008654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800864e:	f000 f8d5 	bl	80087fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008652:	e7f1      	b.n	8008638 <prvTimerTask+0x8>

08008654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800865e:	f7ff fa1d 	bl	8007a9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f866 	bl	8008738 <prvSampleTimeNow>
 800866c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d130      	bne.n	80086d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <prvProcessTimerOrBlockTask+0x3c>
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	429a      	cmp	r2, r3
 8008680:	d806      	bhi.n	8008690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008682:	f7ff fa19 	bl	8007ab8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008686:	68f9      	ldr	r1, [r7, #12]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ff85 	bl	8008598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800868e:	e024      	b.n	80086da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d008      	beq.n	80086a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008696:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <prvProcessTimerOrBlockTask+0x90>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <prvProcessTimerOrBlockTask+0x50>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <prvProcessTimerOrBlockTask+0x52>
 80086a4:	2300      	movs	r3, #0
 80086a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <prvProcessTimerOrBlockTask+0x94>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7fe ff59 	bl	800756c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086ba:	f7ff f9fd 	bl	8007ab8 <xTaskResumeAll>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086c4:	4b09      	ldr	r3, [pc, #36]	; (80086ec <prvProcessTimerOrBlockTask+0x98>)
 80086c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	f3bf 8f6f 	isb	sy
}
 80086d4:	e001      	b.n	80086da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086d6:	f7ff f9ef 	bl	8007ab8 <xTaskResumeAll>
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20000fc0 	.word	0x20000fc0
 80086e8:	20000fc4 	.word	0x20000fc4
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086f8:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <prvGetNextExpireTime+0x44>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <prvGetNextExpireTime+0x16>
 8008702:	2201      	movs	r2, #1
 8008704:	e000      	b.n	8008708 <prvGetNextExpireTime+0x18>
 8008706:	2200      	movs	r2, #0
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <prvGetNextExpireTime+0x44>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	e001      	b.n	8008724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008724:	68fb      	ldr	r3, [r7, #12]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000fbc 	.word	0x20000fbc

08008738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008740:	f7ff fa58 	bl	8007bf4 <xTaskGetTickCount>
 8008744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <prvSampleTimeNow+0x3c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	429a      	cmp	r2, r3
 800874e:	d205      	bcs.n	800875c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008750:	f000 f936 	bl	80089c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	e002      	b.n	8008762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008762:	4a04      	ldr	r2, [pc, #16]	; (8008774 <prvSampleTimeNow+0x3c>)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008768:	68fb      	ldr	r3, [r7, #12]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000fcc 	.word	0x20000fcc

08008778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d812      	bhi.n	80087c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d302      	bcc.n	80087b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e01b      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087b2:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <prvInsertTimerInActiveList+0x7c>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f7fe f900 	bl	80069c2 <vListInsert>
 80087c2:	e012      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d206      	bcs.n	80087da <prvInsertTimerInActiveList+0x62>
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d302      	bcc.n	80087da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e007      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087da:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <prvInsertTimerInActiveList+0x80>)
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7fe f8ec 	bl	80069c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087ea:	697b      	ldr	r3, [r7, #20]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000fc0 	.word	0x20000fc0
 80087f8:	20000fbc 	.word	0x20000fbc

080087fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08e      	sub	sp, #56	; 0x38
 8008800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008802:	e0ca      	b.n	800899a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	da18      	bge.n	800883c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800880a:	1d3b      	adds	r3, r7, #4
 800880c:	3304      	adds	r3, #4
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	61fb      	str	r3, [r7, #28]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008832:	6850      	ldr	r0, [r2, #4]
 8008834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008836:	6892      	ldr	r2, [r2, #8]
 8008838:	4611      	mov	r1, r2
 800883a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f2c0 80aa 	blt.w	8008998 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	3304      	adds	r3, #4
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe f8ed 	bl	8006a34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800885a:	463b      	mov	r3, r7
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff ff6b 	bl	8008738 <prvSampleTimeNow>
 8008862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b09      	cmp	r3, #9
 8008868:	f200 8097 	bhi.w	800899a <prvProcessReceivedCommands+0x19e>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <prvProcessReceivedCommands+0x78>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	0800889d 	.word	0x0800889d
 8008878:	0800889d 	.word	0x0800889d
 800887c:	0800889d 	.word	0x0800889d
 8008880:	08008911 	.word	0x08008911
 8008884:	08008925 	.word	0x08008925
 8008888:	0800896f 	.word	0x0800896f
 800888c:	0800889d 	.word	0x0800889d
 8008890:	0800889d 	.word	0x0800889d
 8008894:	08008911 	.word	0x08008911
 8008898:	08008925 	.word	0x08008925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a2:	f043 0301 	orr.w	r3, r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	18d1      	adds	r1, r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088bc:	f7ff ff5c 	bl	8008778 <prvInsertTimerInActiveList>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d069      	beq.n	800899a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d05e      	beq.n	800899a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	441a      	add	r2, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ee:	f7ff fe05 	bl	80084fc <xTimerGenericCommand>
 80088f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d14f      	bne.n	800899a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	61bb      	str	r3, [r7, #24]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008922:	e03a      	b.n	800899a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	b2da      	uxtb	r2, r3
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	617b      	str	r3, [r7, #20]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	18d1      	adds	r1, r2, r3
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008968:	f7ff ff06 	bl	8008778 <prvInsertTimerInActiveList>
					break;
 800896c:	e015      	b.n	800899a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d103      	bne.n	8008984 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800897c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800897e:	f000 fbdf 	bl	8009140 <vPortFree>
 8008982:	e00a      	b.n	800899a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800898a:	f023 0301 	bic.w	r3, r3, #1
 800898e:	b2da      	uxtb	r2, r3
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008996:	e000      	b.n	800899a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800899a:	4b08      	ldr	r3, [pc, #32]	; (80089bc <prvProcessReceivedCommands+0x1c0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	1d39      	adds	r1, r7, #4
 80089a0:	2200      	movs	r2, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fb48 	bl	8007038 <xQueueReceive>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f47f af2a 	bne.w	8008804 <prvProcessReceivedCommands+0x8>
	}
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	3730      	adds	r7, #48	; 0x30
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000fc4 	.word	0x20000fc4

080089c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089c6:	e048      	b.n	8008a5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089c8:	4b2d      	ldr	r3, [pc, #180]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	4b2b      	ldr	r3, [pc, #172]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3304      	adds	r3, #4
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe f827 	bl	8006a34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d02e      	beq.n	8008a5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	4413      	add	r3, r2
 8008a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d90e      	bls.n	8008a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a1a:	4b19      	ldr	r3, [pc, #100]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4619      	mov	r1, r3
 8008a24:	4610      	mov	r0, r2
 8008a26:	f7fd ffcc 	bl	80069c2 <vListInsert>
 8008a2a:	e016      	b.n	8008a5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	2300      	movs	r3, #0
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	2100      	movs	r1, #0
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7ff fd60 	bl	80084fc <xTimerGenericCommand>
 8008a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	603b      	str	r3, [r7, #0]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a5a:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1b1      	bne.n	80089c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a6a:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <prvSwitchTimerLists+0xc4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a72:	4a04      	ldr	r2, [pc, #16]	; (8008a84 <prvSwitchTimerLists+0xc4>)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	6013      	str	r3, [r2, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20000fbc 	.word	0x20000fbc
 8008a84:	20000fc0 	.word	0x20000fc0

08008a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a8e:	f000 f969 	bl	8008d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d120      	bne.n	8008adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a9a:	4814      	ldr	r0, [pc, #80]	; (8008aec <prvCheckForValidListAndQueue+0x64>)
 8008a9c:	f7fd ff40 	bl	8006920 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008aa0:	4813      	ldr	r0, [pc, #76]	; (8008af0 <prvCheckForValidListAndQueue+0x68>)
 8008aa2:	f7fd ff3d 	bl	8006920 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <prvCheckForValidListAndQueue+0x6c>)
 8008aa8:	4a10      	ldr	r2, [pc, #64]	; (8008aec <prvCheckForValidListAndQueue+0x64>)
 8008aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008aac:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <prvCheckForValidListAndQueue+0x70>)
 8008aae:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <prvCheckForValidListAndQueue+0x68>)
 8008ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <prvCheckForValidListAndQueue+0x74>)
 8008ab8:	4a11      	ldr	r2, [pc, #68]	; (8008b00 <prvCheckForValidListAndQueue+0x78>)
 8008aba:	2110      	movs	r1, #16
 8008abc:	200a      	movs	r0, #10
 8008abe:	f7fe f84b 	bl	8006b58 <xQueueGenericCreateStatic>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ac8:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	490b      	ldr	r1, [pc, #44]	; (8008b04 <prvCheckForValidListAndQueue+0x7c>)
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fd1e 	bl	8007518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008adc:	f000 f972 	bl	8008dc4 <vPortExitCritical>
}
 8008ae0:	bf00      	nop
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000fc4 	.word	0x20000fc4
 8008aec:	20000f94 	.word	0x20000f94
 8008af0:	20000fa8 	.word	0x20000fa8
 8008af4:	20000fbc 	.word	0x20000fbc
 8008af8:	20000fc0 	.word	0x20000fc0
 8008afc:	20001070 	.word	0x20001070
 8008b00:	20000fd0 	.word	0x20000fd0
 8008b04:	080098f0 	.word	0x080098f0

08008b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3b04      	subs	r3, #4
 8008b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f023 0201 	bic.w	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b38:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <pxPortInitialiseStack+0x64>)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b14      	subs	r3, #20
 8008b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f06f 0202 	mvn.w	r2, #2
 8008b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3b20      	subs	r3, #32
 8008b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	08008b71 	.word	0x08008b71

08008b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <prvTaskExitError+0x54>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b82:	d00a      	beq.n	8008b9a <prvTaskExitError+0x2a>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	60fb      	str	r3, [r7, #12]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <prvTaskExitError+0x28>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	60bb      	str	r3, [r7, #8]
}
 8008bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bae:	bf00      	nop
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0fc      	beq.n	8008bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	2000000c 	.word	0x2000000c
	...

08008bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <pxCurrentTCBConst2>)
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	6808      	ldr	r0, [r1, #0]
 8008bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bda:	f380 8809 	msr	PSP, r0
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8811 	msr	BASEPRI, r0
 8008bea:	4770      	bx	lr
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst2>:
 8008bf0:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bf8:	4808      	ldr	r0, [pc, #32]	; (8008c1c <prvPortStartFirstTask+0x24>)
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	6800      	ldr	r0, [r0, #0]
 8008bfe:	f380 8808 	msr	MSP, r0
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8814 	msr	CONTROL, r0
 8008c0a:	b662      	cpsie	i
 8008c0c:	b661      	cpsie	f
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	df00      	svc	0
 8008c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c1a:	bf00      	nop
 8008c1c:	e000ed08 	.word	0xe000ed08

08008c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c26:	4b46      	ldr	r3, [pc, #280]	; (8008d40 <xPortStartScheduler+0x120>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a46      	ldr	r2, [pc, #280]	; (8008d44 <xPortStartScheduler+0x124>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d10a      	bne.n	8008c46 <xPortStartScheduler+0x26>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	613b      	str	r3, [r7, #16]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c46:	4b3e      	ldr	r3, [pc, #248]	; (8008d40 <xPortStartScheduler+0x120>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a3f      	ldr	r2, [pc, #252]	; (8008d48 <xPortStartScheduler+0x128>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d10a      	bne.n	8008c66 <xPortStartScheduler+0x46>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	60fb      	str	r3, [r7, #12]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c66:	4b39      	ldr	r3, [pc, #228]	; (8008d4c <xPortStartScheduler+0x12c>)
 8008c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	22ff      	movs	r2, #255	; 0xff
 8008c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <xPortStartScheduler+0x130>)
 8008c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c8e:	4b31      	ldr	r3, [pc, #196]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c94:	e009      	b.n	8008caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c96:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	4a2d      	ldr	r2, [pc, #180]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb2:	2b80      	cmp	r3, #128	; 0x80
 8008cb4:	d0ef      	beq.n	8008c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f1c3 0307 	rsb	r3, r3, #7
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d00a      	beq.n	8008cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60bb      	str	r3, [r7, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <xPortStartScheduler+0x134>)
 8008ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ce2:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <xPortStartScheduler+0x134>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cea:	4a1a      	ldr	r2, [pc, #104]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cf6:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <xPortStartScheduler+0x138>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a17      	ldr	r2, [pc, #92]	; (8008d58 <xPortStartScheduler+0x138>)
 8008cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d02:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <xPortStartScheduler+0x138>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <xPortStartScheduler+0x138>)
 8008d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d0e:	f000 f8dd 	bl	8008ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <xPortStartScheduler+0x13c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d18:	f000 f8fc 	bl	8008f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <xPortStartScheduler+0x140>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0f      	ldr	r2, [pc, #60]	; (8008d60 <xPortStartScheduler+0x140>)
 8008d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d28:	f7ff ff66 	bl	8008bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d2c:	f7ff f82c 	bl	8007d88 <vTaskSwitchContext>
	prvTaskExitError();
 8008d30:	f7ff ff1e 	bl	8008b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	e000ed00 	.word	0xe000ed00
 8008d44:	410fc271 	.word	0x410fc271
 8008d48:	410fc270 	.word	0x410fc270
 8008d4c:	e000e400 	.word	0xe000e400
 8008d50:	200010c0 	.word	0x200010c0
 8008d54:	200010c4 	.word	0x200010c4
 8008d58:	e000ed20 	.word	0xe000ed20
 8008d5c:	2000000c 	.word	0x2000000c
 8008d60:	e000ef34 	.word	0xe000ef34

08008d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	607b      	str	r3, [r7, #4]
}
 8008d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a0d      	ldr	r2, [pc, #52]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d10f      	bne.n	8008db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <vPortEnterCritical+0x5c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	603b      	str	r3, [r7, #0]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <vPortEnterCritical+0x4a>
	}
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	2000000c 	.word	0x2000000c
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <vPortExitCritical+0x50>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <vPortExitCritical+0x24>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	607b      	str	r3, [r7, #4]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <vPortExitCritical+0x50>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4a09      	ldr	r2, [pc, #36]	; (8008e14 <vPortExitCritical+0x50>)
 8008df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008df2:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <vPortExitCritical+0x50>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d105      	bne.n	8008e06 <vPortExitCritical+0x42>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f383 8811 	msr	BASEPRI, r3
}
 8008e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	2000000c 	.word	0x2000000c
	...

08008e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e20:	f3ef 8009 	mrs	r0, PSP
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <pxCurrentTCBConst>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	f01e 0f10 	tst.w	lr, #16
 8008e30:	bf08      	it	eq
 8008e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	6010      	str	r0, [r2, #0]
 8008e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e44:	f380 8811 	msr	BASEPRI, r0
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f7fe ff9a 	bl	8007d88 <vTaskSwitchContext>
 8008e54:	f04f 0000 	mov.w	r0, #0
 8008e58:	f380 8811 	msr	BASEPRI, r0
 8008e5c:	bc09      	pop	{r0, r3}
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	6808      	ldr	r0, [r1, #0]
 8008e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e66:	f01e 0f10 	tst.w	lr, #16
 8008e6a:	bf08      	it	eq
 8008e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e70:	f380 8809 	msr	PSP, r0
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst>:
 8008e80:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	607b      	str	r3, [r7, #4]
}
 8008ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ea2:	f7fe feb7 	bl	8007c14 <xTaskIncrementTick>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <xPortSysTickHandler+0x40>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f383 8811 	msr	BASEPRI, r3
}
 8008ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed04 	.word	0xe000ed04

08008ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	; (8008f04 <vPortSetupTimerInterrupt+0x38>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008edc:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <vPortSetupTimerInterrupt+0x3c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <vPortSetupTimerInterrupt+0x40>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	099b      	lsrs	r3, r3, #6
 8008ee8:	4a09      	ldr	r2, [pc, #36]	; (8008f10 <vPortSetupTimerInterrupt+0x44>)
 8008eea:	3b01      	subs	r3, #1
 8008eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eee:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	601a      	str	r2, [r3, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	e000e010 	.word	0xe000e010
 8008f04:	e000e018 	.word	0xe000e018
 8008f08:	20000000 	.word	0x20000000
 8008f0c:	10624dd3 	.word	0x10624dd3
 8008f10:	e000e014 	.word	0xe000e014

08008f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f24 <vPortEnableVFP+0x10>
 8008f18:	6801      	ldr	r1, [r0, #0]
 8008f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f1e:	6001      	str	r1, [r0, #0]
 8008f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f22:	bf00      	nop
 8008f24:	e000ed88 	.word	0xe000ed88

08008f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f2e:	f3ef 8305 	mrs	r3, IPSR
 8008f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b0f      	cmp	r3, #15
 8008f38:	d914      	bls.n	8008f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f3a:	4a17      	ldr	r2, [pc, #92]	; (8008f98 <vPortValidateInterruptPriority+0x70>)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f44:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <vPortValidateInterruptPriority+0x74>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	7afa      	ldrb	r2, [r7, #11]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d20a      	bcs.n	8008f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f64:	4b0e      	ldr	r3, [pc, #56]	; (8008fa0 <vPortValidateInterruptPriority+0x78>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <vPortValidateInterruptPriority+0x7c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d90a      	bls.n	8008f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	603b      	str	r3, [r7, #0]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <vPortValidateInterruptPriority+0x60>
	}
 8008f8a:	bf00      	nop
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	e000e3f0 	.word	0xe000e3f0
 8008f9c:	200010c0 	.word	0x200010c0
 8008fa0:	e000ed0c 	.word	0xe000ed0c
 8008fa4:	200010c4 	.word	0x200010c4

08008fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fb4:	f7fe fd72 	bl	8007a9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fb8:	4b5b      	ldr	r3, [pc, #364]	; (8009128 <pvPortMalloc+0x180>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fc0:	f000 f920 	bl	8009204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fc4:	4b59      	ldr	r3, [pc, #356]	; (800912c <pvPortMalloc+0x184>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f040 8093 	bne.w	80090f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01d      	beq.n	8009014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fd8:	2208      	movs	r2, #8
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d014      	beq.n	8009014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f023 0307 	bic.w	r3, r3, #7
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <pvPortMalloc+0x6c>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	617b      	str	r3, [r7, #20]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d06e      	beq.n	80090f8 <pvPortMalloc+0x150>
 800901a:	4b45      	ldr	r3, [pc, #276]	; (8009130 <pvPortMalloc+0x188>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d869      	bhi.n	80090f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009024:	4b43      	ldr	r3, [pc, #268]	; (8009134 <pvPortMalloc+0x18c>)
 8009026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009028:	4b42      	ldr	r3, [pc, #264]	; (8009134 <pvPortMalloc+0x18c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800902e:	e004      	b.n	800903a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d903      	bls.n	800904c <pvPortMalloc+0xa4>
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1f1      	bne.n	8009030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800904c:	4b36      	ldr	r3, [pc, #216]	; (8009128 <pvPortMalloc+0x180>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009052:	429a      	cmp	r2, r3
 8009054:	d050      	beq.n	80090f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2208      	movs	r2, #8
 800905c:	4413      	add	r3, r2
 800905e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	2308      	movs	r3, #8
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	429a      	cmp	r2, r3
 8009076:	d91f      	bls.n	80090b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4413      	add	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <pvPortMalloc+0xf8>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	613b      	str	r3, [r7, #16]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090b2:	69b8      	ldr	r0, [r7, #24]
 80090b4:	f000 f908 	bl	80092c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090b8:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <pvPortMalloc+0x188>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <pvPortMalloc+0x188>)
 80090c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090c6:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <pvPortMalloc+0x188>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <pvPortMalloc+0x190>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d203      	bcs.n	80090da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090d2:	4b17      	ldr	r3, [pc, #92]	; (8009130 <pvPortMalloc+0x188>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a18      	ldr	r2, [pc, #96]	; (8009138 <pvPortMalloc+0x190>)
 80090d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <pvPortMalloc+0x184>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090ee:	4b13      	ldr	r3, [pc, #76]	; (800913c <pvPortMalloc+0x194>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	4a11      	ldr	r2, [pc, #68]	; (800913c <pvPortMalloc+0x194>)
 80090f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090f8:	f7fe fcde 	bl	8007ab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <pvPortMalloc+0x174>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60fb      	str	r3, [r7, #12]
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <pvPortMalloc+0x172>
	return pvReturn;
 800911c:	69fb      	ldr	r3, [r7, #28]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3728      	adds	r7, #40	; 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20003010 	.word	0x20003010
 800912c:	20003024 	.word	0x20003024
 8009130:	20003014 	.word	0x20003014
 8009134:	20003008 	.word	0x20003008
 8009138:	20003018 	.word	0x20003018
 800913c:	2000301c 	.word	0x2000301c

08009140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d04d      	beq.n	80091ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009152:	2308      	movs	r3, #8
 8009154:	425b      	negs	r3, r3
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	4413      	add	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	4b24      	ldr	r3, [pc, #144]	; (80091f8 <vPortFree+0xb8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4013      	ands	r3, r2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10a      	bne.n	8009184 <vPortFree+0x44>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	60fb      	str	r3, [r7, #12]
}
 8009180:	bf00      	nop
 8009182:	e7fe      	b.n	8009182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <vPortFree+0x62>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	60bb      	str	r3, [r7, #8]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <vPortFree+0xb8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4013      	ands	r3, r2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01e      	beq.n	80091ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11a      	bne.n	80091ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <vPortFree+0xb8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	43db      	mvns	r3, r3
 80091c2:	401a      	ands	r2, r3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091c8:	f7fe fc68 	bl	8007a9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <vPortFree+0xbc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4413      	add	r3, r2
 80091d6:	4a09      	ldr	r2, [pc, #36]	; (80091fc <vPortFree+0xbc>)
 80091d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091da:	6938      	ldr	r0, [r7, #16]
 80091dc:	f000 f874 	bl	80092c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <vPortFree+0xc0>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3301      	adds	r3, #1
 80091e6:	4a06      	ldr	r2, [pc, #24]	; (8009200 <vPortFree+0xc0>)
 80091e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091ea:	f7fe fc65 	bl	8007ab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091ee:	bf00      	nop
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20003024 	.word	0x20003024
 80091fc:	20003014 	.word	0x20003014
 8009200:	20003020 	.word	0x20003020

08009204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800920a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800920e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009210:	4b27      	ldr	r3, [pc, #156]	; (80092b0 <prvHeapInit+0xac>)
 8009212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00c      	beq.n	8009238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3307      	adds	r3, #7
 8009222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0307 	bic.w	r3, r3, #7
 800922a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	4a1f      	ldr	r2, [pc, #124]	; (80092b0 <prvHeapInit+0xac>)
 8009234:	4413      	add	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800923c:	4a1d      	ldr	r2, [pc, #116]	; (80092b4 <prvHeapInit+0xb0>)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009242:	4b1c      	ldr	r3, [pc, #112]	; (80092b4 <prvHeapInit+0xb0>)
 8009244:	2200      	movs	r2, #0
 8009246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009250:	2208      	movs	r2, #8
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1a9b      	subs	r3, r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0307 	bic.w	r3, r3, #7
 800925e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <prvHeapInit+0xb4>)
 8009264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <prvHeapInit+0xb4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <prvHeapInit+0xb4>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <prvHeapInit+0xb4>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <prvHeapInit+0xb8>)
 8009292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <prvHeapInit+0xbc>)
 800929a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800929c:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <prvHeapInit+0xc0>)
 800929e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092a2:	601a      	str	r2, [r3, #0]
}
 80092a4:	bf00      	nop
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	200010c8 	.word	0x200010c8
 80092b4:	20003008 	.word	0x20003008
 80092b8:	20003010 	.word	0x20003010
 80092bc:	20003018 	.word	0x20003018
 80092c0:	20003014 	.word	0x20003014
 80092c4:	20003024 	.word	0x20003024

080092c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092d0:	4b28      	ldr	r3, [pc, #160]	; (8009374 <prvInsertBlockIntoFreeList+0xac>)
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e002      	b.n	80092dc <prvInsertBlockIntoFreeList+0x14>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d8f7      	bhi.n	80092d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	4413      	add	r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d108      	bne.n	800930a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	441a      	add	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	441a      	add	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d118      	bne.n	8009350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <prvInsertBlockIntoFreeList+0xb0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d00d      	beq.n	8009346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	441a      	add	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	e008      	b.n	8009358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009346:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <prvInsertBlockIntoFreeList+0xb0>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e003      	b.n	8009358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d002      	beq.n	8009366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009366:	bf00      	nop
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20003008 	.word	0x20003008
 8009378:	20003010 	.word	0x20003010

0800937c <vanttec_ntohl>:
#else
    return __builtin_bswap16(hostshort);
#endif
}

uint32_t vanttec_ntohl(uint32_t netlong) {
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
    return netlong; //No conversion needed
#else
    return __builtin_bswap32(netlong);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	ba1b      	rev	r3, r3
#endif
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <can_parse_id>:
#endif

#ifdef __cplusplus
extern "C" {
#endif
uint8_t can_parse_id(const uint8_t *data, uint8_t len) {
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
    if (len == 0 || data == 0) return 0;
 80093a0:	78fb      	ldrb	r3, [r7, #3]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <can_parse_id+0x18>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <can_parse_id+0x1c>
 80093ac:	2300      	movs	r3, #0
 80093ae:	e001      	b.n	80093b4 <can_parse_id+0x20>
    return data[0];
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	781b      	ldrb	r3, [r3, #0]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <can_parse_float>:

uint8_t can_pack_float(uint8_t id, float n, uint8_t *data, uint8_t len) {
    return can_pack_long(id, serialize_float(n), data, len);
}

float can_parse_float(const uint8_t *data, uint8_t len) {
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
    if (data == 0 || len < 5) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <can_parse_float+0x18>
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	2b04      	cmp	r3, #4
 80093d6:	d802      	bhi.n	80093de <can_parse_float+0x1e>
        return NAN;
 80093d8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009400 <can_parse_float+0x40>
 80093dc:	e00b      	b.n	80093f6 <can_parse_float+0x36>
    }

    return deserialize_float(deserialize_long(data + 1));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3301      	adds	r3, #1
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 f870 	bl	80094c8 <deserialize_long>
 80093e8:	4603      	mov	r3, r0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 f836 	bl	800945c <deserialize_float>
 80093f0:	eef0 7a40 	vmov.f32	s15, s0
 80093f4:	bf00      	nop
}
 80093f6:	eeb0 0a67 	vmov.f32	s0, s15
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	7fc00000 	.word	0x7fc00000

08009404 <can_parse_long>:
    data[0] = id;
    serialize_long(data + 1, n);
    return 5;
}

uint32_t can_parse_long(const uint8_t *data, uint8_t len) {
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
    if (data == 0 || len < 5) return 0;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <can_parse_long+0x18>
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	2b04      	cmp	r3, #4
 800941a:	d801      	bhi.n	8009420 <can_parse_long+0x1c>
 800941c:	2300      	movs	r3, #0
 800941e:	e006      	b.n	800942e <can_parse_long+0x2a>
    return deserialize_long(data + 1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3301      	adds	r3, #1
 8009424:	4618      	mov	r0, r3
 8009426:	f000 f84f 	bl	80094c8 <deserialize_long>
 800942a:	4603      	mov	r3, r0
 800942c:	bf00      	nop
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <_ZSt5ldexpfi>:
  using ::ldexp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	ed87 0a01 	vstr	s0, [r7, #4]
 8009440:	6038      	str	r0, [r7, #0]
 8009442:	6838      	ldr	r0, [r7, #0]
 8009444:	ed97 0a01 	vldr	s0, [r7, #4]
 8009448:	f000 f865 	bl	8009516 <ldexpf>
 800944c:	eef0 7a40 	vmov.f32	s15, s0
 8009450:	eeb0 0a67 	vmov.f32	s0, s15
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <deserialize_float>:
#include <math.h>

#ifdef __cplusplus
extern "C" {
#endif
float deserialize_float(uint32_t in) {
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
    bool sgn = in >> 31;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	0fdb      	lsrs	r3, r3, #31
 8009468:	75fb      	strb	r3, [r7, #23]
    uint8_t exp = (in >> 23) & 0b011111111;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	0ddb      	lsrs	r3, r3, #23
 800946e:	75bb      	strb	r3, [r7, #22]
    uint32_t frac = in & 0x7FFFFF;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009476:	613b      	str	r3, [r7, #16]

    float out = ldexp((float) frac / 0x7FFFFF, exp - 127);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009482:	eddf 6a10 	vldr	s13, [pc, #64]	; 80094c4 <deserialize_float+0x68>
 8009486:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800948a:	7dbb      	ldrb	r3, [r7, #22]
 800948c:	3b7f      	subs	r3, #127	; 0x7f
 800948e:	4618      	mov	r0, r3
 8009490:	eeb0 0a47 	vmov.f32	s0, s14
 8009494:	f7ff ffcf 	bl	8009436 <_ZSt5ldexpfi>
 8009498:	ed87 0a03 	vstr	s0, [r7, #12]
    out = sgn ? -out : out;
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d004      	beq.n	80094ac <deserialize_float+0x50>
 80094a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80094a6:	eef1 7a67 	vneg.f32	s15, s15
 80094aa:	e001      	b.n	80094b0 <deserialize_float+0x54>
 80094ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80094b0:	edc7 7a03 	vstr	s15, [r7, #12]
    return out;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	ee07 3a90 	vmov	s15, r3
}
 80094ba:	eeb0 0a67 	vmov.f32	s0, s15
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	4afffffe 	.word	0x4afffffe

080094c8 <deserialize_long>:
    out |= data[1];

    return vanttec_ntohs(out);
}

uint32_t deserialize_long(const uint8_t *data) {
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
    uint32_t out;
    out = data[0] << (8 * 3);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	061b      	lsls	r3, r3, #24
 80094d6:	60fb      	str	r3, [r7, #12]
    out |= data[1] << (8 * 2);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3301      	adds	r3, #1
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	041b      	lsls	r3, r3, #16
 80094e0:	461a      	mov	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
    out |= data[2] << (8);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3302      	adds	r3, #2
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	461a      	mov	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
    out |= data[3] & 0xff;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3303      	adds	r3, #3
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]

    return vanttec_ntohl(out);
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f7ff ff38 	bl	800937c <vanttec_ntohl>
 800950c:	4603      	mov	r3, r0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <ldexpf>:
 8009516:	b510      	push	{r4, lr}
 8009518:	ed2d 8b02 	vpush	{d8}
 800951c:	4604      	mov	r4, r0
 800951e:	eeb0 8a40 	vmov.f32	s16, s0
 8009522:	f000 f891 	bl	8009648 <finitef>
 8009526:	b1b8      	cbz	r0, 8009558 <ldexpf+0x42>
 8009528:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800952c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009530:	d012      	beq.n	8009558 <ldexpf+0x42>
 8009532:	eeb0 0a48 	vmov.f32	s0, s16
 8009536:	4620      	mov	r0, r4
 8009538:	f000 f814 	bl	8009564 <scalbnf>
 800953c:	eeb0 8a40 	vmov.f32	s16, s0
 8009540:	f000 f882 	bl	8009648 <finitef>
 8009544:	b120      	cbz	r0, 8009550 <ldexpf+0x3a>
 8009546:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800954a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954e:	d103      	bne.n	8009558 <ldexpf+0x42>
 8009550:	f000 f888 	bl	8009664 <__errno>
 8009554:	2322      	movs	r3, #34	; 0x22
 8009556:	6003      	str	r3, [r0, #0]
 8009558:	eeb0 0a48 	vmov.f32	s0, s16
 800955c:	ecbd 8b02 	vpop	{d8}
 8009560:	bd10      	pop	{r4, pc}
	...

08009564 <scalbnf>:
 8009564:	ee10 3a10 	vmov	r3, s0
 8009568:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800956c:	d025      	beq.n	80095ba <scalbnf+0x56>
 800956e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009572:	d302      	bcc.n	800957a <scalbnf+0x16>
 8009574:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009578:	4770      	bx	lr
 800957a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800957e:	d122      	bne.n	80095c6 <scalbnf+0x62>
 8009580:	4b2a      	ldr	r3, [pc, #168]	; (800962c <scalbnf+0xc8>)
 8009582:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009630 <scalbnf+0xcc>
 8009586:	4298      	cmp	r0, r3
 8009588:	ee20 0a27 	vmul.f32	s0, s0, s15
 800958c:	db16      	blt.n	80095bc <scalbnf+0x58>
 800958e:	ee10 3a10 	vmov	r3, s0
 8009592:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009596:	3a19      	subs	r2, #25
 8009598:	4402      	add	r2, r0
 800959a:	2afe      	cmp	r2, #254	; 0xfe
 800959c:	dd15      	ble.n	80095ca <scalbnf+0x66>
 800959e:	ee10 3a10 	vmov	r3, s0
 80095a2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009634 <scalbnf+0xd0>
 80095a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009638 <scalbnf+0xd4>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	eeb0 7a67 	vmov.f32	s14, s15
 80095b0:	bfb8      	it	lt
 80095b2:	eef0 7a66 	vmovlt.f32	s15, s13
 80095b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80095ba:	4770      	bx	lr
 80095bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800963c <scalbnf+0xd8>
 80095c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80095c4:	4770      	bx	lr
 80095c6:	0dd2      	lsrs	r2, r2, #23
 80095c8:	e7e6      	b.n	8009598 <scalbnf+0x34>
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	dd06      	ble.n	80095dc <scalbnf+0x78>
 80095ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80095d6:	ee00 3a10 	vmov	s0, r3
 80095da:	4770      	bx	lr
 80095dc:	f112 0f16 	cmn.w	r2, #22
 80095e0:	da1a      	bge.n	8009618 <scalbnf+0xb4>
 80095e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80095e6:	4298      	cmp	r0, r3
 80095e8:	ee10 3a10 	vmov	r3, s0
 80095ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095f0:	dd0a      	ble.n	8009608 <scalbnf+0xa4>
 80095f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009634 <scalbnf+0xd0>
 80095f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009638 <scalbnf+0xd4>
 80095fa:	eef0 7a40 	vmov.f32	s15, s0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	bf18      	it	ne
 8009602:	eeb0 0a47 	vmovne.f32	s0, s14
 8009606:	e7db      	b.n	80095c0 <scalbnf+0x5c>
 8009608:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800963c <scalbnf+0xd8>
 800960c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009640 <scalbnf+0xdc>
 8009610:	eef0 7a40 	vmov.f32	s15, s0
 8009614:	2b00      	cmp	r3, #0
 8009616:	e7f3      	b.n	8009600 <scalbnf+0x9c>
 8009618:	3219      	adds	r2, #25
 800961a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800961e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009622:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009644 <scalbnf+0xe0>
 8009626:	ee07 3a10 	vmov	s14, r3
 800962a:	e7c4      	b.n	80095b6 <scalbnf+0x52>
 800962c:	ffff3cb0 	.word	0xffff3cb0
 8009630:	4c000000 	.word	0x4c000000
 8009634:	7149f2ca 	.word	0x7149f2ca
 8009638:	f149f2ca 	.word	0xf149f2ca
 800963c:	0da24260 	.word	0x0da24260
 8009640:	8da24260 	.word	0x8da24260
 8009644:	33000000 	.word	0x33000000

08009648 <finitef>:
 8009648:	b082      	sub	sp, #8
 800964a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800964e:	9801      	ldr	r0, [sp, #4]
 8009650:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009654:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009658:	bfac      	ite	ge
 800965a:	2000      	movge	r0, #0
 800965c:	2001      	movlt	r0, #1
 800965e:	b002      	add	sp, #8
 8009660:	4770      	bx	lr
	...

08009664 <__errno>:
 8009664:	4b01      	ldr	r3, [pc, #4]	; (800966c <__errno+0x8>)
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	20000010 	.word	0x20000010

08009670 <__libc_init_array>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	4d0d      	ldr	r5, [pc, #52]	; (80096a8 <__libc_init_array+0x38>)
 8009674:	4c0d      	ldr	r4, [pc, #52]	; (80096ac <__libc_init_array+0x3c>)
 8009676:	1b64      	subs	r4, r4, r5
 8009678:	10a4      	asrs	r4, r4, #2
 800967a:	2600      	movs	r6, #0
 800967c:	42a6      	cmp	r6, r4
 800967e:	d109      	bne.n	8009694 <__libc_init_array+0x24>
 8009680:	4d0b      	ldr	r5, [pc, #44]	; (80096b0 <__libc_init_array+0x40>)
 8009682:	4c0c      	ldr	r4, [pc, #48]	; (80096b4 <__libc_init_array+0x44>)
 8009684:	f000 f8f2 	bl	800986c <_init>
 8009688:	1b64      	subs	r4, r4, r5
 800968a:	10a4      	asrs	r4, r4, #2
 800968c:	2600      	movs	r6, #0
 800968e:	42a6      	cmp	r6, r4
 8009690:	d105      	bne.n	800969e <__libc_init_array+0x2e>
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	f855 3b04 	ldr.w	r3, [r5], #4
 8009698:	4798      	blx	r3
 800969a:	3601      	adds	r6, #1
 800969c:	e7ee      	b.n	800967c <__libc_init_array+0xc>
 800969e:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a2:	4798      	blx	r3
 80096a4:	3601      	adds	r6, #1
 80096a6:	e7f2      	b.n	800968e <__libc_init_array+0x1e>
 80096a8:	08009a3c 	.word	0x08009a3c
 80096ac:	08009a3c 	.word	0x08009a3c
 80096b0:	08009a3c 	.word	0x08009a3c
 80096b4:	08009a40 	.word	0x08009a40

080096b8 <__retarget_lock_acquire_recursive>:
 80096b8:	4770      	bx	lr

080096ba <__retarget_lock_release_recursive>:
 80096ba:	4770      	bx	lr

080096bc <memcpy>:
 80096bc:	440a      	add	r2, r1
 80096be:	4291      	cmp	r1, r2
 80096c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096c4:	d100      	bne.n	80096c8 <memcpy+0xc>
 80096c6:	4770      	bx	lr
 80096c8:	b510      	push	{r4, lr}
 80096ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096d2:	4291      	cmp	r1, r2
 80096d4:	d1f9      	bne.n	80096ca <memcpy+0xe>
 80096d6:	bd10      	pop	{r4, pc}

080096d8 <memset>:
 80096d8:	4402      	add	r2, r0
 80096da:	4603      	mov	r3, r0
 80096dc:	4293      	cmp	r3, r2
 80096de:	d100      	bne.n	80096e2 <memset+0xa>
 80096e0:	4770      	bx	lr
 80096e2:	f803 1b01 	strb.w	r1, [r3], #1
 80096e6:	e7f9      	b.n	80096dc <memset+0x4>

080096e8 <cleanup_glue>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	6809      	ldr	r1, [r1, #0]
 80096ee:	4605      	mov	r5, r0
 80096f0:	b109      	cbz	r1, 80096f6 <cleanup_glue+0xe>
 80096f2:	f7ff fff9 	bl	80096e8 <cleanup_glue>
 80096f6:	4621      	mov	r1, r4
 80096f8:	4628      	mov	r0, r5
 80096fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096fe:	f000 b869 	b.w	80097d4 <_free_r>
	...

08009704 <_reclaim_reent>:
 8009704:	4b2c      	ldr	r3, [pc, #176]	; (80097b8 <_reclaim_reent+0xb4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4283      	cmp	r3, r0
 800970a:	b570      	push	{r4, r5, r6, lr}
 800970c:	4604      	mov	r4, r0
 800970e:	d051      	beq.n	80097b4 <_reclaim_reent+0xb0>
 8009710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009712:	b143      	cbz	r3, 8009726 <_reclaim_reent+0x22>
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d14a      	bne.n	80097b0 <_reclaim_reent+0xac>
 800971a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800971c:	6819      	ldr	r1, [r3, #0]
 800971e:	b111      	cbz	r1, 8009726 <_reclaim_reent+0x22>
 8009720:	4620      	mov	r0, r4
 8009722:	f000 f857 	bl	80097d4 <_free_r>
 8009726:	6961      	ldr	r1, [r4, #20]
 8009728:	b111      	cbz	r1, 8009730 <_reclaim_reent+0x2c>
 800972a:	4620      	mov	r0, r4
 800972c:	f000 f852 	bl	80097d4 <_free_r>
 8009730:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009732:	b111      	cbz	r1, 800973a <_reclaim_reent+0x36>
 8009734:	4620      	mov	r0, r4
 8009736:	f000 f84d 	bl	80097d4 <_free_r>
 800973a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800973c:	b111      	cbz	r1, 8009744 <_reclaim_reent+0x40>
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f848 	bl	80097d4 <_free_r>
 8009744:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009746:	b111      	cbz	r1, 800974e <_reclaim_reent+0x4a>
 8009748:	4620      	mov	r0, r4
 800974a:	f000 f843 	bl	80097d4 <_free_r>
 800974e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009750:	b111      	cbz	r1, 8009758 <_reclaim_reent+0x54>
 8009752:	4620      	mov	r0, r4
 8009754:	f000 f83e 	bl	80097d4 <_free_r>
 8009758:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800975a:	b111      	cbz	r1, 8009762 <_reclaim_reent+0x5e>
 800975c:	4620      	mov	r0, r4
 800975e:	f000 f839 	bl	80097d4 <_free_r>
 8009762:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009764:	b111      	cbz	r1, 800976c <_reclaim_reent+0x68>
 8009766:	4620      	mov	r0, r4
 8009768:	f000 f834 	bl	80097d4 <_free_r>
 800976c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800976e:	b111      	cbz	r1, 8009776 <_reclaim_reent+0x72>
 8009770:	4620      	mov	r0, r4
 8009772:	f000 f82f 	bl	80097d4 <_free_r>
 8009776:	69a3      	ldr	r3, [r4, #24]
 8009778:	b1e3      	cbz	r3, 80097b4 <_reclaim_reent+0xb0>
 800977a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800977c:	4620      	mov	r0, r4
 800977e:	4798      	blx	r3
 8009780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009782:	b1b9      	cbz	r1, 80097b4 <_reclaim_reent+0xb0>
 8009784:	4620      	mov	r0, r4
 8009786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800978a:	f7ff bfad 	b.w	80096e8 <cleanup_glue>
 800978e:	5949      	ldr	r1, [r1, r5]
 8009790:	b941      	cbnz	r1, 80097a4 <_reclaim_reent+0xa0>
 8009792:	3504      	adds	r5, #4
 8009794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009796:	2d80      	cmp	r5, #128	; 0x80
 8009798:	68d9      	ldr	r1, [r3, #12]
 800979a:	d1f8      	bne.n	800978e <_reclaim_reent+0x8a>
 800979c:	4620      	mov	r0, r4
 800979e:	f000 f819 	bl	80097d4 <_free_r>
 80097a2:	e7ba      	b.n	800971a <_reclaim_reent+0x16>
 80097a4:	680e      	ldr	r6, [r1, #0]
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 f814 	bl	80097d4 <_free_r>
 80097ac:	4631      	mov	r1, r6
 80097ae:	e7ef      	b.n	8009790 <_reclaim_reent+0x8c>
 80097b0:	2500      	movs	r5, #0
 80097b2:	e7ef      	b.n	8009794 <_reclaim_reent+0x90>
 80097b4:	bd70      	pop	{r4, r5, r6, pc}
 80097b6:	bf00      	nop
 80097b8:	20000010 	.word	0x20000010

080097bc <__malloc_lock>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__malloc_lock+0x8>)
 80097be:	f7ff bf7b 	b.w	80096b8 <__retarget_lock_acquire_recursive>
 80097c2:	bf00      	nop
 80097c4:	20003028 	.word	0x20003028

080097c8 <__malloc_unlock>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__malloc_unlock+0x8>)
 80097ca:	f7ff bf76 	b.w	80096ba <__retarget_lock_release_recursive>
 80097ce:	bf00      	nop
 80097d0:	20003028 	.word	0x20003028

080097d4 <_free_r>:
 80097d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d6:	2900      	cmp	r1, #0
 80097d8:	d044      	beq.n	8009864 <_free_r+0x90>
 80097da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097de:	9001      	str	r0, [sp, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f1a1 0404 	sub.w	r4, r1, #4
 80097e6:	bfb8      	it	lt
 80097e8:	18e4      	addlt	r4, r4, r3
 80097ea:	f7ff ffe7 	bl	80097bc <__malloc_lock>
 80097ee:	4a1e      	ldr	r2, [pc, #120]	; (8009868 <_free_r+0x94>)
 80097f0:	9801      	ldr	r0, [sp, #4]
 80097f2:	6813      	ldr	r3, [r2, #0]
 80097f4:	b933      	cbnz	r3, 8009804 <_free_r+0x30>
 80097f6:	6063      	str	r3, [r4, #4]
 80097f8:	6014      	str	r4, [r2, #0]
 80097fa:	b003      	add	sp, #12
 80097fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009800:	f7ff bfe2 	b.w	80097c8 <__malloc_unlock>
 8009804:	42a3      	cmp	r3, r4
 8009806:	d908      	bls.n	800981a <_free_r+0x46>
 8009808:	6825      	ldr	r5, [r4, #0]
 800980a:	1961      	adds	r1, r4, r5
 800980c:	428b      	cmp	r3, r1
 800980e:	bf01      	itttt	eq
 8009810:	6819      	ldreq	r1, [r3, #0]
 8009812:	685b      	ldreq	r3, [r3, #4]
 8009814:	1949      	addeq	r1, r1, r5
 8009816:	6021      	streq	r1, [r4, #0]
 8009818:	e7ed      	b.n	80097f6 <_free_r+0x22>
 800981a:	461a      	mov	r2, r3
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	b10b      	cbz	r3, 8009824 <_free_r+0x50>
 8009820:	42a3      	cmp	r3, r4
 8009822:	d9fa      	bls.n	800981a <_free_r+0x46>
 8009824:	6811      	ldr	r1, [r2, #0]
 8009826:	1855      	adds	r5, r2, r1
 8009828:	42a5      	cmp	r5, r4
 800982a:	d10b      	bne.n	8009844 <_free_r+0x70>
 800982c:	6824      	ldr	r4, [r4, #0]
 800982e:	4421      	add	r1, r4
 8009830:	1854      	adds	r4, r2, r1
 8009832:	42a3      	cmp	r3, r4
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	d1e0      	bne.n	80097fa <_free_r+0x26>
 8009838:	681c      	ldr	r4, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	6053      	str	r3, [r2, #4]
 800983e:	4421      	add	r1, r4
 8009840:	6011      	str	r1, [r2, #0]
 8009842:	e7da      	b.n	80097fa <_free_r+0x26>
 8009844:	d902      	bls.n	800984c <_free_r+0x78>
 8009846:	230c      	movs	r3, #12
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	e7d6      	b.n	80097fa <_free_r+0x26>
 800984c:	6825      	ldr	r5, [r4, #0]
 800984e:	1961      	adds	r1, r4, r5
 8009850:	428b      	cmp	r3, r1
 8009852:	bf04      	itt	eq
 8009854:	6819      	ldreq	r1, [r3, #0]
 8009856:	685b      	ldreq	r3, [r3, #4]
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	bf04      	itt	eq
 800985c:	1949      	addeq	r1, r1, r5
 800985e:	6021      	streq	r1, [r4, #0]
 8009860:	6054      	str	r4, [r2, #4]
 8009862:	e7ca      	b.n	80097fa <_free_r+0x26>
 8009864:	b003      	add	sp, #12
 8009866:	bd30      	pop	{r4, r5, pc}
 8009868:	2000302c 	.word	0x2000302c

0800986c <_init>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	bf00      	nop
 8009870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009872:	bc08      	pop	{r3}
 8009874:	469e      	mov	lr, r3
 8009876:	4770      	bx	lr

08009878 <_fini>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	bf00      	nop
 800987c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987e:	bc08      	pop	{r3}
 8009880:	469e      	mov	lr, r3
 8009882:	4770      	bx	lr
