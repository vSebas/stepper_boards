
stepper_boards_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009794  08009794  00019794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009944  08009944  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800994c  0800994c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fec  20000074  080099c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003060  080099c8  00023060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026073  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046a4  00000000  00000000  00046117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  0004a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029011  00000000  00000000  0004c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002075c  00000000  00000000  000753c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f1913  00000000  00000000  00095b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00187438  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001a10  00000000  00000000  00187488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078b0  00000000  00000000  00188e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800977c 	.word	0x0800977c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800977c 	.word	0x0800977c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <can_parse_msg>:

#include "CANLib/CANMessage.h"

extern volatile uint8_t g_sendPing;

void can_parse_msg(CAN_RxHeaderTypeDef *header, uint8_t *data){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	if(data == NULL) return;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d073      	beq.n	80005cc <can_parse_msg+0xf8>

	uint8_t id = can_parse_id(data, header->DLC);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	691b      	ldr	r3, [r3, #16]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	6838      	ldr	r0, [r7, #0]
 80004ee:	f008 fed9 	bl	80092a4 <can_parse_id>
 80004f2:	4603      	mov	r3, r0
 80004f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(id == AUTONOMOUS_STEERING){
 80004f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004fc:	2b17      	cmp	r3, #23
 80004fe:	d11a      	bne.n	8000536 <can_parse_msg+0x62>
		// Frame byte structure: ID #STEPS1 #STEPS2 FREE DIR
		uint32_t frame = can_parse_long(data, header->DLC);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	691b      	ldr	r3, [r3, #16]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	6838      	ldr	r0, [r7, #0]
 800050a:	f008 ff03 	bl	8009314 <can_parse_long>
 800050e:	6138      	str	r0, [r7, #16]
		uint16_t steps = (frame & 0xFFFF0000) >> 16;
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	0c1b      	lsrs	r3, r3, #16
 8000514:	81fb      	strh	r3, [r7, #14]
		int8_t dir = frame & 0x000000FF;
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	737b      	strb	r3, [r7, #13]
		can_rx_data.motor_1_steps = steps;
 800051a:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <can_parse_msg+0x100>)
 800051c:	89fb      	ldrh	r3, [r7, #14]
 800051e:	8013      	strh	r3, [r2, #0]
		can_rx_data.motor_1_direction = dir;
 8000520:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <can_parse_msg+0x100>)
 8000522:	7b7b      	ldrb	r3, [r7, #13]
 8000524:	7113      	strb	r3, [r2, #4]
		set_setpoint(STEERING, steps, dir);
 8000526:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	4619      	mov	r1, r3
 800052e:	2000      	movs	r0, #0
 8000530:	f000 ffe4 	bl	80014fc <set_setpoint>
 8000534:	e04b      	b.n	80005ce <can_parse_msg+0xfa>
	} else if(id == CONTROLLER_STEERING){
 8000536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800053a:	2b15      	cmp	r3, #21
 800053c:	d113      	bne.n	8000566 <can_parse_msg+0x92>
		// Frame byte structure: ID #STEPS1 #STEPS2 FREE DIR
		uint32_t frame = can_parse_long(data, header->DLC);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	691b      	ldr	r3, [r3, #16]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4619      	mov	r1, r3
 8000546:	6838      	ldr	r0, [r7, #0]
 8000548:	f008 fee4 	bl	8009314 <can_parse_long>
 800054c:	61b8      	str	r0, [r7, #24]
		//uint16_t steps = (frame & 0xFFFF0000) >> 16;
		int8_t dir = frame & 0x000000FF;
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	75fb      	strb	r3, [r7, #23]
		can_rx_data.motor_1_direction = dir;
 8000552:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <can_parse_msg+0x100>)
 8000554:	7dfb      	ldrb	r3, [r7, #23]
 8000556:	7113      	strb	r3, [r2, #4]
		set_direction(STEERING, dir);
 8000558:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800055c:	4619      	mov	r1, r3
 800055e:	2000      	movs	r0, #0
 8000560:	f000 ff9c 	bl	800149c <set_direction>
 8000564:	e033      	b.n	80005ce <can_parse_msg+0xfa>
	} else if(id == ENCODER_ID_IFM){
 8000566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800056a:	2b18      	cmp	r3, #24
 800056c:	d02f      	beq.n	80005ce <can_parse_msg+0xfa>
		//?
	} else if(id == ENCODER_ID_BRITTER) {
 800056e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000572:	2b19      	cmp	r3, #25
 8000574:	d118      	bne.n	80005a8 <can_parse_msg+0xd4>
		float val = can_parse_float(data, header->DLC);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	6838      	ldr	r0, [r7, #0]
 8000580:	f008 fea6 	bl	80092d0 <can_parse_float>
 8000584:	ed87 0a08 	vstr	s0, [r7, #32]
		float angle = val/4096*360;
 8000588:	ed97 7a08 	vldr	s14, [r7, #32]
 800058c:	eddf 6a12 	vldr	s13, [pc, #72]	; 80005d8 <can_parse_msg+0x104>
 8000590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000594:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80005dc <can_parse_msg+0x108>
 8000598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800059c:	edc7 7a07 	vstr	s15, [r7, #28]
		can_rx_data.encoderAngle[1] = angle;
 80005a0:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <can_parse_msg+0x100>)
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	60d3      	str	r3, [r2, #12]
 80005a6:	e012      	b.n	80005ce <can_parse_msg+0xfa>
	} else if(id == JETSON_HEARTBEAT_ID) {
 80005a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ac:	2b1e      	cmp	r3, #30
 80005ae:	d105      	bne.n	80005bc <can_parse_msg+0xe8>
		//Jetson heartbeat
		can_rx_data.jetsonHBTick = HAL_GetTick();
 80005b0:	f001 f89e 	bl	80016f0 <HAL_GetTick>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <can_parse_msg+0x100>)
 80005b8:	6113      	str	r3, [r2, #16]
 80005ba:	e008      	b.n	80005ce <can_parse_msg+0xfa>
	} else if(id == PING_ID){
 80005bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005c0:	2b1f      	cmp	r3, #31
 80005c2:	d104      	bne.n	80005ce <can_parse_msg+0xfa>
		g_sendPing = 1;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <can_parse_msg+0x10c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e000      	b.n	80005ce <can_parse_msg+0xfa>
	if(data == NULL) return;
 80005cc:	bf00      	nop
	}
}
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000090 	.word	0x20000090
 80005d8:	45800000 	.word	0x45800000
 80005dc:	43b40000 	.word	0x43b40000
 80005e0:	200000ac 	.word	0x200000ac

080005e4 <can_init>:
  .priority = (osPriority_t) osPriorityNormal,
};
*/


void can_init(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;		// Specify filter bank to use
 80005ee:	230a      	movs	r3, #10
 80005f0:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //Incoming data is saved here
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;//0x100<<5;//0x000<<5;
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh= 0; //0xF00<<5;//0x600<<5;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;
 800060e:	230d      	movs	r3, #13
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
	filter.SlaveStartFilterBank = 0;
	*/

	if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) Error_Handler();
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	4821      	ldr	r0, [pc, #132]	; (800069c <can_init+0xb8>)
 8000618:	f002 f825 	bl	8002666 <HAL_CAN_ConfigFilter>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <can_init+0x42>
 8000622:	f000 fc65 	bl	8000ef0 <Error_Handler>
	if(HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <can_init+0xb8>)
 8000628:	f002 f8e7 	bl	80027fa <HAL_CAN_Start>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <can_init+0x52>
 8000632:	f000 fc5d 	bl	8000ef0 <Error_Handler>
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) Error_Handler();
 8000636:	2102      	movs	r1, #2
 8000638:	4818      	ldr	r0, [pc, #96]	; (800069c <can_init+0xb8>)
 800063a:	f002 fb2c 	bl	8002c96 <HAL_CAN_ActivateNotification>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <can_init+0x64>
 8000644:	f000 fc54 	bl	8000ef0 <Error_Handler>
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) Error_Handler();
 8000648:	2110      	movs	r1, #16
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <can_init+0xb8>)
 800064c:	f002 fb23 	bl	8002c96 <HAL_CAN_ActivateNotification>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <can_init+0x76>
 8000656:	f000 fc4b 	bl	8000ef0 <Error_Handler>

	//Initialize queues

	//First char -> size
	debugMessageQueue = osMessageQueueNew(64, 8, NULL);
 800065a:	2200      	movs	r2, #0
 800065c:	2108      	movs	r1, #8
 800065e:	2040      	movs	r0, #64	; 0x40
 8000660:	f005 ffe5 	bl	800662e <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <can_init+0xbc>)
 8000668:	6013      	str	r3, [r2, #0]
	if(debugMessageQueue == NULL)
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <can_init+0xbc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <can_init+0x92>
		Error_Handler();
 8000672:	f000 fc3d 	bl	8000ef0 <Error_Handler>

	txMessageQueue = osMessageQueueNew(64, sizeof(CAN_TX_QUEUE_OBJ), NULL);
 8000676:	2200      	movs	r2, #0
 8000678:	2109      	movs	r1, #9
 800067a:	2040      	movs	r0, #64	; 0x40
 800067c:	f005 ffd7 	bl	800662e <osMessageQueueNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <can_init+0xc0>)
 8000684:	6013      	str	r3, [r2, #0]
	if(txMessageQueue == NULL)
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <can_init+0xc0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <can_init+0xae>
		Error_Handler();
 800068e:	f000 fc2f 	bl	8000ef0 <Error_Handler>
}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000114 	.word	0x20000114
 80006a0:	200000a4 	.word	0x200000a4
 80006a4:	200000a8 	.word	0x200000a8

080006a8 <can_tx_task>:

void can_tx_task(void * params){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	for(;;){
		can_tx_update();
 80006b0:	f000 f806 	bl	80006c0 <can_tx_update>

		osDelay(can_tx_task_delay);
 80006b4:	2305      	movs	r3, #5
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 ff9e 	bl	80065f8 <osDelay>
		can_tx_update();
 80006bc:	e7f8      	b.n	80006b0 <can_tx_task+0x8>
	...

080006c0 <can_tx_update>:
	}
}

void can_tx_update(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	txHeader.IDE = CAN_ID_STD;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
	txHeader.StdId = 0x111;
 80006ca:	f240 1311 	movw	r3, #273	; 0x111
 80006ce:	617b      	str	r3, [r7, #20]
	txHeader.RTR = CAN_RTR_DATA;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]

	CAN_TX_QUEUE_OBJ txOut;

	while(osMessageQueueGet(txMessageQueue, &txOut, NULL, 0) == osOK){
 80006d4:	e013      	b.n	80006fe <can_tx_update+0x3e>
		txHeader.DLC = txOut.msg_size;
 80006d6:	7b3b      	ldrb	r3, [r7, #12]
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &txHeader, txOut.buf, &txMailbox);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	f107 0114 	add.w	r1, r7, #20
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <can_tx_update+0x5c>)
 80006e6:	f002 f8cc 	bl	8002882 <HAL_CAN_AddTxMessage>
 80006ea:	4603      	mov	r3, r0
 80006ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(ret != HAL_OK){
 80006f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <can_tx_update+0x3e>
			txHeader.DLC++;
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	3301      	adds	r3, #1
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
	while(osMessageQueueGet(txMessageQueue, &txOut, NULL, 0) == osOK){
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <can_tx_update+0x60>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	1d39      	adds	r1, r7, #4
 8000704:	2300      	movs	r3, #0
 8000706:	2200      	movs	r2, #0
 8000708:	f006 f804 	bl	8006714 <osMessageQueueGet>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0e1      	beq.n	80006d6 <can_tx_update+0x16>
		}
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3730      	adds	r7, #48	; 0x30
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000114 	.word	0x20000114
 8000720:	200000a8 	.word	0x200000a8

08000724 <can_rx_task>:

void can_rx_task(void *params){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	for(;;){
		can_rx_update();
 800072c:	f000 f806 	bl	800073c <can_rx_update>
		osDelay(can_rx_task_delay);
 8000730:	2305      	movs	r3, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f005 ff60 	bl	80065f8 <osDelay>
		can_rx_update();
 8000738:	e7f8      	b.n	800072c <can_rx_task+0x8>
	...

0800073c <can_rx_update>:
	}
}

void can_rx_update(){
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
	//TODO check both FIFO?
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t buf[8];
	uint32_t fill_level0 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8000742:	2100      	movs	r1, #0
 8000744:	4820      	ldr	r0, [pc, #128]	; (80007c8 <can_rx_update+0x8c>)
 8000746:	f002 fa7e 	bl	8002c46 <HAL_CAN_GetRxFifoFillLevel>
 800074a:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t fill_level1 = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1);
 800074c:	2101      	movs	r1, #1
 800074e:	481e      	ldr	r0, [pc, #120]	; (80007c8 <can_rx_update+0x8c>)
 8000750:	f002 fa79 	bl	8002c46 <HAL_CAN_GetRxFifoFillLevel>
 8000754:	62b8      	str	r0, [r7, #40]	; 0x28
	while(fill_level0 != 0){
 8000756:	e015      	b.n	8000784 <can_rx_update+0x48>
		HAL_StatusTypeDef ret = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, buf);
 8000758:	463b      	mov	r3, r7
 800075a:	f107 0208 	add.w	r2, r7, #8
 800075e:	2100      	movs	r1, #0
 8000760:	4819      	ldr	r0, [pc, #100]	; (80007c8 <can_rx_update+0x8c>)
 8000762:	f002 f95e 	bl	8002a22 <HAL_CAN_GetRxMessage>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(ret != HAL_OK) continue;
 800076c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000770:	2b00      	cmp	r3, #0
 8000772:	d000      	beq.n	8000776 <can_rx_update+0x3a>
 8000774:	e006      	b.n	8000784 <can_rx_update+0x48>
		//Parse can message
		can_parse_msg(&rxHeader, buf);
 8000776:	463a      	mov	r2, r7
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fea8 	bl	80004d4 <can_parse_msg>
	while(fill_level0 != 0){
 8000784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1e6      	bne.n	8000758 <can_rx_update+0x1c>
	}
	while(fill_level1 != 0){
 800078a:	e015      	b.n	80007b8 <can_rx_update+0x7c>
		HAL_StatusTypeDef ret = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeader, buf);
 800078c:	463b      	mov	r3, r7
 800078e:	f107 0208 	add.w	r2, r7, #8
 8000792:	2101      	movs	r1, #1
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <can_rx_update+0x8c>)
 8000796:	f002 f944 	bl	8002a22 <HAL_CAN_GetRxMessage>
 800079a:	4603      	mov	r3, r0
 800079c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(ret != HAL_OK) continue;
 80007a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d000      	beq.n	80007aa <can_rx_update+0x6e>
 80007a8:	e006      	b.n	80007b8 <can_rx_update+0x7c>
		//Parse can message
		can_parse_msg(&rxHeader, buf);
 80007aa:	463a      	mov	r2, r7
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fe8e 	bl	80004d4 <can_parse_msg>
	while(fill_level1 != 0){
 80007b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1e6      	bne.n	800078c <can_rx_update+0x50>
	}
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3730      	adds	r7, #48	; 0x30
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000114 	.word	0x20000114

080007cc <start_can_tasks>:
		osDelay(1000);
	}
}
*/

void start_can_tasks(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	osThreadNew(can_rx_task, NULL, &canRxTask_attributes);
 80007d0:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <start_can_tasks+0x1c>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <start_can_tasks+0x20>)
 80007d6:	f005 fe7d 	bl	80064d4 <osThreadNew>
	osThreadNew(can_tx_task, NULL, &canTxTask_attributes);
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <start_can_tasks+0x24>)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <start_can_tasks+0x28>)
 80007e0:	f005 fe78 	bl	80064d4 <osThreadNew>
	//osThreadNew(can_sbus_tx_task, NULL, &sbusTask_attributes);
	//osThreadNew(can_debug_msg_tx_task, NULL, &debugMsgTask_attributes);
	//osThreadNew(can_send_ping_task, NULL, &pingTask_attributes);
	//osThreadNew(can_battery_monitor_task, NULL, &batteryTask_attributes);
	//osThreadNew(debug_vars_task, NULL, &debugVarsTask_attributes);
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	08009808 	.word	0x08009808
 80007ec:	08000725 	.word	0x08000725
 80007f0:	0800982c 	.word	0x0800982c
 80007f4:	080006a9 	.word	0x080006a9

080007f8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 ff3b 	bl	8001696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f836 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 fa7e 	bl	8000d24 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000828:	f000 fa4c 	bl	8000cc4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800082c:	f000 f9c8 	bl	8000bc0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000830:	f000 f91a 	bl	8000a68 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000834:	f000 f87c 	bl	8000930 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000838:	f000 f8de 	bl	80009f8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	210f      	movs	r1, #15
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <main+0x5c>)
 8000842:	f002 fcab 	bl	800319c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000846:	f005 fdfb 	bl	8006440 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of steeringTask */
  steeringTaskHandle = osThreadNew(steering_task, NULL, &steeringTask_attributes);
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <main+0x60>)
 800084c:	2100      	movs	r1, #0
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <main+0x64>)
 8000850:	f005 fe40 	bl	80064d4 <osThreadNew>
 8000854:	4603      	mov	r3, r0
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <main+0x68>)
 8000858:	6013      	str	r3, [r2, #0]

  /* creation of brakingTask */
  brakingTaskHandle = osThreadNew(braking_task, NULL, &brakingTask_attributes);
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <main+0x6c>)
 800085c:	2100      	movs	r1, #0
 800085e:	480a      	ldr	r0, [pc, #40]	; (8000888 <main+0x70>)
 8000860:	f005 fe38 	bl	80064d4 <osThreadNew>
 8000864:	4603      	mov	r3, r0
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <main+0x74>)
 8000868:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  start_can_tasks();
 800086a:	f7ff ffaf 	bl	80007cc <start_can_tasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800086e:	f005 fe0b 	bl	8006488 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x5a>
 8000874:	48000800 	.word	0x48000800
 8000878:	08009854 	.word	0x08009854
 800087c:	08000ea5 	.word	0x08000ea5
 8000880:	20000258 	.word	0x20000258
 8000884:	08009878 	.word	0x08009878
 8000888:	08000ebd 	.word	0x08000ebd
 800088c:	2000025c 	.word	0x2000025c

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b096      	sub	sp, #88	; 0x58
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2244      	movs	r2, #68	; 0x44
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f008 fea2 	bl	80095e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b6:	f002 fc97 	bl	80031e8 <HAL_PWREx_ControlVoltageScaling>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008c0:	f000 fb16 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	2303      	movs	r3, #3
 80008d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80008da:	2314      	movs	r3, #20
 80008dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008de:	2307      	movs	r3, #7
 80008e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fcd0 	bl	8003294 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008fa:	f000 faf9 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2303      	movs	r3, #3
 8000904:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f003 f8d0 	bl	8003abc <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000922:	f000 fae5 	bl	8000ef0 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3758      	adds	r7, #88	; 0x58
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_ADC1_Init+0xbc>)
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <MX_ADC1_Init+0xc0>)
 800094a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_ADC1_Init+0xbc>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_ADC1_Init+0xbc>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_ADC1_Init+0xbc>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MX_ADC1_Init+0xbc>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_ADC1_Init+0xbc>)
 8000966:	2204      	movs	r2, #4
 8000968:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_ADC1_Init+0xbc>)
 800096c:	2200      	movs	r2, #0
 800096e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_ADC1_Init+0xbc>)
 8000972:	2201      	movs	r2, #1
 8000974:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ADC1_Init+0xbc>)
 8000978:	2201      	movs	r2, #1
 800097a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ADC1_Init+0xbc>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_ADC1_Init+0xbc>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_ADC1_Init+0xbc>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_ADC1_Init+0xbc>)
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_ADC1_Init+0xbc>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_ADC1_Init+0xbc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <MX_ADC1_Init+0xbc>)
 80009a8:	f001 f83a 	bl	8001a20 <HAL_ADC_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80009b2:	f000 fa9d 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_ADC1_Init+0xc4>)
 80009b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ba:	2306      	movs	r3, #6
 80009bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c2:	237f      	movs	r3, #127	; 0x7f
 80009c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c6:	2304      	movs	r3, #4
 80009c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_ADC1_Init+0xbc>)
 80009d4:	f001 f96c 	bl	8001cb0 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009de:	f000 fa87 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000b0 	.word	0x200000b0
 80009f0:	50040000 	.word	0x50040000
 80009f4:	c7520000 	.word	0xc7520000

080009f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_CAN1_Init+0x68>)
 80009fe:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <MX_CAN1_Init+0x6c>)
 8000a00:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a04:	2228      	movs	r2, #40	; 0x28
 8000a06:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a16:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a1a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a22:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_CAN1_Init+0x68>)
 8000a4a:	f001 fd11 	bl	8002470 <HAL_CAN_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a54:	f000 fa4c 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  can_init();
 8000a58:	f7ff fdc4 	bl	80005e4 <can_init>
  /* USER CODE END CAN1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000114 	.word	0x20000114
 8000a64:	40006400 	.word	0x40006400

08000a68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09a      	sub	sp, #104	; 0x68
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	222c      	movs	r2, #44	; 0x2c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fda0 	bl	80095e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa8:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000aaa:	4a44      	ldr	r2, [pc, #272]	; (8000bbc <MX_TIM1_Init+0x154>)
 8000aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000aae:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000ab0:	224f      	movs	r2, #79	; 0x4f
 8000ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000aba:	4b3f      	ldr	r3, [pc, #252]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000abc:	2263      	movs	r2, #99	; 0x63
 8000abe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac6:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ad2:	4839      	ldr	r0, [pc, #228]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000ad4:	f003 fd50 	bl	8004578 <HAL_TIM_Base_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ade:	f000 fa07 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aec:	4619      	mov	r1, r3
 8000aee:	4832      	ldr	r0, [pc, #200]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000af0:	f004 fa84 	bl	8004ffc <HAL_TIM_ConfigClockSource>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000afa:	f000 f9f9 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000afe:	482e      	ldr	r0, [pc, #184]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000b00:	f003 fde6 	bl	80046d0 <HAL_TIM_PWM_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b0a:	f000 f9f1 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000b22:	f004 fef5 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000b2c:	f000 f9e0 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b30:	2360      	movs	r3, #96	; 0x60
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000b56:	f004 f93d 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000b60:	f000 f9c6 	bl	8000ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000b9a:	f004 ff1f 	bl	80059dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000ba4:	f000 f9a4 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM1_Init+0x150>)
 8000baa:	f000 fab9 	bl	8001120 <HAL_TIM_MspPostInit>

}
 8000bae:	bf00      	nop
 8000bb0:	3768      	adds	r7, #104	; 0x68
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000013c 	.word	0x2000013c
 8000bbc:	40012c00 	.word	0x40012c00

08000bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf2:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf8:	601a      	str	r2, [r3, #0]
  //htim2.Init.Prescaler = 8000-1;
  htim2.Init.Prescaler = 80-1;
 8000bfa:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000bfc:	224f      	movs	r2, #79	; 0x4f
 8000bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  //htim2.Init.Period = 10000-1 ;
  htim2.Init.Period = 1000-1;
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c1a:	4829      	ldr	r0, [pc, #164]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c1c:	f003 fcac 	bl	8004578 <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 f963 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c38:	f004 f9e0 	bl	8004ffc <HAL_TIM_ConfigClockSource>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c42:	f000 f955 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c48:	f003 fd42 	bl	80046d0 <HAL_TIM_PWM_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c52:	f000 f94d 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c66:	f004 fe53 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c70:	f000 f93e 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c74:	2360      	movs	r3, #96	; 0x60
 8000c76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000c8c:	f004 f8a2 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c96:	f000 f92b 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	220c      	movs	r2, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000ca2:	f004 f897 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000cac:	f000 f920 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_TIM2_Init+0x100>)
 8000cb2:	f000 fa35 	bl	8001120 <HAL_TIM_MspPostInit>

}
 8000cb6:	bf00      	nop
 8000cb8:	3738      	adds	r7, #56	; 0x38
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000188 	.word	0x20000188

08000cc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <MX_USART1_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000d08:	f004 fefe 	bl	8005b08 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f000 f8ed 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001d4 	.word	0x200001d4
 8000d20:	40013800 	.word	0x40013800

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	4b56      	ldr	r3, [pc, #344]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a55      	ldr	r2, [pc, #340]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a4f      	ldr	r2, [pc, #316]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a49      	ldr	r2, [pc, #292]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a43      	ldr	r2, [pc, #268]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b41      	ldr	r3, [pc, #260]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <MX_GPIO_Init+0x170>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000db2:	2200      	movs	r2, #0
 8000db4:	f640 410f 	movw	r1, #3087	; 0xc0f
 8000db8:	4837      	ldr	r0, [pc, #220]	; (8000e98 <MX_GPIO_Init+0x174>)
 8000dba:	f002 f9ef 	bl	800319c <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f002 f9e9 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f240 4105 	movw	r1, #1029	; 0x405
 8000dd0:	4832      	ldr	r0, [pc, #200]	; (8000e9c <MX_GPIO_Init+0x178>)
 8000dd2:	f002 f9e3 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2104      	movs	r1, #4
 8000dda:	4831      	ldr	r0, [pc, #196]	; (8000ea0 <MX_GPIO_Init+0x17c>)
 8000ddc:	f002 f9de 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8000de0:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000de4:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4827      	ldr	r0, [pc, #156]	; (8000e98 <MX_GPIO_Init+0x174>)
 8000dfa:	f002 f855 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f002 f846 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin;
 8000e1c:	f240 4305 	movw	r3, #1029	; 0x405
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4819      	ldr	r0, [pc, #100]	; (8000e9c <MX_GPIO_Init+0x178>)
 8000e36:	f002 f837 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8000e3a:	f24f 2302 	movw	r3, #61954	; 0xf202
 8000e3e:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <MX_GPIO_Init+0x178>)
 8000e50:	f002 f82a 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 8000e54:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <MX_GPIO_Init+0x174>)
 8000e6a:	f002 f81d 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_GPIO_Init+0x17c>)
 8000e86:	f002 f80f 	bl	8002ea8 <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48000c00 	.word	0x48000c00

08000ea4 <steering_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_steering_task */
void steering_task(void *argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN steering_task */
  configure_steppers();
 8000eac:	f000 faca 	bl	8001444 <configure_steppers>
  //set_setpoint(STEERING, 400, CCW);
  /* Infinite loop */
  for(;;)
  {
	  steer();
 8000eb0:	f000 fb7e 	bl	80015b0 <steer>
	  osDelay(1);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f005 fb9f 	bl	80065f8 <osDelay>
	  steer();
 8000eba:	e7f9      	b.n	8000eb0 <steering_task+0xc>

08000ebc <braking_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_braking_task */
void braking_task(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN braking_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f005 fb97 	bl	80065f8 <osDelay>
 8000eca:	e7fb      	b.n	8000ec4 <braking_task+0x8>

08000ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ede:	f000 fbf3 	bl	80016c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40001000 	.word	0x40001000

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	f06f 0001 	mvn.w	r0, #1
 8000f3a:	f001 ff8b 	bl	8002e54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a0      	sub	sp, #128	; 0x80
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	225c      	movs	r2, #92	; 0x5c
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f008 fb3b 	bl	80095e8 <memset>
  if(hadc->Instance==ADC1)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a25      	ldr	r2, [pc, #148]	; (800100c <HAL_ADC_MspInit+0xc0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d142      	bne.n	8001002 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f80:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f86:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000f90:	2314      	movs	r3, #20
 8000f92:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f94:	2307      	movs	r3, #7
 8000f96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 ffda 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000fb6:	f7ff ff9b 	bl	8000ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_ADC_MspInit+0xc4>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_ADC_MspInit+0xc4>)
 8000fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_ADC_MspInit+0xc4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_ADC_MspInit+0xc4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_ADC_MspInit+0xc4>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_ADC_MspInit+0xc4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 8000fea:	2310      	movs	r3, #16
 8000fec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_ADC_MspInit+0xc8>)
 8000ffe:	f001 ff53 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	3780      	adds	r7, #128	; 0x80
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	50040000 	.word	0x50040000
 8001010:	40021000 	.word	0x40021000
 8001014:	48000800 	.word	0x48000800

08001018 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_CAN_MspInit+0x80>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d129      	bne.n	800108e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_CAN_MspInit+0x84>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001044:	6593      	str	r3, [r2, #88]	; 0x58
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800106a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800107c:	2309      	movs	r3, #9
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f001 ff0d 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40006400 	.word	0x40006400
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_TIM_Base_MspInit+0x78>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d114      	bne.n	80010dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010bc:	6613      	str	r3, [r2, #96]	; 0x60
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	201b      	movs	r0, #27
 80010d0:	f001 fec0 	bl	8002e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010d4:	201b      	movs	r0, #27
 80010d6:	f001 fed9 	bl	8002e8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010da:	e018      	b.n	800110e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e4:	d113      	bne.n	800110e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	4a0c      	ldr	r2, [pc, #48]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6593      	str	r3, [r2, #88]	; 0x58
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	201c      	movs	r0, #28
 8001104:	f001 fea6 	bl	8002e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001108:	201c      	movs	r0, #28
 800110a:	f001 febf 	bl	8002e8c <HAL_NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_TIM_MspPostInit+0xe8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11e      	bne.n	8001180 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a31      	ldr	r2, [pc, #196]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 800115a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800116c:	2301      	movs	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f001 fe95 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800117e:	e03f      	b.n	8001200 <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001188:	d13a      	bne.n	8001200 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a1f      	ldr	r2, [pc, #124]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_TIM_MspPostInit+0xec>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STPR_PWM_2_Pin;
 80011ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_2_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <HAL_TIM_MspPostInit+0xf0>)
 80011d8:	f001 fe66 	bl	8002ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STPR_PWM_1_Pin;
 80011dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_1_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f001 fe54 	bl	8002ea8 <HAL_GPIO_Init>
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a0      	sub	sp, #128	; 0x80
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	225c      	movs	r2, #92	; 0x5c
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f008 f9d7 	bl	80095e8 <memset>
  if(huart->Instance==USART1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_UART_MspInit+0xa8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d137      	bne.n	80012b4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fe87 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800125c:	f7ff fe48 	bl	8000ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0xac>)
 8001262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <HAL_UART_MspInit+0xac>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126a:	6613      	str	r3, [r2, #96]	; 0x60
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_UART_MspInit+0xac>)
 800126e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_UART_MspInit+0xac>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_UART_MspInit+0xac>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_UART_MspInit+0xac>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001290:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001294:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a2:	2307      	movs	r3, #7
 80012a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f001 fdfa 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3780      	adds	r7, #128	; 0x80
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	; 0x38
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <HAL_InitTick+0xe0>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	4a33      	ldr	r2, [pc, #204]	; (80013a4 <HAL_InitTick+0xe0>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	6593      	str	r3, [r2, #88]	; 0x58
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <HAL_InitTick+0xe0>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012ea:	f107 0210 	add.w	r2, r7, #16
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fda3 	bl	8003e40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d103      	bne.n	800130c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001304:	f002 fd70 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8001308:	6378      	str	r0, [r7, #52]	; 0x34
 800130a:	e004      	b.n	8001316 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800130c:	f002 fd6c 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8001310:	4603      	mov	r3, r0
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <HAL_InitTick+0xe4>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0c9b      	lsrs	r3, r3, #18
 8001320:	3b01      	subs	r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_InitTick+0xe8>)
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_InitTick+0xec>)
 8001328:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_InitTick+0xe8>)
 800132c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001330:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <HAL_InitTick+0xe8>)
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_InitTick+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_InitTick+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_InitTick+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <HAL_InitTick+0xe8>)
 800134c:	f003 f914 	bl	8004578 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001356:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800135a:	2b00      	cmp	r3, #0
 800135c:	d11b      	bne.n	8001396 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800135e:	4813      	ldr	r0, [pc, #76]	; (80013ac <HAL_InitTick+0xe8>)
 8001360:	f003 f962 	bl	8004628 <HAL_TIM_Base_Start_IT>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800136a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800136e:	2b00      	cmp	r3, #0
 8001370:	d111      	bne.n	8001396 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001372:	2036      	movs	r0, #54	; 0x36
 8001374:	f001 fd8a 	bl	8002e8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	d808      	bhi.n	8001390 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800137e:	2200      	movs	r2, #0
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	2036      	movs	r0, #54	; 0x36
 8001384:	f001 fd66 	bl	8002e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_InitTick+0xf0>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e002      	b.n	8001396 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800139a:	4618      	mov	r0, r3
 800139c:	3738      	adds	r7, #56	; 0x38
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	20000260 	.word	0x20000260
 80013b0:	40001000 	.word	0x40001000
 80013b4:	20000004 	.word	0x20000004

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <TIM1_CC_IRQHandler+0x10>)
 80013ea:	f003 fbd3 	bl	8004b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000013c 	.word	0x2000013c

080013f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <TIM2_IRQHandler+0x10>)
 80013fe:	f003 fbc9 	bl	8004b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000188 	.word	0x20000188

0800140c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <TIM6_DAC_IRQHandler+0x10>)
 8001412:	f003 fbbf 	bl	8004b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000260 	.word	0x20000260

08001420 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <configure_steppers>:

volatile stepper braking_stepper;
volatile stepper steering_stepper;

void configure_steppers()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	steering_stepper.MAX_ANGLE = 57;
	steering_stepper.STEP_ANGLE = 0.9;
	steering_stepper.MAX_STEPS = 63;		// Corresponding to the 57 deg
	steering_stepper.STEPS_REV = 400;
	*/
	steering_stepper.current_step = 0;
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <configure_steppers+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	839a      	strh	r2, [r3, #28]
	braking_stepper.MAX_ANGLE = 1;			// TBD
	braking_stepper.STEP_ANGLE = 1.8;		// TBD
	steering_stepper.MAX_STEPS = 63;		// TBD
	braking_stepper.STEPS_REV = 200;		// TBD
	*/
	braking_stepper.current_step = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <configure_steppers+0x44>)
 8001450:	2200      	movs	r2, #0
 8001452:	839a      	strh	r2, [r3, #28]

	HAL_GPIO_WritePin(GPIOC, STPR_EN_1_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145a:	480c      	ldr	r0, [pc, #48]	; (800148c <configure_steppers+0x48>)
 800145c:	f001 fe9e 	bl	800319c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin | LVL_SFTR_OE_2_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f240 4101 	movw	r1, #1025	; 0x401
 8001466:	480a      	ldr	r0, [pc, #40]	; (8001490 <configure_steppers+0x4c>)
 8001468:	f001 fe98 	bl	800319c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2104      	movs	r1, #4
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <configure_steppers+0x50>)
 8001472:	f001 fe93 	bl	800319c <HAL_GPIO_WritePin>

	//htim2.Instance->CCR1 = 5000;	// For duty cycle of 50%
	htim2.Instance->CCR1 = 500;	// For duty cycle of 50%
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <configure_steppers+0x54>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin, GPIO_PIN_SET);

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002cc 	.word	0x200002cc
 8001488:	200002ac 	.word	0x200002ac
 800148c:	48000800 	.word	0x48000800
 8001490:	48000400 	.word	0x48000400
 8001494:	48000c00 	.word	0x48000c00
 8001498:	20000188 	.word	0x20000188

0800149c <set_direction>:

void set_direction(const stepper_id stepper, int8_t direction){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	switch(stepper)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <set_direction+0x1c>
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d00e      	beq.n	80014d4 <set_direction+0x38>
		case BRAKING:
			braking_stepper.direction = direction;
			HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
			break;
		default:
			break;
 80014b6:	e017      	b.n	80014e8 <set_direction+0x4c>
			steering_stepper.direction = direction;
 80014b8:	79ba      	ldrb	r2, [r7, #6]
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <set_direction+0x54>)
 80014bc:	761a      	strb	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin, direction);
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	461a      	mov	r2, r3
 80014c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c6:	480b      	ldr	r0, [pc, #44]	; (80014f4 <set_direction+0x58>)
 80014c8:	f001 fe68 	bl	800319c <HAL_GPIO_WritePin>
			steering_stepper.mode = CONTROLLER;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <set_direction+0x54>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
			break;
 80014d2:	e009      	b.n	80014e8 <set_direction+0x4c>
			braking_stepper.direction = direction;
 80014d4:	79ba      	ldrb	r2, [r7, #6]
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <set_direction+0x5c>)
 80014d8:	761a      	strb	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	461a      	mov	r2, r3
 80014de:	2104      	movs	r1, #4
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <set_direction+0x58>)
 80014e2:	f001 fe5b 	bl	800319c <HAL_GPIO_WritePin>
			break;
 80014e6:	bf00      	nop
	}
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200002cc 	.word	0x200002cc
 80014f4:	48000800 	.word	0x48000800
 80014f8:	200002ac 	.word	0x200002ac

080014fc <set_setpoint>:

void set_setpoint(const stepper_id stepper, uint16_t setpoint, int8_t direction){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
 8001506:	460b      	mov	r3, r1
 8001508:	80bb      	strh	r3, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	71bb      	strb	r3, [r7, #6]
	switch(stepper)
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <set_setpoint+0x1e>
 8001514:	2b01      	cmp	r3, #1
 8001516:	d01f      	beq.n	8001558 <set_setpoint+0x5c>
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
				braking_stepper.current_step = 0;
			}
			break;
		default:
			break;
 8001518:	e03f      	b.n	800159a <set_setpoint+0x9e>
			if(steering_stepper.req_steps != setpoint || steering_stepper.direction != direction)
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <set_setpoint+0xa8>)
 800151c:	8b5b      	ldrh	r3, [r3, #26]
 800151e:	b29b      	uxth	r3, r3
 8001520:	88ba      	ldrh	r2, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	d107      	bne.n	8001536 <set_setpoint+0x3a>
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <set_setpoint+0xa8>)
 8001528:	7e1b      	ldrb	r3, [r3, #24]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001532:	429a      	cmp	r2, r3
 8001534:	d02e      	beq.n	8001594 <set_setpoint+0x98>
				steering_stepper.req_steps = setpoint;
 8001536:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <set_setpoint+0xa8>)
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	8353      	strh	r3, [r2, #26]
				steering_stepper.direction = direction;
 800153c:	79ba      	ldrb	r2, [r7, #6]
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <set_setpoint+0xa8>)
 8001540:	761a      	strb	r2, [r3, #24]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin, direction);
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	461a      	mov	r2, r3
 8001546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154a:	4817      	ldr	r0, [pc, #92]	; (80015a8 <set_setpoint+0xac>)
 800154c:	f001 fe26 	bl	800319c <HAL_GPIO_WritePin>
				steering_stepper.current_step = 0;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <set_setpoint+0xa8>)
 8001552:	2200      	movs	r2, #0
 8001554:	839a      	strh	r2, [r3, #28]
			break;
 8001556:	e01d      	b.n	8001594 <set_setpoint+0x98>
			if(braking_stepper.req_steps != setpoint || braking_stepper.direction != direction)
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <set_setpoint+0xb0>)
 800155a:	8b5b      	ldrh	r3, [r3, #26]
 800155c:	b29b      	uxth	r3, r3
 800155e:	88ba      	ldrh	r2, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <set_setpoint+0x78>
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <set_setpoint+0xb0>)
 8001566:	7e1b      	ldrb	r3, [r3, #24]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001570:	429a      	cmp	r2, r3
 8001572:	d011      	beq.n	8001598 <set_setpoint+0x9c>
				braking_stepper.req_steps = setpoint;
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <set_setpoint+0xb0>)
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	8353      	strh	r3, [r2, #26]
				braking_stepper.direction = direction;
 800157a:	79ba      	ldrb	r2, [r7, #6]
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <set_setpoint+0xb0>)
 800157e:	761a      	strb	r2, [r3, #24]
				HAL_GPIO_WritePin(GPIOC, STPR_DIR_2_Pin, direction);
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	461a      	mov	r2, r3
 8001584:	2104      	movs	r1, #4
 8001586:	4808      	ldr	r0, [pc, #32]	; (80015a8 <set_setpoint+0xac>)
 8001588:	f001 fe08 	bl	800319c <HAL_GPIO_WritePin>
				braking_stepper.current_step = 0;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <set_setpoint+0xb0>)
 800158e:	2200      	movs	r2, #0
 8001590:	839a      	strh	r2, [r3, #28]
			break;
 8001592:	e001      	b.n	8001598 <set_setpoint+0x9c>
			break;
 8001594:	bf00      	nop
 8001596:	e000      	b.n	800159a <set_setpoint+0x9e>
			break;
 8001598:	bf00      	nop
	}
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200002cc 	.word	0x200002cc
 80015a8:	48000800 	.word	0x48000800
 80015ac:	200002ac 	.word	0x200002ac

080015b0 <steer>:
		}
}
*/

void steer()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	if(steering_stepper.mode == CONTROLLER){
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <steer+0x5c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10e      	bne.n	80015dc <steer+0x2c>
		if(steering_stepper.direction != IDLE)
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <steer+0x5c>)
 80015c0:	7e1b      	ldrb	r3, [r3, #24]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d004      	beq.n	80015d2 <steer+0x22>
			HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80015c8:	2100      	movs	r1, #0
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <steer+0x60>)
 80015cc:	f003 f8e2 	bl	8004794 <HAL_TIM_PWM_Start_IT>
				  set_setpoint(STEERING, 400, CW);
			 */
			//osDelay(1000);
		}
	}
}
 80015d0:	e019      	b.n	8001606 <steer+0x56>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80015d2:	2100      	movs	r1, #0
 80015d4:	480e      	ldr	r0, [pc, #56]	; (8001610 <steer+0x60>)
 80015d6:	f003 fa09 	bl	80049ec <HAL_TIM_PWM_Stop_IT>
}
 80015da:	e014      	b.n	8001606 <steer+0x56>
		if(steering_stepper.current_step == 0)
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <steer+0x5c>)
 80015de:	8b9b      	ldrh	r3, [r3, #28]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d103      	bne.n	80015ee <steer+0x3e>
			HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80015e6:	2100      	movs	r1, #0
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <steer+0x60>)
 80015ea:	f003 f8d3 	bl	8004794 <HAL_TIM_PWM_Start_IT>
		if(steering_stepper.req_steps <= steering_stepper.current_step)
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <steer+0x5c>)
 80015f0:	8b5b      	ldrh	r3, [r3, #26]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <steer+0x5c>)
 80015f6:	8b9b      	ldrh	r3, [r3, #28]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d803      	bhi.n	8001606 <steer+0x56>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80015fe:	2100      	movs	r1, #0
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <steer+0x60>)
 8001602:	f003 f9f3 	bl	80049ec <HAL_TIM_PWM_Stop_IT>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002cc 	.word	0x200002cc
 8001610:	20000188 	.word	0x20000188

08001614 <HAL_TIM_PWM_PulseFinishedCallback>:
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
}


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d106      	bne.n	8001634 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	  steering_stepper.current_step++;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8001628:	8b9b      	ldrh	r3, [r3, #28]
 800162a:	b29b      	uxth	r3, r3
 800162c:	3301      	adds	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8001632:	839a      	strh	r2, [r3, #28]
	//braking_stepper.current_step++;
	//HAL_GPIO_TogglePin(GPIOA, DEBUG_2_Pin);
  }
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	200002cc 	.word	0x200002cc

08001644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001648:	f7ff feea 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <LoopForever+0x6>)
  ldr r1, =_edata
 800164e:	490d      	ldr	r1, [pc, #52]	; (8001684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <LoopForever+0xe>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001664:	4c0a      	ldr	r4, [pc, #40]	; (8001690 <LoopForever+0x16>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001672:	f007 ff85 	bl	8009580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001676:	f7ff f8cf 	bl	8000818 <main>

0800167a <LoopForever>:

LoopForever:
    b LoopForever
 800167a:	e7fe      	b.n	800167a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800167c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001688:	08009954 	.word	0x08009954
  ldr r2, =_sbss
 800168c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001690:	20003060 	.word	0x20003060

08001694 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC1_IRQHandler>

08001696 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f001 fbcc 	bl	8002e3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a6:	200f      	movs	r0, #15
 80016a8:	f7ff fe0c 	bl	80012c4 <HAL_InitTick>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	e001      	b.n	80016bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b8:	f7ff fc20 	bl	8000efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016bc:	79fb      	ldrb	r3, [r7, #7]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	200002ec 	.word	0x200002ec

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200002ec 	.word	0x200002ec

08001708 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3360      	adds	r3, #96	; 0x60
 8001782:	461a      	mov	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <LL_ADC_SetOffset+0x44>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	4313      	orrs	r3, r2
 80017a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	03fff000 	.word	0x03fff000

080017b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3360      	adds	r3, #96	; 0x60
 80017c6:	461a      	mov	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3360      	adds	r3, #96	; 0x60
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800181a:	b480      	push	{r7}
 800181c:	b087      	sub	sp, #28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3330      	adds	r3, #48	; 0x30
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	4413      	add	r3, r2
 8001838:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	211f      	movs	r1, #31
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0e9b      	lsrs	r3, r3, #26
 8001852:	f003 011f 	and.w	r1, r3, #31
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001872:	b480      	push	{r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3314      	adds	r3, #20
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0e5b      	lsrs	r3, r3, #25
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	0d1b      	lsrs	r3, r3, #20
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2107      	movs	r1, #7
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	0d1b      	lsrs	r3, r3, #20
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	431a      	orrs	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0318 	and.w	r3, r3, #24
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <LL_ADC_SetChannelSingleDiff+0x44>)
 80018ec:	40d9      	lsrs	r1, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	400b      	ands	r3, r1
 80018f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	0007ffff 	.word	0x0007ffff

08001910 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6093      	str	r3, [r2, #8]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001948:	d101      	bne.n	800194e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800196c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001970:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001998:	d101      	bne.n	800199e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <LL_ADC_IsEnabled+0x18>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_ADC_IsEnabled+0x1a>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d101      	bne.n	80019ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d101      	bne.n	8001a10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e12c      	b.n	8001c94 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fa7f 	bl	8000f4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff67 	bl	8001934 <LL_ADC_IsDeepPowerDownEnabled>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff4d 	bl	8001910 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff82 	bl	8001984 <LL_ADC_IsInternalRegulatorEnabled>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff66 	bl	800195c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a90:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_ADC_Init+0x27c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	4a82      	ldr	r2, [pc, #520]	; (8001ca0 <HAL_ADC_Init+0x280>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f9      	bne.n	8001aa6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff64 	bl	8001984 <LL_ADC_IsInternalRegulatorEnabled>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10d      	bne.n	8001ade <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff75 	bl	80019d2 <LL_ADC_REG_IsConversionOngoing>
 8001ae8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80c5 	bne.w	8001c82 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 80c1 	bne.w	8001c82 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b08:	f043 0202 	orr.w	r2, r3, #2
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff49 	bl	80019ac <LL_ADC_IsEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10b      	bne.n	8001b38 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b20:	4860      	ldr	r0, [pc, #384]	; (8001ca4 <HAL_ADC_Init+0x284>)
 8001b22:	f7ff ff43 	bl	80019ac <LL_ADC_IsEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4619      	mov	r1, r3
 8001b32:	485d      	ldr	r0, [pc, #372]	; (8001ca8 <HAL_ADC_Init+0x288>)
 8001b34:	f7ff fde8 	bl	8001708 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e5b      	ldrb	r3, [r3, #25]
 8001b3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d106      	bne.n	8001b74 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	045b      	lsls	r3, r3, #17
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d009      	beq.n	8001b90 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	4b45      	ldr	r3, [pc, #276]	; (8001cac <HAL_ADC_Init+0x28c>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	69b9      	ldr	r1, [r7, #24]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff12 	bl	80019d2 <LL_ADC_REG_IsConversionOngoing>
 8001bae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff1f 	bl	80019f8 <LL_ADC_INJ_IsConversionOngoing>
 8001bba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d13d      	bne.n	8001c3e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d13a      	bne.n	8001c3e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bcc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bd4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001be4:	f023 0302 	bic.w	r3, r3, #2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	69b9      	ldr	r1, [r7, #24]
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d118      	bne.n	8001c2e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c06:	f023 0304 	bic.w	r3, r3, #4
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c18:	4311      	orrs	r1, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	e007      	b.n	8001c3e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d10c      	bne.n	8001c60 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f023 010f 	bic.w	r1, r3, #15
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	1e5a      	subs	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5e:	e007      	b.n	8001c70 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 020f 	bic.w	r2, r2, #15
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f023 0303 	bic.w	r3, r3, #3
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001c80:	e007      	b.n	8001c92 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	053e2d63 	.word	0x053e2d63
 8001ca4:	50040000 	.word	0x50040000
 8001ca8:	50040300 	.word	0x50040300
 8001cac:	fff0c007 	.word	0xfff0c007

08001cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0b6      	sub	sp, #216	; 0xd8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x22>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e3b9      	b.n	8002446 <HAL_ADC_ConfigChannel+0x796>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fe77 	bl	80019d2 <LL_ADC_REG_IsConversionOngoing>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 839e 	bne.w	8002428 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d824      	bhi.n	8001d3e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	3b02      	subs	r3, #2
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d81b      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0x86>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <HAL_ADC_ConfigChannel+0x54>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001d1d 	.word	0x08001d1d
 8001d0c:	08001d25 	.word	0x08001d25
 8001d10:	08001d2d 	.word	0x08001d2d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	220c      	movs	r2, #12
 8001d18:	605a      	str	r2, [r3, #4]
          break;
 8001d1a:	e011      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2212      	movs	r2, #18
 8001d20:	605a      	str	r2, [r3, #4]
          break;
 8001d22:	e00d      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2218      	movs	r2, #24
 8001d28:	605a      	str	r2, [r3, #4]
          break;
 8001d2a:	e009      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d32:	605a      	str	r2, [r3, #4]
          break;
 8001d34:	e004      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2206      	movs	r2, #6
 8001d3a:	605a      	str	r2, [r3, #4]
          break;
 8001d3c:	e000      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d3e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f7ff fd64 	bl	800181a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe3b 	bl	80019d2 <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fe47 	bl	80019f8 <LL_ADC_INJ_IsConversionOngoing>
 8001d6a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 81a6 	bne.w	80020c4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 81a1 	bne.w	80020c4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f7ff fd6f 	bl	8001872 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	08db      	lsrs	r3, r3, #3
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d00a      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6919      	ldr	r1, [r3, #16]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dc6:	f7ff fcd3 	bl	8001770 <LL_ADC_SetOffset>
 8001dca:	e17b      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fcf0 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10a      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x148>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fce5 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	0e9b      	lsrs	r3, r3, #26
 8001df2:	f003 021f 	and.w	r2, r3, #31
 8001df6:	e01e      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x186>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fcda 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e004      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x19e>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0e9b      	lsrs	r3, r3, #26
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	e018      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x1d0>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e004      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fca9 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fc8d 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x20e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fc82 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	e01e      	b.n	8001efc <HAL_ADC_ConfigChannel+0x24c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fc77 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e004      	b.n	8001efa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x264>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	e018      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x296>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	e004      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d106      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2101      	movs	r1, #1
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fc46 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fc2a 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10a      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x2d4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2102      	movs	r1, #2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fc1f 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	0e9b      	lsrs	r3, r3, #26
 8001f7e:	f003 021f 	and.w	r2, r3, #31
 8001f82:	e01e      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x312>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2102      	movs	r1, #2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fc14 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e004      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x32a>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0e9b      	lsrs	r3, r3, #26
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	e016      	b.n	8002008 <HAL_ADC_ConfigChannel+0x358>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	e004      	b.n	8002008 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002008:	429a      	cmp	r2, r3
 800200a:	d106      	bne.n	800201a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	2102      	movs	r1, #2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fbe5 	bl	80017e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2103      	movs	r1, #3
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fbc9 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x396>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2103      	movs	r1, #3
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fbbe 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	e017      	b.n	8002076 <HAL_ADC_ConfigChannel+0x3c6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2103      	movs	r1, #3
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fbb3 	bl	80017b8 <LL_ADC_GetOffsetChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800205e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002060:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e003      	b.n	8002074 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800206c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <HAL_ADC_ConfigChannel+0x3de>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0e9b      	lsrs	r3, r3, #26
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	e011      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x402>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800209c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800209e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e003      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80020aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d106      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	2103      	movs	r1, #3
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fb90 	bl	80017e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fc6f 	bl	80019ac <LL_ADC_IsEnabled>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 813f 	bne.w	8002354 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f7ff fbf0 	bl	80018c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a8e      	ldr	r2, [pc, #568]	; (8002328 <HAL_ADC_ConfigChannel+0x678>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	f040 8130 	bne.w	8002354 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <HAL_ADC_ConfigChannel+0x46c>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	3301      	adds	r3, #1
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2b09      	cmp	r3, #9
 8002112:	bf94      	ite	ls
 8002114:	2301      	movls	r3, #1
 8002116:	2300      	movhi	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	e019      	b.n	8002150 <HAL_ADC_ConfigChannel+0x4a0>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800212a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800212e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e003      	b.n	8002140 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2b09      	cmp	r3, #9
 8002148:	bf94      	ite	ls
 800214a:	2301      	movls	r3, #1
 800214c:	2300      	movhi	r3, #0
 800214e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002150:	2b00      	cmp	r3, #0
 8002152:	d079      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x4c0>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0e9b      	lsrs	r3, r3, #26
 8002166:	3301      	adds	r3, #1
 8002168:	069b      	lsls	r3, r3, #26
 800216a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216e:	e015      	b.n	800219c <HAL_ADC_ConfigChannel+0x4ec>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800217e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002180:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e003      	b.n	8002194 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800218c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	069b      	lsls	r3, r3, #26
 8002198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x50c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	3301      	adds	r3, #1
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	e017      	b.n	80021ec <HAL_ADC_ConfigChannel+0x53c>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80021d4:	2320      	movs	r3, #32
 80021d6:	e003      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80021d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	ea42 0103 	orr.w	r1, r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x562>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	3301      	adds	r3, #1
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	051b      	lsls	r3, r3, #20
 8002210:	e018      	b.n	8002244 <HAL_ADC_ConfigChannel+0x594>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e003      	b.n	8002236 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800222e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	3301      	adds	r3, #1
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002244:	430b      	orrs	r3, r1
 8002246:	e080      	b.n	800234a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x5b4>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	3301      	adds	r3, #1
 800225c:	069b      	lsls	r3, r3, #26
 800225e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002262:	e015      	b.n	8002290 <HAL_ADC_ConfigChannel+0x5e0>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e003      	b.n	8002288 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	069b      	lsls	r3, r3, #26
 800228c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x600>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	3301      	adds	r3, #1
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	e017      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x630>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	61fb      	str	r3, [r7, #28]
  return result;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e003      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	ea42 0103 	orr.w	r1, r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10d      	bne.n	800230c <HAL_ADC_ConfigChannel+0x65c>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	3301      	adds	r3, #1
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	3b1e      	subs	r3, #30
 8002304:	051b      	lsls	r3, r3, #20
 8002306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800230a:	e01d      	b.n	8002348 <HAL_ADC_ConfigChannel+0x698>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	613b      	str	r3, [r7, #16]
  return result;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d103      	bne.n	800232c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e005      	b.n	8002334 <HAL_ADC_ConfigChannel+0x684>
 8002328:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f003 021f 	and.w	r2, r3, #31
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	3b1e      	subs	r3, #30
 8002342:	051b      	lsls	r3, r3, #20
 8002344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002348:	430b      	orrs	r3, r1
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	6892      	ldr	r2, [r2, #8]
 800234e:	4619      	mov	r1, r3
 8002350:	f7ff fa8f 	bl	8001872 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <HAL_ADC_ConfigChannel+0x7a0>)
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d06c      	beq.n	800243a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002360:	483c      	ldr	r0, [pc, #240]	; (8002454 <HAL_ADC_ConfigChannel+0x7a4>)
 8002362:	f7ff f9f7 	bl	8001754 <LL_ADC_GetCommonPathInternalCh>
 8002366:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a3a      	ldr	r2, [pc, #232]	; (8002458 <HAL_ADC_ConfigChannel+0x7a8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d127      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d121      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a35      	ldr	r2, [pc, #212]	; (800245c <HAL_ADC_ConfigChannel+0x7ac>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d157      	bne.n	800243a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800238a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800238e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002392:	4619      	mov	r1, r3
 8002394:	482f      	ldr	r0, [pc, #188]	; (8002454 <HAL_ADC_ConfigChannel+0x7a4>)
 8002396:	f7ff f9ca 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_ADC_ConfigChannel+0x7b0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	4a30      	ldr	r2, [pc, #192]	; (8002464 <HAL_ADC_ConfigChannel+0x7b4>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	099b      	lsrs	r3, r3, #6
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023b4:	e002      	b.n	80023bc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f9      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c2:	e03a      	b.n	800243a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <HAL_ADC_ConfigChannel+0x7b8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d113      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x746>
 80023ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <HAL_ADC_ConfigChannel+0x7ac>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d12a      	bne.n	800243a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ec:	4619      	mov	r1, r3
 80023ee:	4819      	ldr	r0, [pc, #100]	; (8002454 <HAL_ADC_ConfigChannel+0x7a4>)
 80023f0:	f7ff f99d 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f4:	e021      	b.n	800243a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1c      	ldr	r2, [pc, #112]	; (800246c <HAL_ADC_ConfigChannel+0x7bc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d11c      	bne.n	800243a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d116      	bne.n	800243a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_ADC_ConfigChannel+0x7ac>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d111      	bne.n	800243a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800241a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800241e:	4619      	mov	r1, r3
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <HAL_ADC_ConfigChannel+0x7a4>)
 8002422:	f7ff f984 	bl	800172e <LL_ADC_SetCommonPathInternalCh>
 8002426:	e008      	b.n	800243a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002442:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002446:	4618      	mov	r0, r3
 8002448:	37d8      	adds	r7, #216	; 0xd8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	80080000 	.word	0x80080000
 8002454:	50040300 	.word	0x50040300
 8002458:	c7520000 	.word	0xc7520000
 800245c:	50040000 	.word	0x50040000
 8002460:	20000000 	.word	0x20000000
 8002464:	053e2d63 	.word	0x053e2d63
 8002468:	cb840000 	.word	0xcb840000
 800246c:	80000001 	.word	0x80000001

08002470 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0ed      	b.n	800265e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fdc2 	bl	8001018 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a4:	f7ff f924 	bl	80016f0 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024aa:	e012      	b.n	80024d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ac:	f7ff f920 	bl	80016f0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b0a      	cmp	r3, #10
 80024b8:	d90b      	bls.n	80024d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2205      	movs	r2, #5
 80024ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e0c5      	b.n	800265e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0e5      	beq.n	80024ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0202 	bic.w	r2, r2, #2
 80024ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f0:	f7ff f8fe 	bl	80016f0 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024f6:	e012      	b.n	800251e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f8:	f7ff f8fa 	bl	80016f0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b0a      	cmp	r3, #10
 8002504:	d90b      	bls.n	800251e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2205      	movs	r2, #5
 8002516:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e09f      	b.n	800265e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1e5      	bne.n	80024f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7e1b      	ldrb	r3, [r3, #24]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d108      	bne.n	8002546 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e007      	b.n	8002556 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7e5b      	ldrb	r3, [r3, #25]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e007      	b.n	8002580 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e9b      	ldrb	r3, [r3, #26]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d108      	bne.n	800259a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0220 	orr.w	r2, r2, #32
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e007      	b.n	80025aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0220 	bic.w	r2, r2, #32
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7edb      	ldrb	r3, [r3, #27]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0210 	bic.w	r2, r2, #16
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e007      	b.n	80025d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0210 	orr.w	r2, r2, #16
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7f1b      	ldrb	r3, [r3, #28]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d108      	bne.n	80025ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0208 	orr.w	r2, r2, #8
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e007      	b.n	80025fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7f5b      	ldrb	r3, [r3, #29]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0204 	orr.w	r2, r2, #4
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e007      	b.n	8002628 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	ea42 0103 	orr.w	r1, r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002666:	b480      	push	{r7}
 8002668:	b087      	sub	sp, #28
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d003      	beq.n	800268c <HAL_CAN_ConfigFilter+0x26>
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b02      	cmp	r3, #2
 8002688:	f040 80aa 	bne.w	80027e0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2201      	movs	r2, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d123      	bne.n	800270e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	401a      	ands	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3248      	adds	r2, #72	; 0x48
 80026ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002702:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002704:	6979      	ldr	r1, [r7, #20]
 8002706:	3348      	adds	r3, #72	; 0x48
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d122      	bne.n	800275c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	431a      	orrs	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002736:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3248      	adds	r2, #72	; 0x48
 800273c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002750:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002752:	6979      	ldr	r1, [r7, #20]
 8002754:	3348      	adds	r3, #72	; 0x48
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	43db      	mvns	r3, r3
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002776:	e007      	b.n	8002788 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	431a      	orrs	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43db      	mvns	r3, r3
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027a2:	e007      	b.n	80027b4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027d2:	f023 0201 	bic.w	r2, r3, #1
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e006      	b.n	80027ee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d12e      	bne.n	800286c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002826:	f7fe ff63 	bl	80016f0 <HAL_GetTick>
 800282a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800282c:	e012      	b.n	8002854 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800282e:	f7fe ff5f 	bl	80016f0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b0a      	cmp	r3, #10
 800283a:	d90b      	bls.n	8002854 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2205      	movs	r2, #5
 800284c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e012      	b.n	800287a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e5      	bne.n	800282e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e006      	b.n	800287a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002882:	b480      	push	{r7}
 8002884:	b089      	sub	sp, #36	; 0x24
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002896:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028a0:	7ffb      	ldrb	r3, [r7, #31]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d003      	beq.n	80028ae <HAL_CAN_AddTxMessage+0x2c>
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	f040 80ad 	bne.w	8002a08 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8095 	beq.w	80029f8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	0e1b      	lsrs	r3, r3, #24
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028d8:	2201      	movs	r2, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	409a      	lsls	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10d      	bne.n	8002906 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	6809      	ldr	r1, [r1, #0]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3318      	adds	r3, #24
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	440b      	add	r3, r1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e00f      	b.n	8002926 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002910:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800291a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3318      	adds	r3, #24
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	440b      	add	r3, r1
 8002924:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3318      	adds	r3, #24
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	440b      	add	r3, r1
 8002936:	3304      	adds	r3, #4
 8002938:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	7d1b      	ldrb	r3, [r3, #20]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d111      	bne.n	8002966 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3318      	adds	r3, #24
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	4413      	add	r3, r2
 800294e:	3304      	adds	r3, #4
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	6811      	ldr	r1, [r2, #0]
 8002956:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3318      	adds	r3, #24
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	440b      	add	r3, r1
 8002962:	3304      	adds	r3, #4
 8002964:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3307      	adds	r3, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	061a      	lsls	r2, r3, #24
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3306      	adds	r3, #6
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	041b      	lsls	r3, r3, #16
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3305      	adds	r3, #5
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	4313      	orrs	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	3204      	adds	r2, #4
 8002986:	7812      	ldrb	r2, [r2, #0]
 8002988:	4610      	mov	r0, r2
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	6811      	ldr	r1, [r2, #0]
 800298e:	ea43 0200 	orr.w	r2, r3, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	440b      	add	r3, r1
 8002998:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800299c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3303      	adds	r3, #3
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	061a      	lsls	r2, r3, #24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3302      	adds	r3, #2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	041b      	lsls	r3, r3, #16
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	4313      	orrs	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	4610      	mov	r0, r2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6811      	ldr	r1, [r2, #0]
 80029c4:	ea43 0200 	orr.w	r2, r3, r0
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	440b      	add	r3, r1
 80029ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3318      	adds	r3, #24
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4413      	add	r3, r2
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	6811      	ldr	r1, [r2, #0]
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3318      	adds	r3, #24
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e00e      	b.n	8002a16 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e006      	b.n	8002a16 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a36:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d003      	beq.n	8002a46 <HAL_CAN_GetRxMessage+0x24>
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	f040 80f3 	bne.w	8002c2c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10e      	bne.n	8002a6a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d116      	bne.n	8002a88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0e7      	b.n	8002c3a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0d8      	b.n	8002c3a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	331b      	adds	r3, #27
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	4413      	add	r3, r2
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0204 	and.w	r2, r3, #4
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	331b      	adds	r3, #27
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0d5b      	lsrs	r3, r3, #21
 8002ab6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	331b      	adds	r3, #27
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	4413      	add	r3, r2
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	08db      	lsrs	r3, r3, #3
 8002ad0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	331b      	adds	r3, #27
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0202 	and.w	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	331b      	adds	r3, #27
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 020f 	and.w	r2, r3, #15
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	331b      	adds	r3, #27
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	331b      	adds	r3, #27
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0a1a      	lsrs	r2, r3, #8
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0c1a      	lsrs	r2, r3, #16
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e1a      	lsrs	r2, r3, #24
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	3303      	adds	r3, #3
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	3304      	adds	r3, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0a1a      	lsrs	r2, r3, #8
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	3305      	adds	r3, #5
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0c1a      	lsrs	r2, r3, #16
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	3306      	adds	r3, #6
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0e1a      	lsrs	r2, r3, #24
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	3307      	adds	r3, #7
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d108      	bne.n	8002c18 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0220 	orr.w	r2, r2, #32
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	e007      	b.n	8002c28 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0220 	orr.w	r2, r2, #32
 8002c26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e006      	b.n	8002c3a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d002      	beq.n	8002c68 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d10f      	bne.n	8002c88 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e005      	b.n	8002c88 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002c88:	68fb      	ldr	r3, [r7, #12]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d002      	beq.n	8002cb4 <HAL_CAN_ActivateNotification+0x1e>
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d109      	bne.n	8002cc8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6959      	ldr	r1, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e006      	b.n	8002cd6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
  }
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d16:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	60d3      	str	r3, [r2, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4907      	ldr	r1, [pc, #28]	; (8002d80 <__NVIC_EnableIRQ+0x38>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	; (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	; (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf28      	it	cs
 8002df6:	2304      	movcs	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <NVIC_EncodePriority+0x30>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	e000      	b.n	8002e0a <NVIC_EncodePriority+0x32>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	4313      	orrs	r3, r2
         );
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff4c 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e66:	f7ff ff61 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002e6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	6978      	ldr	r0, [r7, #20]
 8002e72:	f7ff ffb1 	bl	8002dd8 <NVIC_EncodePriority>
 8002e76:	4602      	mov	r2, r0
 8002e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff80 	bl	8002d84 <__NVIC_SetPriority>
}
 8002e84:	bf00      	nop
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff54 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb6:	e154      	b.n	8003162 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8146 	beq.w	800315c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d005      	beq.n	8002ee8 <HAL_GPIO_Init+0x40>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d130      	bne.n	8002f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1e:	2201      	movs	r2, #1
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 0201 	and.w	r2, r3, #1
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d017      	beq.n	8002f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d123      	bne.n	8002fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	6939      	ldr	r1, [r7, #16]
 8002fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0203 	and.w	r2, r3, #3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80a0 	beq.w	800315c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301c:	4b58      	ldr	r3, [pc, #352]	; (8003180 <HAL_GPIO_Init+0x2d8>)
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_GPIO_Init+0x2d8>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6613      	str	r3, [r2, #96]	; 0x60
 8003028:	4b55      	ldr	r3, [pc, #340]	; (8003180 <HAL_GPIO_Init+0x2d8>)
 800302a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003034:	4a53      	ldr	r2, [pc, #332]	; (8003184 <HAL_GPIO_Init+0x2dc>)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	220f      	movs	r2, #15
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800305e:	d019      	beq.n	8003094 <HAL_GPIO_Init+0x1ec>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a49      	ldr	r2, [pc, #292]	; (8003188 <HAL_GPIO_Init+0x2e0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_GPIO_Init+0x1e8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a48      	ldr	r2, [pc, #288]	; (800318c <HAL_GPIO_Init+0x2e4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00d      	beq.n	800308c <HAL_GPIO_Init+0x1e4>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a47      	ldr	r2, [pc, #284]	; (8003190 <HAL_GPIO_Init+0x2e8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <HAL_GPIO_Init+0x1e0>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a46      	ldr	r2, [pc, #280]	; (8003194 <HAL_GPIO_Init+0x2ec>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <HAL_GPIO_Init+0x1dc>
 8003080:	2304      	movs	r3, #4
 8003082:	e008      	b.n	8003096 <HAL_GPIO_Init+0x1ee>
 8003084:	2307      	movs	r3, #7
 8003086:	e006      	b.n	8003096 <HAL_GPIO_Init+0x1ee>
 8003088:	2303      	movs	r3, #3
 800308a:	e004      	b.n	8003096 <HAL_GPIO_Init+0x1ee>
 800308c:	2302      	movs	r3, #2
 800308e:	e002      	b.n	8003096 <HAL_GPIO_Init+0x1ee>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_GPIO_Init+0x1ee>
 8003094:	2300      	movs	r3, #0
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	f002 0203 	and.w	r2, r2, #3
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	4093      	lsls	r3, r2
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030a6:	4937      	ldr	r1, [pc, #220]	; (8003184 <HAL_GPIO_Init+0x2dc>)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b4:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d8:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003102:	4a25      	ldr	r2, [pc, #148]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800312c:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f aea3 	bne.w	8002eb8 <HAL_GPIO_Init+0x10>
  }
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40021000 	.word	0x40021000
 8003184:	40010000 	.word	0x40010000
 8003188:	48000400 	.word	0x48000400
 800318c:	48000800 	.word	0x48000800
 8003190:	48000c00 	.word	0x48000c00
 8003194:	48001000 	.word	0x48001000
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
 80031a8:	4613      	mov	r3, r2
 80031aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031b8:	e002      	b.n	80031c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40007000 	.word	0x40007000

080031e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f6:	d130      	bne.n	800325a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003204:	d038      	beq.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800320e:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2232      	movs	r2, #50	; 0x32
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0c9b      	lsrs	r3, r3, #18
 8003228:	3301      	adds	r3, #1
 800322a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322c:	e002      	b.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3b01      	subs	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d102      	bne.n	8003248 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f2      	bne.n	800322e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003254:	d110      	bne.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e00f      	b.n	800327a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d007      	beq.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003270:	4a05      	ldr	r2, [pc, #20]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003276:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40007000 	.word	0x40007000
 800328c:	20000000 	.word	0x20000000
 8003290:	431bde83 	.word	0x431bde83

08003294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f000 bc02 	b.w	8003aac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a8:	4b96      	ldr	r3, [pc, #600]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b2:	4b94      	ldr	r3, [pc, #592]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80e4 	beq.w	8003492 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <HAL_RCC_OscConfig+0x4c>
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	f040 808b 	bne.w	80033ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	f040 8087 	bne.w	80033ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e0:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x64>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e3d9      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1a      	ldr	r2, [r3, #32]
 80032fc:	4b81      	ldr	r3, [pc, #516]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <HAL_RCC_OscConfig+0x7e>
 8003308:	4b7e      	ldr	r3, [pc, #504]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003310:	e005      	b.n	800331e <HAL_RCC_OscConfig+0x8a>
 8003312:	4b7c      	ldr	r3, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331e:	4293      	cmp	r3, r2
 8003320:	d223      	bcs.n	800336a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fdbc 	bl	8003ea4 <RCC_SetFlashLatencyFromMSIRange>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e3ba      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a72      	ldr	r2, [pc, #456]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	496d      	ldr	r1, [pc, #436]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003354:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	4968      	ldr	r1, [pc, #416]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	e025      	b.n	80033b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336a:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4960      	ldr	r1, [pc, #384]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003388:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	495b      	ldr	r1, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fd7c 	bl	8003ea4 <RCC_SetFlashLatencyFromMSIRange>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e37a      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b6:	f000 fc81 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b51      	ldr	r3, [pc, #324]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	4950      	ldr	r1, [pc, #320]	; (8003508 <HAL_RCC_OscConfig+0x274>)
 80033c8:	5ccb      	ldrb	r3, [r1, r3]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	fa22 f303 	lsr.w	r3, r2, r3
 80033d2:	4a4e      	ldr	r2, [pc, #312]	; (800350c <HAL_RCC_OscConfig+0x278>)
 80033d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033d6:	4b4e      	ldr	r3, [pc, #312]	; (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd ff72 	bl	80012c4 <HAL_InitTick>
 80033e0:	4603      	mov	r3, r0
 80033e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d052      	beq.n	8003490 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	e35e      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d032      	beq.n	800345c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033f6:	4b43      	ldr	r3, [pc, #268]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a42      	ldr	r2, [pc, #264]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003402:	f7fe f975 	bl	80016f0 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340a:	f7fe f971 	bl	80016f0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e347      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800341c:	4b39      	ldr	r3, [pc, #228]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a35      	ldr	r2, [pc, #212]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	4930      	ldr	r1, [pc, #192]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	492b      	ldr	r1, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
 800345a:	e01a      	b.n	8003492 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003468:	f7fe f942 	bl	80016f0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003470:	f7fe f93e 	bl	80016f0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e314      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x1dc>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d073      	beq.n	8003586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_OscConfig+0x21c>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d10e      	bne.n	80034c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d10b      	bne.n	80034c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d063      	beq.n	8003584 <HAL_RCC_OscConfig+0x2f0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d15f      	bne.n	8003584 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e2f1      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCC_OscConfig+0x24c>
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e025      	b.n	800352c <HAL_RCC_OscConfig+0x298>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e8:	d114      	bne.n	8003514 <HAL_RCC_OscConfig+0x280>
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a05      	ldr	r2, [pc, #20]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80034f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a02      	ldr	r2, [pc, #8]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e013      	b.n	800352c <HAL_RCC_OscConfig+0x298>
 8003504:	40021000 	.word	0x40021000
 8003508:	0800989c 	.word	0x0800989c
 800350c:	20000000 	.word	0x20000000
 8003510:	20000004 	.word	0x20000004
 8003514:	4ba0      	ldr	r3, [pc, #640]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a9f      	ldr	r2, [pc, #636]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b9d      	ldr	r3, [pc, #628]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a9c      	ldr	r2, [pc, #624]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe f8dc 	bl	80016f0 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe f8d8 	bl	80016f0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e2ae      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354e:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x2a8>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe f8c8 	bl	80016f0 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe f8c4 	bl	80016f0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e29a      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003576:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x2d0>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d060      	beq.n	8003654 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_OscConfig+0x310>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d119      	bne.n	80035d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d116      	bne.n	80035d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a4:	4b7c      	ldr	r3, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_OscConfig+0x328>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e277      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035bc:	4b76      	ldr	r3, [pc, #472]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	4973      	ldr	r1, [pc, #460]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d0:	e040      	b.n	8003654 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d023      	beq.n	8003622 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035da:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6e      	ldr	r2, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fe f883 	bl	80016f0 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe f87f 	bl	80016f0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e255      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003600:	4b65      	ldr	r3, [pc, #404]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b62      	ldr	r3, [pc, #392]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	061b      	lsls	r3, r3, #24
 800361a:	495f      	ldr	r1, [pc, #380]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
 8003620:	e018      	b.n	8003654 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe f85f 	bl	80016f0 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fe f85b 	bl	80016f0 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e231      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d03c      	beq.n	80036da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01c      	beq.n	80036a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366e:	4a4a      	ldr	r2, [pc, #296]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fe f83a 	bl	80016f0 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003680:	f7fe f836 	bl	80016f0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e20c      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003692:	4b41      	ldr	r3, [pc, #260]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ef      	beq.n	8003680 <HAL_RCC_OscConfig+0x3ec>
 80036a0:	e01b      	b.n	80036da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a2:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80036a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a8:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fe f81d 	bl	80016f0 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ba:	f7fe f819 	bl	80016f0 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e1ef      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036cc:	4b32      	ldr	r3, [pc, #200]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ef      	bne.n	80036ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80a6 	beq.w	8003834 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e8:	2300      	movs	r3, #0
 80036ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10d      	bne.n	8003714 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6593      	str	r3, [r2, #88]	; 0x58
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003710:	2301      	movs	r3, #1
 8003712:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <HAL_RCC_OscConfig+0x508>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d118      	bne.n	8003752 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003720:	4b1e      	ldr	r3, [pc, #120]	; (800379c <HAL_RCC_OscConfig+0x508>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_RCC_OscConfig+0x508>)
 8003726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372c:	f7fd ffe0 	bl	80016f0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003734:	f7fd ffdc 	bl	80016f0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1b2      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_RCC_OscConfig+0x508>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d108      	bne.n	800376c <HAL_RCC_OscConfig+0x4d8>
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800376a:	e029      	b.n	80037c0 <HAL_RCC_OscConfig+0x52c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d115      	bne.n	80037a0 <HAL_RCC_OscConfig+0x50c>
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	4a07      	ldr	r2, [pc, #28]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 800377c:	f043 0304 	orr.w	r3, r3, #4
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	4a03      	ldr	r2, [pc, #12]	; (8003798 <HAL_RCC_OscConfig+0x504>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003794:	e014      	b.n	80037c0 <HAL_RCC_OscConfig+0x52c>
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
 80037a0:	4b9a      	ldr	r3, [pc, #616]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	4a99      	ldr	r2, [pc, #612]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b0:	4b96      	ldr	r3, [pc, #600]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	4a95      	ldr	r2, [pc, #596]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d016      	beq.n	80037f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fd ff92 	bl	80016f0 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fd ff8e 	bl	80016f0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e162      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e6:	4b89      	ldr	r3, [pc, #548]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ed      	beq.n	80037d0 <HAL_RCC_OscConfig+0x53c>
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fd ff7b 	bl	80016f0 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd ff77 	bl	80016f0 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e14b      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003814:	4b7d      	ldr	r3, [pc, #500]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ed      	bne.n	80037fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003828:	4b78      	ldr	r3, [pc, #480]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	4a77      	ldr	r2, [pc, #476]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 800382e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003832:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03c      	beq.n	80038ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01c      	beq.n	8003882 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003848:	4b70      	ldr	r3, [pc, #448]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 800384a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800384e:	4a6f      	ldr	r2, [pc, #444]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fd ff4a 	bl	80016f0 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003860:	f7fd ff46 	bl	80016f0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e11c      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003872:	4b66      	ldr	r3, [pc, #408]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 8003874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ef      	beq.n	8003860 <HAL_RCC_OscConfig+0x5cc>
 8003880:	e01b      	b.n	80038ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003882:	4b62      	ldr	r3, [pc, #392]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 8003884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003888:	4a60      	ldr	r2, [pc, #384]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fd ff2d 	bl	80016f0 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800389a:	f7fd ff29 	bl	80016f0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0ff      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038ac:	4b57      	ldr	r3, [pc, #348]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80038ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ef      	bne.n	800389a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80f3 	beq.w	8003aaa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	f040 80c9 	bne.w	8003a60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038ce:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 0203 	and.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d12c      	bne.n	800393c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	3b01      	subs	r3, #1
 80038ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d123      	bne.n	800393c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d11b      	bne.n	800393c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d113      	bne.n	800393c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	3b01      	subs	r3, #1
 8003922:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d109      	bne.n	800393c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	3b01      	subs	r3, #1
 8003936:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d06b      	beq.n	8003a14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d062      	beq.n	8003a08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003942:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0ac      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 8003958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800395e:	f7fd fec7 	bl	80016f0 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003966:	f7fd fec3 	bl	80016f0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e099      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003984:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <HAL_RCC_OscConfig+0x77c>)
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003994:	3a01      	subs	r2, #1
 8003996:	0112      	lsls	r2, r2, #4
 8003998:	4311      	orrs	r1, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800399e:	0212      	lsls	r2, r2, #8
 80039a0:	4311      	orrs	r1, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039a6:	0852      	lsrs	r2, r2, #1
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0552      	lsls	r2, r2, #21
 80039ac:	4311      	orrs	r1, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0652      	lsls	r2, r2, #25
 80039b8:	4311      	orrs	r1, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039be:	06d2      	lsls	r2, r2, #27
 80039c0:	430a      	orrs	r2, r1
 80039c2:	4912      	ldr	r1, [pc, #72]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0f      	ldr	r2, [pc, #60]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80039ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80039da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039e0:	f7fd fe86 	bl	80016f0 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fd fe82 	bl	80016f0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e058      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_RCC_OscConfig+0x778>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a06:	e050      	b.n	8003aaa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e04f      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a14:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d144      	bne.n	8003aaa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a20:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a2c:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a20      	ldr	r2, [pc, #128]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a38:	f7fd fe5a 	bl	80016f0 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fe56 	bl	80016f0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e02c      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x7ac>
 8003a5e:	e024      	b.n	8003aaa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d01f      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fd fe3d 	bl	80016f0 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7fd fe39 	bl	80016f0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e00f      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f0      	bne.n	8003a7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	4905      	ldr	r1, [pc, #20]	; (8003ab4 <HAL_RCC_OscConfig+0x820>)
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_OscConfig+0x824>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60cb      	str	r3, [r1, #12]
 8003aa4:	e001      	b.n	8003aaa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	feeefffc 	.word	0xfeeefffc

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0e7      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b75      	ldr	r3, [pc, #468]	; (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d910      	bls.n	8003b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b72      	ldr	r3, [pc, #456]	; (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0207 	bic.w	r2, r3, #7
 8003ae6:	4970      	ldr	r1, [pc, #448]	; (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b6e      	ldr	r3, [pc, #440]	; (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0cf      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b66      	ldr	r3, [pc, #408]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d908      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4960      	ldr	r1, [pc, #384]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d04c      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b42:	4b5a      	ldr	r3, [pc, #360]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d121      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0a6      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5a:	4b54      	ldr	r3, [pc, #336]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d115      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e09a      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b72:	4b4e      	ldr	r3, [pc, #312]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e08e      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b82:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e086      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b92:	4b46      	ldr	r3, [pc, #280]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4943      	ldr	r1, [pc, #268]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba4:	f7fd fda4 	bl	80016f0 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fd fda0 	bl	80016f0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e06e      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 020c 	and.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1eb      	bne.n	8003bac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b31      	ldr	r3, [pc, #196]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d208      	bcs.n	8003c02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	492b      	ldr	r1, [pc, #172]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c02:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d210      	bcs.n	8003c32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 0207 	bic.w	r2, r3, #7
 8003c18:	4923      	ldr	r1, [pc, #140]	; (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c20:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e036      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4918      	ldr	r1, [pc, #96]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4910      	ldr	r1, [pc, #64]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c70:	f000 f824 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	490b      	ldr	r1, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1fc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd fb15 	bl	80012c4 <HAL_InitTick>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	0800989c 	.word	0x0800989c
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	20000004 	.word	0x20000004

08003cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd4:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d121      	bne.n	8003d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d11e      	bne.n	8003d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cf0:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	e005      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d18:	4a2b      	ldr	r2, [pc, #172]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e004      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d134      	bne.n	8003db4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0xac>
 8003d60:	e005      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d62:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d64:	617b      	str	r3, [r7, #20]
      break;
 8003d66:	e005      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d6a:	617b      	str	r3, [r7, #20]
      break;
 8003d6c:	e002      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	617b      	str	r3, [r7, #20]
      break;
 8003d72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d74:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	3301      	adds	r3, #1
 8003d80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	fb03 f202 	mul.w	r2, r3, r2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	0e5b      	lsrs	r3, r3, #25
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	3301      	adds	r3, #1
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003db4:	69bb      	ldr	r3, [r7, #24]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	; 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	080098b4 	.word	0x080098b4
 8003dcc:	00f42400 	.word	0x00f42400

08003dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000000 	.word	0x20000000

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dec:	f7ff fff0 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	080098ac 	.word	0x080098ac

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e18:	f7ff ffda 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0adb      	lsrs	r3, r3, #11
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4904      	ldr	r1, [pc, #16]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	080098ac 	.word	0x080098ac

08003e40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0203 	and.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	08db      	lsrs	r3, r3, #3
 8003e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_RCC_GetClockConfig+0x60>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0207 	and.w	r2, r3, #7
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40022000 	.word	0x40022000

08003ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003eb0:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ebc:	f7ff f986 	bl	80031cc <HAL_PWREx_GetVoltageRange>
 8003ec0:	6178      	str	r0, [r7, #20]
 8003ec2:	e014      	b.n	8003eee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	4a24      	ldr	r2, [pc, #144]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ece:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed0:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003edc:	f7ff f976 	bl	80031cc <HAL_PWREx_GetVoltageRange>
 8003ee0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef4:	d10b      	bne.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d919      	bls.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2ba0      	cmp	r3, #160	; 0xa0
 8003f00:	d902      	bls.n	8003f08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f02:	2302      	movs	r3, #2
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	e013      	b.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f08:	2301      	movs	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e010      	b.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b80      	cmp	r3, #128	; 0x80
 8003f12:	d902      	bls.n	8003f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f14:	2303      	movs	r3, #3
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	e00a      	b.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b80      	cmp	r3, #128	; 0x80
 8003f1e:	d102      	bne.n	8003f26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f20:	2302      	movs	r3, #2
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	e004      	b.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b70      	cmp	r3, #112	; 0x70
 8003f2a:	d101      	bne.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 0207 	bic.w	r2, r3, #7
 8003f38:	4909      	ldr	r1, [pc, #36]	; (8003f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f40:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d001      	beq.n	8003f52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40022000 	.word	0x40022000

08003f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f70:	2300      	movs	r3, #0
 8003f72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d031      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f88:	d01a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f8e:	d814      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f98:	d10f      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f9a:	4b5d      	ldr	r3, [pc, #372]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4a5c      	ldr	r2, [pc, #368]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fa6:	e00c      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f9f0 	bl	8004394 <RCCEx_PLLSAI1_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc8:	4b51      	ldr	r3, [pc, #324]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	494e      	ldr	r1, [pc, #312]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fde:	e001      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 809e 	beq.w	800412e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ff6:	4b46      	ldr	r3, [pc, #280]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	4b40      	ldr	r3, [pc, #256]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	4a3f      	ldr	r2, [pc, #252]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004016:	6593      	str	r3, [r2, #88]	; 0x58
 8004018:	4b3d      	ldr	r3, [pc, #244]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004024:	2301      	movs	r3, #1
 8004026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004028:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a39      	ldr	r2, [pc, #228]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004034:	f7fd fb5c 	bl	80016f0 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800403a:	e009      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fd fb58 	bl	80016f0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d902      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	74fb      	strb	r3, [r7, #19]
        break;
 800404e:	e005      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004050:	4b30      	ldr	r3, [pc, #192]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ef      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d15a      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004062:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01e      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	429a      	cmp	r2, r3
 800407c:	d019      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800408a:	4b21      	ldr	r3, [pc, #132]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800409a:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040aa:	4a19      	ldr	r2, [pc, #100]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d016      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd fb18 	bl	80016f0 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c2:	e00b      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fd fb14 	bl	80016f0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d902      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	74fb      	strb	r3, [r7, #19]
            break;
 80040da:	e006      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0ec      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	4904      	ldr	r1, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004106:	e009      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	74bb      	strb	r3, [r7, #18]
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411c:	7c7b      	ldrb	r3, [r7, #17]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004122:	4b9b      	ldr	r3, [pc, #620]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	4a9a      	ldr	r2, [pc, #616]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800413a:	4b95      	ldr	r3, [pc, #596]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f023 0203 	bic.w	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4991      	ldr	r1, [pc, #580]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800415c:	4b8c      	ldr	r3, [pc, #560]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f023 020c 	bic.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	4989      	ldr	r1, [pc, #548]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800417e:	4b84      	ldr	r3, [pc, #528]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	4980      	ldr	r1, [pc, #512]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041a0:	4b7b      	ldr	r3, [pc, #492]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	4978      	ldr	r1, [pc, #480]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c2:	4b73      	ldr	r3, [pc, #460]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	496f      	ldr	r1, [pc, #444]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4967      	ldr	r1, [pc, #412]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004206:	4b62      	ldr	r3, [pc, #392]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	495e      	ldr	r1, [pc, #376]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	4956      	ldr	r1, [pc, #344]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800424a:	4b51      	ldr	r3, [pc, #324]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	494d      	ldr	r1, [pc, #308]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800426c:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427a:	4945      	ldr	r1, [pc, #276]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428a:	d106      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428c:	4b40      	ldr	r3, [pc, #256]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a3f      	ldr	r2, [pc, #252]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	60d3      	str	r3, [r2, #12]
 8004298:	e011      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a2:	d10c      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f872 	bl	8004394 <RCCEx_PLLSAI1_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d028      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d8:	492d      	ldr	r1, [pc, #180]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4a28      	ldr	r2, [pc, #160]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f4:	60d3      	str	r3, [r2, #12]
 80042f6:	e011      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f843 	bl	8004394 <RCCEx_PLLSAI1_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01c      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004336:	4916      	ldr	r1, [pc, #88]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004346:	d10c      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2102      	movs	r1, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f820 	bl	8004394 <RCCEx_PLLSAI1_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004384:	7cbb      	ldrb	r3, [r7, #18]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000

08004394 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043a2:	4b74      	ldr	r3, [pc, #464]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ae:	4b71      	ldr	r3, [pc, #452]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0203 	and.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d10d      	bne.n	80043da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
       ||
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043c6:	4b6b      	ldr	r3, [pc, #428]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	091b      	lsrs	r3, r3, #4
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
       ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d047      	beq.n	800446a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
 80043de:	e044      	b.n	800446a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d018      	beq.n	800441a <RCCEx_PLLSAI1_Config+0x86>
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d825      	bhi.n	8004438 <RCCEx_PLLSAI1_Config+0xa4>
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d002      	beq.n	80043f6 <RCCEx_PLLSAI1_Config+0x62>
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d009      	beq.n	8004408 <RCCEx_PLLSAI1_Config+0x74>
 80043f4:	e020      	b.n	8004438 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043f6:	4b5f      	ldr	r3, [pc, #380]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11d      	bne.n	800443e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004406:	e01a      	b.n	800443e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004408:	4b5a      	ldr	r3, [pc, #360]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004410:	2b00      	cmp	r3, #0
 8004412:	d116      	bne.n	8004442 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004418:	e013      	b.n	8004442 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800441a:	4b56      	ldr	r3, [pc, #344]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10f      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004426:	4b53      	ldr	r3, [pc, #332]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004436:	e006      	b.n	8004446 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      break;
 800443c:	e004      	b.n	8004448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800443e:	bf00      	nop
 8004440:	e002      	b.n	8004448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004446:	bf00      	nop
    }

    if(status == HAL_OK)
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800444e:	4b49      	ldr	r3, [pc, #292]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	430b      	orrs	r3, r1
 8004464:	4943      	ldr	r1, [pc, #268]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004466:	4313      	orrs	r3, r2
 8004468:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d17c      	bne.n	800456a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004470:	4b40      	ldr	r3, [pc, #256]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3f      	ldr	r2, [pc, #252]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800447a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447c:	f7fd f938 	bl	80016f0 <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004482:	e009      	b.n	8004498 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004484:	f7fd f934 	bl	80016f0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d902      	bls.n	8004498 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	73fb      	strb	r3, [r7, #15]
        break;
 8004496:	e005      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004498:	4b36      	ldr	r3, [pc, #216]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1ef      	bne.n	8004484 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d15f      	bne.n	800456a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d110      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b0:	4b30      	ldr	r3, [pc, #192]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80044b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6892      	ldr	r2, [r2, #8]
 80044c0:	0211      	lsls	r1, r2, #8
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68d2      	ldr	r2, [r2, #12]
 80044c6:	06d2      	lsls	r2, r2, #27
 80044c8:	430a      	orrs	r2, r1
 80044ca:	492a      	ldr	r1, [pc, #168]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	610b      	str	r3, [r1, #16]
 80044d0:	e027      	b.n	8004522 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d112      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d8:	4b26      	ldr	r3, [pc, #152]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6892      	ldr	r2, [r2, #8]
 80044e8:	0211      	lsls	r1, r2, #8
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6912      	ldr	r2, [r2, #16]
 80044ee:	0852      	lsrs	r2, r2, #1
 80044f0:	3a01      	subs	r2, #1
 80044f2:	0552      	lsls	r2, r2, #21
 80044f4:	430a      	orrs	r2, r1
 80044f6:	491f      	ldr	r1, [pc, #124]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	610b      	str	r3, [r1, #16]
 80044fc:	e011      	b.n	8004522 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004506:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6892      	ldr	r2, [r2, #8]
 800450e:	0211      	lsls	r1, r2, #8
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6952      	ldr	r2, [r2, #20]
 8004514:	0852      	lsrs	r2, r2, #1
 8004516:	3a01      	subs	r2, #1
 8004518:	0652      	lsls	r2, r2, #25
 800451a:	430a      	orrs	r2, r1
 800451c:	4915      	ldr	r1, [pc, #84]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a13      	ldr	r2, [pc, #76]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800452c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fd f8df 	bl	80016f0 <HAL_GetTick>
 8004532:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004534:	e009      	b.n	800454a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004536:	f7fd f8db 	bl	80016f0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d902      	bls.n	800454a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	73fb      	strb	r3, [r7, #15]
          break;
 8004548:	e005      	b.n	8004556 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ef      	beq.n	8004536 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	4903      	ldr	r1, [pc, #12]	; (8004574 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004566:	4313      	orrs	r3, r2
 8004568:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000

08004578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e049      	b.n	800461e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fc fd7e 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f000 fe08 	bl	80051cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d001      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e03b      	b.n	80046b8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <HAL_TIM_Base_Start_IT+0x9c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_TIM_Base_Start_IT+0x4e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466a:	d004      	beq.n	8004676 <HAL_TIM_Base_Start_IT+0x4e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d115      	bne.n	80046a2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	4b13      	ldr	r3, [pc, #76]	; (80046cc <HAL_TIM_Base_Start_IT+0xa4>)
 800467e:	4013      	ands	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b06      	cmp	r3, #6
 8004686:	d015      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x8c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468e:	d011      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	e008      	b.n	80046b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e000      	b.n	80046b6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40014000 	.word	0x40014000
 80046cc:	00010007 	.word	0x00010007

080046d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e049      	b.n	8004776 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f841 	bl	800477e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f000 fd5c 	bl	80051cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <HAL_TIM_PWM_Start_IT+0x28>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e03c      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0xa2>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d109      	bne.n	80047d6 <HAL_TIM_PWM_Start_IT+0x42>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	e02f      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0xa2>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d109      	bne.n	80047f0 <HAL_TIM_PWM_Start_IT+0x5c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e022      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0xa2>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b0c      	cmp	r3, #12
 80047f4:	d109      	bne.n	800480a <HAL_TIM_PWM_Start_IT+0x76>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e015      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0xa2>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b10      	cmp	r3, #16
 800480e:	d109      	bne.n	8004824 <HAL_TIM_PWM_Start_IT+0x90>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	e008      	b.n	8004836 <HAL_TIM_PWM_Start_IT+0xa2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e0c9      	b.n	80049d2 <HAL_TIM_PWM_Start_IT+0x23e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start_IT+0xba>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800484c:	e023      	b.n	8004896 <HAL_TIM_PWM_Start_IT+0x102>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d104      	bne.n	800485e <HAL_TIM_PWM_Start_IT+0xca>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485c:	e01b      	b.n	8004896 <HAL_TIM_PWM_Start_IT+0x102>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d104      	bne.n	800486e <HAL_TIM_PWM_Start_IT+0xda>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486c:	e013      	b.n	8004896 <HAL_TIM_PWM_Start_IT+0x102>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start_IT+0xea>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800487c:	e00b      	b.n	8004896 <HAL_TIM_PWM_Start_IT+0x102>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b10      	cmp	r3, #16
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start_IT+0xfa>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800488c:	e003      	b.n	8004896 <HAL_TIM_PWM_Start_IT+0x102>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d841      	bhi.n	8004920 <HAL_TIM_PWM_Start_IT+0x18c>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <HAL_TIM_PWM_Start_IT+0x110>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048d9 	.word	0x080048d9
 80048a8:	08004921 	.word	0x08004921
 80048ac:	08004921 	.word	0x08004921
 80048b0:	08004921 	.word	0x08004921
 80048b4:	080048eb 	.word	0x080048eb
 80048b8:	08004921 	.word	0x08004921
 80048bc:	08004921 	.word	0x08004921
 80048c0:	08004921 	.word	0x08004921
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	08004921 	.word	0x08004921
 80048cc:	08004921 	.word	0x08004921
 80048d0:	08004921 	.word	0x08004921
 80048d4:	0800490f 	.word	0x0800490f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0202 	orr.w	r2, r2, #2
 80048e6:	60da      	str	r2, [r3, #12]
      break;
 80048e8:	e01d      	b.n	8004926 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0204 	orr.w	r2, r2, #4
 80048f8:	60da      	str	r2, [r3, #12]
      break;
 80048fa:	e014      	b.n	8004926 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0208 	orr.w	r2, r2, #8
 800490a:	60da      	str	r2, [r3, #12]
      break;
 800490c:	e00b      	b.n	8004926 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0210 	orr.w	r2, r2, #16
 800491c:	60da      	str	r2, [r3, #12]
      break;
 800491e:	e002      	b.n	8004926 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	bf00      	nop
  }

  if (status == HAL_OK)
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d151      	bne.n	80049d0 <HAL_TIM_PWM_Start_IT+0x23c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2201      	movs	r2, #1
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 ffc5 	bl	80058c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a27      	ldr	r2, [pc, #156]	; (80049dc <HAL_TIM_PWM_Start_IT+0x248>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_TIM_PWM_Start_IT+0x1c4>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <HAL_TIM_PWM_Start_IT+0x24c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_PWM_Start_IT+0x1c4>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <HAL_TIM_PWM_Start_IT+0x250>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_TIM_PWM_Start_IT+0x1c8>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_TIM_PWM_Start_IT+0x1ca>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a19      	ldr	r2, [pc, #100]	; (80049dc <HAL_TIM_PWM_Start_IT+0x248>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_TIM_PWM_Start_IT+0x1fc>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d004      	beq.n	8004990 <HAL_TIM_PWM_Start_IT+0x1fc>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <HAL_TIM_PWM_Start_IT+0x24c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d115      	bne.n	80049bc <HAL_TIM_PWM_Start_IT+0x228>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <HAL_TIM_PWM_Start_IT+0x254>)
 8004998:	4013      	ands	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d015      	beq.n	80049ce <HAL_TIM_PWM_Start_IT+0x23a>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a8:	d011      	beq.n	80049ce <HAL_TIM_PWM_Start_IT+0x23a>
      {
        __HAL_TIM_ENABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ba:	e008      	b.n	80049ce <HAL_TIM_PWM_Start_IT+0x23a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e000      	b.n	80049d0 <HAL_TIM_PWM_Start_IT+0x23c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	00010007 	.word	0x00010007

080049ec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	d841      	bhi.n	8004a84 <HAL_TIM_PWM_Stop_IT+0x98>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004a85 	.word	0x08004a85
 8004a10:	08004a85 	.word	0x08004a85
 8004a14:	08004a85 	.word	0x08004a85
 8004a18:	08004a4f 	.word	0x08004a4f
 8004a1c:	08004a85 	.word	0x08004a85
 8004a20:	08004a85 	.word	0x08004a85
 8004a24:	08004a85 	.word	0x08004a85
 8004a28:	08004a61 	.word	0x08004a61
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	08004a85 	.word	0x08004a85
 8004a38:	08004a73 	.word	0x08004a73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0202 	bic.w	r2, r2, #2
 8004a4a:	60da      	str	r2, [r3, #12]
      break;
 8004a4c:	e01d      	b.n	8004a8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0204 	bic.w	r2, r2, #4
 8004a5c:	60da      	str	r2, [r3, #12]
      break;
 8004a5e:	e014      	b.n	8004a8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0208 	bic.w	r2, r2, #8
 8004a6e:	60da      	str	r2, [r3, #12]
      break;
 8004a70:	e00b      	b.n	8004a8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0210 	bic.w	r2, r2, #16
 8004a80:	60da      	str	r2, [r3, #12]
      break;
 8004a82:	e002      	b.n	8004a8a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      break;
 8004a88:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d176      	bne.n	8004b7e <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2200      	movs	r2, #0
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 ff13 	bl	80058c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a39      	ldr	r2, [pc, #228]	; (8004b88 <HAL_TIM_PWM_Stop_IT+0x19c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d009      	beq.n	8004abc <HAL_TIM_PWM_Stop_IT+0xd0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a37      	ldr	r2, [pc, #220]	; (8004b8c <HAL_TIM_PWM_Stop_IT+0x1a0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_TIM_PWM_Stop_IT+0xd0>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a36      	ldr	r2, [pc, #216]	; (8004b90 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_PWM_Stop_IT+0xd4>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_TIM_PWM_Stop_IT+0xd6>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d017      	beq.n	8004af6 <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <HAL_TIM_PWM_Stop_IT+0x10a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	f240 4344 	movw	r3, #1092	; 0x444
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_PWM_Stop_IT+0x10a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10f      	bne.n	8004b26 <HAL_TIM_PWM_Stop_IT+0x13a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	f240 4344 	movw	r3, #1092	; 0x444
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_PWM_Stop_IT+0x13a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Stop_IT+0x14a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b34:	e023      	b.n	8004b7e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b44:	e01b      	b.n	8004b7e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_PWM_Stop_IT+0x16a>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b54:	e013      	b.n	8004b7e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b0c      	cmp	r3, #12
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_PWM_Stop_IT+0x17a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b64:	e00b      	b.n	8004b7e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_PWM_Stop_IT+0x18a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b74:	e003      	b.n	8004b7e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400

08004b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d122      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0202 	mvn.w	r2, #2
 8004bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fae3 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fad5 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fc fd15 	bl	8001614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d122      	bne.n	8004c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d11b      	bne.n	8004c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0204 	mvn.w	r2, #4
 8004c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fab9 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 faab 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fc fceb 	bl	8001614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0208 	mvn.w	r2, #8
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa8f 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa81 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fc fcc1 	bl	8001614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d122      	bne.n	8004cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0210 	mvn.w	r2, #16
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa65 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa57 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc fc97 	bl	8001614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0201 	mvn.w	r2, #1
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fc f8da 	bl	8000ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fece 	bl	8005ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d52:	d10e      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b80      	cmp	r3, #128	; 0x80
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fec1 	bl	8005af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d10e      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d107      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa0c 	bl	80051b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d10e      	bne.n	8004dca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d107      	bne.n	8004dca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f06f 0220 	mvn.w	r2, #32
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fe81 	bl	8005acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e0ff      	b.n	8004ff2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b14      	cmp	r3, #20
 8004dfe:	f200 80f0 	bhi.w	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004fe3 	.word	0x08004fe3
 8004e10:	08004fe3 	.word	0x08004fe3
 8004e14:	08004fe3 	.word	0x08004fe3
 8004e18:	08004e9d 	.word	0x08004e9d
 8004e1c:	08004fe3 	.word	0x08004fe3
 8004e20:	08004fe3 	.word	0x08004fe3
 8004e24:	08004fe3 	.word	0x08004fe3
 8004e28:	08004edf 	.word	0x08004edf
 8004e2c:	08004fe3 	.word	0x08004fe3
 8004e30:	08004fe3 	.word	0x08004fe3
 8004e34:	08004fe3 	.word	0x08004fe3
 8004e38:	08004f1f 	.word	0x08004f1f
 8004e3c:	08004fe3 	.word	0x08004fe3
 8004e40:	08004fe3 	.word	0x08004fe3
 8004e44:	08004fe3 	.word	0x08004fe3
 8004e48:	08004f61 	.word	0x08004f61
 8004e4c:	08004fe3 	.word	0x08004fe3
 8004e50:	08004fe3 	.word	0x08004fe3
 8004e54:	08004fe3 	.word	0x08004fe3
 8004e58:	08004fa1 	.word	0x08004fa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fa16 	bl	8005294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0208 	orr.w	r2, r2, #8
 8004e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0204 	bic.w	r2, r2, #4
 8004e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6999      	ldr	r1, [r3, #24]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	619a      	str	r2, [r3, #24]
      break;
 8004e9a:	e0a5      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fa72 	bl	800538c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6999      	ldr	r1, [r3, #24]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	021a      	lsls	r2, r3, #8
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	619a      	str	r2, [r3, #24]
      break;
 8004edc:	e084      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 facb 	bl	8005480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0208 	orr.w	r2, r2, #8
 8004ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0204 	bic.w	r2, r2, #4
 8004f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69d9      	ldr	r1, [r3, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	61da      	str	r2, [r3, #28]
      break;
 8004f1c:	e064      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fb23 	bl	8005570 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69d9      	ldr	r1, [r3, #28]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	021a      	lsls	r2, r3, #8
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	61da      	str	r2, [r3, #28]
      break;
 8004f5e:	e043      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fb60 	bl	800562c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0204 	bic.w	r2, r2, #4
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f9e:	e023      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fb98 	bl	80056dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	021a      	lsls	r2, r3, #8
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fe0:	e002      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop

08004ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIM_ConfigClockSource+0x1c>
 8005014:	2302      	movs	r3, #2
 8005016:	e0b6      	b.n	8005186 <HAL_TIM_ConfigClockSource+0x18a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800503a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005054:	d03e      	beq.n	80050d4 <HAL_TIM_ConfigClockSource+0xd8>
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	f200 8087 	bhi.w	800516c <HAL_TIM_ConfigClockSource+0x170>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005062:	f000 8086 	beq.w	8005172 <HAL_TIM_ConfigClockSource+0x176>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506a:	d87f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 800506c:	2b70      	cmp	r3, #112	; 0x70
 800506e:	d01a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0xaa>
 8005070:	2b70      	cmp	r3, #112	; 0x70
 8005072:	d87b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 8005074:	2b60      	cmp	r3, #96	; 0x60
 8005076:	d050      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x11e>
 8005078:	2b60      	cmp	r3, #96	; 0x60
 800507a:	d877      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 800507c:	2b50      	cmp	r3, #80	; 0x50
 800507e:	d03c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0xfe>
 8005080:	2b50      	cmp	r3, #80	; 0x50
 8005082:	d873      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d058      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x13e>
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d86f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 800508c:	2b30      	cmp	r3, #48	; 0x30
 800508e:	d064      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15e>
 8005090:	2b30      	cmp	r3, #48	; 0x30
 8005092:	d86b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d060      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15e>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d867      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05c      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15e>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d05a      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15e>
 80050a4:	e062      	b.n	800516c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f000 fbe5 	bl	8005884 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	609a      	str	r2, [r3, #8]
      break;
 80050d2:	e04f      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f000 fbce 	bl	8005884 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f6:	609a      	str	r2, [r3, #8]
      break;
 80050f8:	e03c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	461a      	mov	r2, r3
 8005108:	f000 fb42 	bl	8005790 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2150      	movs	r1, #80	; 0x50
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb9b 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8005118:	e02c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	461a      	mov	r2, r3
 8005128:	f000 fb61 	bl	80057ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2160      	movs	r1, #96	; 0x60
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fb8b 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8005138:	e01c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	461a      	mov	r2, r3
 8005148:	f000 fb22 	bl	8005790 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2140      	movs	r1, #64	; 0x40
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fb7b 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8005158:	e00c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 fb72 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 800516a:	e003      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
      break;
 8005170:	e000      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <TIM_Base_SetConfig+0xbc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x20>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <TIM_Base_SetConfig+0xbc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0x52>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0x52>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1e      	ldr	r2, [pc, #120]	; (800528c <TIM_Base_SetConfig+0xc0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0x52>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <TIM_Base_SetConfig+0xc4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <TIM_Base_SetConfig+0xbc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0xa0>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0b      	ldr	r2, [pc, #44]	; (800528c <TIM_Base_SetConfig+0xc0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0xa0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <TIM_Base_SetConfig+0xc4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d103      	bne.n	8005274 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	615a      	str	r2, [r3, #20]
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400

08005294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0201 	bic.w	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 0302 	bic.w	r3, r3, #2
 80052e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a24      	ldr	r2, [pc, #144]	; (8005380 <TIM_OC1_SetConfig+0xec>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_OC1_SetConfig+0x70>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a23      	ldr	r2, [pc, #140]	; (8005384 <TIM_OC1_SetConfig+0xf0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC1_SetConfig+0x70>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a22      	ldr	r2, [pc, #136]	; (8005388 <TIM_OC1_SetConfig+0xf4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10c      	bne.n	800531e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0308 	bic.w	r3, r3, #8
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 0304 	bic.w	r3, r3, #4
 800531c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a17      	ldr	r2, [pc, #92]	; (8005380 <TIM_OC1_SetConfig+0xec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <TIM_OC1_SetConfig+0xa2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a16      	ldr	r2, [pc, #88]	; (8005384 <TIM_OC1_SetConfig+0xf0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d003      	beq.n	8005336 <TIM_OC1_SetConfig+0xa2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <TIM_OC1_SetConfig+0xf4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d111      	bne.n	800535a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800533c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	621a      	str	r2, [r3, #32]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400

0800538c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f023 0210 	bic.w	r2, r3, #16
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0320 	bic.w	r3, r3, #32
 80053da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a22      	ldr	r2, [pc, #136]	; (8005474 <TIM_OC2_SetConfig+0xe8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10d      	bne.n	800540c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a19      	ldr	r2, [pc, #100]	; (8005474 <TIM_OC2_SetConfig+0xe8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_OC2_SetConfig+0x98>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <TIM_OC2_SetConfig+0xec>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC2_SetConfig+0x98>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <TIM_OC2_SetConfig+0xf0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d113      	bne.n	800544c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800542a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400

08005480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a21      	ldr	r2, [pc, #132]	; (8005564 <TIM_OC3_SetConfig+0xe4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10d      	bne.n	80054fe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <TIM_OC3_SetConfig+0xe4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d007      	beq.n	8005516 <TIM_OC3_SetConfig+0x96>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a17      	ldr	r2, [pc, #92]	; (8005568 <TIM_OC3_SetConfig+0xe8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_OC3_SetConfig+0x96>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a16      	ldr	r2, [pc, #88]	; (800556c <TIM_OC3_SetConfig+0xec>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d113      	bne.n	800553e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800551c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	621a      	str	r2, [r3, #32]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40014000 	.word	0x40014000
 800556c:	40014400 	.word	0x40014400

08005570 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a14      	ldr	r2, [pc, #80]	; (8005620 <TIM_OC4_SetConfig+0xb0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_OC4_SetConfig+0x74>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a13      	ldr	r2, [pc, #76]	; (8005624 <TIM_OC4_SetConfig+0xb4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_OC4_SetConfig+0x74>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a12      	ldr	r2, [pc, #72]	; (8005628 <TIM_OC4_SetConfig+0xb8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d109      	bne.n	80055f8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	019b      	lsls	r3, r3, #6
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400

0800562c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005670:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <TIM_OC5_SetConfig+0xa4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <TIM_OC5_SetConfig+0x6a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a12      	ldr	r2, [pc, #72]	; (80056d4 <TIM_OC5_SetConfig+0xa8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_OC5_SetConfig+0x6a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <TIM_OC5_SetConfig+0xac>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d109      	bne.n	80056aa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400

080056dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	051b      	lsls	r3, r3, #20
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a14      	ldr	r2, [pc, #80]	; (8005784 <TIM_OC6_SetConfig+0xa8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d007      	beq.n	8005748 <TIM_OC6_SetConfig+0x6c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a13      	ldr	r2, [pc, #76]	; (8005788 <TIM_OC6_SetConfig+0xac>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_OC6_SetConfig+0x6c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a12      	ldr	r2, [pc, #72]	; (800578c <TIM_OC6_SetConfig+0xb0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d109      	bne.n	800575c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	029b      	lsls	r3, r3, #10
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40012c00 	.word	0x40012c00
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400

08005790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 030a 	bic.w	r3, r3, #10
 80057cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b087      	sub	sp, #28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0210 	bic.w	r2, r3, #16
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	031b      	lsls	r3, r3, #12
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800582a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	f043 0307 	orr.w	r3, r3, #7
 8005870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	021a      	lsls	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	609a      	str	r2, [r3, #8]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2201      	movs	r2, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	401a      	ands	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005924:	2302      	movs	r3, #2
 8005926:	e04f      	b.n	80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d108      	bne.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005958:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d004      	beq.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10c      	bne.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40014000 	.word	0x40014000

080059dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e060      	b.n	8005aba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d115      	bne.n	8005aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	051b      	lsls	r3, r3, #20
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00

08005acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e040      	b.n	8005b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fb fb72 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	; 0x24
 8005b34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f82c 	bl	8005ba4 <UART_SetConfig>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e022      	b.n	8005b9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa7a 	bl	8006058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fb01 	bl	800619c <UART_CheckIdleState>
 8005b9a:	4603      	mov	r3, r0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba8:	b08a      	sub	sp, #40	; 0x28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b9e      	ldr	r3, [pc, #632]	; (8005e4c <UART_SetConfig+0x2a8>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a93      	ldr	r2, [pc, #588]	; (8005e50 <UART_SetConfig+0x2ac>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	430a      	orrs	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a8a      	ldr	r2, [pc, #552]	; (8005e54 <UART_SetConfig+0x2b0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d126      	bne.n	8005c7c <UART_SetConfig+0xd8>
 8005c2e:	4b8a      	ldr	r3, [pc, #552]	; (8005e58 <UART_SetConfig+0x2b4>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d81b      	bhi.n	8005c74 <UART_SetConfig+0xd0>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0xa0>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c55 	.word	0x08005c55
 8005c48:	08005c65 	.word	0x08005c65
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c6d 	.word	0x08005c6d
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5a:	e0ab      	b.n	8005db4 <UART_SetConfig+0x210>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c62:	e0a7      	b.n	8005db4 <UART_SetConfig+0x210>
 8005c64:	2304      	movs	r3, #4
 8005c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6a:	e0a3      	b.n	8005db4 <UART_SetConfig+0x210>
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c72:	e09f      	b.n	8005db4 <UART_SetConfig+0x210>
 8005c74:	2310      	movs	r3, #16
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7a:	e09b      	b.n	8005db4 <UART_SetConfig+0x210>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a76      	ldr	r2, [pc, #472]	; (8005e5c <UART_SetConfig+0x2b8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d138      	bne.n	8005cf8 <UART_SetConfig+0x154>
 8005c86:	4b74      	ldr	r3, [pc, #464]	; (8005e58 <UART_SetConfig+0x2b4>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b0c      	cmp	r3, #12
 8005c92:	d82d      	bhi.n	8005cf0 <UART_SetConfig+0x14c>
 8005c94:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0xf8>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cd1 	.word	0x08005cd1
 8005ca0:	08005cf1 	.word	0x08005cf1
 8005ca4:	08005cf1 	.word	0x08005cf1
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005ce1 	.word	0x08005ce1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005cf1 	.word	0x08005cf1
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005cd9 	.word	0x08005cd9
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005cf1 	.word	0x08005cf1
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005ce9 	.word	0x08005ce9
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd6:	e06d      	b.n	8005db4 <UART_SetConfig+0x210>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cde:	e069      	b.n	8005db4 <UART_SetConfig+0x210>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce6:	e065      	b.n	8005db4 <UART_SetConfig+0x210>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cee:	e061      	b.n	8005db4 <UART_SetConfig+0x210>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf6:	e05d      	b.n	8005db4 <UART_SetConfig+0x210>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a58      	ldr	r2, [pc, #352]	; (8005e60 <UART_SetConfig+0x2bc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d125      	bne.n	8005d4e <UART_SetConfig+0x1aa>
 8005d02:	4b55      	ldr	r3, [pc, #340]	; (8005e58 <UART_SetConfig+0x2b4>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d0c:	2b30      	cmp	r3, #48	; 0x30
 8005d0e:	d016      	beq.n	8005d3e <UART_SetConfig+0x19a>
 8005d10:	2b30      	cmp	r3, #48	; 0x30
 8005d12:	d818      	bhi.n	8005d46 <UART_SetConfig+0x1a2>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d00a      	beq.n	8005d2e <UART_SetConfig+0x18a>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d814      	bhi.n	8005d46 <UART_SetConfig+0x1a2>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <UART_SetConfig+0x182>
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d008      	beq.n	8005d36 <UART_SetConfig+0x192>
 8005d24:	e00f      	b.n	8005d46 <UART_SetConfig+0x1a2>
 8005d26:	2300      	movs	r3, #0
 8005d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2c:	e042      	b.n	8005db4 <UART_SetConfig+0x210>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d34:	e03e      	b.n	8005db4 <UART_SetConfig+0x210>
 8005d36:	2304      	movs	r3, #4
 8005d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3c:	e03a      	b.n	8005db4 <UART_SetConfig+0x210>
 8005d3e:	2308      	movs	r3, #8
 8005d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d44:	e036      	b.n	8005db4 <UART_SetConfig+0x210>
 8005d46:	2310      	movs	r3, #16
 8005d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4c:	e032      	b.n	8005db4 <UART_SetConfig+0x210>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <UART_SetConfig+0x2ac>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d12a      	bne.n	8005dae <UART_SetConfig+0x20a>
 8005d58:	4b3f      	ldr	r3, [pc, #252]	; (8005e58 <UART_SetConfig+0x2b4>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d66:	d01a      	beq.n	8005d9e <UART_SetConfig+0x1fa>
 8005d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d6c:	d81b      	bhi.n	8005da6 <UART_SetConfig+0x202>
 8005d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d72:	d00c      	beq.n	8005d8e <UART_SetConfig+0x1ea>
 8005d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d78:	d815      	bhi.n	8005da6 <UART_SetConfig+0x202>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <UART_SetConfig+0x1e2>
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d82:	d008      	beq.n	8005d96 <UART_SetConfig+0x1f2>
 8005d84:	e00f      	b.n	8005da6 <UART_SetConfig+0x202>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8c:	e012      	b.n	8005db4 <UART_SetConfig+0x210>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d94:	e00e      	b.n	8005db4 <UART_SetConfig+0x210>
 8005d96:	2304      	movs	r3, #4
 8005d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9c:	e00a      	b.n	8005db4 <UART_SetConfig+0x210>
 8005d9e:	2308      	movs	r3, #8
 8005da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da4:	e006      	b.n	8005db4 <UART_SetConfig+0x210>
 8005da6:	2310      	movs	r3, #16
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dac:	e002      	b.n	8005db4 <UART_SetConfig+0x210>
 8005dae:	2310      	movs	r3, #16
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a25      	ldr	r2, [pc, #148]	; (8005e50 <UART_SetConfig+0x2ac>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f040 808a 	bne.w	8005ed4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d824      	bhi.n	8005e12 <UART_SetConfig+0x26e>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <UART_SetConfig+0x22c>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005e13 	.word	0x08005e13
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005e13 	.word	0x08005e13
 8005de0:	08005e03 	.word	0x08005e03
 8005de4:	08005e13 	.word	0x08005e13
 8005de8:	08005e13 	.word	0x08005e13
 8005dec:	08005e13 	.word	0x08005e13
 8005df0:	08005e0b 	.word	0x08005e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fd fff8 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8005df8:	61f8      	str	r0, [r7, #28]
        break;
 8005dfa:	e010      	b.n	8005e1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dfc:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <UART_SetConfig+0x2c0>)
 8005dfe:	61fb      	str	r3, [r7, #28]
        break;
 8005e00:	e00d      	b.n	8005e1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e02:	f7fd ff5b 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8005e06:	61f8      	str	r0, [r7, #28]
        break;
 8005e08:	e009      	b.n	8005e1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0e:	61fb      	str	r3, [r7, #28]
        break;
 8005e10:	e005      	b.n	8005e1e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8109 	beq.w	8006038 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	4413      	add	r3, r2
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d305      	bcc.n	8005e42 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d912      	bls.n	8005e68 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e48:	e0f6      	b.n	8006038 <UART_SetConfig+0x494>
 8005e4a:	bf00      	nop
 8005e4c:	efff69f3 	.word	0xefff69f3
 8005e50:	40008000 	.word	0x40008000
 8005e54:	40013800 	.word	0x40013800
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	40004400 	.word	0x40004400
 8005e60:	40004800 	.word	0x40004800
 8005e64:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	461c      	mov	r4, r3
 8005e6e:	4615      	mov	r5, r2
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	022b      	lsls	r3, r5, #8
 8005e7a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e7e:	0222      	lsls	r2, r4, #8
 8005e80:	68f9      	ldr	r1, [r7, #12]
 8005e82:	6849      	ldr	r1, [r1, #4]
 8005e84:	0849      	lsrs	r1, r1, #1
 8005e86:	2000      	movs	r0, #0
 8005e88:	4688      	mov	r8, r1
 8005e8a:	4681      	mov	r9, r0
 8005e8c:	eb12 0a08 	adds.w	sl, r2, r8
 8005e90:	eb43 0b09 	adc.w	fp, r3, r9
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea2:	4650      	mov	r0, sl
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	f7fa f993 	bl	80001d0 <__aeabi_uldivmod>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4613      	mov	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb8:	d308      	bcc.n	8005ecc <UART_SetConfig+0x328>
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec0:	d204      	bcs.n	8005ecc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	60da      	str	r2, [r3, #12]
 8005eca:	e0b5      	b.n	8006038 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ed2:	e0b1      	b.n	8006038 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005edc:	d15d      	bne.n	8005f9a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005ede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d827      	bhi.n	8005f36 <UART_SetConfig+0x392>
 8005ee6:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0x348>)
 8005ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f27 	.word	0x08005f27
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f37 	.word	0x08005f37
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f10:	f7fd ff6a 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8005f14:	61f8      	str	r0, [r7, #28]
        break;
 8005f16:	e014      	b.n	8005f42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7fd ff7c 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e010      	b.n	8005f42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b4c      	ldr	r3, [pc, #304]	; (8006054 <UART_SetConfig+0x4b0>)
 8005f22:	61fb      	str	r3, [r7, #28]
        break;
 8005f24:	e00d      	b.n	8005f42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fd fec9 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8005f2a:	61f8      	str	r0, [r7, #28]
        break;
 8005f2c:	e009      	b.n	8005f42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	61fb      	str	r3, [r7, #28]
        break;
 8005f34:	e005      	b.n	8005f42 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d077      	beq.n	8006038 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	005a      	lsls	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b0f      	cmp	r3, #15
 8005f62:	d916      	bls.n	8005f92 <UART_SetConfig+0x3ee>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6a:	d212      	bcs.n	8005f92 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f023 030f 	bic.w	r3, r3, #15
 8005f74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	085b      	lsrs	r3, r3, #1
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	8afb      	ldrh	r3, [r7, #22]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	8afa      	ldrh	r2, [r7, #22]
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	e052      	b.n	8006038 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f98:	e04e      	b.n	8006038 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d827      	bhi.n	8005ff2 <UART_SetConfig+0x44e>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x404>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd ff0c 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61f8      	str	r0, [r7, #28]
        break;
 8005fd2:	e014      	b.n	8005ffe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fd ff1e 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <UART_SetConfig+0x4b0>)
 8005fde:	61fb      	str	r3, [r7, #28]
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd fe6b 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8005fe6:	61f8      	str	r0, [r7, #28]
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d019      	beq.n	8006038 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	085a      	lsrs	r2, r3, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	441a      	add	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d909      	bls.n	8006032 <UART_SetConfig+0x48e>
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006024:	d205      	bcs.n	8006032 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60da      	str	r2, [r3, #12]
 8006030:	e002      	b.n	8006038 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006044:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006048:	4618      	mov	r0, r3
 800604a:	3728      	adds	r7, #40	; 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006052:	bf00      	nop
 8006054:	00f42400 	.word	0x00f42400

08006058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01a      	beq.n	800616e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d10a      	bne.n	800616e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061ac:	f7fb faa0 	bl	80016f0 <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d10e      	bne.n	80061de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f82d 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e023      	b.n	8006226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d10e      	bne.n	800620a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f817 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e00d      	b.n	8006226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b09c      	sub	sp, #112	; 0x70
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	e0a5      	b.n	800638c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006246:	f000 80a1 	beq.w	800638c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624a:	f7fb fa51 	bl	80016f0 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006256:	429a      	cmp	r2, r3
 8006258:	d302      	bcc.n	8006260 <UART_WaitOnFlagUntilTimeout+0x32>
 800625a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625c:	2b00      	cmp	r3, #0
 800625e:	d13e      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006274:	667b      	str	r3, [r7, #100]	; 0x64
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800627e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006280:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800628c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e6      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	663b      	str	r3, [r7, #96]	; 0x60
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e067      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d04f      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fa:	d147      	bne.n	800638c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006304:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800631a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
 8006326:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800632a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e6      	bne.n	8006306 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3308      	adds	r3, #8
 800633e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	613b      	str	r3, [r7, #16]
   return(result);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006358:	623a      	str	r2, [r7, #32]
 800635a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	69f9      	ldr	r1, [r7, #28]
 800635e:	6a3a      	ldr	r2, [r7, #32]
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	61bb      	str	r3, [r7, #24]
   return(result);
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e010      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69da      	ldr	r2, [r3, #28]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4013      	ands	r3, r2
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	429a      	cmp	r2, r3
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	f43f af4a 	beq.w	8006240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3770      	adds	r7, #112	; 0x70
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <__NVIC_SetPriority>:
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	6039      	str	r1, [r7, #0]
 80063c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	db0a      	blt.n	80063e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	490c      	ldr	r1, [pc, #48]	; (8006404 <__NVIC_SetPriority+0x4c>)
 80063d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d6:	0112      	lsls	r2, r2, #4
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	440b      	add	r3, r1
 80063dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063e0:	e00a      	b.n	80063f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	4908      	ldr	r1, [pc, #32]	; (8006408 <__NVIC_SetPriority+0x50>)
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	3b04      	subs	r3, #4
 80063f0:	0112      	lsls	r2, r2, #4
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	440b      	add	r3, r1
 80063f6:	761a      	strb	r2, [r3, #24]
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	e000e100 	.word	0xe000e100
 8006408:	e000ed00 	.word	0xe000ed00

0800640c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <SysTick_Handler+0x1c>)
 8006412:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006414:	f001 fed6 	bl	80081c4 <xTaskGetSchedulerState>
 8006418:	4603      	mov	r3, r0
 800641a:	2b01      	cmp	r3, #1
 800641c:	d001      	beq.n	8006422 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800641e:	f002 fcbb 	bl	8008d98 <xPortSysTickHandler>
  }
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	e000e010 	.word	0xe000e010

0800642c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006430:	2100      	movs	r1, #0
 8006432:	f06f 0004 	mvn.w	r0, #4
 8006436:	f7ff ffbf 	bl	80063b8 <__NVIC_SetPriority>
#endif
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006446:	f3ef 8305 	mrs	r3, IPSR
 800644a:	603b      	str	r3, [r7, #0]
  return(result);
 800644c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006452:	f06f 0305 	mvn.w	r3, #5
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	e00c      	b.n	8006474 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800645a:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <osKernelInitialize+0x44>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d105      	bne.n	800646e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <osKernelInitialize+0x44>)
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006468:	2300      	movs	r3, #0
 800646a:	607b      	str	r3, [r7, #4]
 800646c:	e002      	b.n	8006474 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800646e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006472:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006474:	687b      	ldr	r3, [r7, #4]
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	200002f0 	.word	0x200002f0

08006488 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800648e:	f3ef 8305 	mrs	r3, IPSR
 8006492:	603b      	str	r3, [r7, #0]
  return(result);
 8006494:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800649a:	f06f 0305 	mvn.w	r3, #5
 800649e:	607b      	str	r3, [r7, #4]
 80064a0:	e010      	b.n	80064c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <osKernelStart+0x48>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d109      	bne.n	80064be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80064aa:	f7ff ffbf 	bl	800642c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80064ae:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <osKernelStart+0x48>)
 80064b0:	2202      	movs	r2, #2
 80064b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80064b4:	f001 fa0c 	bl	80078d0 <vTaskStartScheduler>
      stat = osOK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	e002      	b.n	80064c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80064be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80064c4:	687b      	ldr	r3, [r7, #4]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200002f0 	.word	0x200002f0

080064d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08e      	sub	sp, #56	; 0x38
 80064d8:	af04      	add	r7, sp, #16
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064e4:	f3ef 8305 	mrs	r3, IPSR
 80064e8:	617b      	str	r3, [r7, #20]
  return(result);
 80064ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d17e      	bne.n	80065ee <osThreadNew+0x11a>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d07b      	beq.n	80065ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064fa:	2318      	movs	r3, #24
 80064fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006506:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d045      	beq.n	800659a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <osThreadNew+0x48>
        name = attr->name;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <osThreadNew+0x6e>
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	2b38      	cmp	r3, #56	; 0x38
 8006534:	d805      	bhi.n	8006542 <osThreadNew+0x6e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <osThreadNew+0x72>
        return (NULL);
 8006542:	2300      	movs	r3, #0
 8006544:	e054      	b.n	80065f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	089b      	lsrs	r3, r3, #2
 8006554:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <osThreadNew+0xa8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2bc3      	cmp	r3, #195	; 0xc3
 8006564:	d90a      	bls.n	800657c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800656a:	2b00      	cmp	r3, #0
 800656c:	d006      	beq.n	800657c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <osThreadNew+0xa8>
        mem = 1;
 8006576:	2301      	movs	r3, #1
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e010      	b.n	800659e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10c      	bne.n	800659e <osThreadNew+0xca>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d108      	bne.n	800659e <osThreadNew+0xca>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <osThreadNew+0xca>
          mem = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	e001      	b.n	800659e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d110      	bne.n	80065c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065ac:	9202      	str	r2, [sp, #8]
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6a3a      	ldr	r2, [r7, #32]
 80065b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 ff96 	bl	80074ec <xTaskCreateStatic>
 80065c0:	4603      	mov	r3, r0
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	e013      	b.n	80065ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d110      	bne.n	80065ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	f107 0310 	add.w	r3, r7, #16
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 ffe1 	bl	80075a6 <xTaskCreate>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d001      	beq.n	80065ee <osThreadNew+0x11a>
            hTask = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065ee:	693b      	ldr	r3, [r7, #16]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3728      	adds	r7, #40	; 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006600:	f3ef 8305 	mrs	r3, IPSR
 8006604:	60bb      	str	r3, [r7, #8]
  return(result);
 8006606:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <osDelay+0x1c>
    stat = osErrorISR;
 800660c:	f06f 0305 	mvn.w	r3, #5
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e007      	b.n	8006624 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <osDelay+0x2c>
      vTaskDelay(ticks);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 f922 	bl	8007868 <vTaskDelay>
    }
  }

  return (stat);
 8006624:	68fb      	ldr	r3, [r7, #12]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800662e:	b580      	push	{r7, lr}
 8006630:	b08a      	sub	sp, #40	; 0x28
 8006632:	af02      	add	r7, sp, #8
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800663e:	f3ef 8305 	mrs	r3, IPSR
 8006642:	613b      	str	r3, [r7, #16]
  return(result);
 8006644:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006646:	2b00      	cmp	r3, #0
 8006648:	d15f      	bne.n	800670a <osMessageQueueNew+0xdc>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05c      	beq.n	800670a <osMessageQueueNew+0xdc>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d059      	beq.n	800670a <osMessageQueueNew+0xdc>
    mem = -1;
 8006656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800665a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d029      	beq.n	80066b6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d012      	beq.n	8006690 <osMessageQueueNew+0x62>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	2b4f      	cmp	r3, #79	; 0x4f
 8006670:	d90e      	bls.n	8006690 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	429a      	cmp	r2, r3
 8006688:	d302      	bcc.n	8006690 <osMessageQueueNew+0x62>
        mem = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	e014      	b.n	80066ba <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d110      	bne.n	80066ba <osMessageQueueNew+0x8c>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10c      	bne.n	80066ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d108      	bne.n	80066ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <osMessageQueueNew+0x8c>
          mem = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	e001      	b.n	80066ba <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d10b      	bne.n	80066d8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2100      	movs	r1, #0
 80066ca:	9100      	str	r1, [sp, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f9ce 	bl	8006a70 <xQueueGenericCreateStatic>
 80066d4:	61f8      	str	r0, [r7, #28]
 80066d6:	e008      	b.n	80066ea <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80066de:	2200      	movs	r2, #0
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fa3c 	bl	8006b60 <xQueueGenericCreate>
 80066e8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00c      	beq.n	800670a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <osMessageQueueNew+0xd0>
        name = attr->name;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e001      	b.n	8006702 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006702:	6979      	ldr	r1, [r7, #20]
 8006704:	69f8      	ldr	r0, [r7, #28]
 8006706:	f000 fe93 	bl	8007430 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800670a:	69fb      	ldr	r3, [r7, #28]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800672a:	f3ef 8305 	mrs	r3, IPSR
 800672e:	617b      	str	r3, [r7, #20]
  return(result);
 8006730:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006732:	2b00      	cmp	r3, #0
 8006734:	d028      	beq.n	8006788 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <osMessageQueueGet+0x34>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <osMessageQueueGet+0x34>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006748:	f06f 0303 	mvn.w	r3, #3
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	e037      	b.n	80067c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006754:	f107 0310 	add.w	r3, r7, #16
 8006758:	461a      	mov	r2, r3
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	69b8      	ldr	r0, [r7, #24]
 800675e:	f000 fcd7 	bl	8007110 <xQueueReceiveFromISR>
 8006762:	4603      	mov	r3, r0
 8006764:	2b01      	cmp	r3, #1
 8006766:	d003      	beq.n	8006770 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006768:	f06f 0302 	mvn.w	r3, #2
 800676c:	61fb      	str	r3, [r7, #28]
 800676e:	e027      	b.n	80067c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d024      	beq.n	80067c0 <osMessageQueueGet+0xac>
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <osMessageQueueGet+0xb8>)
 8006778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	e01b      	b.n	80067c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <osMessageQueueGet+0x80>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006794:	f06f 0303 	mvn.w	r3, #3
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	e011      	b.n	80067c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	69b8      	ldr	r0, [r7, #24]
 80067a2:	f000 fbd5 	bl	8006f50 <xQueueReceive>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d009      	beq.n	80067c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80067b2:	f06f 0301 	mvn.w	r3, #1
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	e002      	b.n	80067c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80067ba:	f06f 0302 	mvn.w	r3, #2
 80067be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80067c0:	69fb      	ldr	r3, [r7, #28]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	e000ed04 	.word	0xe000ed04

080067d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a07      	ldr	r2, [pc, #28]	; (80067fc <vApplicationGetIdleTaskMemory+0x2c>)
 80067e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	4a06      	ldr	r2, [pc, #24]	; (8006800 <vApplicationGetIdleTaskMemory+0x30>)
 80067e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	601a      	str	r2, [r3, #0]
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	200002f4 	.word	0x200002f4
 8006800:	200003b8 	.word	0x200003b8

08006804 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a07      	ldr	r2, [pc, #28]	; (8006830 <vApplicationGetTimerTaskMemory+0x2c>)
 8006814:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4a06      	ldr	r2, [pc, #24]	; (8006834 <vApplicationGetTimerTaskMemory+0x30>)
 800681a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006822:	601a      	str	r2, [r3, #0]
}
 8006824:	bf00      	nop
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	200005b8 	.word	0x200005b8
 8006834:	2000067c 	.word	0x2000067c

08006838 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f103 0208 	add.w	r2, r3, #8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006850:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f103 0208 	add.w	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f103 0208 	add.w	r2, r3, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	601a      	str	r2, [r3, #0]
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f0:	d103      	bne.n	80068fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e00c      	b.n	8006914 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3308      	adds	r3, #8
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e002      	b.n	8006908 <vListInsert+0x2e>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	429a      	cmp	r2, r3
 8006912:	d2f6      	bcs.n	8006902 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	601a      	str	r2, [r3, #0]
}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6892      	ldr	r2, [r2, #8]
 8006962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6852      	ldr	r2, [r2, #4]
 800696c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	d103      	bne.n	8006980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	1e5a      	subs	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069ca:	f002 f953 	bl	8008c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069da:	fb01 f303 	mul.w	r3, r1, r3
 80069de:	441a      	add	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	3b01      	subs	r3, #1
 80069fc:	68f9      	ldr	r1, [r7, #12]
 80069fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	22ff      	movs	r2, #255	; 0xff
 8006a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	22ff      	movs	r2, #255	; 0xff
 8006a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d114      	bne.n	8006a4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01a      	beq.n	8006a5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3310      	adds	r3, #16
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 fa07 	bl	8007e40 <xTaskRemoveFromEventList>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d012      	beq.n	8006a5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a38:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <xQueueGenericReset+0xcc>)
 8006a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	e009      	b.n	8006a5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3310      	adds	r3, #16
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fef2 	bl	8006838 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3324      	adds	r3, #36	; 0x24
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff feed 	bl	8006838 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a5e:	f002 f939 	bl	8008cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a62:	2301      	movs	r3, #1
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <xQueueGenericCreateStatic+0x52>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <xQueueGenericCreateStatic+0x56>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <xQueueGenericCreateStatic+0x58>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	623b      	str	r3, [r7, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <xQueueGenericCreateStatic+0x7e>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <xQueueGenericCreateStatic+0x82>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueGenericCreateStatic+0x84>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61fb      	str	r3, [r7, #28]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b0e:	2350      	movs	r3, #80	; 0x50
 8006b10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b50      	cmp	r3, #80	; 0x50
 8006b16:	d00a      	beq.n	8006b2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	61bb      	str	r3, [r7, #24]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00d      	beq.n	8006b56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f83f 	bl	8006bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3730      	adds	r7, #48	; 0x30
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	613b      	str	r3, [r7, #16]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	fb02 f303 	mul.w	r3, r2, r3
 8006b92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3350      	adds	r3, #80	; 0x50
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f002 f98d 	bl	8008eb8 <pvPortMalloc>
 8006b9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d011      	beq.n	8006bca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	3350      	adds	r3, #80	; 0x50
 8006bae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bb8:	79fa      	ldrb	r2, [r7, #7]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f805 	bl	8006bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bca:	69bb      	ldr	r3, [r7, #24]
	}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d103      	bne.n	8006bf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e002      	b.n	8006bf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c02:	2101      	movs	r1, #1
 8006c04:	69b8      	ldr	r0, [r7, #24]
 8006c06:	f7ff fecb 	bl	80069a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	78fa      	ldrb	r2, [r7, #3]
 8006c0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c12:	bf00      	nop
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08e      	sub	sp, #56	; 0x38
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xQueueGenericSend+0x32>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d103      	bne.n	8006c5c <xQueueGenericSend+0x40>
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <xQueueGenericSend+0x44>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <xQueueGenericSend+0x46>
 8006c60:	2300      	movs	r3, #0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <xQueueGenericSend+0x60>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d103      	bne.n	8006c8a <xQueueGenericSend+0x6e>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <xQueueGenericSend+0x72>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueGenericSend+0x74>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueGenericSend+0x8e>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	623b      	str	r3, [r7, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006caa:	f001 fa8b 	bl	80081c4 <xTaskGetSchedulerState>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d102      	bne.n	8006cba <xQueueGenericSend+0x9e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <xQueueGenericSend+0xa2>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <xQueueGenericSend+0xa4>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <xQueueGenericSend+0xbe>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	61fb      	str	r3, [r7, #28]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cda:	f001 ffcb 	bl	8008c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <xQueueGenericSend+0xd4>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d129      	bne.n	8006d44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cf6:	f000 fa8b 	bl	8007210 <prvCopyDataToQueue>
 8006cfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d010      	beq.n	8006d26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	3324      	adds	r3, #36	; 0x24
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 f899 	bl	8007e40 <xTaskRemoveFromEventList>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d013      	beq.n	8006d3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d14:	4b3f      	ldr	r3, [pc, #252]	; (8006e14 <xQueueGenericSend+0x1f8>)
 8006d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	e00a      	b.n	8006d3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d2c:	4b39      	ldr	r3, [pc, #228]	; (8006e14 <xQueueGenericSend+0x1f8>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d3c:	f001 ffca 	bl	8008cd4 <vPortExitCritical>
				return pdPASS;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e063      	b.n	8006e0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d103      	bne.n	8006d52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d4a:	f001 ffc3 	bl	8008cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e05c      	b.n	8006e0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 f8d3 	bl	8007f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d66:	f001 ffb5 	bl	8008cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d6a:	f000 fe23 	bl	80079b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d6e:	f001 ff81 	bl	8008c74 <vPortEnterCritical>
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d7e:	d103      	bne.n	8006d88 <xQueueGenericSend+0x16c>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d8e:	b25b      	sxtb	r3, r3
 8006d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d94:	d103      	bne.n	8006d9e <xQueueGenericSend+0x182>
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d9e:	f001 ff99 	bl	8008cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006da2:	1d3a      	adds	r2, r7, #4
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4611      	mov	r1, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 f8c2 	bl	8007f34 <xTaskCheckForTimeOut>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d124      	bne.n	8006e00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006db8:	f000 fb22 	bl	8007400 <prvIsQueueFull>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d018      	beq.n	8006df4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	3310      	adds	r3, #16
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 ffe8 	bl	8007da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dd2:	f000 faad 	bl	8007330 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dd6:	f000 fdfb 	bl	80079d0 <xTaskResumeAll>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f47f af7c 	bne.w	8006cda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006de2:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <xQueueGenericSend+0x1f8>)
 8006de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	e772      	b.n	8006cda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df6:	f000 fa9b 	bl	8007330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dfa:	f000 fde9 	bl	80079d0 <xTaskResumeAll>
 8006dfe:	e76c      	b.n	8006cda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e02:	f000 fa95 	bl	8007330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e06:	f000 fde3 	bl	80079d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3738      	adds	r7, #56	; 0x38
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b090      	sub	sp, #64	; 0x40
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d103      	bne.n	8006e54 <xQueueGenericSendFromISR+0x3c>
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <xQueueGenericSendFromISR+0x40>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <xQueueGenericSendFromISR+0x42>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d103      	bne.n	8006e82 <xQueueGenericSendFromISR+0x6a>
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <xQueueGenericSendFromISR+0x6e>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <xQueueGenericSendFromISR+0x70>
 8006e86:	2300      	movs	r3, #0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	623b      	str	r3, [r7, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ea2:	f001 ffc9 	bl	8008e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ea6:	f3ef 8211 	mrs	r2, BASEPRI
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	61fa      	str	r2, [r7, #28]
 8006ebc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d302      	bcc.n	8006ed4 <xQueueGenericSendFromISR+0xbc>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d12f      	bne.n	8006f34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006eea:	f000 f991 	bl	8007210 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006eee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef6:	d112      	bne.n	8006f1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d016      	beq.n	8006f2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	3324      	adds	r3, #36	; 0x24
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 ff9b 	bl	8007e40 <xTaskRemoveFromEventList>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00e      	beq.n	8006f2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	e007      	b.n	8006f2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f22:	3301      	adds	r3, #1
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	b25a      	sxtb	r2, r3
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f32:	e001      	b.n	8006f38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3740      	adds	r7, #64	; 0x40
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08c      	sub	sp, #48	; 0x30
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <xQueueReceive+0x30>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	623b      	str	r3, [r7, #32]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d103      	bne.n	8006f8e <xQueueReceive+0x3e>
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <xQueueReceive+0x42>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <xQueueReceive+0x44>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <xQueueReceive+0x5e>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	61fb      	str	r3, [r7, #28]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fae:	f001 f909 	bl	80081c4 <xTaskGetSchedulerState>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <xQueueReceive+0x6e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xQueueReceive+0x72>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueReceive+0x74>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xQueueReceive+0x8e>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	61bb      	str	r3, [r7, #24]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fde:	f001 fe49 	bl	8008c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d01f      	beq.n	800702e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff2:	f000 f977 	bl	80072e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	1e5a      	subs	r2, r3, #1
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00f      	beq.n	8007026 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	3310      	adds	r3, #16
 800700a:	4618      	mov	r0, r3
 800700c:	f000 ff18 	bl	8007e40 <xTaskRemoveFromEventList>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007016:	4b3d      	ldr	r3, [pc, #244]	; (800710c <xQueueReceive+0x1bc>)
 8007018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007026:	f001 fe55 	bl	8008cd4 <vPortExitCritical>
				return pdPASS;
 800702a:	2301      	movs	r3, #1
 800702c:	e069      	b.n	8007102 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d103      	bne.n	800703c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007034:	f001 fe4e 	bl	8008cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007038:	2300      	movs	r3, #0
 800703a:	e062      	b.n	8007102 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007042:	f107 0310 	add.w	r3, r7, #16
 8007046:	4618      	mov	r0, r3
 8007048:	f000 ff5e 	bl	8007f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007050:	f001 fe40 	bl	8008cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007054:	f000 fcae 	bl	80079b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007058:	f001 fe0c 	bl	8008c74 <vPortEnterCritical>
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007062:	b25b      	sxtb	r3, r3
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007068:	d103      	bne.n	8007072 <xQueueReceive+0x122>
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007078:	b25b      	sxtb	r3, r3
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800707e:	d103      	bne.n	8007088 <xQueueReceive+0x138>
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007088:	f001 fe24 	bl	8008cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800708c:	1d3a      	adds	r2, r7, #4
 800708e:	f107 0310 	add.w	r3, r7, #16
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f000 ff4d 	bl	8007f34 <xTaskCheckForTimeOut>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d123      	bne.n	80070e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a2:	f000 f997 	bl	80073d4 <prvIsQueueEmpty>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d017      	beq.n	80070dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	3324      	adds	r3, #36	; 0x24
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fe73 	bl	8007da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070bc:	f000 f938 	bl	8007330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070c0:	f000 fc86 	bl	80079d0 <xTaskResumeAll>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d189      	bne.n	8006fde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070ca:	4b10      	ldr	r3, [pc, #64]	; (800710c <xQueueReceive+0x1bc>)
 80070cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	e780      	b.n	8006fde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070de:	f000 f927 	bl	8007330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070e2:	f000 fc75 	bl	80079d0 <xTaskResumeAll>
 80070e6:	e77a      	b.n	8006fde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ea:	f000 f921 	bl	8007330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070ee:	f000 fc6f 	bl	80079d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f4:	f000 f96e 	bl	80073d4 <prvIsQueueEmpty>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f43f af6f 	beq.w	8006fde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007100:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007102:	4618      	mov	r0, r3
 8007104:	3730      	adds	r7, #48	; 0x30
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08e      	sub	sp, #56	; 0x38
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	623b      	str	r3, [r7, #32]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d103      	bne.n	800714a <xQueueReceiveFromISR+0x3a>
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <xQueueReceiveFromISR+0x3e>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <xQueueReceiveFromISR+0x40>
 800714e:	2300      	movs	r3, #0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	61fb      	str	r3, [r7, #28]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800716a:	f001 fe65 	bl	8008e38 <vPortValidateInterruptPriority>
	__asm volatile
 800716e:	f3ef 8211 	mrs	r2, BASEPRI
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	61ba      	str	r2, [r7, #24]
 8007184:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007186:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d02f      	beq.n	80071f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800719c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071a4:	f000 f89e 	bl	80072e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	1e5a      	subs	r2, r3, #1
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b8:	d112      	bne.n	80071e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d016      	beq.n	80071f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	3310      	adds	r3, #16
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fe3a 	bl	8007e40 <xTaskRemoveFromEventList>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00e      	beq.n	80071f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e007      	b.n	80071f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071e4:	3301      	adds	r3, #1
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	b25a      	sxtb	r2, r3
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80071f0:	2301      	movs	r3, #1
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
 80071f4:	e001      	b.n	80071fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f383 8811 	msr	BASEPRI, r3
}
 8007204:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007208:	4618      	mov	r0, r3
 800720a:	3738      	adds	r7, #56	; 0x38
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10d      	bne.n	800724a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d14d      	bne.n	80072d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 ffe0 	bl	8008200 <xTaskPriorityDisinherit>
 8007240:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	609a      	str	r2, [r3, #8]
 8007248:	e043      	b.n	80072d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d119      	bne.n	8007284 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6858      	ldr	r0, [r3, #4]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	461a      	mov	r2, r3
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	f002 f9b6 	bl	80095cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	441a      	add	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	d32b      	bcc.n	80072d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	605a      	str	r2, [r3, #4]
 8007282:	e026      	b.n	80072d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68d8      	ldr	r0, [r3, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	461a      	mov	r2, r3
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	f002 f99c 	bl	80095cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	425b      	negs	r3, r3
 800729e:	441a      	add	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d207      	bcs.n	80072c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	425b      	negs	r3, r3
 80072ba:	441a      	add	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d105      	bne.n	80072d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072da:	697b      	ldr	r3, [r7, #20]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d018      	beq.n	8007328 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	441a      	add	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	429a      	cmp	r2, r3
 800730e:	d303      	bcc.n	8007318 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68d9      	ldr	r1, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	461a      	mov	r2, r3
 8007322:	6838      	ldr	r0, [r7, #0]
 8007324:	f002 f952 	bl	80095cc <memcpy>
	}
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007338:	f001 fc9c 	bl	8008c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007342:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007344:	e011      	b.n	800736a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b00      	cmp	r3, #0
 800734c:	d012      	beq.n	8007374 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3324      	adds	r3, #36	; 0x24
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fd74 	bl	8007e40 <xTaskRemoveFromEventList>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800735e:	f000 fe4b 	bl	8007ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	3b01      	subs	r3, #1
 8007366:	b2db      	uxtb	r3, r3
 8007368:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800736a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800736e:	2b00      	cmp	r3, #0
 8007370:	dce9      	bgt.n	8007346 <prvUnlockQueue+0x16>
 8007372:	e000      	b.n	8007376 <prvUnlockQueue+0x46>
					break;
 8007374:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	22ff      	movs	r2, #255	; 0xff
 800737a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800737e:	f001 fca9 	bl	8008cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007382:	f001 fc77 	bl	8008c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800738c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800738e:	e011      	b.n	80073b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d012      	beq.n	80073be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3310      	adds	r3, #16
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fd4f 	bl	8007e40 <xTaskRemoveFromEventList>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073a8:	f000 fe26 	bl	8007ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	dce9      	bgt.n	8007390 <prvUnlockQueue+0x60>
 80073bc:	e000      	b.n	80073c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	22ff      	movs	r2, #255	; 0xff
 80073c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073c8:	f001 fc84 	bl	8008cd4 <vPortExitCritical>
}
 80073cc:	bf00      	nop
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073dc:	f001 fc4a 	bl	8008c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e001      	b.n	80073f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073f2:	f001 fc6f 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 80073f6:	68fb      	ldr	r3, [r7, #12]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007408:	f001 fc34 	bl	8008c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007414:	429a      	cmp	r2, r3
 8007416:	d102      	bne.n	800741e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e001      	b.n	8007422 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007422:	f001 fc57 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 8007426:	68fb      	ldr	r3, [r7, #12]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	e014      	b.n	800746a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007440:	4a0f      	ldr	r2, [pc, #60]	; (8007480 <vQueueAddToRegistry+0x50>)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800744c:	490c      	ldr	r1, [pc, #48]	; (8007480 <vQueueAddToRegistry+0x50>)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007456:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <vQueueAddToRegistry+0x50>)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4413      	add	r3, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007462:	e006      	b.n	8007472 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3301      	adds	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b07      	cmp	r3, #7
 800746e:	d9e7      	bls.n	8007440 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000a7c 	.word	0x20000a7c

08007484 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007494:	f001 fbee 	bl	8008c74 <vPortEnterCritical>
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800749e:	b25b      	sxtb	r3, r3
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a4:	d103      	bne.n	80074ae <vQueueWaitForMessageRestricted+0x2a>
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ba:	d103      	bne.n	80074c4 <vQueueWaitForMessageRestricted+0x40>
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c4:	f001 fc06 	bl	8008cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d106      	bne.n	80074de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3324      	adds	r3, #36	; 0x24
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 fc85 	bl	8007de8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074de:	6978      	ldr	r0, [r7, #20]
 80074e0:	f7ff ff26 	bl	8007330 <prvUnlockQueue>
	}
 80074e4:	bf00      	nop
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08e      	sub	sp, #56	; 0x38
 80074f0:	af04      	add	r7, sp, #16
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	623b      	str	r3, [r7, #32]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <xTaskCreateStatic+0x46>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	61fb      	str	r3, [r7, #28]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007532:	23c4      	movs	r3, #196	; 0xc4
 8007534:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2bc4      	cmp	r3, #196	; 0xc4
 800753a:	d00a      	beq.n	8007552 <xTaskCreateStatic+0x66>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	61bb      	str	r3, [r7, #24]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007552:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01e      	beq.n	8007598 <xTaskCreateStatic+0xac>
 800755a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01b      	beq.n	8007598 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007568:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	2202      	movs	r2, #2
 800756e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007572:	2300      	movs	r3, #0
 8007574:	9303      	str	r3, [sp, #12]
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	9302      	str	r3, [sp, #8]
 800757a:	f107 0314 	add.w	r3, r7, #20
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f850 	bl	8007630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007592:	f000 f8f9 	bl	8007788 <prvAddNewTaskToReadyList>
 8007596:	e001      	b.n	800759c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800759c:	697b      	ldr	r3, [r7, #20]
	}
 800759e:	4618      	mov	r0, r3
 80075a0:	3728      	adds	r7, #40	; 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b08c      	sub	sp, #48	; 0x30
 80075aa:	af04      	add	r7, sp, #16
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	603b      	str	r3, [r7, #0]
 80075b2:	4613      	mov	r3, r2
 80075b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075b6:	88fb      	ldrh	r3, [r7, #6]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 fc7c 	bl	8008eb8 <pvPortMalloc>
 80075c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00e      	beq.n	80075e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075c8:	20c4      	movs	r0, #196	; 0xc4
 80075ca:	f001 fc75 	bl	8008eb8 <pvPortMalloc>
 80075ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	631a      	str	r2, [r3, #48]	; 0x30
 80075dc:	e005      	b.n	80075ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075de:	6978      	ldr	r0, [r7, #20]
 80075e0:	f001 fd36 	bl	8009050 <vPortFree>
 80075e4:	e001      	b.n	80075ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d017      	beq.n	8007620 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075f8:	88fa      	ldrh	r2, [r7, #6]
 80075fa:	2300      	movs	r3, #0
 80075fc:	9303      	str	r3, [sp, #12]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	9302      	str	r3, [sp, #8]
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f80e 	bl	8007630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007614:	69f8      	ldr	r0, [r7, #28]
 8007616:	f000 f8b7 	bl	8007788 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800761a:	2301      	movs	r3, #1
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	e002      	b.n	8007626 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007624:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007626:	69bb      	ldr	r3, [r7, #24]
	}
 8007628:	4618      	mov	r0, r3
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	461a      	mov	r2, r3
 8007648:	21a5      	movs	r1, #165	; 0xa5
 800764a:	f001 ffcd 	bl	80095e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007658:	3b01      	subs	r3, #1
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	617b      	str	r3, [r7, #20]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01f      	beq.n	80076d4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007694:	2300      	movs	r3, #0
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	e012      	b.n	80076c0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	4413      	add	r3, r2
 80076a0:	7819      	ldrb	r1, [r3, #0]
 80076a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	3334      	adds	r3, #52	; 0x34
 80076aa:	460a      	mov	r2, r1
 80076ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d006      	beq.n	80076c8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	3301      	adds	r3, #1
 80076be:	61fb      	str	r3, [r7, #28]
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	2b0f      	cmp	r3, #15
 80076c4:	d9e9      	bls.n	800769a <prvInitialiseNewTask+0x6a>
 80076c6:	e000      	b.n	80076ca <prvInitialiseNewTask+0x9a>
			{
				break;
 80076c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076d2:	e003      	b.n	80076dc <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	2b37      	cmp	r3, #55	; 0x37
 80076e0:	d901      	bls.n	80076e6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076e2:	2337      	movs	r3, #55	; 0x37
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076f0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	2200      	movs	r2, #0
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	3304      	adds	r3, #4
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff f8bb 	bl	8006878 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	3318      	adds	r3, #24
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff f8b6 	bl	8006878 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007710:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007720:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2200      	movs	r2, #0
 8007726:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	2200      	movs	r2, #0
 8007734:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	335c      	adds	r3, #92	; 0x5c
 800773c:	2260      	movs	r2, #96	; 0x60
 800773e:	2100      	movs	r1, #0
 8007740:	4618      	mov	r0, r3
 8007742:	f001 ff51 	bl	80095e8 <memset>
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	4a0c      	ldr	r2, [pc, #48]	; (800777c <prvInitialiseNewTask+0x14c>)
 800774a:	661a      	str	r2, [r3, #96]	; 0x60
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	4a0c      	ldr	r2, [pc, #48]	; (8007780 <prvInitialiseNewTask+0x150>)
 8007750:	665a      	str	r2, [r3, #100]	; 0x64
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	4a0b      	ldr	r2, [pc, #44]	; (8007784 <prvInitialiseNewTask+0x154>)
 8007756:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	68f9      	ldr	r1, [r7, #12]
 800775c:	69b8      	ldr	r0, [r7, #24]
 800775e:	f001 f95f 	bl	8008a20 <pxPortInitialiseStack>
 8007762:	4602      	mov	r2, r0
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007772:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007774:	bf00      	nop
 8007776:	3720      	adds	r7, #32
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	08009904 	.word	0x08009904
 8007780:	08009924 	.word	0x08009924
 8007784:	080098e4 	.word	0x080098e4

08007788 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007790:	f001 fa70 	bl	8008c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007794:	4b2d      	ldr	r3, [pc, #180]	; (800784c <prvAddNewTaskToReadyList+0xc4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	4a2c      	ldr	r2, [pc, #176]	; (800784c <prvAddNewTaskToReadyList+0xc4>)
 800779c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800779e:	4b2c      	ldr	r3, [pc, #176]	; (8007850 <prvAddNewTaskToReadyList+0xc8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d109      	bne.n	80077ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077a6:	4a2a      	ldr	r2, [pc, #168]	; (8007850 <prvAddNewTaskToReadyList+0xc8>)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077ac:	4b27      	ldr	r3, [pc, #156]	; (800784c <prvAddNewTaskToReadyList+0xc4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d110      	bne.n	80077d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077b4:	f000 fc44 	bl	8008040 <prvInitialiseTaskLists>
 80077b8:	e00d      	b.n	80077d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ba:	4b26      	ldr	r3, [pc, #152]	; (8007854 <prvAddNewTaskToReadyList+0xcc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077c2:	4b23      	ldr	r3, [pc, #140]	; (8007850 <prvAddNewTaskToReadyList+0xc8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d802      	bhi.n	80077d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077d0:	4a1f      	ldr	r2, [pc, #124]	; (8007850 <prvAddNewTaskToReadyList+0xc8>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077d6:	4b20      	ldr	r3, [pc, #128]	; (8007858 <prvAddNewTaskToReadyList+0xd0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3301      	adds	r3, #1
 80077dc:	4a1e      	ldr	r2, [pc, #120]	; (8007858 <prvAddNewTaskToReadyList+0xd0>)
 80077de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077e0:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <prvAddNewTaskToReadyList+0xd0>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	4b1b      	ldr	r3, [pc, #108]	; (800785c <prvAddNewTaskToReadyList+0xd4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d903      	bls.n	80077fc <prvAddNewTaskToReadyList+0x74>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	4a18      	ldr	r2, [pc, #96]	; (800785c <prvAddNewTaskToReadyList+0xd4>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4a15      	ldr	r2, [pc, #84]	; (8007860 <prvAddNewTaskToReadyList+0xd8>)
 800780a:	441a      	add	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3304      	adds	r3, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7ff f83d 	bl	8006892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007818:	f001 fa5c 	bl	8008cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800781c:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <prvAddNewTaskToReadyList+0xcc>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00e      	beq.n	8007842 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <prvAddNewTaskToReadyList+0xc8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	429a      	cmp	r2, r3
 8007830:	d207      	bcs.n	8007842 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007832:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <prvAddNewTaskToReadyList+0xdc>)
 8007834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000f90 	.word	0x20000f90
 8007850:	20000abc 	.word	0x20000abc
 8007854:	20000f9c 	.word	0x20000f9c
 8007858:	20000fac 	.word	0x20000fac
 800785c:	20000f98 	.word	0x20000f98
 8007860:	20000ac0 	.word	0x20000ac0
 8007864:	e000ed04 	.word	0xe000ed04

08007868 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d017      	beq.n	80078aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800787a:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <vTaskDelay+0x60>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <vTaskDelay+0x30>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	60bb      	str	r3, [r7, #8]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007898:	f000 f88c 	bl	80079b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800789c:	2100      	movs	r1, #0
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fd1c 	bl	80082dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078a4:	f000 f894 	bl	80079d0 <xTaskResumeAll>
 80078a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d107      	bne.n	80078c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <vTaskDelay+0x64>)
 80078b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20000fb8 	.word	0x20000fb8
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078de:	463a      	mov	r2, r7
 80078e0:	1d39      	adds	r1, r7, #4
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe ff72 	bl	80067d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	9202      	str	r2, [sp, #8]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2300      	movs	r3, #0
 80078fc:	460a      	mov	r2, r1
 80078fe:	4925      	ldr	r1, [pc, #148]	; (8007994 <vTaskStartScheduler+0xc4>)
 8007900:	4825      	ldr	r0, [pc, #148]	; (8007998 <vTaskStartScheduler+0xc8>)
 8007902:	f7ff fdf3 	bl	80074ec <xTaskCreateStatic>
 8007906:	4603      	mov	r3, r0
 8007908:	4a24      	ldr	r2, [pc, #144]	; (800799c <vTaskStartScheduler+0xcc>)
 800790a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800790c:	4b23      	ldr	r3, [pc, #140]	; (800799c <vTaskStartScheduler+0xcc>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007914:	2301      	movs	r3, #1
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	e001      	b.n	800791e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d102      	bne.n	800792a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007924:	f000 fd2e 	bl	8008384 <xTimerCreateTimerTask>
 8007928:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d11d      	bne.n	800796c <vTaskStartScheduler+0x9c>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
}
 8007942:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007944:	4b16      	ldr	r3, [pc, #88]	; (80079a0 <vTaskStartScheduler+0xd0>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	335c      	adds	r3, #92	; 0x5c
 800794a:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <vTaskStartScheduler+0xd4>)
 800794c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800794e:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <vTaskStartScheduler+0xd8>)
 8007950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007956:	4b15      	ldr	r3, [pc, #84]	; (80079ac <vTaskStartScheduler+0xdc>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800795c:	4b14      	ldr	r3, [pc, #80]	; (80079b0 <vTaskStartScheduler+0xe0>)
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007962:	f7f8 ff49 	bl	80007f8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007966:	f001 f8e3 	bl	8008b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800796a:	e00e      	b.n	800798a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007972:	d10a      	bne.n	800798a <vTaskStartScheduler+0xba>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	60fb      	str	r3, [r7, #12]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <vTaskStartScheduler+0xb8>
}
 800798a:	bf00      	nop
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	080097c8 	.word	0x080097c8
 8007998:	08008011 	.word	0x08008011
 800799c:	20000fb4 	.word	0x20000fb4
 80079a0:	20000abc 	.word	0x20000abc
 80079a4:	20000010 	.word	0x20000010
 80079a8:	20000fb0 	.word	0x20000fb0
 80079ac:	20000f9c 	.word	0x20000f9c
 80079b0:	20000f94 	.word	0x20000f94

080079b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079b8:	4b04      	ldr	r3, [pc, #16]	; (80079cc <vTaskSuspendAll+0x18>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	4a03      	ldr	r2, [pc, #12]	; (80079cc <vTaskSuspendAll+0x18>)
 80079c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079c2:	bf00      	nop
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	20000fb8 	.word	0x20000fb8

080079d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079de:	4b42      	ldr	r3, [pc, #264]	; (8007ae8 <xTaskResumeAll+0x118>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10a      	bne.n	80079fc <xTaskResumeAll+0x2c>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	603b      	str	r3, [r7, #0]
}
 80079f8:	bf00      	nop
 80079fa:	e7fe      	b.n	80079fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079fc:	f001 f93a 	bl	8008c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a00:	4b39      	ldr	r3, [pc, #228]	; (8007ae8 <xTaskResumeAll+0x118>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	4a38      	ldr	r2, [pc, #224]	; (8007ae8 <xTaskResumeAll+0x118>)
 8007a08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a0a:	4b37      	ldr	r3, [pc, #220]	; (8007ae8 <xTaskResumeAll+0x118>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d162      	bne.n	8007ad8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a12:	4b36      	ldr	r3, [pc, #216]	; (8007aec <xTaskResumeAll+0x11c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d05e      	beq.n	8007ad8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a1a:	e02f      	b.n	8007a7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a1c:	4b34      	ldr	r3, [pc, #208]	; (8007af0 <xTaskResumeAll+0x120>)
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3318      	adds	r3, #24
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe ff8f 	bl	800694c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe ff8a 	bl	800694c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	4b2d      	ldr	r3, [pc, #180]	; (8007af4 <xTaskResumeAll+0x124>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d903      	bls.n	8007a4c <xTaskResumeAll+0x7c>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	4a2a      	ldr	r2, [pc, #168]	; (8007af4 <xTaskResumeAll+0x124>)
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4a27      	ldr	r2, [pc, #156]	; (8007af8 <xTaskResumeAll+0x128>)
 8007a5a:	441a      	add	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f7fe ff15 	bl	8006892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6c:	4b23      	ldr	r3, [pc, #140]	; (8007afc <xTaskResumeAll+0x12c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a76:	4b22      	ldr	r3, [pc, #136]	; (8007b00 <xTaskResumeAll+0x130>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a7c:	4b1c      	ldr	r3, [pc, #112]	; (8007af0 <xTaskResumeAll+0x120>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1cb      	bne.n	8007a1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a8a:	f000 fb7b 	bl	8008184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a8e:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <xTaskResumeAll+0x134>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d010      	beq.n	8007abc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a9a:	f000 f847 	bl	8007b2c <xTaskIncrementTick>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007aa4:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <xTaskResumeAll+0x130>)
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1f1      	bne.n	8007a9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007ab6:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <xTaskResumeAll+0x134>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007abc:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <xTaskResumeAll+0x130>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d009      	beq.n	8007ad8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ac8:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <xTaskResumeAll+0x138>)
 8007aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ad8:	f001 f8fc 	bl	8008cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8007adc:	68bb      	ldr	r3, [r7, #8]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000fb8 	.word	0x20000fb8
 8007aec:	20000f90 	.word	0x20000f90
 8007af0:	20000f50 	.word	0x20000f50
 8007af4:	20000f98 	.word	0x20000f98
 8007af8:	20000ac0 	.word	0x20000ac0
 8007afc:	20000abc 	.word	0x20000abc
 8007b00:	20000fa4 	.word	0x20000fa4
 8007b04:	20000fa0 	.word	0x20000fa0
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <xTaskGetTickCount+0x1c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b18:	687b      	ldr	r3, [r7, #4]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	20000f94 	.word	0x20000f94

08007b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b36:	4b4f      	ldr	r3, [pc, #316]	; (8007c74 <xTaskIncrementTick+0x148>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 808f 	bne.w	8007c5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b40:	4b4d      	ldr	r3, [pc, #308]	; (8007c78 <xTaskIncrementTick+0x14c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b48:	4a4b      	ldr	r2, [pc, #300]	; (8007c78 <xTaskIncrementTick+0x14c>)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d120      	bne.n	8007b96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b54:	4b49      	ldr	r3, [pc, #292]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	603b      	str	r3, [r7, #0]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <xTaskIncrementTick+0x46>
 8007b74:	4b41      	ldr	r3, [pc, #260]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	4b41      	ldr	r3, [pc, #260]	; (8007c80 <xTaskIncrementTick+0x154>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a3f      	ldr	r2, [pc, #252]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	4a3f      	ldr	r2, [pc, #252]	; (8007c80 <xTaskIncrementTick+0x154>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	4b3e      	ldr	r3, [pc, #248]	; (8007c84 <xTaskIncrementTick+0x158>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	4a3d      	ldr	r2, [pc, #244]	; (8007c84 <xTaskIncrementTick+0x158>)
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	f000 faf7 	bl	8008184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b96:	4b3c      	ldr	r3, [pc, #240]	; (8007c88 <xTaskIncrementTick+0x15c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d349      	bcc.n	8007c34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ba0:	4b36      	ldr	r3, [pc, #216]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <xTaskIncrementTick+0x15c>)
 8007bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bb0:	601a      	str	r2, [r3, #0]
					break;
 8007bb2:	e03f      	b.n	8007c34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb4:	4b31      	ldr	r3, [pc, #196]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d203      	bcs.n	8007bd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bcc:	4a2e      	ldr	r2, [pc, #184]	; (8007c88 <xTaskIncrementTick+0x15c>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bd2:	e02f      	b.n	8007c34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe feb7 	bl	800694c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	3318      	adds	r3, #24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe feae 	bl	800694c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <xTaskIncrementTick+0x160>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d903      	bls.n	8007c04 <xTaskIncrementTick+0xd8>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <xTaskIncrementTick+0x160>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <xTaskIncrementTick+0x164>)
 8007c12:	441a      	add	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fe fe39 	bl	8006892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <xTaskIncrementTick+0x168>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d3b8      	bcc.n	8007ba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c32:	e7b5      	b.n	8007ba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c34:	4b17      	ldr	r3, [pc, #92]	; (8007c94 <xTaskIncrementTick+0x168>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3a:	4915      	ldr	r1, [pc, #84]	; (8007c90 <xTaskIncrementTick+0x164>)
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d901      	bls.n	8007c50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c50:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <xTaskIncrementTick+0x16c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	e004      	b.n	8007c68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <xTaskIncrementTick+0x170>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a0d      	ldr	r2, [pc, #52]	; (8007c9c <xTaskIncrementTick+0x170>)
 8007c66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c68:	697b      	ldr	r3, [r7, #20]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000fb8 	.word	0x20000fb8
 8007c78:	20000f94 	.word	0x20000f94
 8007c7c:	20000f48 	.word	0x20000f48
 8007c80:	20000f4c 	.word	0x20000f4c
 8007c84:	20000fa8 	.word	0x20000fa8
 8007c88:	20000fb0 	.word	0x20000fb0
 8007c8c:	20000f98 	.word	0x20000f98
 8007c90:	20000ac0 	.word	0x20000ac0
 8007c94:	20000abc 	.word	0x20000abc
 8007c98:	20000fa4 	.word	0x20000fa4
 8007c9c:	20000fa0 	.word	0x20000fa0

08007ca0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ca6:	4b36      	ldr	r3, [pc, #216]	; (8007d80 <vTaskSwitchContext+0xe0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cae:	4b35      	ldr	r3, [pc, #212]	; (8007d84 <vTaskSwitchContext+0xe4>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cb4:	e05f      	b.n	8007d76 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8007cb6:	4b33      	ldr	r3, [pc, #204]	; (8007d84 <vTaskSwitchContext+0xe4>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007cbc:	f7f8 fda3 	bl	8000806 <getRunTimeCounterValue>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4a31      	ldr	r2, [pc, #196]	; (8007d88 <vTaskSwitchContext+0xe8>)
 8007cc4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007cc6:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <vTaskSwitchContext+0xe8>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b30      	ldr	r3, [pc, #192]	; (8007d8c <vTaskSwitchContext+0xec>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d909      	bls.n	8007ce6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007cd2:	4b2f      	ldr	r3, [pc, #188]	; (8007d90 <vTaskSwitchContext+0xf0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007cd8:	4a2b      	ldr	r2, [pc, #172]	; (8007d88 <vTaskSwitchContext+0xe8>)
 8007cda:	6810      	ldr	r0, [r2, #0]
 8007cdc:	4a2b      	ldr	r2, [pc, #172]	; (8007d8c <vTaskSwitchContext+0xec>)
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	1a82      	subs	r2, r0, r2
 8007ce2:	440a      	add	r2, r1
 8007ce4:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007ce6:	4b28      	ldr	r3, [pc, #160]	; (8007d88 <vTaskSwitchContext+0xe8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a28      	ldr	r2, [pc, #160]	; (8007d8c <vTaskSwitchContext+0xec>)
 8007cec:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cee:	4b29      	ldr	r3, [pc, #164]	; (8007d94 <vTaskSwitchContext+0xf4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e010      	b.n	8007d18 <vTaskSwitchContext+0x78>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <vTaskSwitchContext+0x72>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	607b      	str	r3, [r7, #4]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <vTaskSwitchContext+0x70>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	491f      	ldr	r1, [pc, #124]	; (8007d98 <vTaskSwitchContext+0xf8>)
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	440b      	add	r3, r1
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0e4      	beq.n	8007cf6 <vTaskSwitchContext+0x56>
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <vTaskSwitchContext+0xf8>)
 8007d38:	4413      	add	r3, r2
 8007d3a:	60bb      	str	r3, [r7, #8]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	605a      	str	r2, [r3, #4]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d104      	bne.n	8007d5c <vTaskSwitchContext+0xbc>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	605a      	str	r2, [r3, #4]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	4a0b      	ldr	r2, [pc, #44]	; (8007d90 <vTaskSwitchContext+0xf0>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	4a0b      	ldr	r2, [pc, #44]	; (8007d94 <vTaskSwitchContext+0xf4>)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d6c:	4b08      	ldr	r3, [pc, #32]	; (8007d90 <vTaskSwitchContext+0xf0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	335c      	adds	r3, #92	; 0x5c
 8007d72:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <vTaskSwitchContext+0xfc>)
 8007d74:	6013      	str	r3, [r2, #0]
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000fb8 	.word	0x20000fb8
 8007d84:	20000fa4 	.word	0x20000fa4
 8007d88:	20000fc0 	.word	0x20000fc0
 8007d8c:	20000fbc 	.word	0x20000fbc
 8007d90:	20000abc 	.word	0x20000abc
 8007d94:	20000f98 	.word	0x20000f98
 8007d98:	20000ac0 	.word	0x20000ac0
 8007d9c:	20000010 	.word	0x20000010

08007da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dc6:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <vTaskPlaceOnEventList+0x44>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3318      	adds	r3, #24
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7fe fd83 	bl	80068da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	6838      	ldr	r0, [r7, #0]
 8007dd8:	f000 fa80 	bl	80082dc <prvAddCurrentTaskToDelayedList>
}
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000abc 	.word	0x20000abc

08007de8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10a      	bne.n	8007e10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	617b      	str	r3, [r7, #20]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <vTaskPlaceOnEventListRestricted+0x54>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3318      	adds	r3, #24
 8007e16:	4619      	mov	r1, r3
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7fe fd3a 	bl	8006892 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	68b8      	ldr	r0, [r7, #8]
 8007e2e:	f000 fa55 	bl	80082dc <prvAddCurrentTaskToDelayedList>
	}
 8007e32:	bf00      	nop
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000abc 	.word	0x20000abc

08007e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10a      	bne.n	8007e6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	60fb      	str	r3, [r7, #12]
}
 8007e68:	bf00      	nop
 8007e6a:	e7fe      	b.n	8007e6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	3318      	adds	r3, #24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe fd6b 	bl	800694c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e76:	4b1e      	ldr	r3, [pc, #120]	; (8007ef0 <xTaskRemoveFromEventList+0xb0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d11d      	bne.n	8007eba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fd62 	bl	800694c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	4b19      	ldr	r3, [pc, #100]	; (8007ef4 <xTaskRemoveFromEventList+0xb4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d903      	bls.n	8007e9c <xTaskRemoveFromEventList+0x5c>
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	4a16      	ldr	r2, [pc, #88]	; (8007ef4 <xTaskRemoveFromEventList+0xb4>)
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <xTaskRemoveFromEventList+0xb8>)
 8007eaa:	441a      	add	r2, r3
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	f7fe fced 	bl	8006892 <vListInsertEnd>
 8007eb8:	e005      	b.n	8007ec6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	3318      	adds	r3, #24
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	480e      	ldr	r0, [pc, #56]	; (8007efc <xTaskRemoveFromEventList+0xbc>)
 8007ec2:	f7fe fce6 	bl	8006892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eca:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <xTaskRemoveFromEventList+0xc0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d905      	bls.n	8007ee0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <xTaskRemoveFromEventList+0xc4>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e001      	b.n	8007ee4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ee4:	697b      	ldr	r3, [r7, #20]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000fb8 	.word	0x20000fb8
 8007ef4:	20000f98 	.word	0x20000f98
 8007ef8:	20000ac0 	.word	0x20000ac0
 8007efc:	20000f50 	.word	0x20000f50
 8007f00:	20000abc 	.word	0x20000abc
 8007f04:	20000fa4 	.word	0x20000fa4

08007f08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <vTaskInternalSetTimeOutState+0x24>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f18:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <vTaskInternalSetTimeOutState+0x28>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	605a      	str	r2, [r3, #4]
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	20000fa8 	.word	0x20000fa8
 8007f30:	20000f94 	.word	0x20000f94

08007f34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	613b      	str	r3, [r7, #16]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	60fb      	str	r3, [r7, #12]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f76:	f000 fe7d 	bl	8008c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f7a:	4b1d      	ldr	r3, [pc, #116]	; (8007ff0 <xTaskCheckForTimeOut+0xbc>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f92:	d102      	bne.n	8007f9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e023      	b.n	8007fe2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4b15      	ldr	r3, [pc, #84]	; (8007ff4 <xTaskCheckForTimeOut+0xc0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d007      	beq.n	8007fb6 <xTaskCheckForTimeOut+0x82>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d302      	bcc.n	8007fb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	e015      	b.n	8007fe2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d20b      	bcs.n	8007fd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	1ad2      	subs	r2, r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff ff9b 	bl	8007f08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	e004      	b.n	8007fe2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fe2:	f000 fe77 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3720      	adds	r7, #32
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000f94 	.word	0x20000f94
 8007ff4:	20000fa8 	.word	0x20000fa8

08007ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ffc:	4b03      	ldr	r3, [pc, #12]	; (800800c <vTaskMissedYield+0x14>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	601a      	str	r2, [r3, #0]
}
 8008002:	bf00      	nop
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	20000fa4 	.word	0x20000fa4

08008010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008018:	f000 f852 	bl	80080c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800801c:	4b06      	ldr	r3, [pc, #24]	; (8008038 <prvIdleTask+0x28>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d9f9      	bls.n	8008018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <prvIdleTask+0x2c>)
 8008026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008034:	e7f0      	b.n	8008018 <prvIdleTask+0x8>
 8008036:	bf00      	nop
 8008038:	20000ac0 	.word	0x20000ac0
 800803c:	e000ed04 	.word	0xe000ed04

08008040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008046:	2300      	movs	r3, #0
 8008048:	607b      	str	r3, [r7, #4]
 800804a:	e00c      	b.n	8008066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4a12      	ldr	r2, [pc, #72]	; (80080a0 <prvInitialiseTaskLists+0x60>)
 8008058:	4413      	add	r3, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fbec 	bl	8006838 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3301      	adds	r3, #1
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b37      	cmp	r3, #55	; 0x37
 800806a:	d9ef      	bls.n	800804c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800806c:	480d      	ldr	r0, [pc, #52]	; (80080a4 <prvInitialiseTaskLists+0x64>)
 800806e:	f7fe fbe3 	bl	8006838 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008072:	480d      	ldr	r0, [pc, #52]	; (80080a8 <prvInitialiseTaskLists+0x68>)
 8008074:	f7fe fbe0 	bl	8006838 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008078:	480c      	ldr	r0, [pc, #48]	; (80080ac <prvInitialiseTaskLists+0x6c>)
 800807a:	f7fe fbdd 	bl	8006838 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800807e:	480c      	ldr	r0, [pc, #48]	; (80080b0 <prvInitialiseTaskLists+0x70>)
 8008080:	f7fe fbda 	bl	8006838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008084:	480b      	ldr	r0, [pc, #44]	; (80080b4 <prvInitialiseTaskLists+0x74>)
 8008086:	f7fe fbd7 	bl	8006838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800808a:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <prvInitialiseTaskLists+0x78>)
 800808c:	4a05      	ldr	r2, [pc, #20]	; (80080a4 <prvInitialiseTaskLists+0x64>)
 800808e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008090:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <prvInitialiseTaskLists+0x7c>)
 8008092:	4a05      	ldr	r2, [pc, #20]	; (80080a8 <prvInitialiseTaskLists+0x68>)
 8008094:	601a      	str	r2, [r3, #0]
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000ac0 	.word	0x20000ac0
 80080a4:	20000f20 	.word	0x20000f20
 80080a8:	20000f34 	.word	0x20000f34
 80080ac:	20000f50 	.word	0x20000f50
 80080b0:	20000f64 	.word	0x20000f64
 80080b4:	20000f7c 	.word	0x20000f7c
 80080b8:	20000f48 	.word	0x20000f48
 80080bc:	20000f4c 	.word	0x20000f4c

080080c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080c6:	e019      	b.n	80080fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080c8:	f000 fdd4 	bl	8008c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080cc:	4b10      	ldr	r3, [pc, #64]	; (8008110 <prvCheckTasksWaitingTermination+0x50>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fc37 	bl	800694c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080de:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <prvCheckTasksWaitingTermination+0x54>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	4a0b      	ldr	r2, [pc, #44]	; (8008114 <prvCheckTasksWaitingTermination+0x54>)
 80080e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080e8:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <prvCheckTasksWaitingTermination+0x58>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	4a0a      	ldr	r2, [pc, #40]	; (8008118 <prvCheckTasksWaitingTermination+0x58>)
 80080f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080f2:	f000 fdef 	bl	8008cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f810 	bl	800811c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <prvCheckTasksWaitingTermination+0x58>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e1      	bne.n	80080c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000f64 	.word	0x20000f64
 8008114:	20000f90 	.word	0x20000f90
 8008118:	20000f78 	.word	0x20000f78

0800811c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	335c      	adds	r3, #92	; 0x5c
 8008128:	4618      	mov	r0, r3
 800812a:	f001 fa73 	bl	8009614 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	4618      	mov	r0, r3
 800813e:	f000 ff87 	bl	8009050 <vPortFree>
				vPortFree( pxTCB );
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 ff84 	bl	8009050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008148:	e018      	b.n	800817c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008150:	2b01      	cmp	r3, #1
 8008152:	d103      	bne.n	800815c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 ff7b 	bl	8009050 <vPortFree>
	}
 800815a:	e00f      	b.n	800817c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008162:	2b02      	cmp	r3, #2
 8008164:	d00a      	beq.n	800817c <prvDeleteTCB+0x60>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60fb      	str	r3, [r7, #12]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <prvDeleteTCB+0x5e>
	}
 800817c:	bf00      	nop
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <prvResetNextTaskUnblockTime+0x38>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008194:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <prvResetNextTaskUnblockTime+0x3c>)
 8008196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800819a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800819c:	e008      	b.n	80081b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800819e:	4b07      	ldr	r3, [pc, #28]	; (80081bc <prvResetNextTaskUnblockTime+0x38>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	4a04      	ldr	r2, [pc, #16]	; (80081c0 <prvResetNextTaskUnblockTime+0x3c>)
 80081ae:	6013      	str	r3, [r2, #0]
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000f48 	.word	0x20000f48
 80081c0:	20000fb0 	.word	0x20000fb0

080081c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081ca:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <xTaskGetSchedulerState+0x34>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081d2:	2301      	movs	r3, #1
 80081d4:	607b      	str	r3, [r7, #4]
 80081d6:	e008      	b.n	80081ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081d8:	4b08      	ldr	r3, [pc, #32]	; (80081fc <xTaskGetSchedulerState+0x38>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081e0:	2302      	movs	r3, #2
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	e001      	b.n	80081ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081e6:	2300      	movs	r3, #0
 80081e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081ea:	687b      	ldr	r3, [r7, #4]
	}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	20000f9c 	.word	0x20000f9c
 80081fc:	20000fb8 	.word	0x20000fb8

08008200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d056      	beq.n	80082c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008216:	4b2e      	ldr	r3, [pc, #184]	; (80082d0 <xTaskPriorityDisinherit+0xd0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	429a      	cmp	r2, r3
 800821e:	d00a      	beq.n	8008236 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	60bb      	str	r3, [r7, #8]
}
 8008250:	bf00      	nop
 8008252:	e7fe      	b.n	8008252 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008258:	1e5a      	subs	r2, r3, #1
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008266:	429a      	cmp	r2, r3
 8008268:	d02c      	beq.n	80082c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	2b00      	cmp	r3, #0
 8008270:	d128      	bne.n	80082c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	3304      	adds	r3, #4
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fb68 	bl	800694c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <xTaskPriorityDisinherit+0xd4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d903      	bls.n	80082a4 <xTaskPriorityDisinherit+0xa4>
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	4a0c      	ldr	r2, [pc, #48]	; (80082d4 <xTaskPriorityDisinherit+0xd4>)
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4a09      	ldr	r2, [pc, #36]	; (80082d8 <xTaskPriorityDisinherit+0xd8>)
 80082b2:	441a      	add	r2, r3
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fe fae9 	bl	8006892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082c4:	697b      	ldr	r3, [r7, #20]
	}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20000abc 	.word	0x20000abc
 80082d4:	20000f98 	.word	0x20000f98
 80082d8:	20000ac0 	.word	0x20000ac0

080082dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082e6:	4b21      	ldr	r3, [pc, #132]	; (800836c <prvAddCurrentTaskToDelayedList+0x90>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ec:	4b20      	ldr	r3, [pc, #128]	; (8008370 <prvAddCurrentTaskToDelayedList+0x94>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fb2a 	bl	800694c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082fe:	d10a      	bne.n	8008316 <prvAddCurrentTaskToDelayedList+0x3a>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008306:	4b1a      	ldr	r3, [pc, #104]	; (8008370 <prvAddCurrentTaskToDelayedList+0x94>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4819      	ldr	r0, [pc, #100]	; (8008374 <prvAddCurrentTaskToDelayedList+0x98>)
 8008310:	f7fe fabf 	bl	8006892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008314:	e026      	b.n	8008364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4413      	add	r3, r2
 800831c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800831e:	4b14      	ldr	r3, [pc, #80]	; (8008370 <prvAddCurrentTaskToDelayedList+0x94>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	429a      	cmp	r2, r3
 800832c:	d209      	bcs.n	8008342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800832e:	4b12      	ldr	r3, [pc, #72]	; (8008378 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <prvAddCurrentTaskToDelayedList+0x94>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3304      	adds	r3, #4
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7fe facd 	bl	80068da <vListInsert>
}
 8008340:	e010      	b.n	8008364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008342:	4b0e      	ldr	r3, [pc, #56]	; (800837c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <prvAddCurrentTaskToDelayedList+0x94>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3304      	adds	r3, #4
 800834c:	4619      	mov	r1, r3
 800834e:	4610      	mov	r0, r2
 8008350:	f7fe fac3 	bl	80068da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008354:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	429a      	cmp	r2, r3
 800835c:	d202      	bcs.n	8008364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800835e:	4a08      	ldr	r2, [pc, #32]	; (8008380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	6013      	str	r3, [r2, #0]
}
 8008364:	bf00      	nop
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000f94 	.word	0x20000f94
 8008370:	20000abc 	.word	0x20000abc
 8008374:	20000f7c 	.word	0x20000f7c
 8008378:	20000f4c 	.word	0x20000f4c
 800837c:	20000f48 	.word	0x20000f48
 8008380:	20000fb0 	.word	0x20000fb0

08008384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08a      	sub	sp, #40	; 0x28
 8008388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800838e:	f000 fb07 	bl	80089a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008392:	4b1c      	ldr	r3, [pc, #112]	; (8008404 <xTimerCreateTimerTask+0x80>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d021      	beq.n	80083de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083a2:	1d3a      	adds	r2, r7, #4
 80083a4:	f107 0108 	add.w	r1, r7, #8
 80083a8:	f107 030c 	add.w	r3, r7, #12
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe fa29 	bl	8006804 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	9202      	str	r2, [sp, #8]
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	2306      	movs	r3, #6
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	2300      	movs	r3, #0
 80083c2:	460a      	mov	r2, r1
 80083c4:	4910      	ldr	r1, [pc, #64]	; (8008408 <xTimerCreateTimerTask+0x84>)
 80083c6:	4811      	ldr	r0, [pc, #68]	; (800840c <xTimerCreateTimerTask+0x88>)
 80083c8:	f7ff f890 	bl	80074ec <xTaskCreateStatic>
 80083cc:	4603      	mov	r3, r0
 80083ce:	4a10      	ldr	r2, [pc, #64]	; (8008410 <xTimerCreateTimerTask+0x8c>)
 80083d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083d2:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <xTimerCreateTimerTask+0x8c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083da:	2301      	movs	r3, #1
 80083dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	613b      	str	r3, [r7, #16]
}
 80083f6:	bf00      	nop
 80083f8:	e7fe      	b.n	80083f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083fa:	697b      	ldr	r3, [r7, #20]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20000ff4 	.word	0x20000ff4
 8008408:	080097f8 	.word	0x080097f8
 800840c:	08008549 	.word	0x08008549
 8008410:	20000ff8 	.word	0x20000ff8

08008414 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b08a      	sub	sp, #40	; 0x28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008422:	2300      	movs	r3, #0
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <xTimerGenericCommand+0x2e>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	623b      	str	r3, [r7, #32]
}
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008442:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <xTimerGenericCommand+0x98>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d02a      	beq.n	80084a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b05      	cmp	r3, #5
 800845a:	dc18      	bgt.n	800848e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800845c:	f7ff feb2 	bl	80081c4 <xTaskGetSchedulerState>
 8008460:	4603      	mov	r3, r0
 8008462:	2b02      	cmp	r3, #2
 8008464:	d109      	bne.n	800847a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008466:	4b11      	ldr	r3, [pc, #68]	; (80084ac <xTimerGenericCommand+0x98>)
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f107 0110 	add.w	r1, r7, #16
 800846e:	2300      	movs	r3, #0
 8008470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008472:	f7fe fbd3 	bl	8006c1c <xQueueGenericSend>
 8008476:	6278      	str	r0, [r7, #36]	; 0x24
 8008478:	e012      	b.n	80084a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800847a:	4b0c      	ldr	r3, [pc, #48]	; (80084ac <xTimerGenericCommand+0x98>)
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	f107 0110 	add.w	r1, r7, #16
 8008482:	2300      	movs	r3, #0
 8008484:	2200      	movs	r2, #0
 8008486:	f7fe fbc9 	bl	8006c1c <xQueueGenericSend>
 800848a:	6278      	str	r0, [r7, #36]	; 0x24
 800848c:	e008      	b.n	80084a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800848e:	4b07      	ldr	r3, [pc, #28]	; (80084ac <xTimerGenericCommand+0x98>)
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	f107 0110 	add.w	r1, r7, #16
 8008496:	2300      	movs	r3, #0
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	f7fe fcbd 	bl	8006e18 <xQueueGenericSendFromISR>
 800849e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3728      	adds	r7, #40	; 0x28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000ff4 	.word	0x20000ff4

080084b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ba:	4b22      	ldr	r3, [pc, #136]	; (8008544 <prvProcessExpiredTimer+0x94>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	3304      	adds	r3, #4
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe fa3f 	bl	800694c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d022      	beq.n	8008522 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	699a      	ldr	r2, [r3, #24]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	18d1      	adds	r1, r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	6978      	ldr	r0, [r7, #20]
 80084ea:	f000 f8d1 	bl	8008690 <prvInsertTimerInActiveList>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01f      	beq.n	8008534 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084f4:	2300      	movs	r3, #0
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2300      	movs	r3, #0
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	2100      	movs	r1, #0
 80084fe:	6978      	ldr	r0, [r7, #20]
 8008500:	f7ff ff88 	bl	8008414 <xTimerGenericCommand>
 8008504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d113      	bne.n	8008534 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	60fb      	str	r3, [r7, #12]
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008528:	f023 0301 	bic.w	r3, r3, #1
 800852c:	b2da      	uxtb	r2, r3
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	6978      	ldr	r0, [r7, #20]
 800853a:	4798      	blx	r3
}
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000fec 	.word	0x20000fec

08008548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008550:	f107 0308 	add.w	r3, r7, #8
 8008554:	4618      	mov	r0, r3
 8008556:	f000 f857 	bl	8008608 <prvGetNextExpireTime>
 800855a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f803 	bl	800856c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008566:	f000 f8d5 	bl	8008714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800856a:	e7f1      	b.n	8008550 <prvTimerTask+0x8>

0800856c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008576:	f7ff fa1d 	bl	80079b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800857a:	f107 0308 	add.w	r3, r7, #8
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f866 	bl	8008650 <prvSampleTimeNow>
 8008584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d130      	bne.n	80085ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <prvProcessTimerOrBlockTask+0x3c>
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	429a      	cmp	r2, r3
 8008598:	d806      	bhi.n	80085a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800859a:	f7ff fa19 	bl	80079d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff ff85 	bl	80084b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085a6:	e024      	b.n	80085f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d008      	beq.n	80085c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085ae:	4b13      	ldr	r3, [pc, #76]	; (80085fc <prvProcessTimerOrBlockTask+0x90>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <prvProcessTimerOrBlockTask+0x50>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <prvProcessTimerOrBlockTask+0x52>
 80085bc:	2300      	movs	r3, #0
 80085be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085c0:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <prvProcessTimerOrBlockTask+0x94>)
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4619      	mov	r1, r3
 80085ce:	f7fe ff59 	bl	8007484 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085d2:	f7ff f9fd 	bl	80079d0 <xTaskResumeAll>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085dc:	4b09      	ldr	r3, [pc, #36]	; (8008604 <prvProcessTimerOrBlockTask+0x98>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
}
 80085ec:	e001      	b.n	80085f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085ee:	f7ff f9ef 	bl	80079d0 <xTaskResumeAll>
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000ff0 	.word	0x20000ff0
 8008600:	20000ff4 	.word	0x20000ff4
 8008604:	e000ed04 	.word	0xe000ed04

08008608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008610:	4b0e      	ldr	r3, [pc, #56]	; (800864c <prvGetNextExpireTime+0x44>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <prvGetNextExpireTime+0x16>
 800861a:	2201      	movs	r2, #1
 800861c:	e000      	b.n	8008620 <prvGetNextExpireTime+0x18>
 800861e:	2200      	movs	r2, #0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d105      	bne.n	8008638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800862c:	4b07      	ldr	r3, [pc, #28]	; (800864c <prvGetNextExpireTime+0x44>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]
 8008636:	e001      	b.n	800863c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800863c:	68fb      	ldr	r3, [r7, #12]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20000fec 	.word	0x20000fec

08008650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008658:	f7ff fa58 	bl	8007b0c <xTaskGetTickCount>
 800865c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800865e:	4b0b      	ldr	r3, [pc, #44]	; (800868c <prvSampleTimeNow+0x3c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	429a      	cmp	r2, r3
 8008666:	d205      	bcs.n	8008674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008668:	f000 f936 	bl	80088d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	e002      	b.n	800867a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800867a:	4a04      	ldr	r2, [pc, #16]	; (800868c <prvSampleTimeNow+0x3c>)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008680:	68fb      	ldr	r3, [r7, #12]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000ffc 	.word	0x20000ffc

08008690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d812      	bhi.n	80086dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d302      	bcc.n	80086ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086c4:	2301      	movs	r3, #1
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	e01b      	b.n	8008702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086ca:	4b10      	ldr	r3, [pc, #64]	; (800870c <prvInsertTimerInActiveList+0x7c>)
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3304      	adds	r3, #4
 80086d2:	4619      	mov	r1, r3
 80086d4:	4610      	mov	r0, r2
 80086d6:	f7fe f900 	bl	80068da <vListInsert>
 80086da:	e012      	b.n	8008702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d206      	bcs.n	80086f2 <prvInsertTimerInActiveList+0x62>
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d302      	bcc.n	80086f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	e007      	b.n	8008702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <prvInsertTimerInActiveList+0x80>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f7fe f8ec 	bl	80068da <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008702:	697b      	ldr	r3, [r7, #20]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000ff0 	.word	0x20000ff0
 8008710:	20000fec 	.word	0x20000fec

08008714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08e      	sub	sp, #56	; 0x38
 8008718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800871a:	e0ca      	b.n	80088b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	da18      	bge.n	8008754 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008722:	1d3b      	adds	r3, r7, #4
 8008724:	3304      	adds	r3, #4
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	61fb      	str	r3, [r7, #28]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874a:	6850      	ldr	r0, [r2, #4]
 800874c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874e:	6892      	ldr	r2, [r2, #8]
 8008750:	4611      	mov	r1, r2
 8008752:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f2c0 80aa 	blt.w	80088b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d004      	beq.n	8008772 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe f8ed 	bl	800694c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008772:	463b      	mov	r3, r7
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff ff6b 	bl	8008650 <prvSampleTimeNow>
 800877a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b09      	cmp	r3, #9
 8008780:	f200 8097 	bhi.w	80088b2 <prvProcessReceivedCommands+0x19e>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <prvProcessReceivedCommands+0x78>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087b5 	.word	0x080087b5
 8008790:	080087b5 	.word	0x080087b5
 8008794:	080087b5 	.word	0x080087b5
 8008798:	08008829 	.word	0x08008829
 800879c:	0800883d 	.word	0x0800883d
 80087a0:	08008887 	.word	0x08008887
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087b5 	.word	0x080087b5
 80087ac:	08008829 	.word	0x08008829
 80087b0:	0800883d 	.word	0x0800883d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	18d1      	adds	r1, r2, r3
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d4:	f7ff ff5c 	bl	8008690 <prvInsertTimerInActiveList>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d069      	beq.n	80088b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d05e      	beq.n	80088b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	441a      	add	r2, r3
 80087fc:	2300      	movs	r3, #0
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	2300      	movs	r3, #0
 8008802:	2100      	movs	r1, #0
 8008804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008806:	f7ff fe05 	bl	8008414 <xTimerGenericCommand>
 800880a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d14f      	bne.n	80088b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	61bb      	str	r3, [r7, #24]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800882e:	f023 0301 	bic.w	r3, r3, #1
 8008832:	b2da      	uxtb	r2, r3
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800883a:	e03a      	b.n	80088b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	b2da      	uxtb	r2, r3
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10a      	bne.n	8008872 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	617b      	str	r3, [r7, #20]
}
 800886e:	bf00      	nop
 8008870:	e7fe      	b.n	8008870 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	699a      	ldr	r2, [r3, #24]
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	18d1      	adds	r1, r2, r3
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008880:	f7ff ff06 	bl	8008690 <prvInsertTimerInActiveList>
					break;
 8008884:	e015      	b.n	80088b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008896:	f000 fbdb 	bl	8009050 <vPortFree>
 800889a:	e00a      	b.n	80088b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a2:	f023 0301 	bic.w	r3, r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088ae:	e000      	b.n	80088b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80088b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088b2:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <prvProcessReceivedCommands+0x1c0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	1d39      	adds	r1, r7, #4
 80088b8:	2200      	movs	r2, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fb48 	bl	8006f50 <xQueueReceive>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f47f af2a 	bne.w	800871c <prvProcessReceivedCommands+0x8>
	}
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	3730      	adds	r7, #48	; 0x30
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000ff4 	.word	0x20000ff4

080088d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088de:	e048      	b.n	8008972 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088e0:	4b2d      	ldr	r3, [pc, #180]	; (8008998 <prvSwitchTimerLists+0xc0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ea:	4b2b      	ldr	r3, [pc, #172]	; (8008998 <prvSwitchTimerLists+0xc0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3304      	adds	r3, #4
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe f827 	bl	800694c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d02e      	beq.n	8008972 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	429a      	cmp	r2, r3
 8008924:	d90e      	bls.n	8008944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008932:	4b19      	ldr	r3, [pc, #100]	; (8008998 <prvSwitchTimerLists+0xc0>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3304      	adds	r3, #4
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f7fd ffcc 	bl	80068da <vListInsert>
 8008942:	e016      	b.n	8008972 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008944:	2300      	movs	r3, #0
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	2300      	movs	r3, #0
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	2100      	movs	r1, #0
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f7ff fd60 	bl	8008414 <xTimerGenericCommand>
 8008954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	603b      	str	r3, [r7, #0]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <prvSwitchTimerLists+0xc0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1b1      	bne.n	80088e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <prvSwitchTimerLists+0xc0>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <prvSwitchTimerLists+0xc4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a04      	ldr	r2, [pc, #16]	; (8008998 <prvSwitchTimerLists+0xc0>)
 8008988:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800898a:	4a04      	ldr	r2, [pc, #16]	; (800899c <prvSwitchTimerLists+0xc4>)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	6013      	str	r3, [r2, #0]
}
 8008990:	bf00      	nop
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000fec 	.word	0x20000fec
 800899c:	20000ff0 	.word	0x20000ff0

080089a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089a6:	f000 f965 	bl	8008c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80089aa:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <prvCheckForValidListAndQueue+0x60>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d120      	bne.n	80089f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089b2:	4814      	ldr	r0, [pc, #80]	; (8008a04 <prvCheckForValidListAndQueue+0x64>)
 80089b4:	f7fd ff40 	bl	8006838 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089b8:	4813      	ldr	r0, [pc, #76]	; (8008a08 <prvCheckForValidListAndQueue+0x68>)
 80089ba:	f7fd ff3d 	bl	8006838 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089be:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <prvCheckForValidListAndQueue+0x6c>)
 80089c0:	4a10      	ldr	r2, [pc, #64]	; (8008a04 <prvCheckForValidListAndQueue+0x64>)
 80089c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089c4:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <prvCheckForValidListAndQueue+0x70>)
 80089c6:	4a10      	ldr	r2, [pc, #64]	; (8008a08 <prvCheckForValidListAndQueue+0x68>)
 80089c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089ca:	2300      	movs	r3, #0
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	4b11      	ldr	r3, [pc, #68]	; (8008a14 <prvCheckForValidListAndQueue+0x74>)
 80089d0:	4a11      	ldr	r2, [pc, #68]	; (8008a18 <prvCheckForValidListAndQueue+0x78>)
 80089d2:	2110      	movs	r1, #16
 80089d4:	200a      	movs	r0, #10
 80089d6:	f7fe f84b 	bl	8006a70 <xQueueGenericCreateStatic>
 80089da:	4603      	mov	r3, r0
 80089dc:	4a08      	ldr	r2, [pc, #32]	; (8008a00 <prvCheckForValidListAndQueue+0x60>)
 80089de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <prvCheckForValidListAndQueue+0x60>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <prvCheckForValidListAndQueue+0x60>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	490b      	ldr	r1, [pc, #44]	; (8008a1c <prvCheckForValidListAndQueue+0x7c>)
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fd1e 	bl	8007430 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089f4:	f000 f96e 	bl	8008cd4 <vPortExitCritical>
}
 80089f8:	bf00      	nop
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000ff4 	.word	0x20000ff4
 8008a04:	20000fc4 	.word	0x20000fc4
 8008a08:	20000fd8 	.word	0x20000fd8
 8008a0c:	20000fec 	.word	0x20000fec
 8008a10:	20000ff0 	.word	0x20000ff0
 8008a14:	200010a0 	.word	0x200010a0
 8008a18:	20001000 	.word	0x20001000
 8008a1c:	08009800 	.word	0x08009800

08008a20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3b04      	subs	r3, #4
 8008a30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3b04      	subs	r3, #4
 8008a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f023 0201 	bic.w	r2, r3, #1
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3b04      	subs	r3, #4
 8008a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a50:	4a0c      	ldr	r2, [pc, #48]	; (8008a84 <pxPortInitialiseStack+0x64>)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3b14      	subs	r3, #20
 8008a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f06f 0202 	mvn.w	r2, #2
 8008a6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3b20      	subs	r3, #32
 8008a74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a76:	68fb      	ldr	r3, [r7, #12]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	08008a89 	.word	0x08008a89

08008a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <prvTaskExitError+0x54>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a9a:	d00a      	beq.n	8008ab2 <prvTaskExitError+0x2a>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	60fb      	str	r3, [r7, #12]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <prvTaskExitError+0x28>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	60bb      	str	r3, [r7, #8]
}
 8008ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ac6:	bf00      	nop
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0fc      	beq.n	8008ac8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	2000000c 	.word	0x2000000c

08008ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <pxCurrentTCBConst2>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	6808      	ldr	r0, [r1, #0]
 8008ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	f380 8809 	msr	PSP, r0
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8811 	msr	BASEPRI, r0
 8008afa:	4770      	bx	lr
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst2>:
 8008b00:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <prvPortStartFirstTask+0x24>)
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f380 8808 	msr	MSP, r0
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f380 8814 	msr	CONTROL, r0
 8008b1a:	b662      	cpsie	i
 8008b1c:	b661      	cpsie	f
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	df00      	svc	0
 8008b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b2a:	bf00      	nop
 8008b2c:	e000ed08 	.word	0xe000ed08

08008b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b36:	4b46      	ldr	r3, [pc, #280]	; (8008c50 <xPortStartScheduler+0x120>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a46      	ldr	r2, [pc, #280]	; (8008c54 <xPortStartScheduler+0x124>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d10a      	bne.n	8008b56 <xPortStartScheduler+0x26>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	613b      	str	r3, [r7, #16]
}
 8008b52:	bf00      	nop
 8008b54:	e7fe      	b.n	8008b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b56:	4b3e      	ldr	r3, [pc, #248]	; (8008c50 <xPortStartScheduler+0x120>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a3f      	ldr	r2, [pc, #252]	; (8008c58 <xPortStartScheduler+0x128>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10a      	bne.n	8008b76 <xPortStartScheduler+0x46>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60fb      	str	r3, [r7, #12]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b76:	4b39      	ldr	r3, [pc, #228]	; (8008c5c <xPortStartScheduler+0x12c>)
 8008b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	4b31      	ldr	r3, [pc, #196]	; (8008c60 <xPortStartScheduler+0x130>)
 8008b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b9e:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <xPortStartScheduler+0x134>)
 8008ba0:	2207      	movs	r2, #7
 8008ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ba4:	e009      	b.n	8008bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ba6:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <xPortStartScheduler+0x134>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4a2d      	ldr	r2, [pc, #180]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d0ef      	beq.n	8008ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bc6:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1c3 0307 	rsb	r3, r3, #7
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d00a      	beq.n	8008be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60bb      	str	r3, [r7, #8]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008be8:	4b1e      	ldr	r3, [pc, #120]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bf2:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bfa:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c1e:	f000 f8dd 	bl	8008ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c22:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <xPortStartScheduler+0x13c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c28:	f000 f8fc 	bl	8008e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c2c:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <xPortStartScheduler+0x140>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a0f      	ldr	r2, [pc, #60]	; (8008c70 <xPortStartScheduler+0x140>)
 8008c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c38:	f7ff ff66 	bl	8008b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c3c:	f7ff f830 	bl	8007ca0 <vTaskSwitchContext>
	prvTaskExitError();
 8008c40:	f7ff ff22 	bl	8008a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000ed00 	.word	0xe000ed00
 8008c54:	410fc271 	.word	0x410fc271
 8008c58:	410fc270 	.word	0x410fc270
 8008c5c:	e000e400 	.word	0xe000e400
 8008c60:	200010f0 	.word	0x200010f0
 8008c64:	200010f4 	.word	0x200010f4
 8008c68:	e000ed20 	.word	0xe000ed20
 8008c6c:	2000000c 	.word	0x2000000c
 8008c70:	e000ef34 	.word	0xe000ef34

08008c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	607b      	str	r3, [r7, #4]
}
 8008c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10f      	bne.n	8008cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <vPortEnterCritical+0x5c>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	603b      	str	r3, [r7, #0]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <vPortEnterCritical+0x4a>
	}
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	2000000c 	.word	0x2000000c
 8008cd0:	e000ed04 	.word	0xe000ed04

08008cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <vPortExitCritical+0x50>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <vPortExitCritical+0x24>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	607b      	str	r3, [r7, #4]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	; (8008d24 <vPortExitCritical+0x50>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <vPortExitCritical+0x50>)
 8008d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d02:	4b08      	ldr	r3, [pc, #32]	; (8008d24 <vPortExitCritical+0x50>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d105      	bne.n	8008d16 <vPortExitCritical+0x42>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	f383 8811 	msr	BASEPRI, r3
}
 8008d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	2000000c 	.word	0x2000000c
	...

08008d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d30:	f3ef 8009 	mrs	r0, PSP
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <pxCurrentTCBConst>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f01e 0f10 	tst.w	lr, #16
 8008d40:	bf08      	it	eq
 8008d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d54:	f380 8811 	msr	BASEPRI, r0
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f7fe ff9e 	bl	8007ca0 <vTaskSwitchContext>
 8008d64:	f04f 0000 	mov.w	r0, #0
 8008d68:	f380 8811 	msr	BASEPRI, r0
 8008d6c:	bc09      	pop	{r0, r3}
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	6808      	ldr	r0, [r1, #0]
 8008d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d76:	f01e 0f10 	tst.w	lr, #16
 8008d7a:	bf08      	it	eq
 8008d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d80:	f380 8809 	msr	PSP, r0
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst>:
 8008d90:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	607b      	str	r3, [r7, #4]
}
 8008db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008db2:	f7fe febb 	bl	8007b2c <xTaskIncrementTick>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <xPortSysTickHandler+0x40>)
 8008dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f383 8811 	msr	BASEPRI, r3
}
 8008dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <vPortSetupTimerInterrupt+0x38>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <vPortSetupTimerInterrupt+0x3c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <vPortSetupTimerInterrupt+0x40>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <vPortSetupTimerInterrupt+0x44>)
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010
 8008e14:	e000e018 	.word	0xe000e018
 8008e18:	20000000 	.word	0x20000000
 8008e1c:	10624dd3 	.word	0x10624dd3
 8008e20:	e000e014 	.word	0xe000e014

08008e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e34 <vPortEnableVFP+0x10>
 8008e28:	6801      	ldr	r1, [r0, #0]
 8008e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e2e:	6001      	str	r1, [r0, #0]
 8008e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e32:	bf00      	nop
 8008e34:	e000ed88 	.word	0xe000ed88

08008e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e3e:	f3ef 8305 	mrs	r3, IPSR
 8008e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b0f      	cmp	r3, #15
 8008e48:	d914      	bls.n	8008e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e4a:	4a17      	ldr	r2, [pc, #92]	; (8008ea8 <vPortValidateInterruptPriority+0x70>)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e54:	4b15      	ldr	r3, [pc, #84]	; (8008eac <vPortValidateInterruptPriority+0x74>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	7afa      	ldrb	r2, [r7, #11]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d20a      	bcs.n	8008e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e74:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <vPortValidateInterruptPriority+0x78>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <vPortValidateInterruptPriority+0x7c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d90a      	bls.n	8008e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	603b      	str	r3, [r7, #0]
}
 8008e96:	bf00      	nop
 8008e98:	e7fe      	b.n	8008e98 <vPortValidateInterruptPriority+0x60>
	}
 8008e9a:	bf00      	nop
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	e000e3f0 	.word	0xe000e3f0
 8008eac:	200010f0 	.word	0x200010f0
 8008eb0:	e000ed0c 	.word	0xe000ed0c
 8008eb4:	200010f4 	.word	0x200010f4

08008eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ec4:	f7fe fd76 	bl	80079b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ec8:	4b5b      	ldr	r3, [pc, #364]	; (8009038 <pvPortMalloc+0x180>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ed0:	f000 f920 	bl	8009114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ed4:	4b59      	ldr	r3, [pc, #356]	; (800903c <pvPortMalloc+0x184>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f040 8093 	bne.w	8009008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d01d      	beq.n	8008f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ee8:	2208      	movs	r2, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4413      	add	r3, r2
 8008eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d014      	beq.n	8008f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	3308      	adds	r3, #8
 8008f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <pvPortMalloc+0x6c>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	617b      	str	r3, [r7, #20]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d06e      	beq.n	8009008 <pvPortMalloc+0x150>
 8008f2a:	4b45      	ldr	r3, [pc, #276]	; (8009040 <pvPortMalloc+0x188>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d869      	bhi.n	8009008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f34:	4b43      	ldr	r3, [pc, #268]	; (8009044 <pvPortMalloc+0x18c>)
 8008f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f38:	4b42      	ldr	r3, [pc, #264]	; (8009044 <pvPortMalloc+0x18c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f3e:	e004      	b.n	8008f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d903      	bls.n	8008f5c <pvPortMalloc+0xa4>
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1f1      	bne.n	8008f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f5c:	4b36      	ldr	r3, [pc, #216]	; (8009038 <pvPortMalloc+0x180>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d050      	beq.n	8009008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	4413      	add	r3, r2
 8008f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	1ad2      	subs	r2, r2, r3
 8008f80:	2308      	movs	r3, #8
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d91f      	bls.n	8008fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	613b      	str	r3, [r7, #16]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	1ad2      	subs	r2, r2, r3
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fc2:	69b8      	ldr	r0, [r7, #24]
 8008fc4:	f000 f908 	bl	80091d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <pvPortMalloc+0x188>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	; (8009040 <pvPortMalloc+0x188>)
 8008fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fd6:	4b1a      	ldr	r3, [pc, #104]	; (8009040 <pvPortMalloc+0x188>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4b1b      	ldr	r3, [pc, #108]	; (8009048 <pvPortMalloc+0x190>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d203      	bcs.n	8008fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fe2:	4b17      	ldr	r3, [pc, #92]	; (8009040 <pvPortMalloc+0x188>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a18      	ldr	r2, [pc, #96]	; (8009048 <pvPortMalloc+0x190>)
 8008fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <pvPortMalloc+0x184>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ffe:	4b13      	ldr	r3, [pc, #76]	; (800904c <pvPortMalloc+0x194>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	4a11      	ldr	r2, [pc, #68]	; (800904c <pvPortMalloc+0x194>)
 8009006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009008:	f7fe fce2 	bl	80079d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <pvPortMalloc+0x174>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	60fb      	str	r3, [r7, #12]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <pvPortMalloc+0x172>
	return pvReturn;
 800902c:	69fb      	ldr	r3, [r7, #28]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3728      	adds	r7, #40	; 0x28
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20003040 	.word	0x20003040
 800903c:	20003054 	.word	0x20003054
 8009040:	20003044 	.word	0x20003044
 8009044:	20003038 	.word	0x20003038
 8009048:	20003048 	.word	0x20003048
 800904c:	2000304c 	.word	0x2000304c

08009050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d04d      	beq.n	80090fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009062:	2308      	movs	r3, #8
 8009064:	425b      	negs	r3, r3
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	4413      	add	r3, r2
 800906a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	4b24      	ldr	r3, [pc, #144]	; (8009108 <vPortFree+0xb8>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4013      	ands	r3, r2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <vPortFree+0x44>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	60fb      	str	r3, [r7, #12]
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <vPortFree+0x62>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60bb      	str	r3, [r7, #8]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	685a      	ldr	r2, [r3, #4]
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <vPortFree+0xb8>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01e      	beq.n	80090fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11a      	bne.n	80090fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <vPortFree+0xb8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	43db      	mvns	r3, r3
 80090d2:	401a      	ands	r2, r3
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090d8:	f7fe fc6c 	bl	80079b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <vPortFree+0xbc>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4413      	add	r3, r2
 80090e6:	4a09      	ldr	r2, [pc, #36]	; (800910c <vPortFree+0xbc>)
 80090e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090ea:	6938      	ldr	r0, [r7, #16]
 80090ec:	f000 f874 	bl	80091d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090f0:	4b07      	ldr	r3, [pc, #28]	; (8009110 <vPortFree+0xc0>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	4a06      	ldr	r2, [pc, #24]	; (8009110 <vPortFree+0xc0>)
 80090f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090fa:	f7fe fc69 	bl	80079d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090fe:	bf00      	nop
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20003054 	.word	0x20003054
 800910c:	20003044 	.word	0x20003044
 8009110:	20003050 	.word	0x20003050

08009114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800911a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800911e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009120:	4b27      	ldr	r3, [pc, #156]	; (80091c0 <prvHeapInit+0xac>)
 8009122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00c      	beq.n	8009148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3307      	adds	r3, #7
 8009132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0307 	bic.w	r3, r3, #7
 800913a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <prvHeapInit+0xac>)
 8009144:	4413      	add	r3, r2
 8009146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800914c:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <prvHeapInit+0xb0>)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009152:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <prvHeapInit+0xb0>)
 8009154:	2200      	movs	r2, #0
 8009156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	4413      	add	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009160:	2208      	movs	r2, #8
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4a15      	ldr	r2, [pc, #84]	; (80091c8 <prvHeapInit+0xb4>)
 8009174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009176:	4b14      	ldr	r3, [pc, #80]	; (80091c8 <prvHeapInit+0xb4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800917e:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <prvHeapInit+0xb4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	1ad2      	subs	r2, r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <prvHeapInit+0xb4>)
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <prvHeapInit+0xb8>)
 80091a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	4a09      	ldr	r2, [pc, #36]	; (80091d0 <prvHeapInit+0xbc>)
 80091aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <prvHeapInit+0xc0>)
 80091ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091b2:	601a      	str	r2, [r3, #0]
}
 80091b4:	bf00      	nop
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	200010f8 	.word	0x200010f8
 80091c4:	20003038 	.word	0x20003038
 80091c8:	20003040 	.word	0x20003040
 80091cc:	20003048 	.word	0x20003048
 80091d0:	20003044 	.word	0x20003044
 80091d4:	20003054 	.word	0x20003054

080091d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091e0:	4b28      	ldr	r3, [pc, #160]	; (8009284 <prvInsertBlockIntoFreeList+0xac>)
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	e002      	b.n	80091ec <prvInsertBlockIntoFreeList+0x14>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d8f7      	bhi.n	80091e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4413      	add	r3, r2
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	d108      	bne.n	800921a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	441a      	add	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	441a      	add	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d118      	bne.n	8009260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4b15      	ldr	r3, [pc, #84]	; (8009288 <prvInsertBlockIntoFreeList+0xb0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d00d      	beq.n	8009256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	441a      	add	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e008      	b.n	8009268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <prvInsertBlockIntoFreeList+0xb0>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e003      	b.n	8009268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	429a      	cmp	r2, r3
 800926e:	d002      	beq.n	8009276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20003038 	.word	0x20003038
 8009288:	20003040 	.word	0x20003040

0800928c <vanttec_ntohl>:
#else
    return __builtin_bswap16(hostshort);
#endif
}

uint32_t vanttec_ntohl(uint32_t netlong) {
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
    return netlong; //No conversion needed
#else
    return __builtin_bswap32(netlong);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	ba1b      	rev	r3, r3
#endif
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <can_parse_id>:
#endif

#ifdef __cplusplus
extern "C" {
#endif
uint8_t can_parse_id(const uint8_t *data, uint8_t len) {
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
    if (len == 0 || data == 0) return 0;
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <can_parse_id+0x18>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <can_parse_id+0x1c>
 80092bc:	2300      	movs	r3, #0
 80092be:	e001      	b.n	80092c4 <can_parse_id+0x20>
    return data[0];
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	781b      	ldrb	r3, [r3, #0]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <can_parse_float>:

uint8_t can_pack_float(uint8_t id, float n, uint8_t *data, uint8_t len) {
    return can_pack_long(id, serialize_float(n), data, len);
}

float can_parse_float(const uint8_t *data, uint8_t len) {
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	70fb      	strb	r3, [r7, #3]
    if (data == 0 || len < 5) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <can_parse_float+0x18>
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	2b04      	cmp	r3, #4
 80092e6:	d802      	bhi.n	80092ee <can_parse_float+0x1e>
        return NAN;
 80092e8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009310 <can_parse_float+0x40>
 80092ec:	e00b      	b.n	8009306 <can_parse_float+0x36>
    }

    return deserialize_float(deserialize_long(data + 1));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3301      	adds	r3, #1
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 f870 	bl	80093d8 <deserialize_long>
 80092f8:	4603      	mov	r3, r0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f836 	bl	800936c <deserialize_float>
 8009300:	eef0 7a40 	vmov.f32	s15, s0
 8009304:	bf00      	nop
}
 8009306:	eeb0 0a67 	vmov.f32	s0, s15
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	7fc00000 	.word	0x7fc00000

08009314 <can_parse_long>:
    data[0] = id;
    serialize_long(data + 1, n);
    return 5;
}

uint32_t can_parse_long(const uint8_t *data, uint8_t len) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
    if (data == 0 || len < 5) return 0;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <can_parse_long+0x18>
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	2b04      	cmp	r3, #4
 800932a:	d801      	bhi.n	8009330 <can_parse_long+0x1c>
 800932c:	2300      	movs	r3, #0
 800932e:	e006      	b.n	800933e <can_parse_long+0x2a>
    return deserialize_long(data + 1);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3301      	adds	r3, #1
 8009334:	4618      	mov	r0, r3
 8009336:	f000 f84f 	bl	80093d8 <deserialize_long>
 800933a:	4603      	mov	r3, r0
 800933c:	bf00      	nop
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <_ZSt5ldexpfi>:
  using ::ldexp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	ed87 0a01 	vstr	s0, [r7, #4]
 8009350:	6038      	str	r0, [r7, #0]
 8009352:	6838      	ldr	r0, [r7, #0]
 8009354:	ed97 0a01 	vldr	s0, [r7, #4]
 8009358:	f000 f865 	bl	8009426 <ldexpf>
 800935c:	eef0 7a40 	vmov.f32	s15, s0
 8009360:	eeb0 0a67 	vmov.f32	s0, s15
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <deserialize_float>:
#include <math.h>

#ifdef __cplusplus
extern "C" {
#endif
float deserialize_float(uint32_t in) {
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
    bool sgn = in >> 31;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	0fdb      	lsrs	r3, r3, #31
 8009378:	75fb      	strb	r3, [r7, #23]
    uint8_t exp = (in >> 23) & 0b011111111;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	0ddb      	lsrs	r3, r3, #23
 800937e:	75bb      	strb	r3, [r7, #22]
    uint32_t frac = in & 0x7FFFFF;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009386:	613b      	str	r3, [r7, #16]

    float out = ldexp((float) frac / 0x7FFFFF, exp - 127);
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009392:	eddf 6a10 	vldr	s13, [pc, #64]	; 80093d4 <deserialize_float+0x68>
 8009396:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800939a:	7dbb      	ldrb	r3, [r7, #22]
 800939c:	3b7f      	subs	r3, #127	; 0x7f
 800939e:	4618      	mov	r0, r3
 80093a0:	eeb0 0a47 	vmov.f32	s0, s14
 80093a4:	f7ff ffcf 	bl	8009346 <_ZSt5ldexpfi>
 80093a8:	ed87 0a03 	vstr	s0, [r7, #12]
    out = sgn ? -out : out;
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d004      	beq.n	80093bc <deserialize_float+0x50>
 80093b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80093b6:	eef1 7a67 	vneg.f32	s15, s15
 80093ba:	e001      	b.n	80093c0 <deserialize_float+0x54>
 80093bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80093c0:	edc7 7a03 	vstr	s15, [r7, #12]
    return out;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	ee07 3a90 	vmov	s15, r3
}
 80093ca:	eeb0 0a67 	vmov.f32	s0, s15
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	4afffffe 	.word	0x4afffffe

080093d8 <deserialize_long>:
    out |= data[1];

    return vanttec_ntohs(out);
}

uint32_t deserialize_long(const uint8_t *data) {
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
    uint32_t out;
    out = data[0] << (8 * 3);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	061b      	lsls	r3, r3, #24
 80093e6:	60fb      	str	r3, [r7, #12]
    out |= data[1] << (8 * 2);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3301      	adds	r3, #1
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	041b      	lsls	r3, r3, #16
 80093f0:	461a      	mov	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]
    out |= data[2] << (8);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3302      	adds	r3, #2
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	461a      	mov	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4313      	orrs	r3, r2
 8009406:	60fb      	str	r3, [r7, #12]
    out |= data[3] & 0xff;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3303      	adds	r3, #3
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]

    return vanttec_ntohl(out);
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7ff ff38 	bl	800928c <vanttec_ntohl>
 800941c:	4603      	mov	r3, r0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <ldexpf>:
 8009426:	b510      	push	{r4, lr}
 8009428:	ed2d 8b02 	vpush	{d8}
 800942c:	4604      	mov	r4, r0
 800942e:	eeb0 8a40 	vmov.f32	s16, s0
 8009432:	f000 f891 	bl	8009558 <finitef>
 8009436:	b1b8      	cbz	r0, 8009468 <ldexpf+0x42>
 8009438:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800943c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009440:	d012      	beq.n	8009468 <ldexpf+0x42>
 8009442:	eeb0 0a48 	vmov.f32	s0, s16
 8009446:	4620      	mov	r0, r4
 8009448:	f000 f814 	bl	8009474 <scalbnf>
 800944c:	eeb0 8a40 	vmov.f32	s16, s0
 8009450:	f000 f882 	bl	8009558 <finitef>
 8009454:	b120      	cbz	r0, 8009460 <ldexpf+0x3a>
 8009456:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945e:	d103      	bne.n	8009468 <ldexpf+0x42>
 8009460:	f000 f888 	bl	8009574 <__errno>
 8009464:	2322      	movs	r3, #34	; 0x22
 8009466:	6003      	str	r3, [r0, #0]
 8009468:	eeb0 0a48 	vmov.f32	s0, s16
 800946c:	ecbd 8b02 	vpop	{d8}
 8009470:	bd10      	pop	{r4, pc}
	...

08009474 <scalbnf>:
 8009474:	ee10 3a10 	vmov	r3, s0
 8009478:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800947c:	d025      	beq.n	80094ca <scalbnf+0x56>
 800947e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009482:	d302      	bcc.n	800948a <scalbnf+0x16>
 8009484:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009488:	4770      	bx	lr
 800948a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800948e:	d122      	bne.n	80094d6 <scalbnf+0x62>
 8009490:	4b2a      	ldr	r3, [pc, #168]	; (800953c <scalbnf+0xc8>)
 8009492:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009540 <scalbnf+0xcc>
 8009496:	4298      	cmp	r0, r3
 8009498:	ee20 0a27 	vmul.f32	s0, s0, s15
 800949c:	db16      	blt.n	80094cc <scalbnf+0x58>
 800949e:	ee10 3a10 	vmov	r3, s0
 80094a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80094a6:	3a19      	subs	r2, #25
 80094a8:	4402      	add	r2, r0
 80094aa:	2afe      	cmp	r2, #254	; 0xfe
 80094ac:	dd15      	ble.n	80094da <scalbnf+0x66>
 80094ae:	ee10 3a10 	vmov	r3, s0
 80094b2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009544 <scalbnf+0xd0>
 80094b6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009548 <scalbnf+0xd4>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	eeb0 7a67 	vmov.f32	s14, s15
 80094c0:	bfb8      	it	lt
 80094c2:	eef0 7a66 	vmovlt.f32	s15, s13
 80094c6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80094ca:	4770      	bx	lr
 80094cc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800954c <scalbnf+0xd8>
 80094d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80094d4:	4770      	bx	lr
 80094d6:	0dd2      	lsrs	r2, r2, #23
 80094d8:	e7e6      	b.n	80094a8 <scalbnf+0x34>
 80094da:	2a00      	cmp	r2, #0
 80094dc:	dd06      	ble.n	80094ec <scalbnf+0x78>
 80094de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80094e6:	ee00 3a10 	vmov	s0, r3
 80094ea:	4770      	bx	lr
 80094ec:	f112 0f16 	cmn.w	r2, #22
 80094f0:	da1a      	bge.n	8009528 <scalbnf+0xb4>
 80094f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80094f6:	4298      	cmp	r0, r3
 80094f8:	ee10 3a10 	vmov	r3, s0
 80094fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009500:	dd0a      	ble.n	8009518 <scalbnf+0xa4>
 8009502:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009544 <scalbnf+0xd0>
 8009506:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009548 <scalbnf+0xd4>
 800950a:	eef0 7a40 	vmov.f32	s15, s0
 800950e:	2b00      	cmp	r3, #0
 8009510:	bf18      	it	ne
 8009512:	eeb0 0a47 	vmovne.f32	s0, s14
 8009516:	e7db      	b.n	80094d0 <scalbnf+0x5c>
 8009518:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800954c <scalbnf+0xd8>
 800951c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009550 <scalbnf+0xdc>
 8009520:	eef0 7a40 	vmov.f32	s15, s0
 8009524:	2b00      	cmp	r3, #0
 8009526:	e7f3      	b.n	8009510 <scalbnf+0x9c>
 8009528:	3219      	adds	r2, #25
 800952a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800952e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009532:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009554 <scalbnf+0xe0>
 8009536:	ee07 3a10 	vmov	s14, r3
 800953a:	e7c4      	b.n	80094c6 <scalbnf+0x52>
 800953c:	ffff3cb0 	.word	0xffff3cb0
 8009540:	4c000000 	.word	0x4c000000
 8009544:	7149f2ca 	.word	0x7149f2ca
 8009548:	f149f2ca 	.word	0xf149f2ca
 800954c:	0da24260 	.word	0x0da24260
 8009550:	8da24260 	.word	0x8da24260
 8009554:	33000000 	.word	0x33000000

08009558 <finitef>:
 8009558:	b082      	sub	sp, #8
 800955a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800955e:	9801      	ldr	r0, [sp, #4]
 8009560:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009564:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009568:	bfac      	ite	ge
 800956a:	2000      	movge	r0, #0
 800956c:	2001      	movlt	r0, #1
 800956e:	b002      	add	sp, #8
 8009570:	4770      	bx	lr
	...

08009574 <__errno>:
 8009574:	4b01      	ldr	r3, [pc, #4]	; (800957c <__errno+0x8>)
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	20000010 	.word	0x20000010

08009580 <__libc_init_array>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	4d0d      	ldr	r5, [pc, #52]	; (80095b8 <__libc_init_array+0x38>)
 8009584:	4c0d      	ldr	r4, [pc, #52]	; (80095bc <__libc_init_array+0x3c>)
 8009586:	1b64      	subs	r4, r4, r5
 8009588:	10a4      	asrs	r4, r4, #2
 800958a:	2600      	movs	r6, #0
 800958c:	42a6      	cmp	r6, r4
 800958e:	d109      	bne.n	80095a4 <__libc_init_array+0x24>
 8009590:	4d0b      	ldr	r5, [pc, #44]	; (80095c0 <__libc_init_array+0x40>)
 8009592:	4c0c      	ldr	r4, [pc, #48]	; (80095c4 <__libc_init_array+0x44>)
 8009594:	f000 f8f2 	bl	800977c <_init>
 8009598:	1b64      	subs	r4, r4, r5
 800959a:	10a4      	asrs	r4, r4, #2
 800959c:	2600      	movs	r6, #0
 800959e:	42a6      	cmp	r6, r4
 80095a0:	d105      	bne.n	80095ae <__libc_init_array+0x2e>
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a8:	4798      	blx	r3
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7ee      	b.n	800958c <__libc_init_array+0xc>
 80095ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b2:	4798      	blx	r3
 80095b4:	3601      	adds	r6, #1
 80095b6:	e7f2      	b.n	800959e <__libc_init_array+0x1e>
 80095b8:	0800994c 	.word	0x0800994c
 80095bc:	0800994c 	.word	0x0800994c
 80095c0:	0800994c 	.word	0x0800994c
 80095c4:	08009950 	.word	0x08009950

080095c8 <__retarget_lock_acquire_recursive>:
 80095c8:	4770      	bx	lr

080095ca <__retarget_lock_release_recursive>:
 80095ca:	4770      	bx	lr

080095cc <memcpy>:
 80095cc:	440a      	add	r2, r1
 80095ce:	4291      	cmp	r1, r2
 80095d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095d4:	d100      	bne.n	80095d8 <memcpy+0xc>
 80095d6:	4770      	bx	lr
 80095d8:	b510      	push	{r4, lr}
 80095da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e2:	4291      	cmp	r1, r2
 80095e4:	d1f9      	bne.n	80095da <memcpy+0xe>
 80095e6:	bd10      	pop	{r4, pc}

080095e8 <memset>:
 80095e8:	4402      	add	r2, r0
 80095ea:	4603      	mov	r3, r0
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d100      	bne.n	80095f2 <memset+0xa>
 80095f0:	4770      	bx	lr
 80095f2:	f803 1b01 	strb.w	r1, [r3], #1
 80095f6:	e7f9      	b.n	80095ec <memset+0x4>

080095f8 <cleanup_glue>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	6809      	ldr	r1, [r1, #0]
 80095fe:	4605      	mov	r5, r0
 8009600:	b109      	cbz	r1, 8009606 <cleanup_glue+0xe>
 8009602:	f7ff fff9 	bl	80095f8 <cleanup_glue>
 8009606:	4621      	mov	r1, r4
 8009608:	4628      	mov	r0, r5
 800960a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800960e:	f000 b869 	b.w	80096e4 <_free_r>
	...

08009614 <_reclaim_reent>:
 8009614:	4b2c      	ldr	r3, [pc, #176]	; (80096c8 <_reclaim_reent+0xb4>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4283      	cmp	r3, r0
 800961a:	b570      	push	{r4, r5, r6, lr}
 800961c:	4604      	mov	r4, r0
 800961e:	d051      	beq.n	80096c4 <_reclaim_reent+0xb0>
 8009620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009622:	b143      	cbz	r3, 8009636 <_reclaim_reent+0x22>
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d14a      	bne.n	80096c0 <_reclaim_reent+0xac>
 800962a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800962c:	6819      	ldr	r1, [r3, #0]
 800962e:	b111      	cbz	r1, 8009636 <_reclaim_reent+0x22>
 8009630:	4620      	mov	r0, r4
 8009632:	f000 f857 	bl	80096e4 <_free_r>
 8009636:	6961      	ldr	r1, [r4, #20]
 8009638:	b111      	cbz	r1, 8009640 <_reclaim_reent+0x2c>
 800963a:	4620      	mov	r0, r4
 800963c:	f000 f852 	bl	80096e4 <_free_r>
 8009640:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009642:	b111      	cbz	r1, 800964a <_reclaim_reent+0x36>
 8009644:	4620      	mov	r0, r4
 8009646:	f000 f84d 	bl	80096e4 <_free_r>
 800964a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800964c:	b111      	cbz	r1, 8009654 <_reclaim_reent+0x40>
 800964e:	4620      	mov	r0, r4
 8009650:	f000 f848 	bl	80096e4 <_free_r>
 8009654:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009656:	b111      	cbz	r1, 800965e <_reclaim_reent+0x4a>
 8009658:	4620      	mov	r0, r4
 800965a:	f000 f843 	bl	80096e4 <_free_r>
 800965e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009660:	b111      	cbz	r1, 8009668 <_reclaim_reent+0x54>
 8009662:	4620      	mov	r0, r4
 8009664:	f000 f83e 	bl	80096e4 <_free_r>
 8009668:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800966a:	b111      	cbz	r1, 8009672 <_reclaim_reent+0x5e>
 800966c:	4620      	mov	r0, r4
 800966e:	f000 f839 	bl	80096e4 <_free_r>
 8009672:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009674:	b111      	cbz	r1, 800967c <_reclaim_reent+0x68>
 8009676:	4620      	mov	r0, r4
 8009678:	f000 f834 	bl	80096e4 <_free_r>
 800967c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800967e:	b111      	cbz	r1, 8009686 <_reclaim_reent+0x72>
 8009680:	4620      	mov	r0, r4
 8009682:	f000 f82f 	bl	80096e4 <_free_r>
 8009686:	69a3      	ldr	r3, [r4, #24]
 8009688:	b1e3      	cbz	r3, 80096c4 <_reclaim_reent+0xb0>
 800968a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800968c:	4620      	mov	r0, r4
 800968e:	4798      	blx	r3
 8009690:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009692:	b1b9      	cbz	r1, 80096c4 <_reclaim_reent+0xb0>
 8009694:	4620      	mov	r0, r4
 8009696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800969a:	f7ff bfad 	b.w	80095f8 <cleanup_glue>
 800969e:	5949      	ldr	r1, [r1, r5]
 80096a0:	b941      	cbnz	r1, 80096b4 <_reclaim_reent+0xa0>
 80096a2:	3504      	adds	r5, #4
 80096a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a6:	2d80      	cmp	r5, #128	; 0x80
 80096a8:	68d9      	ldr	r1, [r3, #12]
 80096aa:	d1f8      	bne.n	800969e <_reclaim_reent+0x8a>
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 f819 	bl	80096e4 <_free_r>
 80096b2:	e7ba      	b.n	800962a <_reclaim_reent+0x16>
 80096b4:	680e      	ldr	r6, [r1, #0]
 80096b6:	4620      	mov	r0, r4
 80096b8:	f000 f814 	bl	80096e4 <_free_r>
 80096bc:	4631      	mov	r1, r6
 80096be:	e7ef      	b.n	80096a0 <_reclaim_reent+0x8c>
 80096c0:	2500      	movs	r5, #0
 80096c2:	e7ef      	b.n	80096a4 <_reclaim_reent+0x90>
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	bf00      	nop
 80096c8:	20000010 	.word	0x20000010

080096cc <__malloc_lock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	; (80096d4 <__malloc_lock+0x8>)
 80096ce:	f7ff bf7b 	b.w	80095c8 <__retarget_lock_acquire_recursive>
 80096d2:	bf00      	nop
 80096d4:	20003058 	.word	0x20003058

080096d8 <__malloc_unlock>:
 80096d8:	4801      	ldr	r0, [pc, #4]	; (80096e0 <__malloc_unlock+0x8>)
 80096da:	f7ff bf76 	b.w	80095ca <__retarget_lock_release_recursive>
 80096de:	bf00      	nop
 80096e0:	20003058 	.word	0x20003058

080096e4 <_free_r>:
 80096e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096e6:	2900      	cmp	r1, #0
 80096e8:	d044      	beq.n	8009774 <_free_r+0x90>
 80096ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ee:	9001      	str	r0, [sp, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f1a1 0404 	sub.w	r4, r1, #4
 80096f6:	bfb8      	it	lt
 80096f8:	18e4      	addlt	r4, r4, r3
 80096fa:	f7ff ffe7 	bl	80096cc <__malloc_lock>
 80096fe:	4a1e      	ldr	r2, [pc, #120]	; (8009778 <_free_r+0x94>)
 8009700:	9801      	ldr	r0, [sp, #4]
 8009702:	6813      	ldr	r3, [r2, #0]
 8009704:	b933      	cbnz	r3, 8009714 <_free_r+0x30>
 8009706:	6063      	str	r3, [r4, #4]
 8009708:	6014      	str	r4, [r2, #0]
 800970a:	b003      	add	sp, #12
 800970c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009710:	f7ff bfe2 	b.w	80096d8 <__malloc_unlock>
 8009714:	42a3      	cmp	r3, r4
 8009716:	d908      	bls.n	800972a <_free_r+0x46>
 8009718:	6825      	ldr	r5, [r4, #0]
 800971a:	1961      	adds	r1, r4, r5
 800971c:	428b      	cmp	r3, r1
 800971e:	bf01      	itttt	eq
 8009720:	6819      	ldreq	r1, [r3, #0]
 8009722:	685b      	ldreq	r3, [r3, #4]
 8009724:	1949      	addeq	r1, r1, r5
 8009726:	6021      	streq	r1, [r4, #0]
 8009728:	e7ed      	b.n	8009706 <_free_r+0x22>
 800972a:	461a      	mov	r2, r3
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	b10b      	cbz	r3, 8009734 <_free_r+0x50>
 8009730:	42a3      	cmp	r3, r4
 8009732:	d9fa      	bls.n	800972a <_free_r+0x46>
 8009734:	6811      	ldr	r1, [r2, #0]
 8009736:	1855      	adds	r5, r2, r1
 8009738:	42a5      	cmp	r5, r4
 800973a:	d10b      	bne.n	8009754 <_free_r+0x70>
 800973c:	6824      	ldr	r4, [r4, #0]
 800973e:	4421      	add	r1, r4
 8009740:	1854      	adds	r4, r2, r1
 8009742:	42a3      	cmp	r3, r4
 8009744:	6011      	str	r1, [r2, #0]
 8009746:	d1e0      	bne.n	800970a <_free_r+0x26>
 8009748:	681c      	ldr	r4, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	6053      	str	r3, [r2, #4]
 800974e:	4421      	add	r1, r4
 8009750:	6011      	str	r1, [r2, #0]
 8009752:	e7da      	b.n	800970a <_free_r+0x26>
 8009754:	d902      	bls.n	800975c <_free_r+0x78>
 8009756:	230c      	movs	r3, #12
 8009758:	6003      	str	r3, [r0, #0]
 800975a:	e7d6      	b.n	800970a <_free_r+0x26>
 800975c:	6825      	ldr	r5, [r4, #0]
 800975e:	1961      	adds	r1, r4, r5
 8009760:	428b      	cmp	r3, r1
 8009762:	bf04      	itt	eq
 8009764:	6819      	ldreq	r1, [r3, #0]
 8009766:	685b      	ldreq	r3, [r3, #4]
 8009768:	6063      	str	r3, [r4, #4]
 800976a:	bf04      	itt	eq
 800976c:	1949      	addeq	r1, r1, r5
 800976e:	6021      	streq	r1, [r4, #0]
 8009770:	6054      	str	r4, [r2, #4]
 8009772:	e7ca      	b.n	800970a <_free_r+0x26>
 8009774:	b003      	add	sp, #12
 8009776:	bd30      	pop	{r4, r5, pc}
 8009778:	2000305c 	.word	0x2000305c

0800977c <_init>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	bf00      	nop
 8009780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009782:	bc08      	pop	{r3}
 8009784:	469e      	mov	lr, r3
 8009786:	4770      	bx	lr

08009788 <_fini>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr
